id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
items:
- id: Global
  language: CSharp
  name:
    CSharp: ''
    VB: ''
  nameWithType:
    CSharp: ''
    VB: ''
  qualifiedName:
    CSharp: ''
    VB: ''
  type: Namespace
  assemblies:
  - cs.temp.dll
  items:
  - id: Global.RotationAngle
    commentId: T:Global.RotationAngle
    language: CSharp
    name:
      CSharp: RotationAngle
      VB: RotationAngle
    nameWithType:
      CSharp: RotationAngle
      VB: RotationAngle
    qualifiedName:
      CSharp: RotationAngle
      VB: RotationAngle
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: RotationAngle
      path: ''
      startLine: 4
    syntax:
      content:
        CSharp: public enum RotationAngle
        VB: Public Enum RotationAngle
    items:
    - id: Global.RotationAngle._0
      commentId: F:Global.RotationAngle._0
      language: CSharp
      name:
        CSharp: _0
        VB: _0
      nameWithType:
        CSharp: RotationAngle._0
        VB: RotationAngle._0
      qualifiedName:
        CSharp: RotationAngle._0
        VB: RotationAngle._0
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: _0
        path: ''
        startLine: 6
      syntax:
        content:
          CSharp: _0 = 0
          VB: _0 = 0
        return:
          type: Global.RotationAngle
    - id: Global.RotationAngle._90
      commentId: F:Global.RotationAngle._90
      language: CSharp
      name:
        CSharp: _90
        VB: _90
      nameWithType:
        CSharp: RotationAngle._90
        VB: RotationAngle._90
      qualifiedName:
        CSharp: RotationAngle._90
        VB: RotationAngle._90
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: _90
        path: ''
        startLine: 7
      syntax:
        content:
          CSharp: _90 = 90
          VB: _90 = 90
        return:
          type: Global.RotationAngle
    - id: Global.RotationAngle.Minus90
      commentId: F:Global.RotationAngle.Minus90
      language: CSharp
      name:
        CSharp: Minus90
        VB: Minus90
      nameWithType:
        CSharp: RotationAngle.Minus90
        VB: RotationAngle.Minus90
      qualifiedName:
        CSharp: RotationAngle.Minus90
        VB: RotationAngle.Minus90
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Minus90
        path: ''
        startLine: 8
      syntax:
        content:
          CSharp: Minus90 = -90
          VB: Minus90 = -90
        return:
          type: Global.RotationAngle
    - id: Global.RotationAngle._180
      commentId: F:Global.RotationAngle._180
      language: CSharp
      name:
        CSharp: _180
        VB: _180
      nameWithType:
        CSharp: RotationAngle._180
        VB: RotationAngle._180
      qualifiedName:
        CSharp: RotationAngle._180
        VB: RotationAngle._180
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: _180
        path: ''
        startLine: 9
      syntax:
        content:
          CSharp: _180 = 180
          VB: _180 = 180
        return:
          type: Global.RotationAngle
  - id: Global.FlipDirection
    commentId: T:Global.FlipDirection
    language: CSharp
    name:
      CSharp: FlipDirection
      VB: FlipDirection
    nameWithType:
      CSharp: FlipDirection
      VB: FlipDirection
    qualifiedName:
      CSharp: FlipDirection
      VB: FlipDirection
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: FlipDirection
      path: ''
      startLine: 12
    syntax:
      content:
        CSharp: public enum FlipDirection
        VB: Public Enum FlipDirection
    items:
    - id: Global.FlipDirection.None
      commentId: F:Global.FlipDirection.None
      language: CSharp
      name:
        CSharp: None
        VB: None
      nameWithType:
        CSharp: FlipDirection.None
        VB: FlipDirection.None
      qualifiedName:
        CSharp: FlipDirection.None
        VB: FlipDirection.None
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: None
        path: ''
        startLine: 14
      syntax:
        content:
          CSharp: None = 0
          VB: None = 0
        return:
          type: Global.FlipDirection
    - id: Global.FlipDirection.X
      commentId: F:Global.FlipDirection.X
      language: CSharp
      name:
        CSharp: X
        VB: X
      nameWithType:
        CSharp: FlipDirection.X
        VB: FlipDirection.X
      qualifiedName:
        CSharp: FlipDirection.X
        VB: FlipDirection.X
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: X
        path: ''
        startLine: 15
      syntax:
        content:
          CSharp: X = 1
          VB: X = 1
        return:
          type: Global.FlipDirection
    - id: Global.FlipDirection.Y
      commentId: F:Global.FlipDirection.Y
      language: CSharp
      name:
        CSharp: Y
        VB: Y
      nameWithType:
        CSharp: FlipDirection.Y
        VB: FlipDirection.Y
      qualifiedName:
        CSharp: FlipDirection.Y
        VB: FlipDirection.Y
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Y
        path: ''
        startLine: 16
      syntax:
        content:
          CSharp: Y = 2
          VB: Y = 2
        return:
          type: Global.FlipDirection
  - id: Global.Finder
    commentId: T:Global.Finder
    language: CSharp
    name:
      CSharp: Finder
      VB: Finder
    nameWithType:
      CSharp: Finder
      VB: Finder
    qualifiedName:
      CSharp: Finder
      VB: Finder
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Finder
      path: ''
      startLine: 23
    syntax:
      content:
        CSharp: public class Finder
        VB: Public Class Finder
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.Finder.inputSystem
      commentId: P:Global.Finder.inputSystem
      language: CSharp
      name:
        CSharp: inputSystem
        VB: inputSystem
      nameWithType:
        CSharp: Finder.inputSystem
        VB: Finder.inputSystem
      qualifiedName:
        CSharp: Finder.inputSystem
        VB: Finder.inputSystem
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: inputSystem
        path: ''
        startLine: 25
      syntax:
        content:
          CSharp: public static InputSystem inputSystem { get; }
          VB: Public Shared ReadOnly Property inputSystem As InputSystem
        parameters: []
        return:
          type: Global.InputSystem
      overload: Global.Finder.inputSystem*
    - id: Global.Finder.mouse
      commentId: P:Global.Finder.mouse
      language: CSharp
      name:
        CSharp: mouse
        VB: mouse
      nameWithType:
        CSharp: Finder.mouse
        VB: Finder.mouse
      qualifiedName:
        CSharp: Finder.mouse
        VB: Finder.mouse
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: mouse
        path: ''
        startLine: 26
      syntax:
        content:
          CSharp: public static Mouse mouse { get; }
          VB: Public Shared ReadOnly Property mouse As Mouse
        parameters: []
        return:
          type: Global.Mouse
      overload: Global.Finder.mouse*
    - id: Global.Finder.keyboard
      commentId: P:Global.Finder.keyboard
      language: CSharp
      name:
        CSharp: keyboard
        VB: keyboard
      nameWithType:
        CSharp: Finder.keyboard
        VB: Finder.keyboard
      qualifiedName:
        CSharp: Finder.keyboard
        VB: Finder.keyboard
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: keyboard
        path: ''
        startLine: 27
      syntax:
        content:
          CSharp: public static Keyboard keyboard { get; }
          VB: Public Shared ReadOnly Property keyboard As Keyboard
        parameters: []
        return:
          type: Global.Keyboard
      overload: Global.Finder.keyboard*
    - id: Global.Finder.fileManager
      commentId: P:Global.Finder.fileManager
      language: CSharp
      name:
        CSharp: fileManager
        VB: fileManager
      nameWithType:
        CSharp: Finder.fileManager
        VB: Finder.fileManager
      qualifiedName:
        CSharp: Finder.fileManager
        VB: Finder.fileManager
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: fileManager
        path: ''
        startLine: 29
      syntax:
        content:
          CSharp: public static FileManager fileManager { get; }
          VB: Public Shared ReadOnly Property fileManager As FileManager
        parameters: []
        return:
          type: Global.FileManager
      overload: Global.Finder.fileManager*
    - id: Global.Finder.fileTabsManager
      commentId: P:Global.Finder.fileTabsManager
      language: CSharp
      name:
        CSharp: fileTabsManager
        VB: fileTabsManager
      nameWithType:
        CSharp: Finder.fileTabsManager
        VB: Finder.fileTabsManager
      qualifiedName:
        CSharp: Finder.fileTabsManager
        VB: Finder.fileTabsManager
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: fileTabsManager
        path: ''
        startLine: 30
      syntax:
        content:
          CSharp: public static FileTabsManager fileTabsManager { get; }
          VB: Public Shared ReadOnly Property fileTabsManager As FileTabsManager
        parameters: []
        return:
          type: Global.FileTabsManager
      overload: Global.Finder.fileTabsManager*
    - id: Global.Finder.layerManager
      commentId: P:Global.Finder.layerManager
      language: CSharp
      name:
        CSharp: layerManager
        VB: layerManager
      nameWithType:
        CSharp: Finder.layerManager
        VB: Finder.layerManager
      qualifiedName:
        CSharp: Finder.layerManager
        VB: Finder.layerManager
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: layerManager
        path: ''
        startLine: 32
      syntax:
        content:
          CSharp: public static LayerManager layerManager { get; }
          VB: Public Shared ReadOnly Property layerManager As LayerManager
        parameters: []
        return:
          type: Global.LayerManager
      overload: Global.Finder.layerManager*
    - id: Global.Finder.animationManager
      commentId: P:Global.Finder.animationManager
      language: CSharp
      name:
        CSharp: animationManager
        VB: animationManager
      nameWithType:
        CSharp: Finder.animationManager
        VB: Finder.animationManager
      qualifiedName:
        CSharp: Finder.animationManager
        VB: Finder.animationManager
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: animationManager
        path: ''
        startLine: 33
      syntax:
        content:
          CSharp: public static AnimationManager animationManager { get; }
          VB: Public Shared ReadOnly Property animationManager As AnimationManager
        parameters: []
        return:
          type: Global.AnimationManager
      overload: Global.Finder.animationManager*
    - id: Global.Finder.drawingArea
      commentId: P:Global.Finder.drawingArea
      language: CSharp
      name:
        CSharp: drawingArea
        VB: drawingArea
      nameWithType:
        CSharp: Finder.drawingArea
        VB: Finder.drawingArea
      qualifiedName:
        CSharp: Finder.drawingArea
        VB: Finder.drawingArea
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: drawingArea
        path: ''
        startLine: 35
      syntax:
        content:
          CSharp: public static DrawingArea drawingArea { get; }
          VB: Public Shared ReadOnly Property drawingArea As DrawingArea
        parameters: []
        return:
          type: Global.DrawingArea
      overload: Global.Finder.drawingArea*
    - id: Global.Finder.tilesetManager
      commentId: P:Global.Finder.tilesetManager
      language: CSharp
      name:
        CSharp: tilesetManager
        VB: tilesetManager
      nameWithType:
        CSharp: Finder.tilesetManager
        VB: Finder.tilesetManager
      qualifiedName:
        CSharp: Finder.tilesetManager
        VB: Finder.tilesetManager
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: tilesetManager
        path: ''
        startLine: 37
      syntax:
        content:
          CSharp: public static TilesetManager tilesetManager { get; }
          VB: Public Shared ReadOnly Property tilesetManager As TilesetManager
        parameters: []
        return:
          type: Global.TilesetManager
      overload: Global.Finder.tilesetManager*
    - id: Global.Finder.tileOutlineManager
      commentId: P:Global.Finder.tileOutlineManager
      language: CSharp
      name:
        CSharp: tileOutlineManager
        VB: tileOutlineManager
      nameWithType:
        CSharp: Finder.tileOutlineManager
        VB: Finder.tileOutlineManager
      qualifiedName:
        CSharp: Finder.tileOutlineManager
        VB: Finder.tileOutlineManager
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: tileOutlineManager
        path: ''
        startLine: 38
      syntax:
        content:
          CSharp: public static TileOutlineManager tileOutlineManager { get; }
          VB: Public Shared ReadOnly Property tileOutlineManager As TileOutlineManager
        parameters: []
        return:
          type: Global.TileOutlineManager
      overload: Global.Finder.tileOutlineManager*
    - id: Global.Finder.colourPicker
      commentId: P:Global.Finder.colourPicker
      language: CSharp
      name:
        CSharp: colourPicker
        VB: colourPicker
      nameWithType:
        CSharp: Finder.colourPicker
        VB: Finder.colourPicker
      qualifiedName:
        CSharp: Finder.colourPicker
        VB: Finder.colourPicker
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: colourPicker
        path: ''
        startLine: 40
      syntax:
        content:
          CSharp: public static GlobalColourPicker colourPicker { get; }
          VB: Public Shared ReadOnly Property colourPicker As GlobalColourPicker
        parameters: []
        return:
          type: Global.GlobalColourPicker
      overload: Global.Finder.colourPicker*
    - id: Global.Finder.toolbar
      commentId: P:Global.Finder.toolbar
      language: CSharp
      name:
        CSharp: toolbar
        VB: toolbar
      nameWithType:
        CSharp: Finder.toolbar
        VB: Finder.toolbar
      qualifiedName:
        CSharp: Finder.toolbar
        VB: Finder.toolbar
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: toolbar
        path: ''
        startLine: 41
      syntax:
        content:
          CSharp: public static Toolbar toolbar { get; }
          VB: Public Shared ReadOnly Property toolbar As Toolbar
        parameters: []
        return:
          type: Global.Toolbar
      overload: Global.Finder.toolbar*
    - id: Global.Finder.uiManager
      commentId: P:Global.Finder.uiManager
      language: CSharp
      name:
        CSharp: uiManager
        VB: uiManager
      nameWithType:
        CSharp: Finder.uiManager
        VB: Finder.uiManager
      qualifiedName:
        CSharp: Finder.uiManager
        VB: Finder.uiManager
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: uiManager
        path: ''
        startLine: 43
      syntax:
        content:
          CSharp: public static UIManager uiManager { get; }
          VB: Public Shared ReadOnly Property uiManager As UIManager
        parameters: []
        return:
          type: Global.UIManager
      overload: Global.Finder.uiManager*
    - id: Global.Finder.themeManager
      commentId: P:Global.Finder.themeManager
      language: CSharp
      name:
        CSharp: themeManager
        VB: themeManager
      nameWithType:
        CSharp: Finder.themeManager
        VB: Finder.themeManager
      qualifiedName:
        CSharp: Finder.themeManager
        VB: Finder.themeManager
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: themeManager
        path: ''
        startLine: 44
      syntax:
        content:
          CSharp: public static ThemeManager themeManager { get; }
          VB: Public Shared ReadOnly Property themeManager As ThemeManager
        parameters: []
        return:
          type: Global.ThemeManager
      overload: Global.Finder.themeManager*
    - id: Global.Finder.gridManager
      commentId: P:Global.Finder.gridManager
      language: CSharp
      name:
        CSharp: gridManager
        VB: gridManager
      nameWithType:
        CSharp: Finder.gridManager
        VB: Finder.gridManager
      qualifiedName:
        CSharp: Finder.gridManager
        VB: Finder.gridManager
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: gridManager
        path: ''
        startLine: 45
      syntax:
        content:
          CSharp: public static GridManager gridManager { get; }
          VB: Public Shared ReadOnly Property gridManager As GridManager
        parameters: []
        return:
          type: Global.GridManager
      overload: Global.Finder.gridManager*
    - id: Global.Finder.undoRedoManager
      commentId: P:Global.Finder.undoRedoManager
      language: CSharp
      name:
        CSharp: undoRedoManager
        VB: undoRedoManager
      nameWithType:
        CSharp: Finder.undoRedoManager
        VB: Finder.undoRedoManager
      qualifiedName:
        CSharp: Finder.undoRedoManager
        VB: Finder.undoRedoManager
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: undoRedoManager
        path: ''
        startLine: 47
      syntax:
        content:
          CSharp: public static UndoRedoManager undoRedoManager { get; }
          VB: Public Shared ReadOnly Property undoRedoManager As UndoRedoManager
        parameters: []
        return:
          type: Global.UndoRedoManager
      overload: Global.Finder.undoRedoManager*
    - id: Global.Finder.clipboard
      commentId: P:Global.Finder.clipboard
      language: CSharp
      name:
        CSharp: clipboard
        VB: clipboard
      nameWithType:
        CSharp: Finder.clipboard
        VB: Finder.clipboard
      qualifiedName:
        CSharp: Finder.clipboard
        VB: Finder.clipboard
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: clipboard
        path: ''
        startLine: 48
      syntax:
        content:
          CSharp: public static Clipboard clipboard { get; }
          VB: Public Shared ReadOnly Property clipboard As Clipboard
        parameters: []
        return:
          type: Global.Clipboard
      overload: Global.Finder.clipboard*
    - id: Global.Finder.imageEditManager
      commentId: P:Global.Finder.imageEditManager
      language: CSharp
      name:
        CSharp: imageEditManager
        VB: imageEditManager
      nameWithType:
        CSharp: Finder.imageEditManager
        VB: Finder.imageEditManager
      qualifiedName:
        CSharp: Finder.imageEditManager
        VB: Finder.imageEditManager
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: imageEditManager
        path: ''
        startLine: 49
      syntax:
        content:
          CSharp: public static ImageEditManager imageEditManager { get; }
          VB: Public Shared ReadOnly Property imageEditManager As ImageEditManager
        parameters: []
        return:
          type: Global.ImageEditManager
      overload: Global.Finder.imageEditManager*
  - id: Global.Functions
    commentId: T:Global.Functions
    language: CSharp
    name:
      CSharp: Functions
      VB: Functions
    nameWithType:
      CSharp: Functions
      VB: Functions
    qualifiedName:
      CSharp: Functions
      VB: Functions
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Functions
      path: ''
      startLine: 56
    syntax:
      content:
        CSharp: public static class Functions
        VB: Public Module Functions
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.Functions.Mod(System.Int32,System.Int32)
      commentId: M:Global.Functions.Mod(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Mod(int, int)
        VB: Mod(Integer, Integer)
      nameWithType:
        CSharp: Functions.Mod(int, int)
        VB: Functions.Mod(Integer, Integer)
      qualifiedName:
        CSharp: Functions.Mod(int, int)
        VB: Functions.Mod(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Mod
        path: ''
        startLine: 64
      summary: "\nReturns a mod b, giving a non-negative result.\n"
      example: []
      syntax:
        content:
          CSharp: public static int Mod(int a, int b)
          VB: Public Shared Function [Mod](a As Integer, b As Integer) As Integer
        parameters:
        - id: a
          type: System.Int32
          description: ''
        - id: b
          type: System.Int32
          description: ''
        return:
          type: System.Int32
          description: ''
      overload: Global.Functions.Mod*
    - id: Global.Functions.RoundToMultiple(System.Single,System.Int32)
      commentId: M:Global.Functions.RoundToMultiple(System.Single,System.Int32)
      language: CSharp
      name:
        CSharp: RoundToMultiple(float, int)
        VB: RoundToMultiple(Single, Integer)
      nameWithType:
        CSharp: Functions.RoundToMultiple(float, int)
        VB: Functions.RoundToMultiple(Single, Integer)
      qualifiedName:
        CSharp: Functions.RoundToMultiple(float, int)
        VB: Functions.RoundToMultiple(Single, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RoundToMultiple
        path: ''
        startLine: 69
      syntax:
        content:
          CSharp: public static int RoundToMultiple(float toRound, int multipleOf)
          VB: Public Shared Function RoundToMultiple(toRound As Single, multipleOf As Integer) As Integer
        parameters:
        - id: toRound
          type: System.Single
        - id: multipleOf
          type: System.Int32
        return:
          type: System.Int32
      overload: Global.Functions.RoundToMultiple*
    - id: Global.Functions.RoundToMultiple(System.Single,System.Single)
      commentId: M:Global.Functions.RoundToMultiple(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: RoundToMultiple(float, float)
        VB: RoundToMultiple(Single, Single)
      nameWithType:
        CSharp: Functions.RoundToMultiple(float, float)
        VB: Functions.RoundToMultiple(Single, Single)
      qualifiedName:
        CSharp: Functions.RoundToMultiple(float, float)
        VB: Functions.RoundToMultiple(Single, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RoundToMultiple
        path: ''
        startLine: 73
      syntax:
        content:
          CSharp: public static float RoundToMultiple(float toRound, float multipleOf)
          VB: Public Shared Function RoundToMultiple(toRound As Single, multipleOf As Single) As Single
        parameters:
        - id: toRound
          type: System.Single
        - id: multipleOf
          type: System.Single
        return:
          type: System.Single
      overload: Global.Functions.RoundToMultiple*
    - id: Global.Functions.FloorToMultiple(System.Single,System.Int32)
      commentId: M:Global.Functions.FloorToMultiple(System.Single,System.Int32)
      language: CSharp
      name:
        CSharp: FloorToMultiple(float, int)
        VB: FloorToMultiple(Single, Integer)
      nameWithType:
        CSharp: Functions.FloorToMultiple(float, int)
        VB: Functions.FloorToMultiple(Single, Integer)
      qualifiedName:
        CSharp: Functions.FloorToMultiple(float, int)
        VB: Functions.FloorToMultiple(Single, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FloorToMultiple
        path: ''
        startLine: 83
      syntax:
        content:
          CSharp: public static int FloorToMultiple(float toRound, int multipleOf)
          VB: Public Shared Function FloorToMultiple(toRound As Single, multipleOf As Integer) As Integer
        parameters:
        - id: toRound
          type: System.Single
        - id: multipleOf
          type: System.Int32
        return:
          type: System.Int32
      overload: Global.Functions.FloorToMultiple*
    - id: Global.Functions.FloorToMultiple(System.Single,System.Single)
      commentId: M:Global.Functions.FloorToMultiple(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: FloorToMultiple(float, float)
        VB: FloorToMultiple(Single, Single)
      nameWithType:
        CSharp: Functions.FloorToMultiple(float, float)
        VB: Functions.FloorToMultiple(Single, Single)
      qualifiedName:
        CSharp: Functions.FloorToMultiple(float, float)
        VB: Functions.FloorToMultiple(Single, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FloorToMultiple
        path: ''
        startLine: 87
      syntax:
        content:
          CSharp: public static float FloorToMultiple(float toRound, float multipleOf)
          VB: Public Shared Function FloorToMultiple(toRound As Single, multipleOf As Single) As Single
        parameters:
        - id: toRound
          type: System.Single
        - id: multipleOf
          type: System.Single
        return:
          type: System.Single
      overload: Global.Functions.FloorToMultiple*
    - id: Global.Functions.CeilToMultiple(System.Single,System.Int32)
      commentId: M:Global.Functions.CeilToMultiple(System.Single,System.Int32)
      language: CSharp
      name:
        CSharp: CeilToMultiple(float, int)
        VB: CeilToMultiple(Single, Integer)
      nameWithType:
        CSharp: Functions.CeilToMultiple(float, int)
        VB: Functions.CeilToMultiple(Single, Integer)
      qualifiedName:
        CSharp: Functions.CeilToMultiple(float, int)
        VB: Functions.CeilToMultiple(Single, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CeilToMultiple
        path: ''
        startLine: 97
      syntax:
        content:
          CSharp: public static int CeilToMultiple(float toRound, int multipleOf)
          VB: Public Shared Function CeilToMultiple(toRound As Single, multipleOf As Integer) As Integer
        parameters:
        - id: toRound
          type: System.Single
        - id: multipleOf
          type: System.Int32
        return:
          type: System.Int32
      overload: Global.Functions.CeilToMultiple*
    - id: Global.Functions.CeilToMultiple(System.Single,System.Single)
      commentId: M:Global.Functions.CeilToMultiple(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: CeilToMultiple(float, float)
        VB: CeilToMultiple(Single, Single)
      nameWithType:
        CSharp: Functions.CeilToMultiple(float, float)
        VB: Functions.CeilToMultiple(Single, Single)
      qualifiedName:
        CSharp: Functions.CeilToMultiple(float, float)
        VB: Functions.CeilToMultiple(Single, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CeilToMultiple
        path: ''
        startLine: 101
      syntax:
        content:
          CSharp: public static float CeilToMultiple(float toRound, float multipleOf)
          VB: Public Shared Function CeilToMultiple(toRound As Single, multipleOf As Single) As Single
        parameters:
        - id: toRound
          type: System.Single
        - id: multipleOf
          type: System.Single
        return:
          type: System.Single
      overload: Global.Functions.CeilToMultiple*
    - id: Global.Functions.Vector3ToVector2(Vector3)
      commentId: M:Global.Functions.Vector3ToVector2(Vector3)
      language: CSharp
      name:
        CSharp: Vector3ToVector2(Vector3)
        VB: Vector3ToVector2(Vector3)
      nameWithType:
        CSharp: Functions.Vector3ToVector2(Vector3)
        VB: Functions.Vector3ToVector2(Vector3)
      qualifiedName:
        CSharp: Functions.Vector3ToVector2(Vector3)
        VB: Functions.Vector3ToVector2(Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Vector3ToVector2
        path: ''
        startLine: 111
      syntax:
        content:
          CSharp: public static Vector2 Vector3ToVector2(Vector3 vector3)
          VB: Public Shared Function Vector3ToVector2(vector3 As Vector3) As Vector2
        parameters:
        - id: vector3
          type: Global.Vector3
        return:
          type: Global.Vector2
      overload: Global.Functions.Vector3ToVector2*
    - id: Global.Functions.Vector2ToVector3(Vector3)
      commentId: M:Global.Functions.Vector2ToVector3(Vector3)
      language: CSharp
      name:
        CSharp: Vector2ToVector3(Vector3)
        VB: Vector2ToVector3(Vector3)
      nameWithType:
        CSharp: Functions.Vector2ToVector3(Vector3)
        VB: Functions.Vector2ToVector3(Vector3)
      qualifiedName:
        CSharp: Functions.Vector2ToVector3(Vector3)
        VB: Functions.Vector2ToVector3(Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Vector2ToVector3
        path: ''
        startLine: 115
      syntax:
        content:
          CSharp: public static Vector3 Vector2ToVector3(Vector3 vector2)
          VB: Public Shared Function Vector2ToVector3(vector2 As Vector3) As Vector3
        parameters:
        - id: vector2
          type: Global.Vector3
        return:
          type: Global.Vector3
      overload: Global.Functions.Vector2ToVector3*
    - id: Global.Functions.FirstNChars(System.String,System.Int32)
      commentId: M:Global.Functions.FirstNChars(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: FirstNChars(string, int)
        VB: FirstNChars(String, Integer)
      nameWithType:
        CSharp: Functions.FirstNChars(string, int)
        VB: Functions.FirstNChars(String, Integer)
      qualifiedName:
        CSharp: Functions.FirstNChars(string, int)
        VB: Functions.FirstNChars(String, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FirstNChars
        path: ''
        startLine: 120
      syntax:
        content:
          CSharp: public static string FirstNChars(string str, int numOfChars)
          VB: Public Shared Function FirstNChars(str As String, numOfChars As Integer) As String
        parameters:
        - id: str
          type: System.String
        - id: numOfChars
          type: System.Int32
        return:
          type: System.String
      overload: Global.Functions.FirstNChars*
    - id: Global.Functions.SymmetricFloor(System.Single)
      commentId: M:Global.Functions.SymmetricFloor(System.Single)
      language: CSharp
      name:
        CSharp: SymmetricFloor(float)
        VB: SymmetricFloor(Single)
      nameWithType:
        CSharp: Functions.SymmetricFloor(float)
        VB: Functions.SymmetricFloor(Single)
      qualifiedName:
        CSharp: Functions.SymmetricFloor(float)
        VB: Functions.SymmetricFloor(Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SymmetricFloor
        path: ''
        startLine: 135
      syntax:
        content:
          CSharp: public static float SymmetricFloor(float f)
          VB: Public Shared Function SymmetricFloor(f As Single) As Single
        parameters:
        - id: f
          type: System.Single
        return:
          type: System.Single
      overload: Global.Functions.SymmetricFloor*
    - id: Global.Functions.SymmetricCeil(System.Single)
      commentId: M:Global.Functions.SymmetricCeil(System.Single)
      language: CSharp
      name:
        CSharp: SymmetricCeil(float)
        VB: SymmetricCeil(Single)
      nameWithType:
        CSharp: Functions.SymmetricCeil(float)
        VB: Functions.SymmetricCeil(Single)
      qualifiedName:
        CSharp: Functions.SymmetricCeil(float)
        VB: Functions.SymmetricCeil(Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SymmetricCeil
        path: ''
        startLine: 145
      syntax:
        content:
          CSharp: public static float SymmetricCeil(float f)
          VB: Public Shared Function SymmetricCeil(f As Single) As Single
        parameters:
        - id: f
          type: System.Single
        return:
          type: System.Single
      overload: Global.Functions.SymmetricCeil*
    - id: Global.Functions.SymmetricFloorToInt(System.Single)
      commentId: M:Global.Functions.SymmetricFloorToInt(System.Single)
      language: CSharp
      name:
        CSharp: SymmetricFloorToInt(float)
        VB: SymmetricFloorToInt(Single)
      nameWithType:
        CSharp: Functions.SymmetricFloorToInt(float)
        VB: Functions.SymmetricFloorToInt(Single)
      qualifiedName:
        CSharp: Functions.SymmetricFloorToInt(float)
        VB: Functions.SymmetricFloorToInt(Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SymmetricFloorToInt
        path: ''
        startLine: 155
      syntax:
        content:
          CSharp: public static int SymmetricFloorToInt(float f)
          VB: Public Shared Function SymmetricFloorToInt(f As Single) As Integer
        parameters:
        - id: f
          type: System.Single
        return:
          type: System.Int32
      overload: Global.Functions.SymmetricFloorToInt*
    - id: Global.Functions.SymmetricCeilToInt(System.Single)
      commentId: M:Global.Functions.SymmetricCeilToInt(System.Single)
      language: CSharp
      name:
        CSharp: SymmetricCeilToInt(float)
        VB: SymmetricCeilToInt(Single)
      nameWithType:
        CSharp: Functions.SymmetricCeilToInt(float)
        VB: Functions.SymmetricCeilToInt(Single)
      qualifiedName:
        CSharp: Functions.SymmetricCeilToInt(float)
        VB: Functions.SymmetricCeilToInt(Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SymmetricCeilToInt
        path: ''
        startLine: 165
      syntax:
        content:
          CSharp: public static int SymmetricCeilToInt(float f)
          VB: Public Shared Function SymmetricCeilToInt(f As Single) As Integer
        parameters:
        - id: f
          type: System.Single
        return:
          type: System.Int32
      overload: Global.Functions.SymmetricCeilToInt*
    - id: Global.Functions.TruncateDecimalPlaces(System.Single,System.Int32)
      commentId: M:Global.Functions.TruncateDecimalPlaces(System.Single,System.Int32)
      language: CSharp
      name:
        CSharp: TruncateDecimalPlaces(float, int)
        VB: TruncateDecimalPlaces(Single, Integer)
      nameWithType:
        CSharp: Functions.TruncateDecimalPlaces(float, int)
        VB: Functions.TruncateDecimalPlaces(Single, Integer)
      qualifiedName:
        CSharp: Functions.TruncateDecimalPlaces(float, int)
        VB: Functions.TruncateDecimalPlaces(Single, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: TruncateDecimalPlaces
        path: ''
        startLine: 175
      syntax:
        content:
          CSharp: public static float TruncateDecimalPlaces(float f, int decimalPlaces)
          VB: Public Shared Function TruncateDecimalPlaces(f As Single, decimalPlaces As Integer) As Single
        parameters:
        - id: f
          type: System.Single
        - id: decimalPlaces
          type: System.Int32
        return:
          type: System.Single
      overload: Global.Functions.TruncateDecimalPlaces*
    - id: Global.Functions.RoundDecimalPlaces(System.Single,System.Int32)
      commentId: M:Global.Functions.RoundDecimalPlaces(System.Single,System.Int32)
      language: CSharp
      name:
        CSharp: RoundDecimalPlaces(float, int)
        VB: RoundDecimalPlaces(Single, Integer)
      nameWithType:
        CSharp: Functions.RoundDecimalPlaces(float, int)
        VB: Functions.RoundDecimalPlaces(Single, Integer)
      qualifiedName:
        CSharp: Functions.RoundDecimalPlaces(float, int)
        VB: Functions.RoundDecimalPlaces(Single, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RoundDecimalPlaces
        path: ''
        startLine: 190
      syntax:
        content:
          CSharp: public static float RoundDecimalPlaces(float f, int decimalPlaces)
          VB: Public Shared Function RoundDecimalPlaces(f As Single, decimalPlaces As Integer) As Single
        parameters:
        - id: f
          type: System.Single
        - id: decimalPlaces
          type: System.Int32
        return:
          type: System.Single
      overload: Global.Functions.RoundDecimalPlaces*
    - id: Global.Functions.ConcatArrays``1(``0[],``0[])
      commentId: M:Global.Functions.ConcatArrays``1(``0[],``0[])
      language: CSharp
      name:
        CSharp: ConcatArrays<T>(T[], T[])
        VB: ConcatArrays(Of T)(T(), T())
      nameWithType:
        CSharp: Functions.ConcatArrays<T>(T[], T[])
        VB: Functions.ConcatArrays(Of T)(T(), T())
      qualifiedName:
        CSharp: Functions.ConcatArrays<T>(T[], T[])
        VB: Functions.ConcatArrays(Of T)(T(), T())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ConcatArrays
        path: ''
        startLine: 195
      syntax:
        content:
          CSharp: public static T[] ConcatArrays<T>(T[] array1, T[] array2)
          VB: Public Shared Function ConcatArrays(Of T)(array1 As T(), array2 As T()) As T()
        parameters:
        - id: array1
          type: '{T}[]'
        - id: array2
          type: '{T}[]'
        typeParameters:
        - id: T
        return:
          type: '{T}[]'
      overload: Global.Functions.ConcatArrays*
    - id: Global.Functions.CopyArray``1(``0[])
      commentId: M:Global.Functions.CopyArray``1(``0[])
      language: CSharp
      name:
        CSharp: CopyArray<T>(T[])
        VB: CopyArray(Of T)(T())
      nameWithType:
        CSharp: Functions.CopyArray<T>(T[])
        VB: Functions.CopyArray(Of T)(T())
      qualifiedName:
        CSharp: Functions.CopyArray<T>(T[])
        VB: Functions.CopyArray(Of T)(T())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CopyArray
        path: ''
        startLine: 211
      syntax:
        content:
          CSharp: public static T[] CopyArray<T>(T[] array)
          VB: Public Shared Function CopyArray(Of T)(array As T()) As T()
        parameters:
        - id: array
          type: '{T}[]'
        typeParameters:
        - id: T
        return:
          type: '{T}[]'
      overload: Global.Functions.CopyArray*
    - id: Global.Functions.CompareArrays``1(``0[],``0[])
      commentId: M:Global.Functions.CompareArrays``1(``0[],``0[])
      language: CSharp
      name:
        CSharp: CompareArrays<T>(T[], T[])
        VB: CompareArrays(Of T)(T(), T())
      nameWithType:
        CSharp: Functions.CompareArrays<T>(T[], T[])
        VB: Functions.CompareArrays(Of T)(T(), T())
      qualifiedName:
        CSharp: Functions.CompareArrays<T>(T[], T[])
        VB: Functions.CompareArrays(Of T)(T(), T())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CompareArrays
        path: ''
        startLine: 223
      syntax:
        content:
          CSharp: public static bool CompareArrays<T>(T[] array1, T[] array2)
          VB: Public Shared Function CompareArrays(Of T)(array1 As T(), array2 As T()) As Boolean
        parameters:
        - id: array1
          type: '{T}[]'
        - id: array2
          type: '{T}[]'
        typeParameters:
        - id: T
        return:
          type: System.Boolean
      overload: Global.Functions.CompareArrays*
    - id: Global.Functions.ArrayToString``1(``0[])
      commentId: M:Global.Functions.ArrayToString``1(``0[])
      language: CSharp
      name:
        CSharp: ArrayToString<T>(T[])
        VB: ArrayToString(Of T)(T())
      nameWithType:
        CSharp: Functions.ArrayToString<T>(T[])
        VB: Functions.ArrayToString(Of T)(T())
      qualifiedName:
        CSharp: Functions.ArrayToString<T>(T[])
        VB: Functions.ArrayToString(Of T)(T())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ArrayToString
        path: ''
        startLine: 241
      syntax:
        content:
          CSharp: public static string ArrayToString<T>(T[] array)
          VB: Public Shared Function ArrayToString(Of T)(array As T()) As String
        parameters:
        - id: array
          type: '{T}[]'
        typeParameters:
        - id: T
        return:
          type: System.String
      overload: Global.Functions.ArrayToString*
    - id: Global.Functions.Range(System.Int32,System.Int32)
      commentId: M:Global.Functions.Range(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Range(int, int)
        VB: Range(Integer, Integer)
      nameWithType:
        CSharp: Functions.Range(int, int)
        VB: Functions.Range(Integer, Integer)
      qualifiedName:
        CSharp: Functions.Range(int, int)
        VB: Functions.Range(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Range
        path: ''
        startLine: 259
      syntax:
        content:
          CSharp: public static int[] Range(int start, int end)
          VB: Public Shared Function Range(start As Integer, [end] As Integer) As Integer()
        parameters:
        - id: start
          type: System.Int32
        - id: end
          type: System.Int32
        return:
          type: System.Int32[]
      overload: Global.Functions.Range*
    - isExtensionMethod: true
      id: Global.Functions.ToArray``1(System.Collections.Generic.HashSet{``0})
      commentId: M:Global.Functions.ToArray``1(System.Collections.Generic.HashSet{``0})
      language: CSharp
      name:
        CSharp: ToArray<T>(HashSet<T>)
        VB: ToArray(Of T)(HashSet(Of T))
      nameWithType:
        CSharp: Functions.ToArray<T>(HashSet<T>)
        VB: Functions.ToArray(Of T)(HashSet(Of T))
      qualifiedName:
        CSharp: Functions.ToArray<T>(System.Collections.Generic.HashSet<T>)
        VB: Functions.ToArray(Of T)(System.Collections.Generic.HashSet(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToArray
        path: ''
        startLine: 281
      syntax:
        content:
          CSharp: public static T[] ToArray<T>(this HashSet<T> hashSet)
          VB: Public Shared Function ToArray(Of T)(hashSet As HashSet(Of T)) As T()
        parameters:
        - id: hashSet
          type: System.Collections.Generic.HashSet{{T}}
        typeParameters:
        - id: T
        return:
          type: '{T}[]'
      overload: Global.Functions.ToArray*
  - id: Global.ImageConverter
    commentId: T:Global.ImageConverter
    language: CSharp
    name:
      CSharp: ImageConverter
      VB: ImageConverter
    nameWithType:
      CSharp: ImageConverter
      VB: ImageConverter
    qualifiedName:
      CSharp: ImageConverter
      VB: ImageConverter
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ImageConverter
      path: ''
      startLine: 293
    syntax:
      content:
        CSharp: public static class ImageConverter
        VB: Public Module ImageConverter
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items: []
  - id: Global.KeyCodeFunctions
    commentId: T:Global.KeyCodeFunctions
    language: CSharp
    name:
      CSharp: KeyCodeFunctions
      VB: KeyCodeFunctions
    nameWithType:
      CSharp: KeyCodeFunctions
      VB: KeyCodeFunctions
    qualifiedName:
      CSharp: KeyCodeFunctions
      VB: KeyCodeFunctions
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: KeyCodeFunctions
      path: ''
      startLine: 302
    syntax:
      content:
        CSharp: public static class KeyCodeFunctions
        VB: Public Module KeyCodeFunctions
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.KeyCodeFunctions.StrToKeyCode(System.String)
      commentId: M:Global.KeyCodeFunctions.StrToKeyCode(System.String)
      language: CSharp
      name:
        CSharp: StrToKeyCode(string)
        VB: StrToKeyCode(String)
      nameWithType:
        CSharp: KeyCodeFunctions.StrToKeyCode(string)
        VB: KeyCodeFunctions.StrToKeyCode(String)
      qualifiedName:
        CSharp: KeyCodeFunctions.StrToKeyCode(string)
        VB: KeyCodeFunctions.StrToKeyCode(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: StrToKeyCode
        path: ''
        startLine: 304
      syntax:
        content:
          CSharp: public static KeyCode StrToKeyCode(string str)
          VB: Public Shared Function StrToKeyCode(str As String) As KeyCode
        parameters:
        - id: str
          type: System.String
        return:
          type: Global.KeyCode
      overload: Global.KeyCodeFunctions.StrToKeyCode*
    - id: Global.KeyCodeFunctions.IsDigit(KeyCode)
      commentId: M:Global.KeyCodeFunctions.IsDigit(KeyCode)
      language: CSharp
      name:
        CSharp: IsDigit(KeyCode)
        VB: IsDigit(KeyCode)
      nameWithType:
        CSharp: KeyCodeFunctions.IsDigit(KeyCode)
        VB: KeyCodeFunctions.IsDigit(KeyCode)
      qualifiedName:
        CSharp: KeyCodeFunctions.IsDigit(KeyCode)
        VB: KeyCodeFunctions.IsDigit(KeyCode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsDigit
        path: ''
        startLine: 368
      syntax:
        content:
          CSharp: public static bool IsDigit(KeyCode keyCode)
          VB: Public Shared Function IsDigit(keyCode As KeyCode) As Boolean
        parameters:
        - id: keyCode
          type: Global.KeyCode
        return:
          type: System.Boolean
      overload: Global.KeyCodeFunctions.IsDigit*
    - id: Global.KeyCodeFunctions.IsAlpha(KeyCode)
      commentId: M:Global.KeyCodeFunctions.IsAlpha(KeyCode)
      language: CSharp
      name:
        CSharp: IsAlpha(KeyCode)
        VB: IsAlpha(KeyCode)
      nameWithType:
        CSharp: KeyCodeFunctions.IsAlpha(KeyCode)
        VB: KeyCodeFunctions.IsAlpha(KeyCode)
      qualifiedName:
        CSharp: KeyCodeFunctions.IsAlpha(KeyCode)
        VB: KeyCodeFunctions.IsAlpha(KeyCode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsAlpha
        path: ''
        startLine: 374
      syntax:
        content:
          CSharp: public static bool IsAlpha(KeyCode keyCode)
          VB: Public Shared Function IsAlpha(keyCode As KeyCode) As Boolean
        parameters:
        - id: keyCode
          type: Global.KeyCode
        return:
          type: System.Boolean
      overload: Global.KeyCodeFunctions.IsAlpha*
    - id: Global.KeyCodeFunctions.IsAlphanumeric(KeyCode)
      commentId: M:Global.KeyCodeFunctions.IsAlphanumeric(KeyCode)
      language: CSharp
      name:
        CSharp: IsAlphanumeric(KeyCode)
        VB: IsAlphanumeric(KeyCode)
      nameWithType:
        CSharp: KeyCodeFunctions.IsAlphanumeric(KeyCode)
        VB: KeyCodeFunctions.IsAlphanumeric(KeyCode)
      qualifiedName:
        CSharp: KeyCodeFunctions.IsAlphanumeric(KeyCode)
        VB: KeyCodeFunctions.IsAlphanumeric(KeyCode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsAlphanumeric
        path: ''
        startLine: 386
      syntax:
        content:
          CSharp: public static bool IsAlphanumeric(KeyCode keyCode)
          VB: Public Shared Function IsAlphanumeric(keyCode As KeyCode) As Boolean
        parameters:
        - id: keyCode
          type: Global.KeyCode
        return:
          type: System.Boolean
      overload: Global.KeyCodeFunctions.IsAlphanumeric*
  - id: Global.OutlineSideFill
    commentId: T:Global.OutlineSideFill
    language: CSharp
    name:
      CSharp: OutlineSideFill
      VB: OutlineSideFill
    nameWithType:
      CSharp: OutlineSideFill
      VB: OutlineSideFill
    qualifiedName:
      CSharp: OutlineSideFill
      VB: OutlineSideFill
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: OutlineSideFill
      path: ''
      startLine: 397
    syntax:
      content:
        CSharp: public struct OutlineSideFill
        VB: Public Structure OutlineSideFill
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    items:
    - id: Global.OutlineSideFill.topLeft
      commentId: F:Global.OutlineSideFill.topLeft
      language: CSharp
      name:
        CSharp: topLeft
        VB: topLeft
      nameWithType:
        CSharp: OutlineSideFill.topLeft
        VB: OutlineSideFill.topLeft
      qualifiedName:
        CSharp: OutlineSideFill.topLeft
        VB: OutlineSideFill.topLeft
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: topLeft
        path: ''
        startLine: 399
      syntax:
        content:
          CSharp: public bool topLeft
          VB: Public topLeft As Boolean
        return:
          type: System.Boolean
    - id: Global.OutlineSideFill.topMiddle
      commentId: F:Global.OutlineSideFill.topMiddle
      language: CSharp
      name:
        CSharp: topMiddle
        VB: topMiddle
      nameWithType:
        CSharp: OutlineSideFill.topMiddle
        VB: OutlineSideFill.topMiddle
      qualifiedName:
        CSharp: OutlineSideFill.topMiddle
        VB: OutlineSideFill.topMiddle
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: topMiddle
        path: ''
        startLine: 400
      syntax:
        content:
          CSharp: public bool topMiddle
          VB: Public topMiddle As Boolean
        return:
          type: System.Boolean
    - id: Global.OutlineSideFill.topRight
      commentId: F:Global.OutlineSideFill.topRight
      language: CSharp
      name:
        CSharp: topRight
        VB: topRight
      nameWithType:
        CSharp: OutlineSideFill.topRight
        VB: OutlineSideFill.topRight
      qualifiedName:
        CSharp: OutlineSideFill.topRight
        VB: OutlineSideFill.topRight
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: topRight
        path: ''
        startLine: 401
      syntax:
        content:
          CSharp: public bool topRight
          VB: Public topRight As Boolean
        return:
          type: System.Boolean
    - id: Global.OutlineSideFill.middleLeft
      commentId: F:Global.OutlineSideFill.middleLeft
      language: CSharp
      name:
        CSharp: middleLeft
        VB: middleLeft
      nameWithType:
        CSharp: OutlineSideFill.middleLeft
        VB: OutlineSideFill.middleLeft
      qualifiedName:
        CSharp: OutlineSideFill.middleLeft
        VB: OutlineSideFill.middleLeft
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: middleLeft
        path: ''
        startLine: 402
      syntax:
        content:
          CSharp: public bool middleLeft
          VB: Public middleLeft As Boolean
        return:
          type: System.Boolean
    - id: Global.OutlineSideFill.middleRight
      commentId: F:Global.OutlineSideFill.middleRight
      language: CSharp
      name:
        CSharp: middleRight
        VB: middleRight
      nameWithType:
        CSharp: OutlineSideFill.middleRight
        VB: OutlineSideFill.middleRight
      qualifiedName:
        CSharp: OutlineSideFill.middleRight
        VB: OutlineSideFill.middleRight
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: middleRight
        path: ''
        startLine: 403
      syntax:
        content:
          CSharp: public bool middleRight
          VB: Public middleRight As Boolean
        return:
          type: System.Boolean
    - id: Global.OutlineSideFill.bottomLeft
      commentId: F:Global.OutlineSideFill.bottomLeft
      language: CSharp
      name:
        CSharp: bottomLeft
        VB: bottomLeft
      nameWithType:
        CSharp: OutlineSideFill.bottomLeft
        VB: OutlineSideFill.bottomLeft
      qualifiedName:
        CSharp: OutlineSideFill.bottomLeft
        VB: OutlineSideFill.bottomLeft
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: bottomLeft
        path: ''
        startLine: 404
      syntax:
        content:
          CSharp: public bool bottomLeft
          VB: Public bottomLeft As Boolean
        return:
          type: System.Boolean
    - id: Global.OutlineSideFill.bottomMiddle
      commentId: F:Global.OutlineSideFill.bottomMiddle
      language: CSharp
      name:
        CSharp: bottomMiddle
        VB: bottomMiddle
      nameWithType:
        CSharp: OutlineSideFill.bottomMiddle
        VB: OutlineSideFill.bottomMiddle
      qualifiedName:
        CSharp: OutlineSideFill.bottomMiddle
        VB: OutlineSideFill.bottomMiddle
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: bottomMiddle
        path: ''
        startLine: 405
      syntax:
        content:
          CSharp: public bool bottomMiddle
          VB: Public bottomMiddle As Boolean
        return:
          type: System.Boolean
    - id: Global.OutlineSideFill.bottomRight
      commentId: F:Global.OutlineSideFill.bottomRight
      language: CSharp
      name:
        CSharp: bottomRight
        VB: bottomRight
      nameWithType:
        CSharp: OutlineSideFill.bottomRight
        VB: OutlineSideFill.bottomRight
      qualifiedName:
        CSharp: OutlineSideFill.bottomRight
        VB: OutlineSideFill.bottomRight
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: bottomRight
        path: ''
        startLine: 406
      syntax:
        content:
          CSharp: public bool bottomRight
          VB: Public bottomRight As Boolean
        return:
          type: System.Boolean
    - id: Global.OutlineSideFill.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
      commentId: M:Global.OutlineSideFill.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: OutlineSideFill(bool, bool, bool, bool, bool, bool, bool, bool)
        VB: New(Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean)
      nameWithType:
        CSharp: OutlineSideFill.OutlineSideFill(bool, bool, bool, bool, bool, bool, bool, bool)
        VB: OutlineSideFill.New(Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean)
      qualifiedName:
        CSharp: OutlineSideFill.OutlineSideFill(bool, bool, bool, bool, bool, bool, bool, bool)
        VB: OutlineSideFill.New(Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 408
      syntax:
        content:
          CSharp: public OutlineSideFill(bool topLeft, bool topMiddle, bool topRight, bool middleLeft, bool middleRight, bool bottomLeft, bool bottomMiddle, bool bottomRight)
          VB: Public Sub New(topLeft As Boolean, topMiddle As Boolean, topRight As Boolean, middleLeft As Boolean, middleRight As Boolean, bottomLeft As Boolean, bottomMiddle As Boolean, bottomRight As Boolean)
        parameters:
        - id: topLeft
          type: System.Boolean
        - id: topMiddle
          type: System.Boolean
        - id: topRight
          type: System.Boolean
        - id: middleLeft
          type: System.Boolean
        - id: middleRight
          type: System.Boolean
        - id: bottomLeft
          type: System.Boolean
        - id: bottomMiddle
          type: System.Boolean
        - id: bottomRight
          type: System.Boolean
      overload: Global.OutlineSideFill.#ctor*
  - id: Global.Tex2DSprite
    commentId: T:Global.Tex2DSprite
    language: CSharp
    name:
      CSharp: Tex2DSprite
      VB: Tex2DSprite
    nameWithType:
      CSharp: Tex2DSprite
      VB: Tex2DSprite
    qualifiedName:
      CSharp: Tex2DSprite
      VB: Tex2DSprite
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Tex2DSprite
      path: ''
      startLine: 421
    syntax:
      content:
        CSharp: public static class Tex2DSprite
        VB: Public Module Tex2DSprite
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.Tex2DSprite.Tex2DToSprite(Texture2D)
      commentId: M:Global.Tex2DSprite.Tex2DToSprite(Texture2D)
      language: CSharp
      name:
        CSharp: Tex2DToSprite(Texture2D)
        VB: Tex2DToSprite(Texture2D)
      nameWithType:
        CSharp: Tex2DSprite.Tex2DToSprite(Texture2D)
        VB: Tex2DSprite.Tex2DToSprite(Texture2D)
      qualifiedName:
        CSharp: Tex2DSprite.Tex2DToSprite(Texture2D)
        VB: Tex2DSprite.Tex2DToSprite(Texture2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Tex2DToSprite
        path: ''
        startLine: 423
      syntax:
        content:
          CSharp: public static Sprite Tex2DToSprite(Texture2D tex)
          VB: Public Shared Function Tex2DToSprite(tex As Texture2D) As Sprite
        parameters:
        - id: tex
          type: Global.Texture2D
        return:
          type: Global.Sprite
      overload: Global.Tex2DSprite.Tex2DToSprite*
    - id: Global.Tex2DSprite.BlankTexture(System.Int32,System.Int32)
      commentId: M:Global.Tex2DSprite.BlankTexture(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: BlankTexture(int, int)
        VB: BlankTexture(Integer, Integer)
      nameWithType:
        CSharp: Tex2DSprite.BlankTexture(int, int)
        VB: Tex2DSprite.BlankTexture(Integer, Integer)
      qualifiedName:
        CSharp: Tex2DSprite.BlankTexture(int, int)
        VB: Tex2DSprite.BlankTexture(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: BlankTexture
        path: ''
        startLine: 430
      syntax:
        content:
          CSharp: public static Texture2D BlankTexture(int width, int height)
          VB: Public Shared Function BlankTexture(width As Integer, height As Integer) As Texture2D
        parameters:
        - id: width
          type: System.Int32
        - id: height
          type: System.Int32
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.BlankTexture*
    - id: Global.Tex2DSprite.SolidTexture(System.Int32,System.Int32,Color)
      commentId: M:Global.Tex2DSprite.SolidTexture(System.Int32,System.Int32,Color)
      language: CSharp
      name:
        CSharp: SolidTexture(int, int, Color)
        VB: SolidTexture(Integer, Integer, Color)
      nameWithType:
        CSharp: Tex2DSprite.SolidTexture(int, int, Color)
        VB: Tex2DSprite.SolidTexture(Integer, Integer, Color)
      qualifiedName:
        CSharp: Tex2DSprite.SolidTexture(int, int, Color)
        VB: Tex2DSprite.SolidTexture(Integer, Integer, Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SolidTexture
        path: ''
        startLine: 434
      syntax:
        content:
          CSharp: public static Texture2D SolidTexture(int width, int height, Color colour)
          VB: Public Shared Function SolidTexture(width As Integer, height As Integer, colour As Color) As Texture2D
        parameters:
        - id: width
          type: System.Int32
        - id: height
          type: System.Int32
        - id: colour
          type: Global.Color
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.SolidTexture*
    - id: Global.Tex2DSprite.CheckerboardBackground(System.Int32,System.Int32)
      commentId: M:Global.Tex2DSprite.CheckerboardBackground(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: CheckerboardBackground(int, int)
        VB: CheckerboardBackground(Integer, Integer)
      nameWithType:
        CSharp: Tex2DSprite.CheckerboardBackground(int, int)
        VB: Tex2DSprite.CheckerboardBackground(Integer, Integer)
      qualifiedName:
        CSharp: Tex2DSprite.CheckerboardBackground(int, int)
        VB: Tex2DSprite.CheckerboardBackground(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CheckerboardBackground
        path: ''
        startLine: 458
      syntax:
        content:
          CSharp: public static Texture2D CheckerboardBackground(int width, int height)
          VB: Public Shared Function CheckerboardBackground(width As Integer, height As Integer) As Texture2D
        parameters:
        - id: width
          type: System.Int32
        - id: height
          type: System.Int32
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.CheckerboardBackground*
    - id: Global.Tex2DSprite.HSLHueSaturationGrid(System.Int32,System.Int32)
      commentId: M:Global.Tex2DSprite.HSLHueSaturationGrid(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: HSLHueSaturationGrid(int, int)
        VB: HSLHueSaturationGrid(Integer, Integer)
      nameWithType:
        CSharp: Tex2DSprite.HSLHueSaturationGrid(int, int)
        VB: Tex2DSprite.HSLHueSaturationGrid(Integer, Integer)
      qualifiedName:
        CSharp: Tex2DSprite.HSLHueSaturationGrid(int, int)
        VB: Tex2DSprite.HSLHueSaturationGrid(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: HSLHueSaturationGrid
        path: ''
        startLine: 492
      syntax:
        content:
          CSharp: public static Texture2D HSLHueSaturationGrid(int width, int height)
          VB: Public Shared Function HSLHueSaturationGrid(width As Integer, height As Integer) As Texture2D
        parameters:
        - id: width
          type: System.Int32
        - id: height
          type: System.Int32
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.HSLHueSaturationGrid*
    - id: Global.Tex2DSprite.Flip(Texture2D,FlipDirection)
      commentId: M:Global.Tex2DSprite.Flip(Texture2D,FlipDirection)
      language: CSharp
      name:
        CSharp: Flip(Texture2D, FlipDirection)
        VB: Flip(Texture2D, FlipDirection)
      nameWithType:
        CSharp: Tex2DSprite.Flip(Texture2D, FlipDirection)
        VB: Tex2DSprite.Flip(Texture2D, FlipDirection)
      qualifiedName:
        CSharp: Tex2DSprite.Flip(Texture2D, FlipDirection)
        VB: Tex2DSprite.Flip(Texture2D, FlipDirection)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Flip
        path: ''
        startLine: 514
      syntax:
        content:
          CSharp: public static Texture2D Flip(Texture2D texture, FlipDirection direction)
          VB: Public Shared Function Flip(texture As Texture2D, direction As FlipDirection) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
        - id: direction
          type: Global.FlipDirection
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.Flip*
    - id: Global.Tex2DSprite.FlipX(Texture2D)
      commentId: M:Global.Tex2DSprite.FlipX(Texture2D)
      language: CSharp
      name:
        CSharp: FlipX(Texture2D)
        VB: FlipX(Texture2D)
      nameWithType:
        CSharp: Tex2DSprite.FlipX(Texture2D)
        VB: Tex2DSprite.FlipX(Texture2D)
      qualifiedName:
        CSharp: Tex2DSprite.FlipX(Texture2D)
        VB: Tex2DSprite.FlipX(Texture2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FlipX
        path: ''
        startLine: 534
      syntax:
        content:
          CSharp: public static Texture2D FlipX(Texture2D texture)
          VB: Public Shared Function FlipX(texture As Texture2D) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.FlipX*
    - id: Global.Tex2DSprite.FlipY(Texture2D)
      commentId: M:Global.Tex2DSprite.FlipY(Texture2D)
      language: CSharp
      name:
        CSharp: FlipY(Texture2D)
        VB: FlipY(Texture2D)
      nameWithType:
        CSharp: Tex2DSprite.FlipY(Texture2D)
        VB: Tex2DSprite.FlipY(Texture2D)
      qualifiedName:
        CSharp: Tex2DSprite.FlipY(Texture2D)
        VB: Tex2DSprite.FlipY(Texture2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FlipY
        path: ''
        startLine: 550
      syntax:
        content:
          CSharp: public static Texture2D FlipY(Texture2D texture)
          VB: Public Shared Function FlipY(texture As Texture2D) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.FlipY*
    - id: Global.Tex2DSprite.Rotate(Texture2D,RotationAngle)
      commentId: M:Global.Tex2DSprite.Rotate(Texture2D,RotationAngle)
      language: CSharp
      name:
        CSharp: Rotate(Texture2D, RotationAngle)
        VB: Rotate(Texture2D, RotationAngle)
      nameWithType:
        CSharp: Tex2DSprite.Rotate(Texture2D, RotationAngle)
        VB: Tex2DSprite.Rotate(Texture2D, RotationAngle)
      qualifiedName:
        CSharp: Tex2DSprite.Rotate(Texture2D, RotationAngle)
        VB: Tex2DSprite.Rotate(Texture2D, RotationAngle)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Rotate
        path: ''
        startLine: 569
      summary: "\nRotation is clockwise.\n"
      example: []
      syntax:
        content:
          CSharp: public static Texture2D Rotate(Texture2D texture, RotationAngle angle)
          VB: Public Shared Function Rotate(texture As Texture2D, angle As RotationAngle) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
        - id: angle
          type: Global.RotationAngle
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.Rotate*
    - id: Global.Tex2DSprite.Rotate90(Texture2D)
      commentId: M:Global.Tex2DSprite.Rotate90(Texture2D)
      language: CSharp
      name:
        CSharp: Rotate90(Texture2D)
        VB: Rotate90(Texture2D)
      nameWithType:
        CSharp: Tex2DSprite.Rotate90(Texture2D)
        VB: Tex2DSprite.Rotate90(Texture2D)
      qualifiedName:
        CSharp: Tex2DSprite.Rotate90(Texture2D)
        VB: Tex2DSprite.Rotate90(Texture2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Rotate90
        path: ''
        startLine: 596
      summary: "\nRotation is clockwise.\n"
      example: []
      syntax:
        content:
          CSharp: public static Texture2D Rotate90(Texture2D texture)
          VB: Public Shared Function Rotate90(texture As Texture2D) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.Rotate90*
    - id: Global.Tex2DSprite.RotateMinus90(Texture2D)
      commentId: M:Global.Tex2DSprite.RotateMinus90(Texture2D)
      language: CSharp
      name:
        CSharp: RotateMinus90(Texture2D)
        VB: RotateMinus90(Texture2D)
      nameWithType:
        CSharp: Tex2DSprite.RotateMinus90(Texture2D)
        VB: Tex2DSprite.RotateMinus90(Texture2D)
      qualifiedName:
        CSharp: Tex2DSprite.RotateMinus90(Texture2D)
        VB: Tex2DSprite.RotateMinus90(Texture2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RotateMinus90
        path: ''
        startLine: 615
      summary: "\nRotation is clockwise.\n"
      example: []
      syntax:
        content:
          CSharp: public static Texture2D RotateMinus90(Texture2D texture)
          VB: Public Shared Function RotateMinus90(texture As Texture2D) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.RotateMinus90*
    - id: Global.Tex2DSprite.Rotate180(Texture2D)
      commentId: M:Global.Tex2DSprite.Rotate180(Texture2D)
      language: CSharp
      name:
        CSharp: Rotate180(Texture2D)
        VB: Rotate180(Texture2D)
      nameWithType:
        CSharp: Tex2DSprite.Rotate180(Texture2D)
        VB: Tex2DSprite.Rotate180(Texture2D)
      qualifiedName:
        CSharp: Tex2DSprite.Rotate180(Texture2D)
        VB: Tex2DSprite.Rotate180(Texture2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Rotate180
        path: ''
        startLine: 631
      syntax:
        content:
          CSharp: public static Texture2D Rotate180(Texture2D texture)
          VB: Public Shared Function Rotate180(texture As Texture2D) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.Rotate180*
    - id: Global.Tex2DSprite.Offset(Texture2D,IntVector2)
      commentId: M:Global.Tex2DSprite.Offset(Texture2D,IntVector2)
      language: CSharp
      name:
        CSharp: Offset(Texture2D, IntVector2)
        VB: Offset(Texture2D, IntVector2)
      nameWithType:
        CSharp: Tex2DSprite.Offset(Texture2D, IntVector2)
        VB: Tex2DSprite.Offset(Texture2D, IntVector2)
      qualifiedName:
        CSharp: Tex2DSprite.Offset(Texture2D, IntVector2)
        VB: Tex2DSprite.Offset(Texture2D, IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset
        path: ''
        startLine: 647
      syntax:
        content:
          CSharp: public static Texture2D Offset(Texture2D texture, IntVector2 offset)
          VB: Public Shared Function Offset(texture As Texture2D, offset As IntVector2) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
        - id: offset
          type: Global.IntVector2
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.Offset*
    - id: Global.Tex2DSprite.Extend(Texture2D,System.Int32,System.Int32,System.Int32,System.Int32)
      commentId: M:Global.Tex2DSprite.Extend(Texture2D,System.Int32,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Extend(Texture2D, int, int, int, int)
        VB: Extend(Texture2D, Integer, Integer, Integer, Integer)
      nameWithType:
        CSharp: Tex2DSprite.Extend(Texture2D, int, int, int, int)
        VB: Tex2DSprite.Extend(Texture2D, Integer, Integer, Integer, Integer)
      qualifiedName:
        CSharp: Tex2DSprite.Extend(Texture2D, int, int, int, int)
        VB: Tex2DSprite.Extend(Texture2D, Integer, Integer, Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Extend
        path: ''
        startLine: 680
      summary: "\nAdds the given number of transparent pixels to each side of the texture. Negative amounts will crop the image.\n"
      example: []
      syntax:
        content:
          CSharp: public static Texture2D Extend(Texture2D texture, int left, int right, int up, int down)
          VB: Public Shared Function Extend(texture As Texture2D, left As Integer, right As Integer, up As Integer, down As Integer) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
          description: ''
        - id: left
          type: System.Int32
          description: ''
        - id: right
          type: System.Int32
          description: ''
        - id: up
          type: System.Int32
          description: ''
        - id: down
          type: System.Int32
          description: ''
        return:
          type: Global.Texture2D
          description: ''
      overload: Global.Tex2DSprite.Extend*
    - id: Global.Tex2DSprite.ChangeRect(Texture2D,IntRect)
      commentId: M:Global.Tex2DSprite.ChangeRect(Texture2D,IntRect)
      language: CSharp
      name:
        CSharp: ChangeRect(Texture2D, IntRect)
        VB: ChangeRect(Texture2D, IntRect)
      nameWithType:
        CSharp: Tex2DSprite.ChangeRect(Texture2D, IntRect)
        VB: Tex2DSprite.ChangeRect(Texture2D, IntRect)
      qualifiedName:
        CSharp: Tex2DSprite.ChangeRect(Texture2D, IntRect)
        VB: Tex2DSprite.ChangeRect(Texture2D, IntRect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ChangeRect
        path: ''
        startLine: 697
      summary: "\nChanges the dimensions of the texture to the new rect.\n"
      example: []
      syntax:
        content:
          CSharp: public static Texture2D ChangeRect(Texture2D texture, IntRect newRect)
          VB: Public Shared Function ChangeRect(texture As Texture2D, newRect As IntRect) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
          description: ''
        - id: newRect
          type: Global.IntRect
          description: The coords of the new rect relative to the coords of the old rect.
        return:
          type: Global.Texture2D
          description: ''
      overload: Global.Tex2DSprite.ChangeRect*
    - id: Global.Tex2DSprite.Blend(Texture2D,Texture2D,BlendMode)
      commentId: M:Global.Tex2DSprite.Blend(Texture2D,Texture2D,BlendMode)
      language: CSharp
      name:
        CSharp: Blend(Texture2D, Texture2D, BlendMode)
        VB: Blend(Texture2D, Texture2D, BlendMode)
      nameWithType:
        CSharp: Tex2DSprite.Blend(Texture2D, Texture2D, BlendMode)
        VB: Tex2DSprite.Blend(Texture2D, Texture2D, BlendMode)
      qualifiedName:
        CSharp: Tex2DSprite.Blend(Texture2D, Texture2D, BlendMode)
        VB: Tex2DSprite.Blend(Texture2D, Texture2D, BlendMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Blend
        path: ''
        startLine: 705
      summary: "\nOverlays topTex onto bottomTex using the given blend mode, placing the bottom-left corner on the bottom-left corner.\n"
      example: []
      syntax:
        content:
          CSharp: public static Texture2D Blend(Texture2D topTex, Texture2D bottomTex, BlendMode blendMode)
          VB: Public Shared Function Blend(topTex As Texture2D, bottomTex As Texture2D, blendMode As BlendMode) As Texture2D
        parameters:
        - id: topTex
          type: Global.Texture2D
        - id: bottomTex
          type: Global.Texture2D
        - id: blendMode
          type: Global.BlendMode
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.Blend*
    - id: Global.Tex2DSprite.Blend(Texture2D,Texture2D,IntVector2,BlendMode)
      commentId: M:Global.Tex2DSprite.Blend(Texture2D,Texture2D,IntVector2,BlendMode)
      language: CSharp
      name:
        CSharp: Blend(Texture2D, Texture2D, IntVector2, BlendMode)
        VB: Blend(Texture2D, Texture2D, IntVector2, BlendMode)
      nameWithType:
        CSharp: Tex2DSprite.Blend(Texture2D, Texture2D, IntVector2, BlendMode)
        VB: Tex2DSprite.Blend(Texture2D, Texture2D, IntVector2, BlendMode)
      qualifiedName:
        CSharp: Tex2DSprite.Blend(Texture2D, Texture2D, IntVector2, BlendMode)
        VB: Tex2DSprite.Blend(Texture2D, Texture2D, IntVector2, BlendMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Blend
        path: ''
        startLine: 712
      summary: "\nOverlays topTex onto bottomTex using the given blend mode, placing the bottom-left corner at the coordinates topTexOffset (which don&apos;t have to be within the image).\n"
      example: []
      syntax:
        content:
          CSharp: public static Texture2D Blend(Texture2D topTex, Texture2D bottomTex, IntVector2 topTexOffset, BlendMode blendMode)
          VB: Public Shared Function Blend(topTex As Texture2D, bottomTex As Texture2D, topTexOffset As IntVector2, blendMode As BlendMode) As Texture2D
        parameters:
        - id: topTex
          type: Global.Texture2D
        - id: bottomTex
          type: Global.Texture2D
        - id: topTexOffset
          type: Global.IntVector2
        - id: blendMode
          type: Global.BlendMode
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.Blend*
    - id: Global.Tex2DSprite.Blend(Color,Texture2D,BlendMode)
      commentId: M:Global.Tex2DSprite.Blend(Color,Texture2D,BlendMode)
      language: CSharp
      name:
        CSharp: Blend(Color, Texture2D, BlendMode)
        VB: Blend(Color, Texture2D, BlendMode)
      nameWithType:
        CSharp: Tex2DSprite.Blend(Color, Texture2D, BlendMode)
        VB: Tex2DSprite.Blend(Color, Texture2D, BlendMode)
      qualifiedName:
        CSharp: Tex2DSprite.Blend(Color, Texture2D, BlendMode)
        VB: Tex2DSprite.Blend(Color, Texture2D, BlendMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Blend
        path: ''
        startLine: 738
      summary: "\nOverlays topColour onto each pixel of bottomTex using the given blend mode.\n"
      example: []
      syntax:
        content:
          CSharp: public static Texture2D Blend(Color topColour, Texture2D bottomTex, BlendMode blendMode)
          VB: Public Shared Function Blend(topColour As Color, bottomTex As Texture2D, blendMode As BlendMode) As Texture2D
        parameters:
        - id: topColour
          type: Global.Color
        - id: bottomTex
          type: Global.Texture2D
        - id: blendMode
          type: Global.BlendMode
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.Blend*
    - id: Global.Tex2DSprite.Overlay(Texture2D,Texture2D)
      commentId: M:Global.Tex2DSprite.Overlay(Texture2D,Texture2D)
      language: CSharp
      name:
        CSharp: Overlay(Texture2D, Texture2D)
        VB: Overlay(Texture2D, Texture2D)
      nameWithType:
        CSharp: Tex2DSprite.Overlay(Texture2D, Texture2D)
        VB: Tex2DSprite.Overlay(Texture2D, Texture2D)
      qualifiedName:
        CSharp: Tex2DSprite.Overlay(Texture2D, Texture2D)
        VB: Tex2DSprite.Overlay(Texture2D, Texture2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Overlay
        path: ''
        startLine: 760
      summary: "\nOverlays topTex onto bottomTex, placing the bottom-left corner on the bottom-left corner. Uses Normal blend mode.\n"
      example: []
      syntax:
        content:
          CSharp: public static Texture2D Overlay(Texture2D topTex, Texture2D bottomTex)
          VB: Public Shared Function Overlay(topTex As Texture2D, bottomTex As Texture2D) As Texture2D
        parameters:
        - id: topTex
          type: Global.Texture2D
          description: ''
        - id: bottomTex
          type: Global.Texture2D
          description: ''
        return:
          type: Global.Texture2D
          description: ''
      overload: Global.Tex2DSprite.Overlay*
    - id: Global.Tex2DSprite.Overlay(Texture2D,Texture2D,IntVector2)
      commentId: M:Global.Tex2DSprite.Overlay(Texture2D,Texture2D,IntVector2)
      language: CSharp
      name:
        CSharp: Overlay(Texture2D, Texture2D, IntVector2)
        VB: Overlay(Texture2D, Texture2D, IntVector2)
      nameWithType:
        CSharp: Tex2DSprite.Overlay(Texture2D, Texture2D, IntVector2)
        VB: Tex2DSprite.Overlay(Texture2D, Texture2D, IntVector2)
      qualifiedName:
        CSharp: Tex2DSprite.Overlay(Texture2D, Texture2D, IntVector2)
        VB: Tex2DSprite.Overlay(Texture2D, Texture2D, IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Overlay
        path: ''
        startLine: 770
      summary: "\nOverlays topTex onto bottomTex, placing the bottom-left corner at the coordinates topTexOffset (which don&apos;t have to be within the image). Uses Normal blend mode.\n"
      example: []
      syntax:
        content:
          CSharp: public static Texture2D Overlay(Texture2D topTex, Texture2D bottomTex, IntVector2 topTexOffset)
          VB: Public Shared Function Overlay(topTex As Texture2D, bottomTex As Texture2D, topTexOffset As IntVector2) As Texture2D
        parameters:
        - id: topTex
          type: Global.Texture2D
          description: ''
        - id: bottomTex
          type: Global.Texture2D
          description: ''
        - id: topTexOffset
          type: Global.IntVector2
        return:
          type: Global.Texture2D
          description: ''
      overload: Global.Tex2DSprite.Overlay*
    - id: Global.Tex2DSprite.Multiply(Texture2D,Color)
      commentId: M:Global.Tex2DSprite.Multiply(Texture2D,Color)
      language: CSharp
      name:
        CSharp: Multiply(Texture2D, Color)
        VB: Multiply(Texture2D, Color)
      nameWithType:
        CSharp: Tex2DSprite.Multiply(Texture2D, Color)
        VB: Tex2DSprite.Multiply(Texture2D, Color)
      qualifiedName:
        CSharp: Tex2DSprite.Multiply(Texture2D, Color)
        VB: Tex2DSprite.Multiply(Texture2D, Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Multiply
        path: ''
        startLine: 775
      syntax:
        content:
          CSharp: public static Texture2D Multiply(Texture2D texture, Color colour)
          VB: Public Shared Function Multiply(texture As Texture2D, colour As Color) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
        - id: colour
          type: Global.Color
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.Multiply*
    - id: Global.Tex2DSprite.Scale(Texture2D,System.Single)
      commentId: M:Global.Tex2DSprite.Scale(Texture2D,System.Single)
      language: CSharp
      name:
        CSharp: Scale(Texture2D, float)
        VB: Scale(Texture2D, Single)
      nameWithType:
        CSharp: Tex2DSprite.Scale(Texture2D, float)
        VB: Tex2DSprite.Scale(Texture2D, Single)
      qualifiedName:
        CSharp: Tex2DSprite.Scale(Texture2D, float)
        VB: Tex2DSprite.Scale(Texture2D, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Scale
        path: ''
        startLine: 789
      syntax:
        content:
          CSharp: public static Texture2D Scale(Texture2D texture, float scaleFactor)
          VB: Public Shared Function Scale(texture As Texture2D, scaleFactor As Single) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
        - id: scaleFactor
          type: System.Single
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.Scale*
    - id: Global.Tex2DSprite.Scale(Texture2D,System.Single,System.Single)
      commentId: M:Global.Tex2DSprite.Scale(Texture2D,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: Scale(Texture2D, float, float)
        VB: Scale(Texture2D, Single, Single)
      nameWithType:
        CSharp: Tex2DSprite.Scale(Texture2D, float, float)
        VB: Tex2DSprite.Scale(Texture2D, Single, Single)
      qualifiedName:
        CSharp: Tex2DSprite.Scale(Texture2D, float, float)
        VB: Tex2DSprite.Scale(Texture2D, Single, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Scale
        path: ''
        startLine: 798
      syntax:
        content:
          CSharp: public static Texture2D Scale(Texture2D texture, float xScaleFactor, float yScaleFactor)
          VB: Public Shared Function Scale(texture As Texture2D, xScaleFactor As Single, yScaleFactor As Single) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
        - id: xScaleFactor
          type: System.Single
        - id: yScaleFactor
          type: System.Single
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.Scale*
    - id: Global.Tex2DSprite.Scale(Texture2D,System.Int32,System.Int32)
      commentId: M:Global.Tex2DSprite.Scale(Texture2D,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Scale(Texture2D, int, int)
        VB: Scale(Texture2D, Integer, Integer)
      nameWithType:
        CSharp: Tex2DSprite.Scale(Texture2D, int, int)
        VB: Tex2DSprite.Scale(Texture2D, Integer, Integer)
      qualifiedName:
        CSharp: Tex2DSprite.Scale(Texture2D, int, int)
        VB: Tex2DSprite.Scale(Texture2D, Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Scale
        path: ''
        startLine: 811
      syntax:
        content:
          CSharp: public static Texture2D Scale(Texture2D texture, int newWidth, int newHeight)
          VB: Public Shared Function Scale(texture As Texture2D, newWidth As Integer, newHeight As Integer) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
        - id: newWidth
          type: System.Int32
        - id: newHeight
          type: System.Int32
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.Scale*
    - id: Global.Tex2DSprite.Subtract(Texture2D,Texture2D)
      commentId: M:Global.Tex2DSprite.Subtract(Texture2D,Texture2D)
      language: CSharp
      name:
        CSharp: Subtract(Texture2D, Texture2D)
        VB: Subtract(Texture2D, Texture2D)
      nameWithType:
        CSharp: Tex2DSprite.Subtract(Texture2D, Texture2D)
        VB: Tex2DSprite.Subtract(Texture2D, Texture2D)
      qualifiedName:
        CSharp: Tex2DSprite.Subtract(Texture2D, Texture2D)
        VB: Tex2DSprite.Subtract(Texture2D, Texture2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Subtract
        path: ''
        startLine: 834
      syntax:
        content:
          CSharp: public static Texture2D Subtract(Texture2D topTex, Texture2D bottomTex)
          VB: Public Shared Function Subtract(topTex As Texture2D, bottomTex As Texture2D) As Texture2D
        parameters:
        - id: topTex
          type: Global.Texture2D
        - id: bottomTex
          type: Global.Texture2D
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.Subtract*
    - id: Global.Tex2DSprite.ApplyMask(Texture2D,Texture2D)
      commentId: M:Global.Tex2DSprite.ApplyMask(Texture2D,Texture2D)
      language: CSharp
      name:
        CSharp: ApplyMask(Texture2D, Texture2D)
        VB: ApplyMask(Texture2D, Texture2D)
      nameWithType:
        CSharp: Tex2DSprite.ApplyMask(Texture2D, Texture2D)
        VB: Tex2DSprite.ApplyMask(Texture2D, Texture2D)
      qualifiedName:
        CSharp: Tex2DSprite.ApplyMask(Texture2D, Texture2D)
        VB: Tex2DSprite.ApplyMask(Texture2D, Texture2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ApplyMask
        path: ''
        startLine: 855
      syntax:
        content:
          CSharp: public static Texture2D ApplyMask(Texture2D texture, Texture2D mask)
          VB: Public Shared Function ApplyMask(texture As Texture2D, mask As Texture2D) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
        - id: mask
          type: Global.Texture2D
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.ApplyMask*
    - id: Global.Tex2DSprite.ApplyMask(Texture2D,IntVector2[])
      commentId: M:Global.Tex2DSprite.ApplyMask(Texture2D,IntVector2[])
      language: CSharp
      name:
        CSharp: ApplyMask(Texture2D, IntVector2[])
        VB: ApplyMask(Texture2D, IntVector2())
      nameWithType:
        CSharp: Tex2DSprite.ApplyMask(Texture2D, IntVector2[])
        VB: Tex2DSprite.ApplyMask(Texture2D, IntVector2())
      qualifiedName:
        CSharp: Tex2DSprite.ApplyMask(Texture2D, IntVector2[])
        VB: Tex2DSprite.ApplyMask(Texture2D, IntVector2())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ApplyMask
        path: ''
        startLine: 882
      syntax:
        content:
          CSharp: public static Texture2D ApplyMask(Texture2D texture, IntVector2[] mask)
          VB: Public Shared Function ApplyMask(texture As Texture2D, mask As IntVector2()) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
        - id: mask
          type: Global.IntVector2[]
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.ApplyMask*
    - id: Global.Tex2DSprite.Fill(Texture2D,IntVector2,Color,System.Int32)
      commentId: M:Global.Tex2DSprite.Fill(Texture2D,IntVector2,Color,System.Int32)
      language: CSharp
      name:
        CSharp: Fill(Texture2D, IntVector2, Color, int)
        VB: Fill(Texture2D, IntVector2, Color, Integer)
      nameWithType:
        CSharp: Tex2DSprite.Fill(Texture2D, IntVector2, Color, int)
        VB: Tex2DSprite.Fill(Texture2D, IntVector2, Color, Integer)
      qualifiedName:
        CSharp: Tex2DSprite.Fill(Texture2D, IntVector2, Color, int)
        VB: Tex2DSprite.Fill(Texture2D, IntVector2, Color, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Fill
        path: ''
        startLine: 905
      syntax:
        content:
          CSharp: public static Texture2D Fill(Texture2D texture, IntVector2 startPoint, Color colour, int maxNumOfIterations = 1000000)
          VB: Public Shared Function Fill(texture As Texture2D, startPoint As IntVector2, colour As Color, maxNumOfIterations As Integer = 1000000) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
        - id: startPoint
          type: Global.IntVector2
        - id: colour
          type: Global.Color
        - id: maxNumOfIterations
          type: System.Int32
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.Fill*
    - id: Global.Tex2DSprite.GetFillMask(Texture2D,IntVector2,System.Int32)
      commentId: M:Global.Tex2DSprite.GetFillMask(Texture2D,IntVector2,System.Int32)
      language: CSharp
      name:
        CSharp: GetFillMask(Texture2D, IntVector2, int)
        VB: GetFillMask(Texture2D, IntVector2, Integer)
      nameWithType:
        CSharp: Tex2DSprite.GetFillMask(Texture2D, IntVector2, int)
        VB: Tex2DSprite.GetFillMask(Texture2D, IntVector2, Integer)
      qualifiedName:
        CSharp: Tex2DSprite.GetFillMask(Texture2D, IntVector2, int)
        VB: Tex2DSprite.GetFillMask(Texture2D, IntVector2, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetFillMask
        path: ''
        startLine: 918
      syntax:
        content:
          CSharp: public static Texture2D GetFillMask(Texture2D texture, IntVector2 startPoint, int maxNumOfIterations = 100000)
          VB: Public Shared Function GetFillMask(texture As Texture2D, startPoint As IntVector2, maxNumOfIterations As Integer = 100000) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
        - id: startPoint
          type: Global.IntVector2
        - id: maxNumOfIterations
          type: System.Int32
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.GetFillMask*
    - id: Global.Tex2DSprite.GetPixelsToFill(Texture2D,IntVector2,System.Int32)
      commentId: M:Global.Tex2DSprite.GetPixelsToFill(Texture2D,IntVector2,System.Int32)
      language: CSharp
      name:
        CSharp: GetPixelsToFill(Texture2D, IntVector2, int)
        VB: GetPixelsToFill(Texture2D, IntVector2, Integer)
      nameWithType:
        CSharp: Tex2DSprite.GetPixelsToFill(Texture2D, IntVector2, int)
        VB: Tex2DSprite.GetPixelsToFill(Texture2D, IntVector2, Integer)
      qualifiedName:
        CSharp: Tex2DSprite.GetPixelsToFill(Texture2D, IntVector2, int)
        VB: Tex2DSprite.GetPixelsToFill(Texture2D, IntVector2, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetPixelsToFill
        path: ''
        startLine: 931
      syntax:
        content:
          CSharp: public static IntVector2[] GetPixelsToFill(Texture2D texture, IntVector2 startPoint, int maxNumOfIterations = 100000)
          VB: Public Shared Function GetPixelsToFill(texture As Texture2D, startPoint As IntVector2, maxNumOfIterations As Integer = 100000) As IntVector2()
        parameters:
        - id: texture
          type: Global.Texture2D
        - id: startPoint
          type: Global.IntVector2
        - id: maxNumOfIterations
          type: System.Int32
        return:
          type: Global.IntVector2[]
      overload: Global.Tex2DSprite.GetPixelsToFill*
    - id: Global.Tex2DSprite.Copy(Texture2D)
      commentId: M:Global.Tex2DSprite.Copy(Texture2D)
      language: CSharp
      name:
        CSharp: Copy(Texture2D)
        VB: Copy(Texture2D)
      nameWithType:
        CSharp: Tex2DSprite.Copy(Texture2D)
        VB: Tex2DSprite.Copy(Texture2D)
      qualifiedName:
        CSharp: Tex2DSprite.Copy(Texture2D)
        VB: Tex2DSprite.Copy(Texture2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Copy
        path: ''
        startLine: 964
      syntax:
        content:
          CSharp: public static Texture2D Copy(Texture2D texture)
          VB: Public Shared Function Copy(texture As Texture2D) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.Copy*
    - id: Global.Tex2DSprite.LoadFromFile(System.String)
      commentId: M:Global.Tex2DSprite.LoadFromFile(System.String)
      language: CSharp
      name:
        CSharp: LoadFromFile(string)
        VB: LoadFromFile(String)
      nameWithType:
        CSharp: Tex2DSprite.LoadFromFile(string)
        VB: Tex2DSprite.LoadFromFile(String)
      qualifiedName:
        CSharp: Tex2DSprite.LoadFromFile(string)
        VB: Tex2DSprite.LoadFromFile(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LoadFromFile
        path: ''
        startLine: 980
      syntax:
        content:
          CSharp: public static Texture2D LoadFromFile(string filePath)
          VB: Public Shared Function LoadFromFile(filePath As String) As Texture2D
        parameters:
        - id: filePath
          type: System.String
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.LoadFromFile*
    - id: Global.Tex2DSprite.Outline(Texture2D,Color,System.Boolean,OutlineSideFill)
      commentId: M:Global.Tex2DSprite.Outline(Texture2D,Color,System.Boolean,OutlineSideFill)
      language: CSharp
      name:
        CSharp: Outline(Texture2D, Color, bool, OutlineSideFill)
        VB: Outline(Texture2D, Color, Boolean, OutlineSideFill)
      nameWithType:
        CSharp: Tex2DSprite.Outline(Texture2D, Color, bool, OutlineSideFill)
        VB: Tex2DSprite.Outline(Texture2D, Color, Boolean, OutlineSideFill)
      qualifiedName:
        CSharp: Tex2DSprite.Outline(Texture2D, Color, bool, OutlineSideFill)
        VB: Tex2DSprite.Outline(Texture2D, Color, Boolean, OutlineSideFill)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Outline
        path: ''
        startLine: 1002
      summary: "\nMakes an outline around the non-transparent pixels of the given texture.\n"
      example: []
      syntax:
        content:
          CSharp: public static Texture2D Outline(Texture2D texture, Color outlineColour, bool outlineOutside, OutlineSideFill outlineSideFill)
          VB: Public Shared Function Outline(texture As Texture2D, outlineColour As Color, outlineOutside As Boolean, outlineSideFill As OutlineSideFill) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
          description: ''
        - id: outlineColour
          type: Global.Color
          description: ''
        - id: outlineOutside
          type: System.Boolean
          description: 'When true: the outline is created next to existing pixels (widens the sprite). When false: replaces the outer pixels.'
        - id: outlineSideFill
          type: Global.OutlineSideFill
        return:
          type: Global.Texture2D
          description: ''
      overload: Global.Tex2DSprite.Outline*
    - id: Global.Tex2DSprite.ReplaceColour(Texture2D,Color,Color)
      commentId: M:Global.Tex2DSprite.ReplaceColour(Texture2D,Color,Color)
      language: CSharp
      name:
        CSharp: ReplaceColour(Texture2D, Color, Color)
        VB: ReplaceColour(Texture2D, Color, Color)
      nameWithType:
        CSharp: Tex2DSprite.ReplaceColour(Texture2D, Color, Color)
        VB: Tex2DSprite.ReplaceColour(Texture2D, Color, Color)
      qualifiedName:
        CSharp: Tex2DSprite.ReplaceColour(Texture2D, Color, Color)
        VB: Tex2DSprite.ReplaceColour(Texture2D, Color, Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ReplaceColour
        path: ''
        startLine: 1080
      syntax:
        content:
          CSharp: public static Texture2D ReplaceColour(Texture2D texture, Color toReplace, Color replaceWith)
          VB: Public Shared Function ReplaceColour(texture As Texture2D, toReplace As Color, replaceWith As Color) As Texture2D
        parameters:
        - id: texture
          type: Global.Texture2D
        - id: toReplace
          type: Global.Color
        - id: replaceWith
          type: Global.Color
        return:
          type: Global.Texture2D
      overload: Global.Tex2DSprite.ReplaceColour*
    - isExtensionMethod: true
      id: Global.Tex2DSprite.ContainsPixel(Texture2D,System.Int32,System.Int32)
      commentId: M:Global.Tex2DSprite.ContainsPixel(Texture2D,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: ContainsPixel(Texture2D, int, int)
        VB: ContainsPixel(Texture2D, Integer, Integer)
      nameWithType:
        CSharp: Tex2DSprite.ContainsPixel(Texture2D, int, int)
        VB: Tex2DSprite.ContainsPixel(Texture2D, Integer, Integer)
      qualifiedName:
        CSharp: Tex2DSprite.ContainsPixel(Texture2D, int, int)
        VB: Tex2DSprite.ContainsPixel(Texture2D, Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ContainsPixel
        path: ''
        startLine: 1104
      syntax:
        content:
          CSharp: public static bool ContainsPixel(this Texture2D texture, int x, int y)
          VB: Public Shared Function ContainsPixel(texture As Texture2D, x As Integer, y As Integer) As Boolean
        parameters:
        - id: texture
          type: Global.Texture2D
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
        return:
          type: System.Boolean
      overload: Global.Tex2DSprite.ContainsPixel*
    - isExtensionMethod: true
      id: Global.Tex2DSprite.ContainsPixel(Texture2D,IntVector2)
      commentId: M:Global.Tex2DSprite.ContainsPixel(Texture2D,IntVector2)
      language: CSharp
      name:
        CSharp: ContainsPixel(Texture2D, IntVector2)
        VB: ContainsPixel(Texture2D, IntVector2)
      nameWithType:
        CSharp: Tex2DSprite.ContainsPixel(Texture2D, IntVector2)
        VB: Tex2DSprite.ContainsPixel(Texture2D, IntVector2)
      qualifiedName:
        CSharp: Tex2DSprite.ContainsPixel(Texture2D, IntVector2)
        VB: Tex2DSprite.ContainsPixel(Texture2D, IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ContainsPixel
        path: ''
        startLine: 1108
      syntax:
        content:
          CSharp: public static bool ContainsPixel(this Texture2D texture, IntVector2 pixel)
          VB: Public Shared Function ContainsPixel(texture As Texture2D, pixel As IntVector2) As Boolean
        parameters:
        - id: texture
          type: Global.Texture2D
        - id: pixel
          type: Global.IntVector2
        return:
          type: System.Boolean
      overload: Global.Tex2DSprite.ContainsPixel*
    - isExtensionMethod: true
      id: Global.Tex2DSprite.SetPixel(Texture2D,IntVector2,Color)
      commentId: M:Global.Tex2DSprite.SetPixel(Texture2D,IntVector2,Color)
      language: CSharp
      name:
        CSharp: SetPixel(Texture2D, IntVector2, Color)
        VB: SetPixel(Texture2D, IntVector2, Color)
      nameWithType:
        CSharp: Tex2DSprite.SetPixel(Texture2D, IntVector2, Color)
        VB: Tex2DSprite.SetPixel(Texture2D, IntVector2, Color)
      qualifiedName:
        CSharp: Tex2DSprite.SetPixel(Texture2D, IntVector2, Color)
        VB: Tex2DSprite.SetPixel(Texture2D, IntVector2, Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetPixel
        path: ''
        startLine: 1113
      syntax:
        content:
          CSharp: public static void SetPixel(this Texture2D texture, IntVector2 coords, Color colour)
          VB: Public Shared Sub SetPixel(texture As Texture2D, coords As IntVector2, colour As Color)
        parameters:
        - id: texture
          type: Global.Texture2D
        - id: coords
          type: Global.IntVector2
        - id: colour
          type: Global.Color
      overload: Global.Tex2DSprite.SetPixel*
    - isExtensionMethod: true
      id: Global.Tex2DSprite.GetPixel(Texture2D,IntVector2)
      commentId: M:Global.Tex2DSprite.GetPixel(Texture2D,IntVector2)
      language: CSharp
      name:
        CSharp: GetPixel(Texture2D, IntVector2)
        VB: GetPixel(Texture2D, IntVector2)
      nameWithType:
        CSharp: Tex2DSprite.GetPixel(Texture2D, IntVector2)
        VB: Tex2DSprite.GetPixel(Texture2D, IntVector2)
      qualifiedName:
        CSharp: Tex2DSprite.GetPixel(Texture2D, IntVector2)
        VB: Tex2DSprite.GetPixel(Texture2D, IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetPixel
        path: ''
        startLine: 1117
      syntax:
        content:
          CSharp: public static Color GetPixel(this Texture2D texture, IntVector2 coords)
          VB: Public Shared Function GetPixel(texture As Texture2D, coords As IntVector2) As Color
        parameters:
        - id: texture
          type: Global.Texture2D
        - id: coords
          type: Global.IntVector2
        return:
          type: Global.Color
      overload: Global.Tex2DSprite.GetPixel*
  - id: Global.AnimationKeyFrame
    commentId: T:Global.AnimationKeyFrame
    language: CSharp
    name:
      CSharp: AnimationKeyFrame
      VB: AnimationKeyFrame
    nameWithType:
      CSharp: AnimationKeyFrame
      VB: AnimationKeyFrame
    qualifiedName:
      CSharp: AnimationKeyFrame
      VB: AnimationKeyFrame
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: AnimationKeyFrame
      path: ''
      startLine: 1130
    summary: "\nA class representing a single keyframe for a layer.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class AnimationKeyFrame : IJSONable'
        VB: Public Class AnimationKeyFrame Implements IJSONable
    inheritance:
    - System.Object
    implements:
    - Global.IJSONable
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.AnimationKeyFrame.frame
      commentId: F:Global.AnimationKeyFrame.frame
      language: CSharp
      name:
        CSharp: frame
        VB: frame
      nameWithType:
        CSharp: AnimationKeyFrame.frame
        VB: AnimationKeyFrame.frame
      qualifiedName:
        CSharp: AnimationKeyFrame.frame
        VB: AnimationKeyFrame.frame
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: frame
        path: ''
        startLine: 1133
      summary: The number of the frame this keyframe is on.
      example: []
      syntax:
        content:
          CSharp: public int frame
          VB: Public frame As Integer
        return:
          type: System.Int32
    - id: Global.AnimationKeyFrame.texture
      commentId: F:Global.AnimationKeyFrame.texture
      language: CSharp
      name:
        CSharp: texture
        VB: texture
      nameWithType:
        CSharp: AnimationKeyFrame.texture
        VB: AnimationKeyFrame.texture
      qualifiedName:
        CSharp: AnimationKeyFrame.texture
        VB: AnimationKeyFrame.texture
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: texture
        path: ''
        startLine: 1135
      summary: The texture displayed at this keyframe.
      example: []
      syntax:
        content:
          CSharp: public Texture2D texture
          VB: Public texture As Texture2D
        return:
          type: Global.Texture2D
    - id: Global.AnimationKeyFrame.#ctor(System.Int32,Texture2D)
      commentId: M:Global.AnimationKeyFrame.#ctor(System.Int32,Texture2D)
      language: CSharp
      name:
        CSharp: AnimationKeyFrame(int, Texture2D)
        VB: New(Integer, Texture2D)
      nameWithType:
        CSharp: AnimationKeyFrame.AnimationKeyFrame(int, Texture2D)
        VB: AnimationKeyFrame.New(Integer, Texture2D)
      qualifiedName:
        CSharp: AnimationKeyFrame.AnimationKeyFrame(int, Texture2D)
        VB: AnimationKeyFrame.New(Integer, Texture2D)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 1137
      syntax:
        content:
          CSharp: public AnimationKeyFrame(int frame, Texture2D texture)
          VB: Public Sub New(frame As Integer, texture As Texture2D)
        parameters:
        - id: frame
          type: System.Int32
        - id: texture
          type: Global.Texture2D
      overload: Global.AnimationKeyFrame.#ctor*
    - id: Global.AnimationKeyFrame.#ctor(AnimationKeyFrame)
      commentId: M:Global.AnimationKeyFrame.#ctor(AnimationKeyFrame)
      language: CSharp
      name:
        CSharp: AnimationKeyFrame(AnimationKeyFrame)
        VB: New(AnimationKeyFrame)
      nameWithType:
        CSharp: AnimationKeyFrame.AnimationKeyFrame(AnimationKeyFrame)
        VB: AnimationKeyFrame.New(AnimationKeyFrame)
      qualifiedName:
        CSharp: AnimationKeyFrame.AnimationKeyFrame(AnimationKeyFrame)
        VB: AnimationKeyFrame.New(AnimationKeyFrame)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 1151
      summary: "\nCreates a deep copy of the AnimationKeyFrame.\n"
      example: []
      syntax:
        content:
          CSharp: public AnimationKeyFrame(AnimationKeyFrame animationKeyFrame)
          VB: Public Sub New(animationKeyFrame As AnimationKeyFrame)
        parameters:
        - id: animationKeyFrame
          type: Global.AnimationKeyFrame
      overload: Global.AnimationKeyFrame.#ctor*
    - id: Global.AnimationKeyFrame.DeepCopy
      commentId: M:Global.AnimationKeyFrame.DeepCopy
      language: CSharp
      name:
        CSharp: DeepCopy()
        VB: DeepCopy()
      nameWithType:
        CSharp: AnimationKeyFrame.DeepCopy()
        VB: AnimationKeyFrame.DeepCopy()
      qualifiedName:
        CSharp: AnimationKeyFrame.DeepCopy()
        VB: AnimationKeyFrame.DeepCopy()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeepCopy
        path: ''
        startLine: 1156
      summary: "\nCreates a deep copy of the AnimationKeyFrame.\n"
      example: []
      syntax:
        content:
          CSharp: public AnimationKeyFrame DeepCopy()
          VB: Public Function DeepCopy() As AnimationKeyFrame
        return:
          type: Global.AnimationKeyFrame
      overload: Global.AnimationKeyFrame.DeepCopy*
    - id: Global.AnimationKeyFrame.ToJSON
      commentId: M:Global.AnimationKeyFrame.ToJSON
      language: CSharp
      name:
        CSharp: ToJSON()
        VB: ToJSON()
      nameWithType:
        CSharp: AnimationKeyFrame.ToJSON()
        VB: AnimationKeyFrame.ToJSON()
      qualifiedName:
        CSharp: AnimationKeyFrame.ToJSON()
        VB: AnimationKeyFrame.ToJSON()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToJSON
        path: ''
        startLine: 1161
      syntax:
        content:
          CSharp: public JSON ToJSON()
          VB: Public Function ToJSON() As JSON
        return:
          type: Global.JSON
      overload: Global.AnimationKeyFrame.ToJSON*
      implements:
      - Global.IJSONable.ToJSON
    - id: Global.AnimationKeyFrame.FromJSON(JSON)
      commentId: M:Global.AnimationKeyFrame.FromJSON(JSON)
      language: CSharp
      name:
        CSharp: FromJSON(JSON)
        VB: FromJSON(JSON)
      nameWithType:
        CSharp: AnimationKeyFrame.FromJSON(JSON)
        VB: AnimationKeyFrame.FromJSON(JSON)
      qualifiedName:
        CSharp: AnimationKeyFrame.FromJSON(JSON)
        VB: AnimationKeyFrame.FromJSON(JSON)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FromJSON
        path: ''
        startLine: 1184
      syntax:
        content:
          CSharp: public static AnimationKeyFrame FromJSON(JSON json)
          VB: Public Shared Function FromJSON(json As JSON) As AnimationKeyFrame
        parameters:
        - id: json
          type: Global.JSON
        return:
          type: Global.AnimationKeyFrame
      overload: Global.AnimationKeyFrame.FromJSON*
  - id: Global.AnimationManager
    commentId: T:Global.AnimationManager
    language: CSharp
    name:
      CSharp: AnimationManager
      VB: AnimationManager
    nameWithType:
      CSharp: AnimationManager
      VB: AnimationManager
    qualifiedName:
      CSharp: AnimationManager
      VB: AnimationManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: AnimationManager
      path: ''
      startLine: 1223
    summary: "\nHandles the animation timeline and playback of animations.\nThe animation system is still a work in progress.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class AnimationManager : MonoBehaviour'
        VB: Public Class AnimationManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.AnimationManager.currentFrameIndex
      commentId: P:Global.AnimationManager.currentFrameIndex
      language: CSharp
      name:
        CSharp: currentFrameIndex
        VB: currentFrameIndex
      nameWithType:
        CSharp: AnimationManager.currentFrameIndex
        VB: AnimationManager.currentFrameIndex
      qualifiedName:
        CSharp: AnimationManager.currentFrameIndex
        VB: AnimationManager.currentFrameIndex
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: currentFrameIndex
        path: ''
        startLine: 1230
      summary: The number of the frame currently being displayed.
      example: []
      syntax:
        content:
          CSharp: public int currentFrameIndex { get; set; }
          VB: Public Property currentFrameIndex As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.AnimationManager.currentFrameIndex*
    - id: Global.AnimationManager.framerate
      commentId: F:Global.AnimationManager.framerate
      language: CSharp
      name:
        CSharp: framerate
        VB: framerate
      nameWithType:
        CSharp: AnimationManager.framerate
        VB: AnimationManager.framerate
      qualifiedName:
        CSharp: AnimationManager.framerate
        VB: AnimationManager.framerate
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: framerate
        path: ''
        startLine: 1245
      syntax:
        content:
          CSharp: public int framerate
          VB: Public framerate As Integer
        return:
          type: System.Int32
    - id: Global.AnimationManager.showOnionSkin
      commentId: F:Global.AnimationManager.showOnionSkin
      language: CSharp
      name:
        CSharp: showOnionSkin
        VB: showOnionSkin
      nameWithType:
        CSharp: AnimationManager.showOnionSkin
        VB: AnimationManager.showOnionSkin
      qualifiedName:
        CSharp: AnimationManager.showOnionSkin
        VB: AnimationManager.showOnionSkin
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: showOnionSkin
        path: ''
        startLine: 1248
      syntax:
        content:
          CSharp: public bool showOnionSkin
          VB: Public showOnionSkin As Boolean
        return:
          type: System.Boolean
    - id: Global.AnimationManager.onionSkinColour
      commentId: F:Global.AnimationManager.onionSkinColour
      language: CSharp
      name:
        CSharp: onionSkinColour
        VB: onionSkinColour
      nameWithType:
        CSharp: AnimationManager.onionSkinColour
        VB: AnimationManager.onionSkinColour
      qualifiedName:
        CSharp: AnimationManager.onionSkinColour
        VB: AnimationManager.onionSkinColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: onionSkinColour
        path: ''
        startLine: 1250
      syntax:
        content:
          CSharp: public Color onionSkinColour
          VB: Public onionSkinColour As Color
        return:
          type: Global.Color
    - id: Global.AnimationManager.Play
      commentId: M:Global.AnimationManager.Play
      language: CSharp
      name:
        CSharp: Play()
        VB: Play()
      nameWithType:
        CSharp: AnimationManager.Play()
        VB: AnimationManager.Play()
      qualifiedName:
        CSharp: AnimationManager.Play()
        VB: AnimationManager.Play()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Play
        path: ''
        startLine: 1453
      summary: "\nStarts/resumes the animation playback.\n"
      example: []
      syntax:
        content:
          CSharp: public void Play()
          VB: Public Sub Play()
      overload: Global.AnimationManager.Play*
    - id: Global.AnimationManager.Pause
      commentId: M:Global.AnimationManager.Pause
      language: CSharp
      name:
        CSharp: Pause()
        VB: Pause()
      nameWithType:
        CSharp: AnimationManager.Pause()
        VB: AnimationManager.Pause()
      qualifiedName:
        CSharp: AnimationManager.Pause()
        VB: AnimationManager.Pause()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Pause
        path: ''
        startLine: 1461
      summary: "\nPauses the animation playback.\n"
      example: []
      syntax:
        content:
          CSharp: public void Pause()
          VB: Public Sub Pause()
      overload: Global.AnimationManager.Pause*
    - id: Global.AnimationManager.Stop
      commentId: M:Global.AnimationManager.Stop
      language: CSharp
      name:
        CSharp: Stop()
        VB: Stop()
      nameWithType:
        CSharp: AnimationManager.Stop()
        VB: AnimationManager.Stop()
      qualifiedName:
        CSharp: AnimationManager.Stop()
        VB: AnimationManager.Stop()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Stop
        path: ''
        startLine: 1469
      summary: "\nStops the animation playback and resets the current frame number back to the start.\n"
      example: []
      syntax:
        content:
          CSharp: public void Stop()
          VB: Public Sub [Stop]()
      overload: Global.AnimationManager.Stop*
    - id: Global.AnimationManager.AddKeyFrame
      commentId: M:Global.AnimationManager.AddKeyFrame
      language: CSharp
      name:
        CSharp: AddKeyFrame()
        VB: AddKeyFrame()
      nameWithType:
        CSharp: AnimationManager.AddKeyFrame()
        VB: AnimationManager.AddKeyFrame()
      qualifiedName:
        CSharp: AnimationManager.AddKeyFrame()
        VB: AnimationManager.AddKeyFrame()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddKeyFrame
        path: ''
        startLine: 1598
      summary: "\nExtends the length of the animation by adding one frame to the end.\n"
      example: []
      syntax:
        content:
          CSharp: public void AddKeyFrame()
          VB: Public Sub AddKeyFrame()
      overload: Global.AnimationManager.AddKeyFrame*
    - id: Global.AnimationManager.RemoveKeyFrame
      commentId: M:Global.AnimationManager.RemoveKeyFrame
      language: CSharp
      name:
        CSharp: RemoveKeyFrame()
        VB: RemoveKeyFrame()
      nameWithType:
        CSharp: AnimationManager.RemoveKeyFrame()
        VB: AnimationManager.RemoveKeyFrame()
      qualifiedName:
        CSharp: AnimationManager.RemoveKeyFrame()
        VB: AnimationManager.RemoveKeyFrame()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RemoveKeyFrame
        path: ''
        startLine: 1610
      summary: "\nReduces the length of the animation by removing the final frame.\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveKeyFrame()
          VB: Public Sub RemoveKeyFrame()
      overload: Global.AnimationManager.RemoveKeyFrame*
    - id: Global.AnimationManager.DeleteSelectedKeyFrame
      commentId: M:Global.AnimationManager.DeleteSelectedKeyFrame
      language: CSharp
      name:
        CSharp: DeleteSelectedKeyFrame()
        VB: DeleteSelectedKeyFrame()
      nameWithType:
        CSharp: AnimationManager.DeleteSelectedKeyFrame()
        VB: AnimationManager.DeleteSelectedKeyFrame()
      qualifiedName:
        CSharp: AnimationManager.DeleteSelectedKeyFrame()
        VB: AnimationManager.DeleteSelectedKeyFrame()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeleteSelectedKeyFrame
        path: ''
        startLine: 1630
      summary: "\nDeletes the selected key frame.\n"
      example: []
      syntax:
        content:
          CSharp: public void DeleteSelectedKeyFrame()
          VB: Public Sub DeleteSelectedKeyFrame()
      overload: Global.AnimationManager.DeleteSelectedKeyFrame*
    - id: Global.AnimationManager.DebugLogKeyFrames
      commentId: M:Global.AnimationManager.DebugLogKeyFrames
      language: CSharp
      name:
        CSharp: DebugLogKeyFrames()
        VB: DebugLogKeyFrames()
      nameWithType:
        CSharp: AnimationManager.DebugLogKeyFrames()
        VB: AnimationManager.DebugLogKeyFrames()
      qualifiedName:
        CSharp: AnimationManager.DebugLogKeyFrames()
        VB: AnimationManager.DebugLogKeyFrames()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DebugLogKeyFrames
        path: ''
        startLine: 1645
      summary: "\nFor debugging purposes. Prints the current frame number and the frame numbers of each keyframe.\n"
      example: []
      syntax:
        content:
          CSharp: public void DebugLogKeyFrames()
          VB: Public Sub DebugLogKeyFrames()
      overload: Global.AnimationManager.DebugLogKeyFrames*
    - id: Global.AnimationManager.SubscribeToOnCurrentFrameIndexChange(UnityAction)
      commentId: M:Global.AnimationManager.SubscribeToOnCurrentFrameIndexChange(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnCurrentFrameIndexChange(UnityAction)
        VB: SubscribeToOnCurrentFrameIndexChange(UnityAction)
      nameWithType:
        CSharp: AnimationManager.SubscribeToOnCurrentFrameIndexChange(UnityAction)
        VB: AnimationManager.SubscribeToOnCurrentFrameIndexChange(UnityAction)
      qualifiedName:
        CSharp: AnimationManager.SubscribeToOnCurrentFrameIndexChange(UnityAction)
        VB: AnimationManager.SubscribeToOnCurrentFrameIndexChange(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnCurrentFrameIndexChange
        path: ''
        startLine: 1720
      summary: "\nEvent is invoked when the current frame number changes.\n"
      example: []
      syntax:
        content:
          CSharp: public void SubscribeToOnCurrentFrameIndexChange(UnityAction call)
          VB: Public Sub SubscribeToOnCurrentFrameIndexChange([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.AnimationManager.SubscribeToOnCurrentFrameIndexChange*
    - id: Global.AnimationManager.SubscribeToOnKeyFrameAdded(UnityAction)
      commentId: M:Global.AnimationManager.SubscribeToOnKeyFrameAdded(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnKeyFrameAdded(UnityAction)
        VB: SubscribeToOnKeyFrameAdded(UnityAction)
      nameWithType:
        CSharp: AnimationManager.SubscribeToOnKeyFrameAdded(UnityAction)
        VB: AnimationManager.SubscribeToOnKeyFrameAdded(UnityAction)
      qualifiedName:
        CSharp: AnimationManager.SubscribeToOnKeyFrameAdded(UnityAction)
        VB: AnimationManager.SubscribeToOnKeyFrameAdded(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnKeyFrameAdded
        path: ''
        startLine: 1727
      summary: "\nEvent is invoked when a keyframe is added.\n"
      example: []
      syntax:
        content:
          CSharp: public void SubscribeToOnKeyFrameAdded(UnityAction call)
          VB: Public Sub SubscribeToOnKeyFrameAdded([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.AnimationManager.SubscribeToOnKeyFrameAdded*
    - id: Global.AnimationManager.SubscribeToOnKeyFrameDeleted(UnityAction)
      commentId: M:Global.AnimationManager.SubscribeToOnKeyFrameDeleted(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnKeyFrameDeleted(UnityAction)
        VB: SubscribeToOnKeyFrameDeleted(UnityAction)
      nameWithType:
        CSharp: AnimationManager.SubscribeToOnKeyFrameDeleted(UnityAction)
        VB: AnimationManager.SubscribeToOnKeyFrameDeleted(UnityAction)
      qualifiedName:
        CSharp: AnimationManager.SubscribeToOnKeyFrameDeleted(UnityAction)
        VB: AnimationManager.SubscribeToOnKeyFrameDeleted(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnKeyFrameDeleted
        path: ''
        startLine: 1734
      summary: "\nEvent is invoked when a keyframe is deleted.\n"
      example: []
      syntax:
        content:
          CSharp: public void SubscribeToOnKeyFrameDeleted(UnityAction call)
          VB: Public Sub SubscribeToOnKeyFrameDeleted([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.AnimationManager.SubscribeToOnKeyFrameDeleted*
  - id: Global.FrameNotch
    commentId: T:Global.FrameNotch
    language: CSharp
    name:
      CSharp: FrameNotch
      VB: FrameNotch
    nameWithType:
      CSharp: FrameNotch
      VB: FrameNotch
    qualifiedName:
      CSharp: FrameNotch
      VB: FrameNotch
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: FrameNotch
      path: ''
      startLine: 1748
    summary: "\nA class for the frame number markers on the animation timeline.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class FrameNotch : MonoBehaviour'
        VB: Public Class FrameNotch Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.FrameNotch.frameNum
      commentId: P:Global.FrameNotch.frameNum
      language: CSharp
      name:
        CSharp: frameNum
        VB: frameNum
      nameWithType:
        CSharp: FrameNotch.frameNum
        VB: FrameNotch.frameNum
      qualifiedName:
        CSharp: FrameNotch.frameNum
        VB: FrameNotch.frameNum
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: frameNum
        path: ''
        startLine: 1752
      syntax:
        content:
          CSharp: public int frameNum { get; set; }
          VB: Public Property frameNum As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.FrameNotch.frameNum*
    - id: Global.FrameNotch.SetFrameNumber(System.Int32)
      commentId: M:Global.FrameNotch.SetFrameNumber(System.Int32)
      language: CSharp
      name:
        CSharp: SetFrameNumber(int)
        VB: SetFrameNumber(Integer)
      nameWithType:
        CSharp: FrameNotch.SetFrameNumber(int)
        VB: FrameNotch.SetFrameNumber(Integer)
      qualifiedName:
        CSharp: FrameNotch.SetFrameNumber(int)
        VB: FrameNotch.SetFrameNumber(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetFrameNumber
        path: ''
        startLine: 1769
      syntax:
        content:
          CSharp: public void SetFrameNumber(int num)
          VB: Public Sub SetFrameNumber(num As Integer)
        parameters:
        - id: num
          type: System.Int32
      overload: Global.FrameNotch.SetFrameNumber*
  - id: Global.KeyFrameIcon
    commentId: T:Global.KeyFrameIcon
    language: CSharp
    name:
      CSharp: KeyFrameIcon
      VB: KeyFrameIcon
    nameWithType:
      CSharp: KeyFrameIcon
      VB: KeyFrameIcon
    qualifiedName:
      CSharp: KeyFrameIcon
      VB: KeyFrameIcon
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: KeyFrameIcon
      path: ''
      startLine: 1782
    summary: "\nStores the data about a keyframe icon on the animation timeline.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class KeyFrameIcon : MonoBehaviour'
        VB: Public Class KeyFrameIcon Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.KeyFrameIcon.frameIndex
      commentId: F:Global.KeyFrameIcon.frameIndex
      language: CSharp
      name:
        CSharp: frameIndex
        VB: frameIndex
      nameWithType:
        CSharp: KeyFrameIcon.frameIndex
        VB: KeyFrameIcon.frameIndex
      qualifiedName:
        CSharp: KeyFrameIcon.frameIndex
        VB: KeyFrameIcon.frameIndex
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: frameIndex
        path: ''
        startLine: 1785
      summary: The frame number this keyframe is on.
      example: []
      syntax:
        content:
          CSharp: public int frameIndex
          VB: Public frameIndex As Integer
        return:
          type: System.Int32
    - id: Global.KeyFrameIcon.layerIndex
      commentId: F:Global.KeyFrameIcon.layerIndex
      language: CSharp
      name:
        CSharp: layerIndex
        VB: layerIndex
      nameWithType:
        CSharp: KeyFrameIcon.layerIndex
        VB: KeyFrameIcon.layerIndex
      qualifiedName:
        CSharp: KeyFrameIcon.layerIndex
        VB: KeyFrameIcon.layerIndex
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: layerIndex
        path: ''
        startLine: 1787
      summary: The layer index this keyframe is on.
      example: []
      syntax:
        content:
          CSharp: public int layerIndex
          VB: Public layerIndex As Integer
        return:
          type: System.Int32
  - id: Global.LayerAnimation
    commentId: T:Global.LayerAnimation
    language: CSharp
    name:
      CSharp: LayerAnimation
      VB: LayerAnimation
    nameWithType:
      CSharp: LayerAnimation
      VB: LayerAnimation
    qualifiedName:
      CSharp: LayerAnimation
      VB: LayerAnimation
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: LayerAnimation
      path: ''
      startLine: 1795
    syntax:
      content:
        CSharp: >-
          [Serializable]

          [Obsolete("LayerAnimation has now been moved directly into the Layer class.")]

          public class LayerAnimation
        VB: >-
          <Serializable>

          <Obsolete("LayerAnimation has now been moved directly into the Layer class.")>

          Public Class LayerAnimation
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    - type: System.ObsoleteAttribute
      ctor: System.ObsoleteAttribute.#ctor(System.String)
      arguments:
      - type: System.String
        value: LayerAnimation has now been moved directly into the Layer class.
    items:
    - id: Global.LayerAnimation.width
      commentId: P:Global.LayerAnimation.width
      language: CSharp
      name:
        CSharp: width
        VB: width
      nameWithType:
        CSharp: LayerAnimation.width
        VB: LayerAnimation.width
      qualifiedName:
        CSharp: LayerAnimation.width
        VB: LayerAnimation.width
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: width
        path: ''
        startLine: 1799
      syntax:
        content:
          CSharp: public int width { get; }
          VB: Public Property width As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.LayerAnimation.width*
    - id: Global.LayerAnimation.height
      commentId: P:Global.LayerAnimation.height
      language: CSharp
      name:
        CSharp: height
        VB: height
      nameWithType:
        CSharp: LayerAnimation.height
        VB: LayerAnimation.height
      qualifiedName:
        CSharp: LayerAnimation.height
        VB: LayerAnimation.height
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: height
        path: ''
        startLine: 1800
      syntax:
        content:
          CSharp: public int height { get; }
          VB: Public Property height As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.LayerAnimation.height*
    - id: Global.LayerAnimation.numOfFrames
      commentId: P:Global.LayerAnimation.numOfFrames
      language: CSharp
      name:
        CSharp: numOfFrames
        VB: numOfFrames
      nameWithType:
        CSharp: LayerAnimation.numOfFrames
        VB: LayerAnimation.numOfFrames
      qualifiedName:
        CSharp: LayerAnimation.numOfFrames
        VB: LayerAnimation.numOfFrames
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: numOfFrames
        path: ''
        startLine: 1802
      syntax:
        content:
          CSharp: public int numOfFrames { get; }
          VB: Public Property numOfFrames As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.LayerAnimation.numOfFrames*
    - id: Global.LayerAnimation.keyFrames
      commentId: P:Global.LayerAnimation.keyFrames
      language: CSharp
      name:
        CSharp: keyFrames
        VB: keyFrames
      nameWithType:
        CSharp: LayerAnimation.keyFrames
        VB: LayerAnimation.keyFrames
      qualifiedName:
        CSharp: LayerAnimation.keyFrames
        VB: LayerAnimation.keyFrames
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: keyFrames
        path: ''
        startLine: 1807
      summary: "\nThe key frames of the animation, in order of frame number.\n"
      example: []
      syntax:
        content:
          CSharp: public List<AnimationKeyFrame> keyFrames { get; }
          VB: Public Property keyFrames As List(Of AnimationKeyFrame)
        parameters: []
        return:
          type: System.Collections.Generic.List{AnimationKeyFrame}
      overload: Global.LayerAnimation.keyFrames*
    - id: Global.LayerAnimation.keyFrameCount
      commentId: P:Global.LayerAnimation.keyFrameCount
      language: CSharp
      name:
        CSharp: keyFrameCount
        VB: keyFrameCount
      nameWithType:
        CSharp: LayerAnimation.keyFrameCount
        VB: LayerAnimation.keyFrameCount
      qualifiedName:
        CSharp: LayerAnimation.keyFrameCount
        VB: LayerAnimation.keyFrameCount
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: keyFrameCount
        path: ''
        startLine: 1812
      summary: "\nThe number of key frames in the animation.\n"
      example: []
      syntax:
        content:
          CSharp: public int keyFrameCount { get; }
          VB: Public ReadOnly Property keyFrameCount As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.LayerAnimation.keyFrameCount*
    - id: Global.LayerAnimation.keyFrameIndices
      commentId: P:Global.LayerAnimation.keyFrameIndices
      language: CSharp
      name:
        CSharp: keyFrameIndices
        VB: keyFrameIndices
      nameWithType:
        CSharp: LayerAnimation.keyFrameIndices
        VB: LayerAnimation.keyFrameIndices
      qualifiedName:
        CSharp: LayerAnimation.keyFrameIndices
        VB: LayerAnimation.keyFrameIndices
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: keyFrameIndices
        path: ''
        startLine: 1823
      summary: "\nThe frame indices of the key frames in the animation.\n"
      example: []
      syntax:
        content:
          CSharp: public int[] keyFrameIndices { get; }
          VB: Public ReadOnly Property keyFrameIndices As Integer()
        parameters: []
        return:
          type: System.Int32[]
      overload: Global.LayerAnimation.keyFrameIndices*
    - id: Global.LayerAnimation.#ctor(System.Int32,System.Int32)
      commentId: M:Global.LayerAnimation.#ctor(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: LayerAnimation(int, int)
        VB: New(Integer, Integer)
      nameWithType:
        CSharp: LayerAnimation.LayerAnimation(int, int)
        VB: LayerAnimation.New(Integer, Integer)
      qualifiedName:
        CSharp: LayerAnimation.LayerAnimation(int, int)
        VB: LayerAnimation.New(Integer, Integer)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 1842
      summary: "\nCreate an animation with a blank starting key frame.\n"
      example: []
      syntax:
        content:
          CSharp: public LayerAnimation(int width, int height)
          VB: Public Sub New(width As Integer, height As Integer)
        parameters:
        - id: width
          type: System.Int32
          description: The width of the frames.
        - id: height
          type: System.Int32
          description: The height of the frames.
      overload: Global.LayerAnimation.#ctor*
    - id: Global.LayerAnimation.#ctor(Texture2D)
      commentId: M:Global.LayerAnimation.#ctor(Texture2D)
      language: CSharp
      name:
        CSharp: LayerAnimation(Texture2D)
        VB: New(Texture2D)
      nameWithType:
        CSharp: LayerAnimation.LayerAnimation(Texture2D)
        VB: LayerAnimation.New(Texture2D)
      qualifiedName:
        CSharp: LayerAnimation.LayerAnimation(Texture2D)
        VB: LayerAnimation.New(Texture2D)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 1850
      summary: "\nCreate an animation with the given texture as the starting key frame.\n"
      example: []
      syntax:
        content:
          CSharp: public LayerAnimation(Texture2D texture)
          VB: Public Sub New(texture As Texture2D)
        parameters:
        - id: texture
          type: Global.Texture2D
          description: The texture for the starting key frame.
      overload: Global.LayerAnimation.#ctor*
    - id: Global.LayerAnimation.#ctor(LayerAnimation)
      commentId: M:Global.LayerAnimation.#ctor(LayerAnimation)
      language: CSharp
      name:
        CSharp: LayerAnimation(LayerAnimation)
        VB: New(LayerAnimation)
      nameWithType:
        CSharp: LayerAnimation.LayerAnimation(LayerAnimation)
        VB: LayerAnimation.New(LayerAnimation)
      qualifiedName:
        CSharp: LayerAnimation.LayerAnimation(LayerAnimation)
        VB: LayerAnimation.New(LayerAnimation)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 1872
      summary: "\nCreates a deep copy of the given layer animation, including deep copies of the key frames.\n"
      example: []
      syntax:
        content:
          CSharp: public LayerAnimation(LayerAnimation layerAnimation)
          VB: Public Sub New(layerAnimation As LayerAnimation)
        parameters:
        - id: layerAnimation
          type: Global.LayerAnimation
          description: ''
      overload: Global.LayerAnimation.#ctor*
    - id: Global.LayerAnimation.Item(System.Int32)
      commentId: P:Global.LayerAnimation.Item(System.Int32)
      language: CSharp
      name:
        CSharp: this[int]
        VB: this[](Integer)
      nameWithType:
        CSharp: LayerAnimation.this[int]
        VB: LayerAnimation.this[](Integer)
      qualifiedName:
        CSharp: LayerAnimation.this[int]
        VB: LayerAnimation.this[](Integer)
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: this[]
        path: ''
        startLine: 1889
      summary: "\nReturns the most recent key frame before or at frame frame - i.e. the frame the animation will play at frame frame. Same as GetKeyFrame(i).\n"
      example: []
      syntax:
        content:
          CSharp: public AnimationKeyFrame this[int i] { get; }
          VB: Public ReadOnly Default Property this[](i As Integer) As AnimationKeyFrame
        parameters:
        - id: i
          type: System.Int32
          description: ''
        return:
          type: Global.AnimationKeyFrame
          description: ''
      overload: Global.LayerAnimation.Item*
    - id: Global.LayerAnimation.GetKeyFrame(System.Int32)
      commentId: M:Global.LayerAnimation.GetKeyFrame(System.Int32)
      language: CSharp
      name:
        CSharp: GetKeyFrame(int)
        VB: GetKeyFrame(Integer)
      nameWithType:
        CSharp: LayerAnimation.GetKeyFrame(int)
        VB: LayerAnimation.GetKeyFrame(Integer)
      qualifiedName:
        CSharp: LayerAnimation.GetKeyFrame(int)
        VB: LayerAnimation.GetKeyFrame(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetKeyFrame
        path: ''
        startLine: 1902
      summary: "\nReturns the most recent key frame before or at frame frame - i.e. the frame the animation will play at frame frame.\n"
      example: []
      syntax:
        content:
          CSharp: public AnimationKeyFrame GetKeyFrame(int frame)
          VB: Public Function GetKeyFrame(frame As Integer) As AnimationKeyFrame
        parameters:
        - id: frame
          type: System.Int32
          description: ''
        return:
          type: Global.AnimationKeyFrame
          description: ''
      overload: Global.LayerAnimation.GetKeyFrame*
    - id: Global.LayerAnimation.HasKeyFrameAt(System.Int32)
      commentId: M:Global.LayerAnimation.HasKeyFrameAt(System.Int32)
      language: CSharp
      name:
        CSharp: HasKeyFrameAt(int)
        VB: HasKeyFrameAt(Integer)
      nameWithType:
        CSharp: LayerAnimation.HasKeyFrameAt(int)
        VB: LayerAnimation.HasKeyFrameAt(Integer)
      qualifiedName:
        CSharp: LayerAnimation.HasKeyFrameAt(int)
        VB: LayerAnimation.HasKeyFrameAt(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: HasKeyFrameAt
        path: ''
        startLine: 1930
      summary: "\nReturns whether or not there is a key frame at the given frame index.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasKeyFrameAt(int frame)
          VB: Public Function HasKeyFrameAt(frame As Integer) As Boolean
        parameters:
        - id: frame
          type: System.Int32
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: Global.LayerAnimation.HasKeyFrameAt*
    - id: Global.LayerAnimation.DeleteMostRecentKeyFrame(System.Int32)
      commentId: M:Global.LayerAnimation.DeleteMostRecentKeyFrame(System.Int32)
      language: CSharp
      name:
        CSharp: DeleteMostRecentKeyFrame(int)
        VB: DeleteMostRecentKeyFrame(Integer)
      nameWithType:
        CSharp: LayerAnimation.DeleteMostRecentKeyFrame(int)
        VB: LayerAnimation.DeleteMostRecentKeyFrame(Integer)
      qualifiedName:
        CSharp: LayerAnimation.DeleteMostRecentKeyFrame(int)
        VB: LayerAnimation.DeleteMostRecentKeyFrame(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeleteMostRecentKeyFrame
        path: ''
        startLine: 1947
      summary: "\nDeletes the most recent key frame before or at the given frame index and returns that key frame.\n"
      example: []
      syntax:
        content:
          CSharp: public AnimationKeyFrame DeleteMostRecentKeyFrame(int frame)
          VB: Public Function DeleteMostRecentKeyFrame(frame As Integer) As AnimationKeyFrame
        parameters:
        - id: frame
          type: System.Int32
          description: ''
        return:
          type: Global.AnimationKeyFrame
          description: ''
      overload: Global.LayerAnimation.DeleteMostRecentKeyFrame*
    - id: Global.LayerAnimation.DeleteKeyFrame(System.Int32)
      commentId: M:Global.LayerAnimation.DeleteKeyFrame(System.Int32)
      language: CSharp
      name:
        CSharp: DeleteKeyFrame(int)
        VB: DeleteKeyFrame(Integer)
      nameWithType:
        CSharp: LayerAnimation.DeleteKeyFrame(int)
        VB: LayerAnimation.DeleteKeyFrame(Integer)
      qualifiedName:
        CSharp: LayerAnimation.DeleteKeyFrame(int)
        VB: LayerAnimation.DeleteKeyFrame(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeleteKeyFrame
        path: ''
        startLine: 1956
      summary: "\nDeletes the key frame at the given frame index, if there is one, in which case it returns that key frame. Otherwise it returns null.\n"
      example: []
      syntax:
        content:
          CSharp: public AnimationKeyFrame DeleteKeyFrame(int keyframe)
          VB: Public Function DeleteKeyFrame(keyframe As Integer) As AnimationKeyFrame
        parameters:
        - id: keyframe
          type: System.Int32
          description: ''
        return:
          type: Global.AnimationKeyFrame
          description: ''
      overload: Global.LayerAnimation.DeleteKeyFrame*
    - id: Global.LayerAnimation.DeleteKeyFrame(AnimationKeyFrame)
      commentId: M:Global.LayerAnimation.DeleteKeyFrame(AnimationKeyFrame)
      language: CSharp
      name:
        CSharp: DeleteKeyFrame(AnimationKeyFrame)
        VB: DeleteKeyFrame(AnimationKeyFrame)
      nameWithType:
        CSharp: LayerAnimation.DeleteKeyFrame(AnimationKeyFrame)
        VB: LayerAnimation.DeleteKeyFrame(AnimationKeyFrame)
      qualifiedName:
        CSharp: LayerAnimation.DeleteKeyFrame(AnimationKeyFrame)
        VB: LayerAnimation.DeleteKeyFrame(AnimationKeyFrame)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeleteKeyFrame
        path: ''
        startLine: 1977
      summary: "\nDeletes the given key frame, if it&apos;s in the animation, in which case it returns true. Otherwise it returns false.\n"
      example: []
      syntax:
        content:
          CSharp: public bool DeleteKeyFrame(AnimationKeyFrame keyFrame)
          VB: Public Function DeleteKeyFrame(keyFrame As AnimationKeyFrame) As Boolean
        parameters:
        - id: keyFrame
          type: Global.AnimationKeyFrame
        return:
          type: System.Boolean
          description: ''
      overload: Global.LayerAnimation.DeleteKeyFrame*
    - id: Global.LayerAnimation.Clear
      commentId: M:Global.LayerAnimation.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: LayerAnimation.Clear()
        VB: LayerAnimation.Clear()
      qualifiedName:
        CSharp: LayerAnimation.Clear()
        VB: LayerAnimation.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Clear
        path: ''
        startLine: 1993
      summary: "\nDeletes all key frames.\n"
      example: []
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear()
      overload: Global.LayerAnimation.Clear*
    - id: Global.LayerAnimation.AddKeyFrame(System.Int32)
      commentId: M:Global.LayerAnimation.AddKeyFrame(System.Int32)
      language: CSharp
      name:
        CSharp: AddKeyFrame(int)
        VB: AddKeyFrame(Integer)
      nameWithType:
        CSharp: LayerAnimation.AddKeyFrame(int)
        VB: LayerAnimation.AddKeyFrame(Integer)
      qualifiedName:
        CSharp: LayerAnimation.AddKeyFrame(int)
        VB: LayerAnimation.AddKeyFrame(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddKeyFrame
        path: ''
        startLine: 2005
      summary: "\nAdds a key frame at frame frame. The texture will be that of the most recent key frame. Returns true if it replaces an existing key frame, and false otherwise.\n"
      example: []
      syntax:
        content:
          CSharp: public bool AddKeyFrame(int frame)
          VB: Public Function AddKeyFrame(frame As Integer) As Boolean
        parameters:
        - id: frame
          type: System.Int32
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: Global.LayerAnimation.AddKeyFrame*
    - id: Global.LayerAnimation.AddKeyFrame(System.Int32,Texture2D)
      commentId: M:Global.LayerAnimation.AddKeyFrame(System.Int32,Texture2D)
      language: CSharp
      name:
        CSharp: AddKeyFrame(int, Texture2D)
        VB: AddKeyFrame(Integer, Texture2D)
      nameWithType:
        CSharp: LayerAnimation.AddKeyFrame(int, Texture2D)
        VB: LayerAnimation.AddKeyFrame(Integer, Texture2D)
      qualifiedName:
        CSharp: LayerAnimation.AddKeyFrame(int, Texture2D)
        VB: LayerAnimation.AddKeyFrame(Integer, Texture2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddKeyFrame
        path: ''
        startLine: 2019
      summary: "\nAdds a key frame with the given texture at frame frame. Returns true if it replaces an existing key frame, and false otherwise.\n"
      example: []
      syntax:
        content:
          CSharp: public bool AddKeyFrame(int frame, Texture2D texture)
          VB: Public Function AddKeyFrame(frame As Integer, texture As Texture2D) As Boolean
        parameters:
        - id: frame
          type: System.Int32
          description: ''
        - id: texture
          type: Global.Texture2D
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: Global.LayerAnimation.AddKeyFrame*
    - id: Global.LayerAnimation.AddKeyFrame(AnimationKeyFrame)
      commentId: M:Global.LayerAnimation.AddKeyFrame(AnimationKeyFrame)
      language: CSharp
      name:
        CSharp: AddKeyFrame(AnimationKeyFrame)
        VB: AddKeyFrame(AnimationKeyFrame)
      nameWithType:
        CSharp: LayerAnimation.AddKeyFrame(AnimationKeyFrame)
        VB: LayerAnimation.AddKeyFrame(AnimationKeyFrame)
      qualifiedName:
        CSharp: LayerAnimation.AddKeyFrame(AnimationKeyFrame)
        VB: LayerAnimation.AddKeyFrame(AnimationKeyFrame)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddKeyFrame
        path: ''
        startLine: 2028
      summary: "\nAdds the given key frame. Returns true if it replaces an existing key frame, and false otherwise.\n"
      example: []
      syntax:
        content:
          CSharp: public bool AddKeyFrame(AnimationKeyFrame keyFrame)
          VB: Public Function AddKeyFrame(keyFrame As AnimationKeyFrame) As Boolean
        parameters:
        - id: keyFrame
          type: Global.AnimationKeyFrame
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: Global.LayerAnimation.AddKeyFrame*
    - id: Global.LayerAnimation.ToJSON
      commentId: M:Global.LayerAnimation.ToJSON
      language: CSharp
      name:
        CSharp: ToJSON()
        VB: ToJSON()
      nameWithType:
        CSharp: LayerAnimation.ToJSON()
        VB: LayerAnimation.ToJSON()
      qualifiedName:
        CSharp: LayerAnimation.ToJSON()
        VB: LayerAnimation.ToJSON()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToJSON
        path: ''
        startLine: 2209
      syntax:
        content:
          CSharp: public JSON ToJSON()
          VB: Public Function ToJSON() As JSON
        return:
          type: Global.JSON
      overload: Global.LayerAnimation.ToJSON*
    - id: Global.LayerAnimation.FromJSON(JSON)
      commentId: M:Global.LayerAnimation.FromJSON(JSON)
      language: CSharp
      name:
        CSharp: FromJSON(JSON)
        VB: FromJSON(JSON)
      nameWithType:
        CSharp: LayerAnimation.FromJSON(JSON)
        VB: LayerAnimation.FromJSON(JSON)
      qualifiedName:
        CSharp: LayerAnimation.FromJSON(JSON)
        VB: LayerAnimation.FromJSON(JSON)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FromJSON
        path: ''
        startLine: 2240
      syntax:
        content:
          CSharp: public static LayerAnimation FromJSON(JSON json)
          VB: Public Shared Function FromJSON(json As JSON) As LayerAnimation
        parameters:
        - id: json
          type: Global.JSON
        return:
          type: Global.LayerAnimation
      overload: Global.LayerAnimation.FromJSON*
  - id: Global.Clipboard
    commentId: T:Global.Clipboard
    language: CSharp
    name:
      CSharp: Clipboard
      VB: Clipboard
    nameWithType:
      CSharp: Clipboard
      VB: Clipboard
    qualifiedName:
      CSharp: Clipboard
      VB: Clipboard
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Clipboard
      path: ''
      startLine: 2261
    summary: "\nA class to handle copy/paste functionality.\nNot yet properly implemented.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Clipboard : MonoBehaviour'
        VB: Public Class Clipboard Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.Clipboard.Cut
      commentId: M:Global.Clipboard.Cut
      language: CSharp
      name:
        CSharp: Cut()
        VB: Cut()
      nameWithType:
        CSharp: Clipboard.Cut()
        VB: Clipboard.Cut()
      qualifiedName:
        CSharp: Clipboard.Cut()
        VB: Clipboard.Cut()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Cut
        path: ''
        startLine: 2285
      syntax:
        content:
          CSharp: public void Cut()
          VB: Public Sub Cut()
      overload: Global.Clipboard.Cut*
    - id: Global.Clipboard.Copy
      commentId: M:Global.Clipboard.Copy
      language: CSharp
      name:
        CSharp: Copy()
        VB: Copy()
      nameWithType:
        CSharp: Clipboard.Copy()
        VB: Clipboard.Copy()
      qualifiedName:
        CSharp: Clipboard.Copy()
        VB: Clipboard.Copy()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Copy
        path: ''
        startLine: 2291
      syntax:
        content:
          CSharp: public void Copy()
          VB: Public Sub Copy()
      overload: Global.Clipboard.Copy*
    - id: Global.Clipboard.Paste
      commentId: M:Global.Clipboard.Paste
      language: CSharp
      name:
        CSharp: Paste()
        VB: Paste()
      nameWithType:
        CSharp: Clipboard.Paste()
        VB: Clipboard.Paste()
      qualifiedName:
        CSharp: Clipboard.Paste()
        VB: Clipboard.Paste()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Paste
        path: ''
        startLine: 2302
      syntax:
        content:
          CSharp: public void Paste()
          VB: Public Sub Paste()
      overload: Global.Clipboard.Paste*
  - id: Global.BlendMode
    commentId: T:Global.BlendMode
    language: CSharp
    name:
      CSharp: BlendMode
      VB: BlendMode
    nameWithType:
      CSharp: BlendMode
      VB: BlendMode
    qualifiedName:
      CSharp: BlendMode
      VB: BlendMode
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: BlendMode
      path: ''
      startLine: 2326
    summary: "\nA class for blend modes.\n"
    example: []
    syntax:
      content:
        CSharp: public class BlendMode
        VB: Public Class BlendMode
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    items:
    - id: Global.BlendMode.Replace
      commentId: F:Global.BlendMode.Replace
      language: CSharp
      name:
        CSharp: Replace
        VB: Replace
      nameWithType:
        CSharp: BlendMode.Replace
        VB: BlendMode.Replace
      qualifiedName:
        CSharp: BlendMode.Replace
        VB: BlendMode.Replace
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Replace
        path: ''
        startLine: 2342
      summary: Replace blend mode.
      example: []
      syntax:
        content:
          CSharp: public static readonly BlendMode Replace
          VB: Public Shared ReadOnly Replace As BlendMode
        return:
          type: Global.BlendMode
    - id: Global.BlendMode.Normal
      commentId: F:Global.BlendMode.Normal
      language: CSharp
      name:
        CSharp: Normal
        VB: Normal
      nameWithType:
        CSharp: BlendMode.Normal
        VB: BlendMode.Normal
      qualifiedName:
        CSharp: BlendMode.Normal
        VB: BlendMode.Normal
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Normal
        path: ''
        startLine: 2344
      summary: Normal blend mode.
      example: []
      syntax:
        content:
          CSharp: public static readonly BlendMode Normal
          VB: Public Shared ReadOnly Normal As BlendMode
        return:
          type: Global.BlendMode
    - id: Global.BlendMode.Overlay
      commentId: F:Global.BlendMode.Overlay
      language: CSharp
      name:
        CSharp: Overlay
        VB: Overlay
      nameWithType:
        CSharp: BlendMode.Overlay
        VB: BlendMode.Overlay
      qualifiedName:
        CSharp: BlendMode.Overlay
        VB: BlendMode.Overlay
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Overlay
        path: ''
        startLine: 2346
      summary: Overlay blend mode.
      example: []
      syntax:
        content:
          CSharp: public static readonly BlendMode Overlay
          VB: Public Shared ReadOnly Overlay As BlendMode
        return:
          type: Global.BlendMode
    - id: Global.BlendMode.Multiply
      commentId: F:Global.BlendMode.Multiply
      language: CSharp
      name:
        CSharp: Multiply
        VB: Multiply
      nameWithType:
        CSharp: BlendMode.Multiply
        VB: BlendMode.Multiply
      qualifiedName:
        CSharp: BlendMode.Multiply
        VB: BlendMode.Multiply
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Multiply
        path: ''
        startLine: 2348
      summary: Multiply blend mode.
      example: []
      syntax:
        content:
          CSharp: public static readonly BlendMode Multiply
          VB: Public Shared ReadOnly Multiply As BlendMode
        return:
          type: Global.BlendMode
    - id: Global.BlendMode.Screen
      commentId: F:Global.BlendMode.Screen
      language: CSharp
      name:
        CSharp: Screen
        VB: Screen
      nameWithType:
        CSharp: BlendMode.Screen
        VB: BlendMode.Screen
      qualifiedName:
        CSharp: BlendMode.Screen
        VB: BlendMode.Screen
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Screen
        path: ''
        startLine: 2350
      summary: Screen blend mode.
      example: []
      syntax:
        content:
          CSharp: public static readonly BlendMode Screen
          VB: Public Shared ReadOnly Screen As BlendMode
        return:
          type: Global.BlendMode
    - id: Global.BlendMode.Add
      commentId: F:Global.BlendMode.Add
      language: CSharp
      name:
        CSharp: Add
        VB: Add
      nameWithType:
        CSharp: BlendMode.Add
        VB: BlendMode.Add
      qualifiedName:
        CSharp: BlendMode.Add
        VB: BlendMode.Add
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Add
        path: ''
        startLine: 2352
      summary: Add blend mode.
      example: []
      syntax:
        content:
          CSharp: public static readonly BlendMode Add
          VB: Public Shared ReadOnly Add As BlendMode
        return:
          type: Global.BlendMode
    - id: Global.BlendMode.Subtract
      commentId: F:Global.BlendMode.Subtract
      language: CSharp
      name:
        CSharp: Subtract
        VB: Subtract
      nameWithType:
        CSharp: BlendMode.Subtract
        VB: BlendMode.Subtract
      qualifiedName:
        CSharp: BlendMode.Subtract
        VB: BlendMode.Subtract
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Subtract
        path: ''
        startLine: 2354
      summary: Subtract blend mode.
      example: []
      syntax:
        content:
          CSharp: public static readonly BlendMode Subtract
          VB: Public Shared ReadOnly Subtract As BlendMode
        return:
          type: Global.BlendMode
    - id: Global.BlendMode.blendModes
      commentId: F:Global.BlendMode.blendModes
      language: CSharp
      name:
        CSharp: blendModes
        VB: blendModes
      nameWithType:
        CSharp: BlendMode.blendModes
        VB: BlendMode.blendModes
      qualifiedName:
        CSharp: BlendMode.blendModes
        VB: BlendMode.blendModes
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: blendModes
        path: ''
        startLine: 2357
      summary: All implemented blend modes.
      example: []
      syntax:
        content:
          CSharp: public static readonly BlendMode[] blendModes
          VB: Public Shared ReadOnly blendModes As BlendMode()
        return:
          type: Global.BlendMode[]
    - id: Global.BlendMode.op_Equality(BlendMode,BlendMode)
      commentId: M:Global.BlendMode.op_Equality(BlendMode,BlendMode)
      language: CSharp
      name:
        CSharp: operator ==(BlendMode, BlendMode)
        VB: =(BlendMode, BlendMode)
      nameWithType:
        CSharp: BlendMode.operator ==(BlendMode, BlendMode)
        VB: BlendMode.=(BlendMode, BlendMode)
      qualifiedName:
        CSharp: BlendMode.operator ==(BlendMode, BlendMode)
        VB: BlendMode.=(BlendMode, BlendMode)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Equality
        path: ''
        startLine: 2359
      syntax:
        content:
          CSharp: public static bool operator ==(BlendMode a, BlendMode b)
          VB: Public Shared Operator =(a As BlendMode, b As BlendMode) As Boolean
        parameters:
        - id: a
          type: Global.BlendMode
        - id: b
          type: Global.BlendMode
        return:
          type: System.Boolean
      overload: Global.BlendMode.op_Equality*
    - id: Global.BlendMode.op_Inequality(BlendMode,BlendMode)
      commentId: M:Global.BlendMode.op_Inequality(BlendMode,BlendMode)
      language: CSharp
      name:
        CSharp: operator !=(BlendMode, BlendMode)
        VB: <>(BlendMode, BlendMode)
      nameWithType:
        CSharp: BlendMode.operator !=(BlendMode, BlendMode)
        VB: BlendMode.<>(BlendMode, BlendMode)
      qualifiedName:
        CSharp: BlendMode.operator !=(BlendMode, BlendMode)
        VB: BlendMode.<>(BlendMode, BlendMode)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Inequality
        path: ''
        startLine: 2363
      syntax:
        content:
          CSharp: public static bool operator !=(BlendMode a, BlendMode b)
          VB: Public Shared Operator <>(a As BlendMode, b As BlendMode) As Boolean
        parameters:
        - id: a
          type: Global.BlendMode
        - id: b
          type: Global.BlendMode
        return:
          type: System.Boolean
      overload: Global.BlendMode.op_Inequality*
    - id: Global.BlendMode.Equals(System.Object)
      commentId: M:Global.BlendMode.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(object)
        VB: Equals(Object)
      nameWithType:
        CSharp: BlendMode.Equals(object)
        VB: BlendMode.Equals(Object)
      qualifiedName:
        CSharp: BlendMode.Equals(object)
        VB: BlendMode.Equals(Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Equals
        path: ''
        startLine: 2367
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Global.BlendMode.Equals*
      overridden: System.Object.Equals(System.Object)
    - id: Global.BlendMode.GetHashCode
      commentId: M:Global.BlendMode.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: BlendMode.GetHashCode()
        VB: BlendMode.GetHashCode()
      qualifiedName:
        CSharp: BlendMode.GetHashCode()
        VB: BlendMode.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetHashCode
        path: ''
        startLine: 2380
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode() As Integer
        return:
          type: System.Int32
      overload: Global.BlendMode.GetHashCode*
      overridden: System.Object.GetHashCode
    - id: Global.BlendMode.ToString
      commentId: M:Global.BlendMode.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: BlendMode.ToString()
        VB: BlendMode.ToString()
      qualifiedName:
        CSharp: BlendMode.ToString()
        VB: BlendMode.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToString
        path: ''
        startLine: 2385
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString() As String
        return:
          type: System.String
      overload: Global.BlendMode.ToString*
      overridden: System.Object.ToString
    - id: Global.BlendMode.Blend(Color,Color)
      commentId: M:Global.BlendMode.Blend(Color,Color)
      language: CSharp
      name:
        CSharp: Blend(Color, Color)
        VB: Blend(Color, Color)
      nameWithType:
        CSharp: BlendMode.Blend(Color, Color)
        VB: BlendMode.Blend(Color, Color)
      qualifiedName:
        CSharp: BlendMode.Blend(Color, Color)
        VB: BlendMode.Blend(Color, Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Blend
        path: ''
        startLine: 2393
      summary: "\nBlend the two colours using the blend mode&apos;s blend function.\n"
      example: []
      syntax:
        content:
          CSharp: public Color Blend(Color topColour, Color bottomColour)
          VB: Public Function Blend(topColour As Color, bottomColour As Color) As Color
        parameters:
        - id: topColour
          type: Global.Color
        - id: bottomColour
          type: Global.Color
        return:
          type: Global.Color
      overload: Global.BlendMode.Blend*
    - id: Global.BlendMode.MultiplyColours(Color,Color)
      commentId: M:Global.BlendMode.MultiplyColours(Color,Color)
      language: CSharp
      name:
        CSharp: MultiplyColours(Color, Color)
        VB: MultiplyColours(Color, Color)
      nameWithType:
        CSharp: BlendMode.MultiplyColours(Color, Color)
        VB: BlendMode.MultiplyColours(Color, Color)
      qualifiedName:
        CSharp: BlendMode.MultiplyColours(Color, Color)
        VB: BlendMode.MultiplyColours(Color, Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MultiplyColours
        path: ''
        startLine: 2485
      summary: "\nMultiplies the colours component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static Color MultiplyColours(Color colour1, Color colour2)
          VB: Public Shared Function MultiplyColours(colour1 As Color, colour2 As Color) As Color
        parameters:
        - id: colour1
          type: Global.Color
        - id: colour2
          type: Global.Color
        return:
          type: Global.Color
      overload: Global.BlendMode.MultiplyColours*
    - id: Global.BlendMode.StringToBlendMode(System.String)
      commentId: M:Global.BlendMode.StringToBlendMode(System.String)
      language: CSharp
      name:
        CSharp: StringToBlendMode(string)
        VB: StringToBlendMode(String)
      nameWithType:
        CSharp: BlendMode.StringToBlendMode(string)
        VB: BlendMode.StringToBlendMode(String)
      qualifiedName:
        CSharp: BlendMode.StringToBlendMode(string)
        VB: BlendMode.StringToBlendMode(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: StringToBlendMode
        path: ''
        startLine: 2540
      summary: "\nReturns the blend mode with that name (case-insensitive).\n"
      example: []
      syntax:
        content:
          CSharp: public static BlendMode StringToBlendMode(string blendModeName)
          VB: Public Shared Function StringToBlendMode(blendModeName As String) As BlendMode
        parameters:
        - id: blendModeName
          type: System.String
        return:
          type: Global.BlendMode
      overload: Global.BlendMode.StringToBlendMode*
  - id: Global.ColorExtensions
    commentId: T:Global.ColorExtensions
    language: CSharp
    name:
      CSharp: ColorExtensions
      VB: ColorExtensions
    nameWithType:
      CSharp: ColorExtensions
      VB: ColorExtensions
    qualifiedName:
      CSharp: ColorExtensions
      VB: ColorExtensions
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ColorExtensions
      path: ''
      startLine: 2557
    syntax:
      content:
        CSharp: public static class ColorExtensions
        VB: Public Module ColorExtensions
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - isExtensionMethod: true
      id: Global.ColorExtensions.Invert(Color,System.Boolean)
      commentId: M:Global.ColorExtensions.Invert(Color,System.Boolean)
      language: CSharp
      name:
        CSharp: Invert(Color, bool)
        VB: Invert(Color, Boolean)
      nameWithType:
        CSharp: ColorExtensions.Invert(Color, bool)
        VB: ColorExtensions.Invert(Color, Boolean)
      qualifiedName:
        CSharp: ColorExtensions.Invert(Color, bool)
        VB: ColorExtensions.Invert(Color, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Invert
        path: ''
        startLine: 2563
      summary: "\nInverts the colour, i.e. does 1 - value for each component.\n"
      example: []
      syntax:
        content:
          CSharp: public static Color Invert(this Color colour, bool invertAlpha = false)
          VB: Public Shared Function Invert(colour As Color, invertAlpha As Boolean = False) As Color
        parameters:
        - id: colour
          type: Global.Color
        - id: invertAlpha
          type: System.Boolean
          description: Whether to invert the alpha value as well.
        return:
          type: Global.Color
      overload: Global.ColorExtensions.Invert*
    - isExtensionMethod: true
      id: Global.ColorExtensions.ToHSV(Color)
      commentId: M:Global.ColorExtensions.ToHSV(Color)
      language: CSharp
      name:
        CSharp: ToHSV(Color)
        VB: ToHSV(Color)
      nameWithType:
        CSharp: ColorExtensions.ToHSV(Color)
        VB: ColorExtensions.ToHSV(Color)
      qualifiedName:
        CSharp: ColorExtensions.ToHSV(Color)
        VB: ColorExtensions.ToHSV(Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToHSV
        path: ''
        startLine: 2568
      syntax:
        content:
          CSharp: public static HSV ToHSV(this Color color)
          VB: Public Shared Function ToHSV(color As Color) As HSV
        parameters:
        - id: color
          type: Global.Color
        return:
          type: Global.HSV
      overload: Global.ColorExtensions.ToHSV*
    - isExtensionMethod: true
      id: Global.ColorExtensions.ToHSL(Color)
      commentId: M:Global.ColorExtensions.ToHSL(Color)
      language: CSharp
      name:
        CSharp: ToHSL(Color)
        VB: ToHSL(Color)
      nameWithType:
        CSharp: ColorExtensions.ToHSL(Color)
        VB: ColorExtensions.ToHSL(Color)
      qualifiedName:
        CSharp: ColorExtensions.ToHSL(Color)
        VB: ColorExtensions.ToHSL(Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToHSL
        path: ''
        startLine: 2573
      syntax:
        content:
          CSharp: public static HSL ToHSL(this Color color)
          VB: Public Shared Function ToHSL(color As Color) As HSL
        parameters:
        - id: color
          type: Global.Color
        return:
          type: Global.HSL
      overload: Global.ColorExtensions.ToHSL*
  - id: Global.HSL
    commentId: T:Global.HSL
    language: CSharp
    name:
      CSharp: HSL
      VB: HSL
    nameWithType:
      CSharp: HSL
      VB: HSL
    qualifiedName:
      CSharp: HSL
      VB: HSL
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: HSL
      path: ''
      startLine: 2586
    summary: "\nRepresents a colour in HSL form.\n"
    example: []
    syntax:
      content:
        CSharp: public struct HSL
        VB: Public Structure HSL
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    items:
    - id: Global.HSL.h
      commentId: P:Global.HSL.h
      language: CSharp
      name:
        CSharp: h
        VB: h
      nameWithType:
        CSharp: HSL.h
        VB: HSL.h
      qualifiedName:
        CSharp: HSL.h
        VB: HSL.h
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: h
        path: ''
        startLine: 2589
      summary: Hue.
      example: []
      syntax:
        content:
          CSharp: public float h { readonly get; set; }
          VB: Public Property h As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.HSL.h*
    - id: Global.HSL.s
      commentId: P:Global.HSL.s
      language: CSharp
      name:
        CSharp: s
        VB: s
      nameWithType:
        CSharp: HSL.s
        VB: HSL.s
      qualifiedName:
        CSharp: HSL.s
        VB: HSL.s
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: s
        path: ''
        startLine: 2591
      summary: Saturation.
      example: []
      syntax:
        content:
          CSharp: public float s { readonly get; set; }
          VB: Public Property s As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.HSL.s*
    - id: Global.HSL.l
      commentId: P:Global.HSL.l
      language: CSharp
      name:
        CSharp: l
        VB: l
      nameWithType:
        CSharp: HSL.l
        VB: HSL.l
      qualifiedName:
        CSharp: HSL.l
        VB: HSL.l
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: l
        path: ''
        startLine: 2593
      summary: Lightness.
      example: []
      syntax:
        content:
          CSharp: public float l { readonly get; set; }
          VB: Public Property l As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.HSL.l*
    - id: Global.HSL.a
      commentId: P:Global.HSL.a
      language: CSharp
      name:
        CSharp: a
        VB: a
      nameWithType:
        CSharp: HSL.a
        VB: HSL.a
      qualifiedName:
        CSharp: HSL.a
        VB: HSL.a
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: a
        path: ''
        startLine: 2595
      summary: Alpha.
      example: []
      syntax:
        content:
          CSharp: public float a { readonly get; set; }
          VB: Public Property a As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.HSL.a*
    - id: Global.HSL.hsv
      commentId: P:Global.HSL.hsv
      language: CSharp
      name:
        CSharp: hsv
        VB: hsv
      nameWithType:
        CSharp: HSL.hsv
        VB: HSL.hsv
      qualifiedName:
        CSharp: HSL.hsv
        VB: HSL.hsv
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hsv
        path: ''
        startLine: 2597
      syntax:
        content:
          CSharp: public HSV hsv { get; }
          VB: Public ReadOnly Property hsv As HSV
        parameters: []
        return:
          type: Global.HSV
      overload: Global.HSL.hsv*
    - id: Global.HSL.color
      commentId: P:Global.HSL.color
      language: CSharp
      name:
        CSharp: color
        VB: color
      nameWithType:
        CSharp: HSL.color
        VB: HSL.color
      qualifiedName:
        CSharp: HSL.color
        VB: HSL.color
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: color
        path: ''
        startLine: 2598
      syntax:
        content:
          CSharp: public Color color { get; }
          VB: Public ReadOnly Property color As Color
        parameters: []
        return:
          type: Global.Color
      overload: Global.HSL.color*
    - id: Global.HSL.#ctor(System.Single,System.Single,System.Single)
      commentId: M:Global.HSL.#ctor(System.Single,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: HSL(float, float, float)
        VB: New(Single, Single, Single)
      nameWithType:
        CSharp: HSL.HSL(float, float, float)
        VB: HSL.New(Single, Single, Single)
      qualifiedName:
        CSharp: HSL.HSL(float, float, float)
        VB: HSL.New(Single, Single, Single)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 2600
      syntax:
        content:
          CSharp: public HSL(float hue, float saturation, float lightness)
          VB: Public Sub New(hue As Single, saturation As Single, lightness As Single)
        parameters:
        - id: hue
          type: System.Single
        - id: saturation
          type: System.Single
        - id: lightness
          type: System.Single
      overload: Global.HSL.#ctor*
    - id: Global.HSL.#ctor(System.Single,System.Single,System.Single,System.Single)
      commentId: M:Global.HSL.#ctor(System.Single,System.Single,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: HSL(float, float, float, float)
        VB: New(Single, Single, Single, Single)
      nameWithType:
        CSharp: HSL.HSL(float, float, float, float)
        VB: HSL.New(Single, Single, Single, Single)
      qualifiedName:
        CSharp: HSL.HSL(float, float, float, float)
        VB: HSL.New(Single, Single, Single, Single)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 2601
      syntax:
        content:
          CSharp: public HSL(float hue, float saturation, float lightness, float alpha)
          VB: Public Sub New(hue As Single, saturation As Single, lightness As Single, alpha As Single)
        parameters:
        - id: hue
          type: System.Single
        - id: saturation
          type: System.Single
        - id: lightness
          type: System.Single
        - id: alpha
          type: System.Single
      overload: Global.HSL.#ctor*
    - id: Global.HSL.#ctor(Color)
      commentId: M:Global.HSL.#ctor(Color)
      language: CSharp
      name:
        CSharp: HSL(Color)
        VB: New(Color)
      nameWithType:
        CSharp: HSL.HSL(Color)
        VB: HSL.New(Color)
      qualifiedName:
        CSharp: HSL.HSL(Color)
        VB: HSL.New(Color)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 2609
      syntax:
        content:
          CSharp: public HSL(Color rgb)
          VB: Public Sub New(rgb As Color)
        parameters:
        - id: rgb
          type: Global.Color
      overload: Global.HSL.#ctor*
    - id: Global.HSL.ToHSV
      commentId: M:Global.HSL.ToHSV
      language: CSharp
      name:
        CSharp: ToHSV()
        VB: ToHSV()
      nameWithType:
        CSharp: HSL.ToHSV()
        VB: HSL.ToHSV()
      qualifiedName:
        CSharp: HSL.ToHSV()
        VB: HSL.ToHSV()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToHSV
        path: ''
        startLine: 2618
      syntax:
        content:
          CSharp: public HSV ToHSV()
          VB: Public Function ToHSV() As HSV
        return:
          type: Global.HSV
      overload: Global.HSL.ToHSV*
    - id: Global.HSL.ToColor
      commentId: M:Global.HSL.ToColor
      language: CSharp
      name:
        CSharp: ToColor()
        VB: ToColor()
      nameWithType:
        CSharp: HSL.ToColor()
        VB: HSL.ToColor()
      qualifiedName:
        CSharp: HSL.ToColor()
        VB: HSL.ToColor()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToColor
        path: ''
        startLine: 2634
      syntax:
        content:
          CSharp: public Color ToColor()
          VB: Public Function ToColor() As Color
        return:
          type: Global.Color
      overload: Global.HSL.ToColor*
    - id: Global.HSL.op_Explicit(HSL)~HSV
      commentId: M:Global.HSL.op_Explicit(HSL)~HSV
      language: CSharp
      name:
        CSharp: explicit operator HSV(HSL)
        VB: CType(HSL)
      nameWithType:
        CSharp: HSL.explicit operator HSV(HSL)
        VB: HSL.CType(HSL)
      qualifiedName:
        CSharp: HSL.explicit operator HSV(HSL)
        VB: HSL.CType(HSL)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Explicit
        path: ''
        startLine: 2639
      syntax:
        content:
          CSharp: public static explicit operator HSV(HSL hsl)
          VB: Public Shared Narrowing Operator CType(hsl As HSL) As HSV
        parameters:
        - id: hsl
          type: Global.HSL
        return:
          type: Global.HSV
      overload: Global.HSL.op_Explicit*
    - id: Global.HSL.op_Explicit(HSL)~Color
      commentId: M:Global.HSL.op_Explicit(HSL)~Color
      language: CSharp
      name:
        CSharp: explicit operator Color(HSL)
        VB: CType(HSL)
      nameWithType:
        CSharp: HSL.explicit operator Color(HSL)
        VB: HSL.CType(HSL)
      qualifiedName:
        CSharp: HSL.explicit operator Color(HSL)
        VB: HSL.CType(HSL)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Explicit
        path: ''
        startLine: 2643
      syntax:
        content:
          CSharp: public static explicit operator Color(HSL hsl)
          VB: Public Shared Narrowing Operator CType(hsl As HSL) As Color
        parameters:
        - id: hsl
          type: Global.HSL
        return:
          type: Global.Color
      overload: Global.HSL.op_Explicit*
    - id: Global.HSL.ToString
      commentId: M:Global.HSL.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: HSL.ToString()
        VB: HSL.ToString()
      qualifiedName:
        CSharp: HSL.ToString()
        VB: HSL.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToString
        path: ''
        startLine: 2648
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString() As String
        return:
          type: System.String
      overload: Global.HSL.ToString*
      overridden: System.ValueType.ToString
    - id: Global.HSL.ToString(System.Int32)
      commentId: M:Global.HSL.ToString(System.Int32)
      language: CSharp
      name:
        CSharp: ToString(int)
        VB: ToString(Integer)
      nameWithType:
        CSharp: HSL.ToString(int)
        VB: HSL.ToString(Integer)
      qualifiedName:
        CSharp: HSL.ToString(int)
        VB: HSL.ToString(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToString
        path: ''
        startLine: 2652
      syntax:
        content:
          CSharp: public string ToString(int decimalPlaces)
          VB: Public Function ToString(decimalPlaces As Integer) As String
        parameters:
        - id: decimalPlaces
          type: System.Int32
        return:
          type: System.String
      overload: Global.HSL.ToString*
  - id: Global.HSV
    commentId: T:Global.HSV
    language: CSharp
    name:
      CSharp: HSV
      VB: HSV
    nameWithType:
      CSharp: HSV
      VB: HSV
    qualifiedName:
      CSharp: HSV
      VB: HSV
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: HSV
      path: ''
      startLine: 2669
    summary: "\nRepresents a colour in HSV form.\n"
    example: []
    syntax:
      content:
        CSharp: public struct HSV
        VB: Public Structure HSV
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    items:
    - id: Global.HSV.h
      commentId: P:Global.HSV.h
      language: CSharp
      name:
        CSharp: h
        VB: h
      nameWithType:
        CSharp: HSV.h
        VB: HSV.h
      qualifiedName:
        CSharp: HSV.h
        VB: HSV.h
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: h
        path: ''
        startLine: 2672
      summary: Hue.
      example: []
      syntax:
        content:
          CSharp: public float h { readonly get; set; }
          VB: Public Property h As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.HSV.h*
    - id: Global.HSV.s
      commentId: P:Global.HSV.s
      language: CSharp
      name:
        CSharp: s
        VB: s
      nameWithType:
        CSharp: HSV.s
        VB: HSV.s
      qualifiedName:
        CSharp: HSV.s
        VB: HSV.s
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: s
        path: ''
        startLine: 2674
      summary: Saturation.
      example: []
      syntax:
        content:
          CSharp: public float s { readonly get; set; }
          VB: Public Property s As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.HSV.s*
    - id: Global.HSV.v
      commentId: P:Global.HSV.v
      language: CSharp
      name:
        CSharp: v
        VB: v
      nameWithType:
        CSharp: HSV.v
        VB: HSV.v
      qualifiedName:
        CSharp: HSV.v
        VB: HSV.v
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: v
        path: ''
        startLine: 2676
      summary: Value.
      example: []
      syntax:
        content:
          CSharp: public float v { readonly get; set; }
          VB: Public Property v As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.HSV.v*
    - id: Global.HSV.a
      commentId: P:Global.HSV.a
      language: CSharp
      name:
        CSharp: a
        VB: a
      nameWithType:
        CSharp: HSV.a
        VB: HSV.a
      qualifiedName:
        CSharp: HSV.a
        VB: HSV.a
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: a
        path: ''
        startLine: 2678
      summary: Alpha.
      example: []
      syntax:
        content:
          CSharp: public float a { readonly get; set; }
          VB: Public Property a As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.HSV.a*
    - id: Global.HSV.hsl
      commentId: P:Global.HSV.hsl
      language: CSharp
      name:
        CSharp: hsl
        VB: hsl
      nameWithType:
        CSharp: HSV.hsl
        VB: HSV.hsl
      qualifiedName:
        CSharp: HSV.hsl
        VB: HSV.hsl
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hsl
        path: ''
        startLine: 2680
      syntax:
        content:
          CSharp: public HSL hsl { get; }
          VB: Public ReadOnly Property hsl As HSL
        parameters: []
        return:
          type: Global.HSL
      overload: Global.HSV.hsl*
    - id: Global.HSV.color
      commentId: P:Global.HSV.color
      language: CSharp
      name:
        CSharp: color
        VB: color
      nameWithType:
        CSharp: HSV.color
        VB: HSV.color
      qualifiedName:
        CSharp: HSV.color
        VB: HSV.color
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: color
        path: ''
        startLine: 2681
      syntax:
        content:
          CSharp: public Color color { get; }
          VB: Public ReadOnly Property color As Color
        parameters: []
        return:
          type: Global.Color
      overload: Global.HSV.color*
    - id: Global.HSV.#ctor(System.Single,System.Single,System.Single)
      commentId: M:Global.HSV.#ctor(System.Single,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: HSV(float, float, float)
        VB: New(Single, Single, Single)
      nameWithType:
        CSharp: HSV.HSV(float, float, float)
        VB: HSV.New(Single, Single, Single)
      qualifiedName:
        CSharp: HSV.HSV(float, float, float)
        VB: HSV.New(Single, Single, Single)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 2683
      syntax:
        content:
          CSharp: public HSV(float hue, float saturation, float value)
          VB: Public Sub New(hue As Single, saturation As Single, value As Single)
        parameters:
        - id: hue
          type: System.Single
        - id: saturation
          type: System.Single
        - id: value
          type: System.Single
      overload: Global.HSV.#ctor*
    - id: Global.HSV.#ctor(System.Single,System.Single,System.Single,System.Single)
      commentId: M:Global.HSV.#ctor(System.Single,System.Single,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: HSV(float, float, float, float)
        VB: New(Single, Single, Single, Single)
      nameWithType:
        CSharp: HSV.HSV(float, float, float, float)
        VB: HSV.New(Single, Single, Single, Single)
      qualifiedName:
        CSharp: HSV.HSV(float, float, float, float)
        VB: HSV.New(Single, Single, Single, Single)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 2684
      syntax:
        content:
          CSharp: public HSV(float hue, float saturation, float value, float alpha)
          VB: Public Sub New(hue As Single, saturation As Single, value As Single, alpha As Single)
        parameters:
        - id: hue
          type: System.Single
        - id: saturation
          type: System.Single
        - id: value
          type: System.Single
        - id: alpha
          type: System.Single
      overload: Global.HSV.#ctor*
    - id: Global.HSV.#ctor(Color)
      commentId: M:Global.HSV.#ctor(Color)
      language: CSharp
      name:
        CSharp: HSV(Color)
        VB: New(Color)
      nameWithType:
        CSharp: HSV.HSV(Color)
        VB: HSV.New(Color)
      qualifiedName:
        CSharp: HSV.HSV(Color)
        VB: HSV.New(Color)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 2692
      syntax:
        content:
          CSharp: public HSV(Color rgb)
          VB: Public Sub New(rgb As Color)
        parameters:
        - id: rgb
          type: Global.Color
      overload: Global.HSV.#ctor*
    - id: Global.HSV.ToHSL
      commentId: M:Global.HSV.ToHSL
      language: CSharp
      name:
        CSharp: ToHSL()
        VB: ToHSL()
      nameWithType:
        CSharp: HSV.ToHSL()
        VB: HSV.ToHSL()
      qualifiedName:
        CSharp: HSV.ToHSL()
        VB: HSV.ToHSL()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToHSL
        path: ''
        startLine: 2703
      syntax:
        content:
          CSharp: public HSL ToHSL()
          VB: Public Function ToHSL() As HSL
        return:
          type: Global.HSL
      overload: Global.HSV.ToHSL*
    - id: Global.HSV.ToColor
      commentId: M:Global.HSV.ToColor
      language: CSharp
      name:
        CSharp: ToColor()
        VB: ToColor()
      nameWithType:
        CSharp: HSV.ToColor()
        VB: HSV.ToColor()
      qualifiedName:
        CSharp: HSV.ToColor()
        VB: HSV.ToColor()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToColor
        path: ''
        startLine: 2719
      syntax:
        content:
          CSharp: public Color ToColor()
          VB: Public Function ToColor() As Color
        return:
          type: Global.Color
      overload: Global.HSV.ToColor*
    - id: Global.HSV.op_Explicit(HSV)~HSL
      commentId: M:Global.HSV.op_Explicit(HSV)~HSL
      language: CSharp
      name:
        CSharp: explicit operator HSL(HSV)
        VB: CType(HSV)
      nameWithType:
        CSharp: HSV.explicit operator HSL(HSV)
        VB: HSV.CType(HSV)
      qualifiedName:
        CSharp: HSV.explicit operator HSL(HSV)
        VB: HSV.CType(HSV)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Explicit
        path: ''
        startLine: 2726
      syntax:
        content:
          CSharp: public static explicit operator HSL(HSV hsv)
          VB: Public Shared Narrowing Operator CType(hsv As HSV) As HSL
        parameters:
        - id: hsv
          type: Global.HSV
        return:
          type: Global.HSL
      overload: Global.HSV.op_Explicit*
    - id: Global.HSV.op_Explicit(HSV)~Color
      commentId: M:Global.HSV.op_Explicit(HSV)~Color
      language: CSharp
      name:
        CSharp: explicit operator Color(HSV)
        VB: CType(HSV)
      nameWithType:
        CSharp: HSV.explicit operator Color(HSV)
        VB: HSV.CType(HSV)
      qualifiedName:
        CSharp: HSV.explicit operator Color(HSV)
        VB: HSV.CType(HSV)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Explicit
        path: ''
        startLine: 2730
      syntax:
        content:
          CSharp: public static explicit operator Color(HSV hsv)
          VB: Public Shared Narrowing Operator CType(hsv As HSV) As Color
        parameters:
        - id: hsv
          type: Global.HSV
        return:
          type: Global.Color
      overload: Global.HSV.op_Explicit*
    - id: Global.HSV.ToString
      commentId: M:Global.HSV.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: HSV.ToString()
        VB: HSV.ToString()
      qualifiedName:
        CSharp: HSV.ToString()
        VB: HSV.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToString
        path: ''
        startLine: 2735
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString() As String
        return:
          type: System.String
      overload: Global.HSV.ToString*
      overridden: System.ValueType.ToString
    - id: Global.HSV.ToString(System.Int32)
      commentId: M:Global.HSV.ToString(System.Int32)
      language: CSharp
      name:
        CSharp: ToString(int)
        VB: ToString(Integer)
      nameWithType:
        CSharp: HSV.ToString(int)
        VB: HSV.ToString(Integer)
      qualifiedName:
        CSharp: HSV.ToString(int)
        VB: HSV.ToString(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToString
        path: ''
        startLine: 2739
      syntax:
        content:
          CSharp: public string ToString(int decimalPlaces)
          VB: Public Function ToString(decimalPlaces As Integer) As String
        parameters:
        - id: decimalPlaces
          type: System.Int32
        return:
          type: System.String
      overload: Global.HSV.ToString*
  - id: Global.ColourPreview
    commentId: T:Global.ColourPreview
    language: CSharp
    name:
      CSharp: ColourPreview
      VB: ColourPreview
    nameWithType:
      CSharp: ColourPreview
      VB: ColourPreview
    qualifiedName:
      CSharp: ColourPreview
      VB: ColourPreview
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ColourPreview
      path: ''
      startLine: 2758
    summary: "\nA class to represent colour previews - the boxes on colour pickers that show what colours you have selected.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ColourPreview : MonoBehaviour'
        VB: Public Class ColourPreview Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.ColourPreview.colour
      commentId: P:Global.ColourPreview.colour
      language: CSharp
      name:
        CSharp: colour
        VB: colour
      nameWithType:
        CSharp: ColourPreview.colour
        VB: ColourPreview.colour
      qualifiedName:
        CSharp: ColourPreview.colour
        VB: ColourPreview.colour
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: colour
        path: ''
        startLine: 2764
      summary: The colour displayed in the colour preview.
      example: []
      syntax:
        content:
          CSharp: public Color colour { get; }
          VB: Public Property colour As Color
        parameters: []
        return:
          type: Global.Color
      overload: Global.ColourPreview.colour*
    - id: Global.ColourPreview.outlineThickness
      commentId: P:Global.ColourPreview.outlineThickness
      language: CSharp
      name:
        CSharp: outlineThickness
        VB: outlineThickness
      nameWithType:
        CSharp: ColourPreview.outlineThickness
        VB: ColourPreview.outlineThickness
      qualifiedName:
        CSharp: ColourPreview.outlineThickness
        VB: ColourPreview.outlineThickness
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: outlineThickness
        path: ''
        startLine: 2782
      syntax:
        content:
          CSharp: public float outlineThickness { get; }
          VB: Public Property outlineThickness As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.ColourPreview.outlineThickness*
    - id: Global.ColourPreview.SetColour(Color)
      commentId: M:Global.ColourPreview.SetColour(Color)
      language: CSharp
      name:
        CSharp: SetColour(Color)
        VB: SetColour(Color)
      nameWithType:
        CSharp: ColourPreview.SetColour(Color)
        VB: ColourPreview.SetColour(Color)
      qualifiedName:
        CSharp: ColourPreview.SetColour(Color)
        VB: ColourPreview.SetColour(Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetColour
        path: ''
        startLine: 2865
      syntax:
        content:
          CSharp: public void SetColour(Color colour)
          VB: Public Sub SetColour(colour As Color)
        parameters:
        - id: colour
          type: Global.Color
      overload: Global.ColourPreview.SetColour*
    - id: Global.ColourPreview.SubscribeToOnSelect(UnityAction)
      commentId: M:Global.ColourPreview.SubscribeToOnSelect(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnSelect(UnityAction)
        VB: SubscribeToOnSelect(UnityAction)
      nameWithType:
        CSharp: ColourPreview.SubscribeToOnSelect(UnityAction)
        VB: ColourPreview.SubscribeToOnSelect(UnityAction)
      qualifiedName:
        CSharp: ColourPreview.SubscribeToOnSelect(UnityAction)
        VB: ColourPreview.SubscribeToOnSelect(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnSelect
        path: ''
        startLine: 2894
      summary: "\nEvent invoked when colour preview is selected.\n"
      example: []
      syntax:
        content:
          CSharp: public void SubscribeToOnSelect(UnityAction call)
          VB: Public Sub SubscribeToOnSelect([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.ColourPreview.SubscribeToOnSelect*
    - id: Global.ColourPreview.SubscribeToOnDeselect(UnityAction)
      commentId: M:Global.ColourPreview.SubscribeToOnDeselect(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnDeselect(UnityAction)
        VB: SubscribeToOnDeselect(UnityAction)
      nameWithType:
        CSharp: ColourPreview.SubscribeToOnDeselect(UnityAction)
        VB: ColourPreview.SubscribeToOnDeselect(UnityAction)
      qualifiedName:
        CSharp: ColourPreview.SubscribeToOnDeselect(UnityAction)
        VB: ColourPreview.SubscribeToOnDeselect(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnDeselect
        path: ''
        startLine: 2901
      summary: "\nEvent invoked when colour preview is deselected.\n"
      example: []
      syntax:
        content:
          CSharp: public void SubscribeToOnDeselect(UnityAction call)
          VB: Public Sub SubscribeToOnDeselect([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.ColourPreview.SubscribeToOnDeselect*
    - id: Global.ColourPreview.SubscribeToOnToggle(UnityAction)
      commentId: M:Global.ColourPreview.SubscribeToOnToggle(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnToggle(UnityAction)
        VB: SubscribeToOnToggle(UnityAction)
      nameWithType:
        CSharp: ColourPreview.SubscribeToOnToggle(UnityAction)
        VB: ColourPreview.SubscribeToOnToggle(UnityAction)
      qualifiedName:
        CSharp: ColourPreview.SubscribeToOnToggle(UnityAction)
        VB: ColourPreview.SubscribeToOnToggle(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnToggle
        path: ''
        startLine: 2908
      summary: "\nEvent invoked when colour preview is selected or deselected.\n"
      example: []
      syntax:
        content:
          CSharp: public void SubscribeToOnToggle(UnityAction call)
          VB: Public Sub SubscribeToOnToggle([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.ColourPreview.SubscribeToOnToggle*
  - id: Global.GlobalColourPicker
    commentId: T:Global.GlobalColourPicker
    language: CSharp
    name:
      CSharp: GlobalColourPicker
      VB: GlobalColourPicker
    nameWithType:
      CSharp: GlobalColourPicker
      VB: GlobalColourPicker
    qualifiedName:
      CSharp: GlobalColourPicker
      VB: GlobalColourPicker
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GlobalColourPicker
      path: ''
      startLine: 2922
    summary: "\nA class for the main colour picker in the program - the one that appears in the main view.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GlobalColourPicker : MonoBehaviour'
        VB: Public Class GlobalColourPicker Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.GlobalColourPicker.colour
      commentId: P:Global.GlobalColourPicker.colour
      language: CSharp
      name:
        CSharp: colour
        VB: colour
      nameWithType:
        CSharp: GlobalColourPicker.colour
        VB: GlobalColourPicker.colour
      qualifiedName:
        CSharp: GlobalColourPicker.colour
        VB: GlobalColourPicker.colour
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: colour
        path: ''
        startLine: 2926
      summary: The currenty-selected colour.
      example: []
      syntax:
        content:
          CSharp: public Color colour { get; }
          VB: Public ReadOnly Property colour As Color
        parameters: []
        return:
          type: Global.Color
      overload: Global.GlobalColourPicker.colour*
    - id: Global.GlobalColourPicker.primaryColour
      commentId: P:Global.GlobalColourPicker.primaryColour
      language: CSharp
      name:
        CSharp: primaryColour
        VB: primaryColour
      nameWithType:
        CSharp: GlobalColourPicker.primaryColour
        VB: GlobalColourPicker.primaryColour
      qualifiedName:
        CSharp: GlobalColourPicker.primaryColour
        VB: GlobalColourPicker.primaryColour
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: primaryColour
        path: ''
        startLine: 2929
      summary: The current primary colour.
      example: []
      syntax:
        content:
          CSharp: public Color primaryColour { get; }
          VB: Public ReadOnly Property primaryColour As Color
        parameters: []
        return:
          type: Global.Color
      overload: Global.GlobalColourPicker.primaryColour*
    - id: Global.GlobalColourPicker.secondaryColour
      commentId: P:Global.GlobalColourPicker.secondaryColour
      language: CSharp
      name:
        CSharp: secondaryColour
        VB: secondaryColour
      nameWithType:
        CSharp: GlobalColourPicker.secondaryColour
        VB: GlobalColourPicker.secondaryColour
      qualifiedName:
        CSharp: GlobalColourPicker.secondaryColour
        VB: GlobalColourPicker.secondaryColour
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: secondaryColour
        path: ''
        startLine: 2931
      summary: The current secondary colour.
      example: []
      syntax:
        content:
          CSharp: public Color secondaryColour { get; }
          VB: Public ReadOnly Property secondaryColour As Color
        parameters: []
        return:
          type: Global.Color
      overload: Global.GlobalColourPicker.secondaryColour*
    - id: Global.GlobalColourPicker.numOfColourPreviews
      commentId: P:Global.GlobalColourPicker.numOfColourPreviews
      language: CSharp
      name:
        CSharp: numOfColourPreviews
        VB: numOfColourPreviews
      nameWithType:
        CSharp: GlobalColourPicker.numOfColourPreviews
        VB: GlobalColourPicker.numOfColourPreviews
      qualifiedName:
        CSharp: GlobalColourPicker.numOfColourPreviews
        VB: GlobalColourPicker.numOfColourPreviews
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: numOfColourPreviews
        path: ''
        startLine: 2945
      syntax:
        content:
          CSharp: public int numOfColourPreviews { get; }
          VB: Public ReadOnly Property numOfColourPreviews As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.GlobalColourPicker.numOfColourPreviews*
    - id: Global.GlobalColourPicker.SetColour(Color)
      commentId: M:Global.GlobalColourPicker.SetColour(Color)
      language: CSharp
      name:
        CSharp: SetColour(Color)
        VB: SetColour(Color)
      nameWithType:
        CSharp: GlobalColourPicker.SetColour(Color)
        VB: GlobalColourPicker.SetColour(Color)
      qualifiedName:
        CSharp: GlobalColourPicker.SetColour(Color)
        VB: GlobalColourPicker.SetColour(Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetColour
        path: ''
        startLine: 2992
      summary: "\nSets the current colour.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetColour(Color colour)
          VB: Public Sub SetColour(colour As Color)
        parameters:
        - id: colour
          type: Global.Color
      overload: Global.GlobalColourPicker.SetColour*
    - id: Global.GlobalColourPicker.GetColour(System.Int32)
      commentId: M:Global.GlobalColourPicker.GetColour(System.Int32)
      language: CSharp
      name:
        CSharp: GetColour(int)
        VB: GetColour(Integer)
      nameWithType:
        CSharp: GlobalColourPicker.GetColour(int)
        VB: GlobalColourPicker.GetColour(Integer)
      qualifiedName:
        CSharp: GlobalColourPicker.GetColour(int)
        VB: GlobalColourPicker.GetColour(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetColour
        path: ''
        startLine: 3000
      summary: "\nGets the chosen colour at the given index: 0 - primary; 1 - secondary.\n"
      example: []
      syntax:
        content:
          CSharp: public Color GetColour(int colourPreviewIndex)
          VB: Public Function GetColour(colourPreviewIndex As Integer) As Color
        parameters:
        - id: colourPreviewIndex
          type: System.Int32
        return:
          type: Global.Color
      overload: Global.GlobalColourPicker.GetColour*
    - id: Global.GlobalColourPicker.SubscribeToOnColourChange(UnityAction)
      commentId: M:Global.GlobalColourPicker.SubscribeToOnColourChange(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnColourChange(UnityAction)
        VB: SubscribeToOnColourChange(UnityAction)
      nameWithType:
        CSharp: GlobalColourPicker.SubscribeToOnColourChange(UnityAction)
        VB: GlobalColourPicker.SubscribeToOnColourChange(UnityAction)
      qualifiedName:
        CSharp: GlobalColourPicker.SubscribeToOnColourChange(UnityAction)
        VB: GlobalColourPicker.SubscribeToOnColourChange(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnColourChange
        path: ''
        startLine: 3107
      summary: "\nEvent is invoked when the selected colour changes.\n"
      example: []
      syntax:
        content:
          CSharp: public void SubscribeToOnColourChange(UnityAction call)
          VB: Public Sub SubscribeToOnColourChange([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.GlobalColourPicker.SubscribeToOnColourChange*
  - id: Global.HSLColourPicker
    commentId: T:Global.HSLColourPicker
    language: CSharp
    name:
      CSharp: HSLColourPicker
      VB: HSLColourPicker
    nameWithType:
      CSharp: HSLColourPicker
      VB: HSLColourPicker
    qualifiedName:
      CSharp: HSLColourPicker
      VB: HSLColourPicker
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: HSLColourPicker
      path: ''
      startLine: 3121
    summary: "\nA class for the HSL colour picker.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class HSLColourPicker : MonoBehaviour'
        VB: Public Class HSLColourPicker Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.HSLColourPicker.mouseSensitivity
      commentId: P:Global.HSLColourPicker.mouseSensitivity
      language: CSharp
      name:
        CSharp: mouseSensitivity
        VB: mouseSensitivity
      nameWithType:
        CSharp: HSLColourPicker.mouseSensitivity
        VB: HSLColourPicker.mouseSensitivity
      qualifiedName:
        CSharp: HSLColourPicker.mouseSensitivity
        VB: HSLColourPicker.mouseSensitivity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: mouseSensitivity
        path: ''
        startLine: 3126
      syntax:
        content:
          CSharp: public float mouseSensitivity { get; }
          VB: Public ReadOnly Property mouseSensitivity As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.HSLColourPicker.mouseSensitivity*
    - id: Global.HSLColourPicker.slowSensitivityScalar
      commentId: P:Global.HSLColourPicker.slowSensitivityScalar
      language: CSharp
      name:
        CSharp: slowSensitivityScalar
        VB: slowSensitivityScalar
      nameWithType:
        CSharp: HSLColourPicker.slowSensitivityScalar
        VB: HSLColourPicker.slowSensitivityScalar
      qualifiedName:
        CSharp: HSLColourPicker.slowSensitivityScalar
        VB: HSLColourPicker.slowSensitivityScalar
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: slowSensitivityScalar
        path: ''
        startLine: 3130
      summary: The sensitivity of the mouse when holding the modifier keyboard shortcut to reduce the sensitivity.
      example: []
      syntax:
        content:
          CSharp: public float slowSensitivityScalar { get; }
          VB: Public ReadOnly Property slowSensitivityScalar As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.HSLColourPicker.slowSensitivityScalar*
    - id: Global.HSLColourPicker.hue
      commentId: P:Global.HSLColourPicker.hue
      language: CSharp
      name:
        CSharp: hue
        VB: hue
      nameWithType:
        CSharp: HSLColourPicker.hue
        VB: HSLColourPicker.hue
      qualifiedName:
        CSharp: HSLColourPicker.hue
        VB: HSLColourPicker.hue
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hue
        path: ''
        startLine: 3141
      syntax:
        content:
          CSharp: public float hue { get; }
          VB: Public ReadOnly Property hue As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.HSLColourPicker.hue*
    - id: Global.HSLColourPicker.saturation
      commentId: P:Global.HSLColourPicker.saturation
      language: CSharp
      name:
        CSharp: saturation
        VB: saturation
      nameWithType:
        CSharp: HSLColourPicker.saturation
        VB: HSLColourPicker.saturation
      qualifiedName:
        CSharp: HSLColourPicker.saturation
        VB: HSLColourPicker.saturation
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: saturation
        path: ''
        startLine: 3142
      syntax:
        content:
          CSharp: public float saturation { get; }
          VB: Public ReadOnly Property saturation As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.HSLColourPicker.saturation*
    - id: Global.HSLColourPicker.lightness
      commentId: P:Global.HSLColourPicker.lightness
      language: CSharp
      name:
        CSharp: lightness
        VB: lightness
      nameWithType:
        CSharp: HSLColourPicker.lightness
        VB: HSLColourPicker.lightness
      qualifiedName:
        CSharp: HSLColourPicker.lightness
        VB: HSLColourPicker.lightness
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: lightness
        path: ''
        startLine: 3143
      syntax:
        content:
          CSharp: public float lightness { get; }
          VB: Public ReadOnly Property lightness As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.HSLColourPicker.lightness*
    - id: Global.HSLColourPicker.alpha
      commentId: P:Global.HSLColourPicker.alpha
      language: CSharp
      name:
        CSharp: alpha
        VB: alpha
      nameWithType:
        CSharp: HSLColourPicker.alpha
        VB: HSLColourPicker.alpha
      qualifiedName:
        CSharp: HSLColourPicker.alpha
        VB: HSLColourPicker.alpha
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: alpha
        path: ''
        startLine: 3144
      syntax:
        content:
          CSharp: public float alpha { get; }
          VB: Public Property alpha As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.HSLColourPicker.alpha*
    - id: Global.HSLColourPicker.color
      commentId: P:Global.HSLColourPicker.color
      language: CSharp
      name:
        CSharp: color
        VB: color
      nameWithType:
        CSharp: HSLColourPicker.color
        VB: HSLColourPicker.color
      qualifiedName:
        CSharp: HSLColourPicker.color
        VB: HSLColourPicker.color
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: color
        path: ''
        startLine: 3146
      syntax:
        content:
          CSharp: public Color color { get; }
          VB: Public ReadOnly Property color As Color
        parameters: []
        return:
          type: Global.Color
      overload: Global.HSLColourPicker.color*
    - id: Global.HSLColourPicker.hsl
      commentId: P:Global.HSLColourPicker.hsl
      language: CSharp
      name:
        CSharp: hsl
        VB: hsl
      nameWithType:
        CSharp: HSLColourPicker.hsl
        VB: HSLColourPicker.hsl
      qualifiedName:
        CSharp: HSLColourPicker.hsl
        VB: HSLColourPicker.hsl
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hsl
        path: ''
        startLine: 3147
      syntax:
        content:
          CSharp: public HSL hsl { get; }
          VB: Public ReadOnly Property hsl As HSL
        parameters: []
        return:
          type: Global.HSL
      overload: Global.HSLColourPicker.hsl*
    - id: Global.HSLColourPicker.UpdateColour
      commentId: M:Global.HSLColourPicker.UpdateColour
      language: CSharp
      name:
        CSharp: UpdateColour()
        VB: UpdateColour()
      nameWithType:
        CSharp: HSLColourPicker.UpdateColour()
        VB: HSLColourPicker.UpdateColour()
      qualifiedName:
        CSharp: HSLColourPicker.UpdateColour()
        VB: HSLColourPicker.UpdateColour()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UpdateColour
        path: ''
        startLine: 3155
      syntax:
        content:
          CSharp: public void UpdateColour()
          VB: Public Sub UpdateColour()
      overload: Global.HSLColourPicker.UpdateColour*
    - id: Global.HSLColourPicker.SetColour(Color)
      commentId: M:Global.HSLColourPicker.SetColour(Color)
      language: CSharp
      name:
        CSharp: SetColour(Color)
        VB: SetColour(Color)
      nameWithType:
        CSharp: HSLColourPicker.SetColour(Color)
        VB: HSLColourPicker.SetColour(Color)
      qualifiedName:
        CSharp: HSLColourPicker.SetColour(Color)
        VB: HSLColourPicker.SetColour(Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetColour
        path: ''
        startLine: 3161
      syntax:
        content:
          CSharp: public void SetColour(Color colour)
          VB: Public Sub SetColour(colour As Color)
        parameters:
        - id: colour
          type: Global.Color
      overload: Global.HSLColourPicker.SetColour*
    - id: Global.HSLColourPicker.SubscribeToOnColourChange(UnityAction)
      commentId: M:Global.HSLColourPicker.SubscribeToOnColourChange(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnColourChange(UnityAction)
        VB: SubscribeToOnColourChange(UnityAction)
      nameWithType:
        CSharp: HSLColourPicker.SubscribeToOnColourChange(UnityAction)
        VB: HSLColourPicker.SubscribeToOnColourChange(UnityAction)
      qualifiedName:
        CSharp: HSLColourPicker.SubscribeToOnColourChange(UnityAction)
        VB: HSLColourPicker.SubscribeToOnColourChange(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnColourChange
        path: ''
        startLine: 3175
      summary: "\nEvent invoked when the selected colour changes.\n"
      example: []
      syntax:
        content:
          CSharp: public void SubscribeToOnColourChange(UnityAction call)
          VB: Public Sub SubscribeToOnColourChange([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.HSLColourPicker.SubscribeToOnColourChange*
  - id: Global.HSLHueSaturationBox
    commentId: T:Global.HSLHueSaturationBox
    language: CSharp
    name:
      CSharp: HSLHueSaturationBox
      VB: HSLHueSaturationBox
    nameWithType:
      CSharp: HSLHueSaturationBox
      VB: HSLHueSaturationBox
    qualifiedName:
      CSharp: HSLHueSaturationBox
      VB: HSLHueSaturationBox
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: HSLHueSaturationBox
      path: ''
      startLine: 3188
    summary: "\nA class for the hue/saturation box of the HSL colour picker.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class HSLHueSaturationBox : MonoBehaviour'
        VB: Public Class HSLHueSaturationBox Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.HSLHueSaturationBox.hue
      commentId: P:Global.HSLHueSaturationBox.hue
      language: CSharp
      name:
        CSharp: hue
        VB: hue
      nameWithType:
        CSharp: HSLHueSaturationBox.hue
        VB: HSLHueSaturationBox.hue
      qualifiedName:
        CSharp: HSLHueSaturationBox.hue
        VB: HSLHueSaturationBox.hue
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hue
        path: ''
        startLine: 3191
      syntax:
        content:
          CSharp: public float hue { get; }
          VB: Public Property hue As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.HSLHueSaturationBox.hue*
    - id: Global.HSLHueSaturationBox.saturation
      commentId: P:Global.HSLHueSaturationBox.saturation
      language: CSharp
      name:
        CSharp: saturation
        VB: saturation
      nameWithType:
        CSharp: HSLHueSaturationBox.saturation
        VB: HSLHueSaturationBox.saturation
      qualifiedName:
        CSharp: HSLHueSaturationBox.saturation
        VB: HSLHueSaturationBox.saturation
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: saturation
        path: ''
        startLine: 3201
      syntax:
        content:
          CSharp: public float saturation { get; }
          VB: Public Property saturation As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.HSLHueSaturationBox.saturation*
    - id: Global.HSLHueSaturationBox.SetHue(System.Single)
      commentId: M:Global.HSLHueSaturationBox.SetHue(System.Single)
      language: CSharp
      name:
        CSharp: SetHue(float)
        VB: SetHue(Single)
      nameWithType:
        CSharp: HSLHueSaturationBox.SetHue(float)
        VB: HSLHueSaturationBox.SetHue(Single)
      qualifiedName:
        CSharp: HSLHueSaturationBox.SetHue(float)
        VB: HSLHueSaturationBox.SetHue(Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetHue
        path: ''
        startLine: 3243
      syntax:
        content:
          CSharp: public void SetHue(float hue)
          VB: Public Sub SetHue(hue As Single)
        parameters:
        - id: hue
          type: System.Single
      overload: Global.HSLHueSaturationBox.SetHue*
    - id: Global.HSLHueSaturationBox.SetSaturation(System.Single)
      commentId: M:Global.HSLHueSaturationBox.SetSaturation(System.Single)
      language: CSharp
      name:
        CSharp: SetSaturation(float)
        VB: SetSaturation(Single)
      nameWithType:
        CSharp: HSLHueSaturationBox.SetSaturation(float)
        VB: HSLHueSaturationBox.SetSaturation(Single)
      qualifiedName:
        CSharp: HSLHueSaturationBox.SetSaturation(float)
        VB: HSLHueSaturationBox.SetSaturation(Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetSaturation
        path: ''
        startLine: 3248
      syntax:
        content:
          CSharp: public void SetSaturation(float saturation)
          VB: Public Sub SetSaturation(saturation As Single)
        parameters:
        - id: saturation
          type: System.Single
      overload: Global.HSLHueSaturationBox.SetSaturation*
  - id: Global.HSLLightnessSlider
    commentId: T:Global.HSLLightnessSlider
    language: CSharp
    name:
      CSharp: HSLLightnessSlider
      VB: HSLLightnessSlider
    nameWithType:
      CSharp: HSLLightnessSlider
      VB: HSLLightnessSlider
    qualifiedName:
      CSharp: HSLLightnessSlider
      VB: HSLLightnessSlider
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: HSLLightnessSlider
      path: ''
      startLine: 3318
    summary: "\nA class for the lightness slider of the HSL colour picker.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class HSLLightnessSlider : MonoBehaviour'
        VB: Public Class HSLLightnessSlider Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.HSLLightnessSlider.lightness
      commentId: P:Global.HSLLightnessSlider.lightness
      language: CSharp
      name:
        CSharp: lightness
        VB: lightness
      nameWithType:
        CSharp: HSLLightnessSlider.lightness
        VB: HSLLightnessSlider.lightness
      qualifiedName:
        CSharp: HSLLightnessSlider.lightness
        VB: HSLLightnessSlider.lightness
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: lightness
        path: ''
        startLine: 3321
      syntax:
        content:
          CSharp: public float lightness { get; }
          VB: Public Property lightness As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.HSLLightnessSlider.lightness*
    - id: Global.HSLLightnessSlider.SetLightness(System.Single)
      commentId: M:Global.HSLLightnessSlider.SetLightness(System.Single)
      language: CSharp
      name:
        CSharp: SetLightness(float)
        VB: SetLightness(Single)
      nameWithType:
        CSharp: HSLLightnessSlider.SetLightness(float)
        VB: HSLLightnessSlider.SetLightness(Single)
      qualifiedName:
        CSharp: HSLLightnessSlider.SetLightness(float)
        VB: HSLLightnessSlider.SetLightness(Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetLightness
        path: ''
        startLine: 3365
      syntax:
        content:
          CSharp: public void SetLightness(float lightness)
          VB: Public Sub SetLightness(lightness As Single)
        parameters:
        - id: lightness
          type: System.Single
      overload: Global.HSLLightnessSlider.SetLightness*
    - id: Global.HSLLightnessSlider.SetDisplayHueSaturation(System.Single,System.Single)
      commentId: M:Global.HSLLightnessSlider.SetDisplayHueSaturation(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: SetDisplayHueSaturation(float, float)
        VB: SetDisplayHueSaturation(Single, Single)
      nameWithType:
        CSharp: HSLLightnessSlider.SetDisplayHueSaturation(float, float)
        VB: HSLLightnessSlider.SetDisplayHueSaturation(Single, Single)
      qualifiedName:
        CSharp: HSLLightnessSlider.SetDisplayHueSaturation(float, float)
        VB: HSLLightnessSlider.SetDisplayHueSaturation(Single, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetDisplayHueSaturation
        path: ''
        startLine: 3374
      summary: "\nSets the hue/saturation to use for displaying the lightness gradient.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetDisplayHueSaturation(float hue, float saturation)
          VB: Public Sub SetDisplayHueSaturation(hue As Single, saturation As Single)
        parameters:
        - id: hue
          type: System.Single
        - id: saturation
          type: System.Single
      overload: Global.HSLLightnessSlider.SetDisplayHueSaturation*
  - id: Global.CustomStack`1
    commentId: T:Global.CustomStack`1
    language: CSharp
    name:
      CSharp: CustomStack<T>
      VB: CustomStack(Of T)
    nameWithType:
      CSharp: CustomStack<T>
      VB: CustomStack(Of T)
    qualifiedName:
      CSharp: CustomStack<T>
      VB: CustomStack(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: CustomStack
      path: ''
      startLine: 3443
    summary: "\nA custom implementation of a stack to allow removal of items at a specific index.\n"
    example: []
    syntax:
      content:
        CSharp: public class CustomStack<T>
        VB: Public Class CustomStack(Of T)
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.CustomStack`1.Count
      commentId: P:Global.CustomStack`1.Count
      language: CSharp
      name:
        CSharp: Count
        VB: Count
      nameWithType:
        CSharp: CustomStack<T>.Count
        VB: CustomStack(Of T).Count
      qualifiedName:
        CSharp: CustomStack<T>.Count
        VB: CustomStack(Of T).Count
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Count
        path: ''
        startLine: 3447
      syntax:
        content:
          CSharp: public int Count { get; }
          VB: Public ReadOnly Property Count As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.CustomStack`1.Count*
    - id: Global.CustomStack`1.Push(`0)
      commentId: M:Global.CustomStack`1.Push(`0)
      language: CSharp
      name:
        CSharp: Push(T)
        VB: Push(T)
      nameWithType:
        CSharp: CustomStack<T>.Push(T)
        VB: CustomStack(Of T).Push(T)
      qualifiedName:
        CSharp: CustomStack<T>.Push(T)
        VB: CustomStack(Of T).Push(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Push
        path: ''
        startLine: 3452
      summary: "\nAdds the item to the top of the stack.\n"
      example: []
      syntax:
        content:
          CSharp: public void Push(T item)
          VB: Public Sub Push(item As T)
        parameters:
        - id: item
          type: '{T}'
      overload: Global.CustomStack`1.Push*
    - id: Global.CustomStack`1.Peek
      commentId: M:Global.CustomStack`1.Peek
      language: CSharp
      name:
        CSharp: Peek()
        VB: Peek()
      nameWithType:
        CSharp: CustomStack<T>.Peek()
        VB: CustomStack(Of T).Peek()
      qualifiedName:
        CSharp: CustomStack<T>.Peek()
        VB: CustomStack(Of T).Peek()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Peek
        path: ''
        startLine: 3460
      summary: "\nReturns the item on top of the stack.\n"
      example: []
      syntax:
        content:
          CSharp: public T Peek()
          VB: Public Function Peek() As T
        return:
          type: '{T}'
      overload: Global.CustomStack`1.Peek*
    - id: Global.CustomStack`1.Pop
      commentId: M:Global.CustomStack`1.Pop
      language: CSharp
      name:
        CSharp: Pop()
        VB: Pop()
      nameWithType:
        CSharp: CustomStack<T>.Pop()
        VB: CustomStack(Of T).Pop()
      qualifiedName:
        CSharp: CustomStack<T>.Pop()
        VB: CustomStack(Of T).Pop()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Pop
        path: ''
        startLine: 3472
      summary: "\nRemoves and returns the item on top of the stack.\n"
      example: []
      syntax:
        content:
          CSharp: public T Pop()
          VB: Public Function Pop() As T
        return:
          type: '{T}'
      overload: Global.CustomStack`1.Pop*
    - id: Global.CustomStack`1.RemoveAt(System.Int32)
      commentId: M:Global.CustomStack`1.RemoveAt(System.Int32)
      language: CSharp
      name:
        CSharp: RemoveAt(int)
        VB: RemoveAt(Integer)
      nameWithType:
        CSharp: CustomStack<T>.RemoveAt(int)
        VB: CustomStack(Of T).RemoveAt(Integer)
      qualifiedName:
        CSharp: CustomStack<T>.RemoveAt(int)
        VB: CustomStack(Of T).RemoveAt(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RemoveAt
        path: ''
        startLine: 3484
      summary: "\nRemoves the item at the given index and returns it.\n"
      example: []
      syntax:
        content:
          CSharp: public T RemoveAt(int index)
          VB: Public Function RemoveAt(index As Integer) As T
        parameters:
        - id: index
          type: System.Int32
        return:
          type: '{T}'
      overload: Global.CustomStack`1.RemoveAt*
    - id: Global.CustomStack`1.Remove(`0)
      commentId: M:Global.CustomStack`1.Remove(`0)
      language: CSharp
      name:
        CSharp: Remove(T)
        VB: Remove(T)
      nameWithType:
        CSharp: CustomStack<T>.Remove(T)
        VB: CustomStack(Of T).Remove(T)
      qualifiedName:
        CSharp: CustomStack<T>.Remove(T)
        VB: CustomStack(Of T).Remove(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Remove
        path: ''
        startLine: 3503
      summary: "\nRemoves the first occurrence (starting from the top) of the item in the stack.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Remove(T item)
          VB: Public Function Remove(item As T) As Boolean
        parameters:
        - id: item
          type: '{T}'
        return:
          type: System.Boolean
          description: true if the item is successfully removed.
      overload: Global.CustomStack`1.Remove*
    - id: Global.CustomStack`1.RemoveAll(`0)
      commentId: M:Global.CustomStack`1.RemoveAll(`0)
      language: CSharp
      name:
        CSharp: RemoveAll(T)
        VB: RemoveAll(T)
      nameWithType:
        CSharp: CustomStack<T>.RemoveAll(T)
        VB: CustomStack(Of T).RemoveAll(T)
      qualifiedName:
        CSharp: CustomStack<T>.RemoveAll(T)
        VB: CustomStack(Of T).RemoveAll(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RemoveAll
        path: ''
        startLine: 3511
      summary: "\nRemoves all occurrences of the item in the stack.\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveAll(T item)
          VB: Public Sub RemoveAll(item As T)
        parameters:
        - id: item
          type: '{T}'
      overload: Global.CustomStack`1.RemoveAll*
    - id: Global.CustomStack`1.Clear
      commentId: M:Global.CustomStack`1.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: CustomStack<T>.Clear()
        VB: CustomStack(Of T).Clear()
      qualifiedName:
        CSharp: CustomStack<T>.Clear()
        VB: CustomStack(Of T).Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Clear
        path: ''
        startLine: 3519
      summary: "\nRemoves all items from the stack.\n"
      example: []
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear()
      overload: Global.CustomStack`1.Clear*
    - id: Global.CustomStack`1.ToList
      commentId: M:Global.CustomStack`1.ToList
      language: CSharp
      name:
        CSharp: ToList()
        VB: ToList()
      nameWithType:
        CSharp: CustomStack<T>.ToList()
        VB: CustomStack(Of T).ToList()
      qualifiedName:
        CSharp: CustomStack<T>.ToList()
        VB: CustomStack(Of T).ToList()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToList
        path: ''
        startLine: 3524
      syntax:
        content:
          CSharp: public List<T> ToList()
          VB: Public Function ToList() As List(Of T)
        return:
          type: System.Collections.Generic.List{{T}}
      overload: Global.CustomStack`1.ToList*
    - id: Global.CustomStack`1.ToArray
      commentId: M:Global.CustomStack`1.ToArray
      language: CSharp
      name:
        CSharp: ToArray()
        VB: ToArray()
      nameWithType:
        CSharp: CustomStack<T>.ToArray()
        VB: CustomStack(Of T).ToArray()
      qualifiedName:
        CSharp: CustomStack<T>.ToArray()
        VB: CustomStack(Of T).ToArray()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToArray
        path: ''
        startLine: 3528
      syntax:
        content:
          CSharp: public T[] ToArray()
          VB: Public Function ToArray() As T()
        return:
          type: '{T}[]'
      overload: Global.CustomStack`1.ToArray*
  - id: Global.IntRect
    commentId: T:Global.IntRect
    language: CSharp
    name:
      CSharp: IntRect
      VB: IntRect
    nameWithType:
      CSharp: IntRect
      VB: IntRect
    qualifiedName:
      CSharp: IntRect
      VB: IntRect
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: IntRect
      path: ''
      startLine: 3542
    summary: "\nA struct to represent a rectangular region of integer coordinates.\n"
    example: []
    syntax:
      content:
        CSharp: 'public struct IntRect : IEnumerable'
        VB: Public Structure IntRect Implements IEnumerable
    implements:
    - System.Collections.IEnumerable
    inheritedMembers:
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    items:
    - id: Global.IntRect.bottomLeft
      commentId: P:Global.IntRect.bottomLeft
      language: CSharp
      name:
        CSharp: bottomLeft
        VB: bottomLeft
      nameWithType:
        CSharp: IntRect.bottomLeft
        VB: IntRect.bottomLeft
      qualifiedName:
        CSharp: IntRect.bottomLeft
        VB: IntRect.bottomLeft
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: bottomLeft
        path: ''
        startLine: 3545
      syntax:
        content:
          CSharp: public IntVector2 bottomLeft { get; set; }
          VB: Public Property bottomLeft As IntVector2
        parameters: []
        return:
          type: Global.IntVector2
      overload: Global.IntRect.bottomLeft*
    - id: Global.IntRect.topRight
      commentId: P:Global.IntRect.topRight
      language: CSharp
      name:
        CSharp: topRight
        VB: topRight
      nameWithType:
        CSharp: IntRect.topRight
        VB: IntRect.topRight
      qualifiedName:
        CSharp: IntRect.topRight
        VB: IntRect.topRight
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: topRight
        path: ''
        startLine: 3555
      syntax:
        content:
          CSharp: public IntVector2 topRight { get; set; }
          VB: Public Property topRight As IntVector2
        parameters: []
        return:
          type: Global.IntVector2
      overload: Global.IntRect.topRight*
    - id: Global.IntRect.bottomRight
      commentId: P:Global.IntRect.bottomRight
      language: CSharp
      name:
        CSharp: bottomRight
        VB: bottomRight
      nameWithType:
        CSharp: IntRect.bottomRight
        VB: IntRect.bottomRight
      qualifiedName:
        CSharp: IntRect.bottomRight
        VB: IntRect.bottomRight
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: bottomRight
        path: ''
        startLine: 3564
      syntax:
        content:
          CSharp: public IntVector2 bottomRight { get; set; }
          VB: Public Property bottomRight As IntVector2
        parameters: []
        return:
          type: Global.IntVector2
      overload: Global.IntRect.bottomRight*
    - id: Global.IntRect.topLeft
      commentId: P:Global.IntRect.topLeft
      language: CSharp
      name:
        CSharp: topLeft
        VB: topLeft
      nameWithType:
        CSharp: IntRect.topLeft
        VB: IntRect.topLeft
      qualifiedName:
        CSharp: IntRect.topLeft
        VB: IntRect.topLeft
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: topLeft
        path: ''
        startLine: 3574
      syntax:
        content:
          CSharp: public IntVector2 topLeft { get; set; }
          VB: Public Property topLeft As IntVector2
        parameters: []
        return:
          type: Global.IntVector2
      overload: Global.IntRect.topLeft*
    - id: Global.IntRect.centre
      commentId: P:Global.IntRect.centre
      language: CSharp
      name:
        CSharp: centre
        VB: centre
      nameWithType:
        CSharp: IntRect.centre
        VB: IntRect.centre
      qualifiedName:
        CSharp: IntRect.centre
        VB: IntRect.centre
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: centre
        path: ''
        startLine: 3584
      syntax:
        content:
          CSharp: public Vector2 centre { get; }
          VB: Public ReadOnly Property centre As Vector2
        parameters: []
        return:
          type: Global.Vector2
      overload: Global.IntRect.centre*
    - id: Global.IntRect.points
      commentId: P:Global.IntRect.points
      language: CSharp
      name:
        CSharp: points
        VB: points
      nameWithType:
        CSharp: IntRect.points
        VB: IntRect.points
      qualifiedName:
        CSharp: IntRect.points
        VB: IntRect.points
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: points
        path: ''
        startLine: 3587
      summary: The points in the rect, starting with the bottom row, read left to right, then the next row, etc.
      example: []
      syntax:
        content:
          CSharp: public readonly IntVector2[] points { get; }
          VB: Public Property points As IntVector2()
        parameters: []
        return:
          type: Global.IntVector2[]
      overload: Global.IntRect.points*
    - id: Global.IntRect.width
      commentId: P:Global.IntRect.width
      language: CSharp
      name:
        CSharp: width
        VB: width
      nameWithType:
        CSharp: IntRect.width
        VB: IntRect.width
      qualifiedName:
        CSharp: IntRect.width
        VB: IntRect.width
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: width
        path: ''
        startLine: 3589
      syntax:
        content:
          CSharp: public int width { get; }
          VB: Public ReadOnly Property width As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.IntRect.width*
    - id: Global.IntRect.height
      commentId: P:Global.IntRect.height
      language: CSharp
      name:
        CSharp: height
        VB: height
      nameWithType:
        CSharp: IntRect.height
        VB: IntRect.height
      qualifiedName:
        CSharp: IntRect.height
        VB: IntRect.height
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: height
        path: ''
        startLine: 3590
      syntax:
        content:
          CSharp: public int height { get; }
          VB: Public ReadOnly Property height As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.IntRect.height*
    - id: Global.IntRect.area
      commentId: P:Global.IntRect.area
      language: CSharp
      name:
        CSharp: area
        VB: area
      nameWithType:
        CSharp: IntRect.area
        VB: IntRect.area
      qualifiedName:
        CSharp: IntRect.area
        VB: IntRect.area
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: area
        path: ''
        startLine: 3592
      syntax:
        content:
          CSharp: public int area { get; }
          VB: Public ReadOnly Property area As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.IntRect.area*
    - id: Global.IntRect.isSquare
      commentId: P:Global.IntRect.isSquare
      language: CSharp
      name:
        CSharp: isSquare
        VB: isSquare
      nameWithType:
        CSharp: IntRect.isSquare
        VB: IntRect.isSquare
      qualifiedName:
        CSharp: IntRect.isSquare
        VB: IntRect.isSquare
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: isSquare
        path: ''
        startLine: 3595
      summary: True if the rect is a square.
      example: []
      syntax:
        content:
          CSharp: public bool isSquare { get; }
          VB: Public ReadOnly Property isSquare As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.IntRect.isSquare*
    - id: Global.IntRect.#ctor(IntVector2,IntVector2)
      commentId: M:Global.IntRect.#ctor(IntVector2,IntVector2)
      language: CSharp
      name:
        CSharp: IntRect(IntVector2, IntVector2)
        VB: New(IntVector2, IntVector2)
      nameWithType:
        CSharp: IntRect.IntRect(IntVector2, IntVector2)
        VB: IntRect.New(IntVector2, IntVector2)
      qualifiedName:
        CSharp: IntRect.IntRect(IntVector2, IntVector2)
        VB: IntRect.New(IntVector2, IntVector2)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 3598
      syntax:
        content:
          CSharp: public IntRect(IntVector2 corner, IntVector2 oppositeCorner)
          VB: Public Sub New(corner As IntVector2, oppositeCorner As IntVector2)
        parameters:
        - id: corner
          type: Global.IntVector2
        - id: oppositeCorner
          type: Global.IntVector2
      overload: Global.IntRect.#ctor*
    - id: Global.IntRect.op_Equality(IntRect,IntRect)
      commentId: M:Global.IntRect.op_Equality(IntRect,IntRect)
      language: CSharp
      name:
        CSharp: operator ==(IntRect, IntRect)
        VB: =(IntRect, IntRect)
      nameWithType:
        CSharp: IntRect.operator ==(IntRect, IntRect)
        VB: IntRect.=(IntRect, IntRect)
      qualifiedName:
        CSharp: IntRect.operator ==(IntRect, IntRect)
        VB: IntRect.=(IntRect, IntRect)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Equality
        path: ''
        startLine: 3607
      syntax:
        content:
          CSharp: public static bool operator ==(IntRect rect1, IntRect rect2)
          VB: Public Shared Operator =(rect1 As IntRect, rect2 As IntRect) As Boolean
        parameters:
        - id: rect1
          type: Global.IntRect
        - id: rect2
          type: Global.IntRect
        return:
          type: System.Boolean
      overload: Global.IntRect.op_Equality*
    - id: Global.IntRect.op_Inequality(IntRect,IntRect)
      commentId: M:Global.IntRect.op_Inequality(IntRect,IntRect)
      language: CSharp
      name:
        CSharp: operator !=(IntRect, IntRect)
        VB: <>(IntRect, IntRect)
      nameWithType:
        CSharp: IntRect.operator !=(IntRect, IntRect)
        VB: IntRect.<>(IntRect, IntRect)
      qualifiedName:
        CSharp: IntRect.operator !=(IntRect, IntRect)
        VB: IntRect.<>(IntRect, IntRect)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Inequality
        path: ''
        startLine: 3611
      syntax:
        content:
          CSharp: public static bool operator !=(IntRect a, IntRect b)
          VB: Public Shared Operator <>(a As IntRect, b As IntRect) As Boolean
        parameters:
        - id: a
          type: Global.IntRect
        - id: b
          type: Global.IntRect
        return:
          type: System.Boolean
      overload: Global.IntRect.op_Inequality*
    - id: Global.IntRect.Equals(System.Object)
      commentId: M:Global.IntRect.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(object)
        VB: Equals(Object)
      nameWithType:
        CSharp: IntRect.Equals(object)
        VB: IntRect.Equals(Object)
      qualifiedName:
        CSharp: IntRect.Equals(object)
        VB: IntRect.Equals(Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Equals
        path: ''
        startLine: 3615
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Global.IntRect.Equals*
      overridden: System.ValueType.Equals(System.Object)
    - id: Global.IntRect.GetHashCode
      commentId: M:Global.IntRect.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: IntRect.GetHashCode()
        VB: IntRect.GetHashCode()
      qualifiedName:
        CSharp: IntRect.GetHashCode()
        VB: IntRect.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetHashCode
        path: ''
        startLine: 3628
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode() As Integer
        return:
          type: System.Int32
      overload: Global.IntRect.GetHashCode*
      overridden: System.ValueType.GetHashCode
    - id: Global.IntRect.ToString
      commentId: M:Global.IntRect.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: IntRect.ToString()
        VB: IntRect.ToString()
      qualifiedName:
        CSharp: IntRect.ToString()
        VB: IntRect.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToString
        path: ''
        startLine: 3633
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString() As String
        return:
          type: System.String
      overload: Global.IntRect.ToString*
      overridden: System.ValueType.ToString
    - id: Global.IntRect.op_Addition(IntVector2,IntRect)
      commentId: M:Global.IntRect.op_Addition(IntVector2,IntRect)
      language: CSharp
      name:
        CSharp: operator +(IntVector2, IntRect)
        VB: +(IntVector2, IntRect)
      nameWithType:
        CSharp: IntRect.operator +(IntVector2, IntRect)
        VB: IntRect.+(IntVector2, IntRect)
      qualifiedName:
        CSharp: IntRect.operator +(IntVector2, IntRect)
        VB: IntRect.+(IntVector2, IntRect)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Addition
        path: ''
        startLine: 3641
      summary: "\nShifts the whole rect by the given vector.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntRect operator +(IntVector2 intVector, IntRect intRect)
          VB: Public Shared Operator +(intVector As IntVector2, intRect As IntRect) As IntRect
        parameters:
        - id: intVector
          type: Global.IntVector2
        - id: intRect
          type: Global.IntRect
        return:
          type: Global.IntRect
      overload: Global.IntRect.op_Addition*
    - id: Global.IntRect.op_Addition(IntRect,IntVector2)
      commentId: M:Global.IntRect.op_Addition(IntRect,IntVector2)
      language: CSharp
      name:
        CSharp: operator +(IntRect, IntVector2)
        VB: +(IntRect, IntVector2)
      nameWithType:
        CSharp: IntRect.operator +(IntRect, IntVector2)
        VB: IntRect.+(IntRect, IntVector2)
      qualifiedName:
        CSharp: IntRect.operator +(IntRect, IntVector2)
        VB: IntRect.+(IntRect, IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Addition
        path: ''
        startLine: 3645
      summary: "\nShifts the whole rect by the given vector.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntRect operator +(IntRect intRect, IntVector2 intVector)
          VB: Public Shared Operator +(intRect As IntRect, intVector As IntVector2) As IntRect
        parameters:
        - id: intRect
          type: Global.IntRect
        - id: intVector
          type: Global.IntVector2
        return:
          type: Global.IntRect
      overload: Global.IntRect.op_Addition*
    - id: Global.IntRect.op_Subtraction(IntRect,IntVector2)
      commentId: M:Global.IntRect.op_Subtraction(IntRect,IntVector2)
      language: CSharp
      name:
        CSharp: operator -(IntRect, IntVector2)
        VB: -(IntRect, IntVector2)
      nameWithType:
        CSharp: IntRect.operator -(IntRect, IntVector2)
        VB: IntRect.-(IntRect, IntVector2)
      qualifiedName:
        CSharp: IntRect.operator -(IntRect, IntVector2)
        VB: IntRect.-(IntRect, IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Subtraction
        path: ''
        startLine: 3653
      summary: "\nShifts the whole rect by the given vector.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntRect operator -(IntRect intRect, IntVector2 intVector)
          VB: Public Shared Operator -(intRect As IntRect, intVector As IntVector2) As IntRect
        parameters:
        - id: intRect
          type: Global.IntRect
        - id: intVector
          type: Global.IntVector2
        return:
          type: Global.IntRect
      overload: Global.IntRect.op_Subtraction*
    - id: Global.IntRect.op_Explicit(IntRect)~Rect
      commentId: M:Global.IntRect.op_Explicit(IntRect)~Rect
      language: CSharp
      name:
        CSharp: explicit operator Rect(IntRect)
        VB: CType(IntRect)
      nameWithType:
        CSharp: IntRect.explicit operator Rect(IntRect)
        VB: IntRect.CType(IntRect)
      qualifiedName:
        CSharp: IntRect.explicit operator Rect(IntRect)
        VB: IntRect.CType(IntRect)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Explicit
        path: ''
        startLine: 3658
      summary: "\nCast to Unity Rect.\n"
      example: []
      syntax:
        content:
          CSharp: public static explicit operator Rect(IntRect intRect)
          VB: Public Shared Narrowing Operator CType(intRect As IntRect) As Rect
        parameters:
        - id: intRect
          type: Global.IntRect
        return:
          type: Global.Rect
      overload: Global.IntRect.op_Explicit*
    - id: Global.IntRect.ToRect
      commentId: M:Global.IntRect.ToRect
      language: CSharp
      name:
        CSharp: ToRect()
        VB: ToRect()
      nameWithType:
        CSharp: IntRect.ToRect()
        VB: IntRect.ToRect()
      qualifiedName:
        CSharp: IntRect.ToRect()
        VB: IntRect.ToRect()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToRect
        path: ''
        startLine: 3662
      summary: "\nCast to Unity Rect.\n"
      example: []
      syntax:
        content:
          CSharp: public Rect ToRect()
          VB: Public Function ToRect() As Rect
        return:
          type: Global.Rect
      overload: Global.IntRect.ToRect*
    - id: Global.IntRect.IsSquare(IntRect)
      commentId: M:Global.IntRect.IsSquare(IntRect)
      language: CSharp
      name:
        CSharp: IsSquare(IntRect)
        VB: IsSquare(IntRect)
      nameWithType:
        CSharp: IntRect.IsSquare(IntRect)
        VB: IntRect.IsSquare(IntRect)
      qualifiedName:
        CSharp: IntRect.IsSquare(IntRect)
        VB: IntRect.IsSquare(IntRect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsSquare
        path: ''
        startLine: 3670
      summary: "\nReturns true if the rect is a square.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool IsSquare(IntRect intRect)
          VB: Public Shared Function IsSquare(intRect As IntRect) As Boolean
        parameters:
        - id: intRect
          type: Global.IntRect
        return:
          type: System.Boolean
      overload: Global.IntRect.IsSquare*
    - id: Global.IntRect.Area(IntRect)
      commentId: M:Global.IntRect.Area(IntRect)
      language: CSharp
      name:
        CSharp: Area(IntRect)
        VB: Area(IntRect)
      nameWithType:
        CSharp: IntRect.Area(IntRect)
        VB: IntRect.Area(IntRect)
      qualifiedName:
        CSharp: IntRect.Area(IntRect)
        VB: IntRect.Area(IntRect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Area
        path: ''
        startLine: 3675
      syntax:
        content:
          CSharp: public static int Area(IntRect rect)
          VB: Public Shared Function Area(rect As IntRect) As Integer
        parameters:
        - id: rect
          type: Global.IntRect
        return:
          type: System.Int32
      overload: Global.IntRect.Area*
    - id: Global.IntRect.Contains(IntVector2)
      commentId: M:Global.IntRect.Contains(IntVector2)
      language: CSharp
      name:
        CSharp: Contains(IntVector2)
        VB: Contains(IntVector2)
      nameWithType:
        CSharp: IntRect.Contains(IntVector2)
        VB: IntRect.Contains(IntVector2)
      qualifiedName:
        CSharp: IntRect.Contains(IntVector2)
        VB: IntRect.Contains(IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Contains
        path: ''
        startLine: 3683
      summary: "\nReturns true if the point is in the rect.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Contains(IntVector2 point)
          VB: Public Function Contains(point As IntVector2) As Boolean
        parameters:
        - id: point
          type: Global.IntVector2
        return:
          type: System.Boolean
      overload: Global.IntRect.Contains*
    - id: Global.IntRect.Contains(System.Int32,System.Int32)
      commentId: M:Global.IntRect.Contains(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Contains(int, int)
        VB: Contains(Integer, Integer)
      nameWithType:
        CSharp: IntRect.Contains(int, int)
        VB: IntRect.Contains(Integer, Integer)
      qualifiedName:
        CSharp: IntRect.Contains(int, int)
        VB: IntRect.Contains(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Contains
        path: ''
        startLine: 3687
      summary: "\nReturns true if the point is in the rect.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Contains(int x, int y)
          VB: Public Function Contains(x As Integer, y As Integer) As Boolean
        parameters:
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
        return:
          type: System.Boolean
      overload: Global.IntRect.Contains*
    - id: Global.IntRect.Contains(Vector2)
      commentId: M:Global.IntRect.Contains(Vector2)
      language: CSharp
      name:
        CSharp: Contains(Vector2)
        VB: Contains(Vector2)
      nameWithType:
        CSharp: IntRect.Contains(Vector2)
        VB: IntRect.Contains(Vector2)
      qualifiedName:
        CSharp: IntRect.Contains(Vector2)
        VB: IntRect.Contains(Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Contains
        path: ''
        startLine: 3696
      syntax:
        content:
          CSharp: public bool Contains(Vector2 point)
          VB: Public Function Contains(point As Vector2) As Boolean
        parameters:
        - id: point
          type: Global.Vector2
        return:
          type: System.Boolean
      overload: Global.IntRect.Contains*
    - id: Global.IntRect.Contains(System.Single,System.Single)
      commentId: M:Global.IntRect.Contains(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: Contains(float, float)
        VB: Contains(Single, Single)
      nameWithType:
        CSharp: IntRect.Contains(float, float)
        VB: IntRect.Contains(Single, Single)
      qualifiedName:
        CSharp: IntRect.Contains(float, float)
        VB: IntRect.Contains(Single, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Contains
        path: ''
        startLine: 3702
      syntax:
        content:
          CSharp: public bool Contains(float x, float y)
          VB: Public Function Contains(x As Single, y As Single) As Boolean
        parameters:
        - id: x
          type: System.Single
        - id: y
          type: System.Single
        return:
          type: System.Boolean
      overload: Global.IntRect.Contains*
    - id: Global.IntRect.Contains(IntRect)
      commentId: M:Global.IntRect.Contains(IntRect)
      language: CSharp
      name:
        CSharp: Contains(IntRect)
        VB: Contains(IntRect)
      nameWithType:
        CSharp: IntRect.Contains(IntRect)
        VB: IntRect.Contains(IntRect)
      qualifiedName:
        CSharp: IntRect.Contains(IntRect)
        VB: IntRect.Contains(IntRect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Contains
        path: ''
        startLine: 3710
      summary: "\nReturns true if the given rect is (weakly) contained in this rect.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Contains(IntRect intRect)
          VB: Public Function Contains(intRect As IntRect) As Boolean
        parameters:
        - id: intRect
          type: Global.IntRect
        return:
          type: System.Boolean
      overload: Global.IntRect.Contains*
    - id: Global.IntRect.IsContainedIn(IntRect)
      commentId: M:Global.IntRect.IsContainedIn(IntRect)
      language: CSharp
      name:
        CSharp: IsContainedIn(IntRect)
        VB: IsContainedIn(IntRect)
      nameWithType:
        CSharp: IntRect.IsContainedIn(IntRect)
        VB: IntRect.IsContainedIn(IntRect)
      qualifiedName:
        CSharp: IntRect.IsContainedIn(IntRect)
        VB: IntRect.IsContainedIn(IntRect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsContainedIn
        path: ''
        startLine: 3717
      summary: "\nReturns true if this rect is (weakly) contained in the given rect.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsContainedIn(IntRect intRect)
          VB: Public Function IsContainedIn(intRect As IntRect) As Boolean
        parameters:
        - id: intRect
          type: Global.IntRect
        return:
          type: System.Boolean
      overload: Global.IntRect.IsContainedIn*
    - id: Global.IntRect.Overlap(IntRect,IntRect)
      commentId: M:Global.IntRect.Overlap(IntRect,IntRect)
      language: CSharp
      name:
        CSharp: Overlap(IntRect, IntRect)
        VB: Overlap(IntRect, IntRect)
      nameWithType:
        CSharp: IntRect.Overlap(IntRect, IntRect)
        VB: IntRect.Overlap(IntRect, IntRect)
      qualifiedName:
        CSharp: IntRect.Overlap(IntRect, IntRect)
        VB: IntRect.Overlap(IntRect, IntRect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Overlap
        path: ''
        startLine: 3725
      summary: "\nReturns true if the two rects overlap at all.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool Overlap(IntRect rect1, IntRect rect2)
          VB: Public Shared Function Overlap(rect1 As IntRect, rect2 As IntRect) As Boolean
        parameters:
        - id: rect1
          type: Global.IntRect
        - id: rect2
          type: Global.IntRect
        return:
          type: System.Boolean
      overload: Global.IntRect.Overlap*
    - id: Global.IntRect.Overlaps(IntRect)
      commentId: M:Global.IntRect.Overlaps(IntRect)
      language: CSharp
      name:
        CSharp: Overlaps(IntRect)
        VB: Overlaps(IntRect)
      nameWithType:
        CSharp: IntRect.Overlaps(IntRect)
        VB: IntRect.Overlaps(IntRect)
      qualifiedName:
        CSharp: IntRect.Overlaps(IntRect)
        VB: IntRect.Overlaps(IntRect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Overlaps
        path: ''
        startLine: 3740
      summary: "\nReturns true if this rect overlaps the given rect at all.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Overlaps(IntRect intRect)
          VB: Public Function Overlaps(intRect As IntRect) As Boolean
        parameters:
        - id: intRect
          type: Global.IntRect
        return:
          type: System.Boolean
      overload: Global.IntRect.Overlaps*
    - id: Global.IntRect.Clamp(IntVector2)
      commentId: M:Global.IntRect.Clamp(IntVector2)
      language: CSharp
      name:
        CSharp: Clamp(IntVector2)
        VB: Clamp(IntVector2)
      nameWithType:
        CSharp: IntRect.Clamp(IntVector2)
        VB: IntRect.Clamp(IntVector2)
      qualifiedName:
        CSharp: IntRect.Clamp(IntVector2)
        VB: IntRect.Clamp(IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Clamp
        path: ''
        startLine: 3748
      summary: "\nClamps the vector component-wise so its coordinates are within the rect.\n"
      example: []
      syntax:
        content:
          CSharp: public IntVector2 Clamp(IntVector2 intVector)
          VB: Public Function Clamp(intVector As IntVector2) As IntVector2
        parameters:
        - id: intVector
          type: Global.IntVector2
        return:
          type: Global.IntVector2
      overload: Global.IntRect.Clamp*
    - id: Global.IntRect.Clamp(IntRect)
      commentId: M:Global.IntRect.Clamp(IntRect)
      language: CSharp
      name:
        CSharp: Clamp(IntRect)
        VB: Clamp(IntRect)
      nameWithType:
        CSharp: IntRect.Clamp(IntRect)
        VB: IntRect.Clamp(IntRect)
      qualifiedName:
        CSharp: IntRect.Clamp(IntRect)
        VB: IntRect.Clamp(IntRect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Clamp
        path: ''
        startLine: 3755
      summary: "\nShifts the given rect so it is (weakly) contained within the rect.\n"
      example: []
      syntax:
        content:
          CSharp: public IntRect Clamp(IntRect intRect)
          VB: Public Function Clamp(intRect As IntRect) As IntRect
        parameters:
        - id: intRect
          type: Global.IntRect
        return:
          type: Global.IntRect
      overload: Global.IntRect.Clamp*
    - id: Global.IntRect.FilterPointsInside(IntVector2[])
      commentId: M:Global.IntRect.FilterPointsInside(IntVector2[])
      language: CSharp
      name:
        CSharp: FilterPointsInside(IntVector2[])
        VB: FilterPointsInside(IntVector2())
      nameWithType:
        CSharp: IntRect.FilterPointsInside(IntVector2[])
        VB: IntRect.FilterPointsInside(IntVector2())
      qualifiedName:
        CSharp: IntRect.FilterPointsInside(IntVector2[])
        VB: IntRect.FilterPointsInside(IntVector2())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FilterPointsInside
        path: ''
        startLine: 3788
      summary: "\nRemoves all IntVector2s outside the rect.\n"
      example: []
      syntax:
        content:
          CSharp: public IntVector2[] FilterPointsInside(IntVector2[] intVectors)
          VB: Public Function FilterPointsInside(intVectors As IntVector2()) As IntVector2()
        parameters:
        - id: intVectors
          type: Global.IntVector2[]
        return:
          type: Global.IntVector2[]
      overload: Global.IntRect.FilterPointsInside*
    - id: Global.IntRect.FilterPointsOutside(IntVector2[])
      commentId: M:Global.IntRect.FilterPointsOutside(IntVector2[])
      language: CSharp
      name:
        CSharp: FilterPointsOutside(IntVector2[])
        VB: FilterPointsOutside(IntVector2())
      nameWithType:
        CSharp: IntRect.FilterPointsOutside(IntVector2[])
        VB: IntRect.FilterPointsOutside(IntVector2())
      qualifiedName:
        CSharp: IntRect.FilterPointsOutside(IntVector2[])
        VB: IntRect.FilterPointsOutside(IntVector2())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FilterPointsOutside
        path: ''
        startLine: 3797
      summary: "\nRemoves all IntVector2s inside the rect.\n"
      example: []
      syntax:
        content:
          CSharp: public IntVector2[] FilterPointsOutside(IntVector2[] intVectors)
          VB: Public Function FilterPointsOutside(intVectors As IntVector2()) As IntVector2()
        parameters:
        - id: intVectors
          type: Global.IntVector2[]
        return:
          type: Global.IntVector2[]
      overload: Global.IntRect.FilterPointsOutside*
    - id: Global.IntRect.GetEnumerator
      commentId: M:Global.IntRect.GetEnumerator
      language: CSharp
      name:
        CSharp: GetEnumerator()
        VB: GetEnumerator()
      nameWithType:
        CSharp: IntRect.GetEnumerator()
        VB: IntRect.GetEnumerator()
      qualifiedName:
        CSharp: IntRect.GetEnumerator()
        VB: IntRect.GetEnumerator()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetEnumerator
        path: ''
        startLine: 3820
      summary: "\nEnumerates the points in the rect, starting with the bottom row, read left to right, then the next row, etc.\n"
      example: []
      syntax:
        content:
          CSharp: public IEnumerator GetEnumerator()
          VB: Public Function GetEnumerator() As IEnumerator
        return:
          type: System.Collections.IEnumerator
      overload: Global.IntRect.GetEnumerator*
      implements:
      - System.Collections.IEnumerable.GetEnumerator
  - id: Global.IntVector2
    commentId: T:Global.IntVector2
    language: CSharp
    name:
      CSharp: IntVector2
      VB: IntVector2
    nameWithType:
      CSharp: IntVector2
      VB: IntVector2
    qualifiedName:
      CSharp: IntVector2
      VB: IntVector2
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: IntVector2
      path: ''
      startLine: 3834
    summary: "\nA struct to represent a 2-dimensional vector with integer coordinates.\n"
    example: []
    syntax:
      content:
        CSharp: public struct IntVector2
        VB: Public Structure IntVector2
    inheritedMembers:
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    items:
    - id: Global.IntVector2.x
      commentId: F:Global.IntVector2.x
      language: CSharp
      name:
        CSharp: x
        VB: x
      nameWithType:
        CSharp: IntVector2.x
        VB: IntVector2.x
      qualifiedName:
        CSharp: IntVector2.x
        VB: IntVector2.x
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: x
        path: ''
        startLine: 3836
      syntax:
        content:
          CSharp: public int x
          VB: Public x As Integer
        return:
          type: System.Int32
    - id: Global.IntVector2.y
      commentId: F:Global.IntVector2.y
      language: CSharp
      name:
        CSharp: y
        VB: y
      nameWithType:
        CSharp: IntVector2.y
        VB: IntVector2.y
      qualifiedName:
        CSharp: IntVector2.y
        VB: IntVector2.y
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: y
        path: ''
        startLine: 3837
      syntax:
        content:
          CSharp: public int y
          VB: Public y As Integer
        return:
          type: System.Int32
    - id: Global.IntVector2.magnitude
      commentId: P:Global.IntVector2.magnitude
      language: CSharp
      name:
        CSharp: magnitude
        VB: magnitude
      nameWithType:
        CSharp: IntVector2.magnitude
        VB: IntVector2.magnitude
      qualifiedName:
        CSharp: IntVector2.magnitude
        VB: IntVector2.magnitude
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: magnitude
        path: ''
        startLine: 3839
      syntax:
        content:
          CSharp: public float magnitude { get; }
          VB: Public ReadOnly Property magnitude As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.IntVector2.magnitude*
    - id: Global.IntVector2.squaredMagnitude
      commentId: P:Global.IntVector2.squaredMagnitude
      language: CSharp
      name:
        CSharp: squaredMagnitude
        VB: squaredMagnitude
      nameWithType:
        CSharp: IntVector2.squaredMagnitude
        VB: IntVector2.squaredMagnitude
      qualifiedName:
        CSharp: IntVector2.squaredMagnitude
        VB: IntVector2.squaredMagnitude
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: squaredMagnitude
        path: ''
        startLine: 3840
      syntax:
        content:
          CSharp: public float squaredMagnitude { get; }
          VB: Public ReadOnly Property squaredMagnitude As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.IntVector2.squaredMagnitude*
    - id: Global.IntVector2.#ctor(System.Int32,System.Int32)
      commentId: M:Global.IntVector2.#ctor(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: IntVector2(int, int)
        VB: New(Integer, Integer)
      nameWithType:
        CSharp: IntVector2.IntVector2(int, int)
        VB: IntVector2.New(Integer, Integer)
      qualifiedName:
        CSharp: IntVector2.IntVector2(int, int)
        VB: IntVector2.New(Integer, Integer)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 3842
      syntax:
        content:
          CSharp: public IntVector2(int x, int y)
          VB: Public Sub New(x As Integer, y As Integer)
        parameters:
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
      overload: Global.IntVector2.#ctor*
    - id: Global.IntVector2.#ctor(System.Single,System.Single)
      commentId: M:Global.IntVector2.#ctor(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: IntVector2(float, float)
        VB: New(Single, Single)
      nameWithType:
        CSharp: IntVector2.IntVector2(float, float)
        VB: IntVector2.New(Single, Single)
      qualifiedName:
        CSharp: IntVector2.IntVector2(float, float)
        VB: IntVector2.New(Single, Single)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 3850
      summary: "\nRounds the coords towards zero.\n"
      example: []
      syntax:
        content:
          CSharp: public IntVector2(float x, float y)
          VB: Public Sub New(x As Single, y As Single)
        parameters:
        - id: x
          type: System.Single
        - id: y
          type: System.Single
      overload: Global.IntVector2.#ctor*
    - id: Global.IntVector2.#ctor(Vector2)
      commentId: M:Global.IntVector2.#ctor(Vector2)
      language: CSharp
      name:
        CSharp: IntVector2(Vector2)
        VB: New(Vector2)
      nameWithType:
        CSharp: IntVector2.IntVector2(Vector2)
        VB: IntVector2.New(Vector2)
      qualifiedName:
        CSharp: IntVector2.IntVector2(Vector2)
        VB: IntVector2.New(Vector2)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 3858
      summary: "\nRounds the coords towards zero.\n"
      example: []
      syntax:
        content:
          CSharp: public IntVector2(Vector2 vector2)
          VB: Public Sub New(vector2 As Vector2)
        parameters:
        - id: vector2
          type: Global.Vector2
      overload: Global.IntVector2.#ctor*
    - id: Global.IntVector2.zero
      commentId: F:Global.IntVector2.zero
      language: CSharp
      name:
        CSharp: zero
        VB: zero
      nameWithType:
        CSharp: IntVector2.zero
        VB: IntVector2.zero
      qualifiedName:
        CSharp: IntVector2.zero
        VB: IntVector2.zero
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: zero
        path: ''
        startLine: 3865
      summary: The vector (0, 0).
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 zero
          VB: Public Shared zero As IntVector2
        return:
          type: Global.IntVector2
    - id: Global.IntVector2.one
      commentId: F:Global.IntVector2.one
      language: CSharp
      name:
        CSharp: one
        VB: one
      nameWithType:
        CSharp: IntVector2.one
        VB: IntVector2.one
      qualifiedName:
        CSharp: IntVector2.one
        VB: IntVector2.one
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: one
        path: ''
        startLine: 3867
      summary: The vector (1, 1).
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 one
          VB: Public Shared one As IntVector2
        return:
          type: Global.IntVector2
    - id: Global.IntVector2.right
      commentId: F:Global.IntVector2.right
      language: CSharp
      name:
        CSharp: right
        VB: right
      nameWithType:
        CSharp: IntVector2.right
        VB: IntVector2.right
      qualifiedName:
        CSharp: IntVector2.right
        VB: IntVector2.right
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: right
        path: ''
        startLine: 3869
      summary: The vector (1, 0).
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 right
          VB: Public Shared right As IntVector2
        return:
          type: Global.IntVector2
    - id: Global.IntVector2.left
      commentId: F:Global.IntVector2.left
      language: CSharp
      name:
        CSharp: left
        VB: left
      nameWithType:
        CSharp: IntVector2.left
        VB: IntVector2.left
      qualifiedName:
        CSharp: IntVector2.left
        VB: IntVector2.left
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: left
        path: ''
        startLine: 3871
      summary: The vector (-1, 0).
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 left
          VB: Public Shared left As IntVector2
        return:
          type: Global.IntVector2
    - id: Global.IntVector2.up
      commentId: F:Global.IntVector2.up
      language: CSharp
      name:
        CSharp: up
        VB: up
      nameWithType:
        CSharp: IntVector2.up
        VB: IntVector2.up
      qualifiedName:
        CSharp: IntVector2.up
        VB: IntVector2.up
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: up
        path: ''
        startLine: 3873
      summary: The vector (0, 1).
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 up
          VB: Public Shared up As IntVector2
        return:
          type: Global.IntVector2
    - id: Global.IntVector2.down
      commentId: F:Global.IntVector2.down
      language: CSharp
      name:
        CSharp: down
        VB: down
      nameWithType:
        CSharp: IntVector2.down
        VB: IntVector2.down
      qualifiedName:
        CSharp: IntVector2.down
        VB: IntVector2.down
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: down
        path: ''
        startLine: 3875
      summary: The vector (0, -1).
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 down
          VB: Public Shared down As IntVector2
        return:
          type: Global.IntVector2
    - id: Global.IntVector2.op_Equality(IntVector2,IntVector2)
      commentId: M:Global.IntVector2.op_Equality(IntVector2,IntVector2)
      language: CSharp
      name:
        CSharp: operator ==(IntVector2, IntVector2)
        VB: =(IntVector2, IntVector2)
      nameWithType:
        CSharp: IntVector2.operator ==(IntVector2, IntVector2)
        VB: IntVector2.=(IntVector2, IntVector2)
      qualifiedName:
        CSharp: IntVector2.operator ==(IntVector2, IntVector2)
        VB: IntVector2.=(IntVector2, IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Equality
        path: ''
        startLine: 3877
      syntax:
        content:
          CSharp: public static bool operator ==(IntVector2 a, IntVector2 b)
          VB: Public Shared Operator =(a As IntVector2, b As IntVector2) As Boolean
        parameters:
        - id: a
          type: Global.IntVector2
        - id: b
          type: Global.IntVector2
        return:
          type: System.Boolean
      overload: Global.IntVector2.op_Equality*
    - id: Global.IntVector2.op_Inequality(IntVector2,IntVector2)
      commentId: M:Global.IntVector2.op_Inequality(IntVector2,IntVector2)
      language: CSharp
      name:
        CSharp: operator !=(IntVector2, IntVector2)
        VB: <>(IntVector2, IntVector2)
      nameWithType:
        CSharp: IntVector2.operator !=(IntVector2, IntVector2)
        VB: IntVector2.<>(IntVector2, IntVector2)
      qualifiedName:
        CSharp: IntVector2.operator !=(IntVector2, IntVector2)
        VB: IntVector2.<>(IntVector2, IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Inequality
        path: ''
        startLine: 3881
      syntax:
        content:
          CSharp: public static bool operator !=(IntVector2 a, IntVector2 b)
          VB: Public Shared Operator <>(a As IntVector2, b As IntVector2) As Boolean
        parameters:
        - id: a
          type: Global.IntVector2
        - id: b
          type: Global.IntVector2
        return:
          type: System.Boolean
      overload: Global.IntVector2.op_Inequality*
    - id: Global.IntVector2.Equals(System.Object)
      commentId: M:Global.IntVector2.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(object)
        VB: Equals(Object)
      nameWithType:
        CSharp: IntVector2.Equals(object)
        VB: IntVector2.Equals(Object)
      qualifiedName:
        CSharp: IntVector2.Equals(object)
        VB: IntVector2.Equals(Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Equals
        path: ''
        startLine: 3885
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Global.IntVector2.Equals*
      overridden: System.ValueType.Equals(System.Object)
    - id: Global.IntVector2.GetHashCode
      commentId: M:Global.IntVector2.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: IntVector2.GetHashCode()
        VB: IntVector2.GetHashCode()
      qualifiedName:
        CSharp: IntVector2.GetHashCode()
        VB: IntVector2.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetHashCode
        path: ''
        startLine: 3898
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode() As Integer
        return:
          type: System.Int32
      overload: Global.IntVector2.GetHashCode*
      overridden: System.ValueType.GetHashCode
    - id: Global.IntVector2.ToString
      commentId: M:Global.IntVector2.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: IntVector2.ToString()
        VB: IntVector2.ToString()
      qualifiedName:
        CSharp: IntVector2.ToString()
        VB: IntVector2.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToString
        path: ''
        startLine: 3903
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString() As String
        return:
          type: System.String
      overload: Global.IntVector2.ToString*
      overridden: System.ValueType.ToString
    - id: Global.IntVector2.op_LessThan(IntVector2,IntVector2)
      commentId: M:Global.IntVector2.op_LessThan(IntVector2,IntVector2)
      language: CSharp
      name:
        CSharp: operator <(IntVector2, IntVector2)
        VB: <(IntVector2, IntVector2)
      nameWithType:
        CSharp: IntVector2.operator <(IntVector2, IntVector2)
        VB: IntVector2.<(IntVector2, IntVector2)
      qualifiedName:
        CSharp: IntVector2.operator <(IntVector2, IntVector2)
        VB: IntVector2.<(IntVector2, IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_LessThan
        path: ''
        startLine: 3911
      summary: "\nCompares component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <(IntVector2 a, IntVector2 b)
          VB: Public Shared Operator <(a As IntVector2, b As IntVector2) As Boolean
        parameters:
        - id: a
          type: Global.IntVector2
        - id: b
          type: Global.IntVector2
        return:
          type: System.Boolean
      overload: Global.IntVector2.op_LessThan*
    - id: Global.IntVector2.op_GreaterThan(IntVector2,IntVector2)
      commentId: M:Global.IntVector2.op_GreaterThan(IntVector2,IntVector2)
      language: CSharp
      name:
        CSharp: operator >(IntVector2, IntVector2)
        VB: '>(IntVector2, IntVector2)'
      nameWithType:
        CSharp: IntVector2.operator >(IntVector2, IntVector2)
        VB: IntVector2.>(IntVector2, IntVector2)
      qualifiedName:
        CSharp: IntVector2.operator >(IntVector2, IntVector2)
        VB: IntVector2.>(IntVector2, IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_GreaterThan
        path: ''
        startLine: 3918
      summary: "\nCompares component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator >(IntVector2 a, IntVector2 b)
          VB: Public Shared Operator >(a As IntVector2, b As IntVector2) As Boolean
        parameters:
        - id: a
          type: Global.IntVector2
        - id: b
          type: Global.IntVector2
        return:
          type: System.Boolean
      overload: Global.IntVector2.op_GreaterThan*
    - id: Global.IntVector2.op_LessThanOrEqual(IntVector2,IntVector2)
      commentId: M:Global.IntVector2.op_LessThanOrEqual(IntVector2,IntVector2)
      language: CSharp
      name:
        CSharp: operator <=(IntVector2, IntVector2)
        VB: <=(IntVector2, IntVector2)
      nameWithType:
        CSharp: IntVector2.operator <=(IntVector2, IntVector2)
        VB: IntVector2.<=(IntVector2, IntVector2)
      qualifiedName:
        CSharp: IntVector2.operator <=(IntVector2, IntVector2)
        VB: IntVector2.<=(IntVector2, IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_LessThanOrEqual
        path: ''
        startLine: 3925
      summary: "\nCompares component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <=(IntVector2 a, IntVector2 b)
          VB: Public Shared Operator <=(a As IntVector2, b As IntVector2) As Boolean
        parameters:
        - id: a
          type: Global.IntVector2
        - id: b
          type: Global.IntVector2
        return:
          type: System.Boolean
      overload: Global.IntVector2.op_LessThanOrEqual*
    - id: Global.IntVector2.op_GreaterThanOrEqual(IntVector2,IntVector2)
      commentId: M:Global.IntVector2.op_GreaterThanOrEqual(IntVector2,IntVector2)
      language: CSharp
      name:
        CSharp: operator >=(IntVector2, IntVector2)
        VB: '>=(IntVector2, IntVector2)'
      nameWithType:
        CSharp: IntVector2.operator >=(IntVector2, IntVector2)
        VB: IntVector2.>=(IntVector2, IntVector2)
      qualifiedName:
        CSharp: IntVector2.operator >=(IntVector2, IntVector2)
        VB: IntVector2.>=(IntVector2, IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_GreaterThanOrEqual
        path: ''
        startLine: 3932
      summary: "\nCompares component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator >=(IntVector2 a, IntVector2 b)
          VB: Public Shared Operator >=(a As IntVector2, b As IntVector2) As Boolean
        parameters:
        - id: a
          type: Global.IntVector2
        - id: b
          type: Global.IntVector2
        return:
          type: System.Boolean
      overload: Global.IntVector2.op_GreaterThanOrEqual*
    - id: Global.IntVector2.op_Addition(IntVector2,IntVector2)
      commentId: M:Global.IntVector2.op_Addition(IntVector2,IntVector2)
      language: CSharp
      name:
        CSharp: operator +(IntVector2, IntVector2)
        VB: +(IntVector2, IntVector2)
      nameWithType:
        CSharp: IntVector2.operator +(IntVector2, IntVector2)
        VB: IntVector2.+(IntVector2, IntVector2)
      qualifiedName:
        CSharp: IntVector2.operator +(IntVector2, IntVector2)
        VB: IntVector2.+(IntVector2, IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Addition
        path: ''
        startLine: 3940
      summary: "\nAdds component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 operator +(IntVector2 a, IntVector2 b)
          VB: Public Shared Operator +(a As IntVector2, b As IntVector2) As IntVector2
        parameters:
        - id: a
          type: Global.IntVector2
        - id: b
          type: Global.IntVector2
        return:
          type: Global.IntVector2
      overload: Global.IntVector2.op_Addition*
    - id: Global.IntVector2.op_Addition(IntVector2,IntVector2[])
      commentId: M:Global.IntVector2.op_Addition(IntVector2,IntVector2[])
      language: CSharp
      name:
        CSharp: operator +(IntVector2, IntVector2[])
        VB: +(IntVector2, IntVector2())
      nameWithType:
        CSharp: IntVector2.operator +(IntVector2, IntVector2[])
        VB: IntVector2.+(IntVector2, IntVector2())
      qualifiedName:
        CSharp: IntVector2.operator +(IntVector2, IntVector2[])
        VB: IntVector2.+(IntVector2, IntVector2())
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Addition
        path: ''
        startLine: 3947
      summary: "\nAdds the vector to each element of the array.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2[] operator +(IntVector2 intVector, IntVector2[] intVectorArray)
          VB: Public Shared Operator +(intVector As IntVector2, intVectorArray As IntVector2()) As IntVector2()
        parameters:
        - id: intVector
          type: Global.IntVector2
        - id: intVectorArray
          type: Global.IntVector2[]
        return:
          type: Global.IntVector2[]
      overload: Global.IntVector2.op_Addition*
    - id: Global.IntVector2.op_Addition(IntVector2[],IntVector2)
      commentId: M:Global.IntVector2.op_Addition(IntVector2[],IntVector2)
      language: CSharp
      name:
        CSharp: operator +(IntVector2[], IntVector2)
        VB: +(IntVector2(), IntVector2)
      nameWithType:
        CSharp: IntVector2.operator +(IntVector2[], IntVector2)
        VB: IntVector2.+(IntVector2(), IntVector2)
      qualifiedName:
        CSharp: IntVector2.operator +(IntVector2[], IntVector2)
        VB: IntVector2.+(IntVector2(), IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Addition
        path: ''
        startLine: 3959
      summary: "\nAdds the vector to each element of the array.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2[] operator +(IntVector2[] intVectorArray, IntVector2 intVector)
          VB: Public Shared Operator +(intVectorArray As IntVector2(), intVector As IntVector2) As IntVector2()
        parameters:
        - id: intVectorArray
          type: Global.IntVector2[]
        - id: intVector
          type: Global.IntVector2
        return:
          type: Global.IntVector2[]
      overload: Global.IntVector2.op_Addition*
    - id: Global.IntVector2.op_Subtraction(IntVector2,IntVector2)
      commentId: M:Global.IntVector2.op_Subtraction(IntVector2,IntVector2)
      language: CSharp
      name:
        CSharp: operator -(IntVector2, IntVector2)
        VB: -(IntVector2, IntVector2)
      nameWithType:
        CSharp: IntVector2.operator -(IntVector2, IntVector2)
        VB: IntVector2.-(IntVector2, IntVector2)
      qualifiedName:
        CSharp: IntVector2.operator -(IntVector2, IntVector2)
        VB: IntVector2.-(IntVector2, IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Subtraction
        path: ''
        startLine: 3967
      summary: "\nSubtracts component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 operator -(IntVector2 a, IntVector2 b)
          VB: Public Shared Operator -(a As IntVector2, b As IntVector2) As IntVector2
        parameters:
        - id: a
          type: Global.IntVector2
        - id: b
          type: Global.IntVector2
        return:
          type: Global.IntVector2
      overload: Global.IntVector2.op_Subtraction*
    - id: Global.IntVector2.op_UnaryNegation(IntVector2)
      commentId: M:Global.IntVector2.op_UnaryNegation(IntVector2)
      language: CSharp
      name:
        CSharp: operator -(IntVector2)
        VB: -(IntVector2)
      nameWithType:
        CSharp: IntVector2.operator -(IntVector2)
        VB: IntVector2.-(IntVector2)
      qualifiedName:
        CSharp: IntVector2.operator -(IntVector2)
        VB: IntVector2.-(IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_UnaryNegation
        path: ''
        startLine: 3974
      summary: "\nNegates component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 operator -(IntVector2 a)
          VB: Public Shared Operator -(a As IntVector2) As IntVector2
        parameters:
        - id: a
          type: Global.IntVector2
        return:
          type: Global.IntVector2
      overload: Global.IntVector2.op_UnaryNegation*
    - id: Global.IntVector2.op_Subtraction(IntVector2,IntVector2[])
      commentId: M:Global.IntVector2.op_Subtraction(IntVector2,IntVector2[])
      language: CSharp
      name:
        CSharp: operator -(IntVector2, IntVector2[])
        VB: -(IntVector2, IntVector2())
      nameWithType:
        CSharp: IntVector2.operator -(IntVector2, IntVector2[])
        VB: IntVector2.-(IntVector2, IntVector2())
      qualifiedName:
        CSharp: IntVector2.operator -(IntVector2, IntVector2[])
        VB: IntVector2.-(IntVector2, IntVector2())
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Subtraction
        path: ''
        startLine: 3981
      summary: "\nSubtracts each element of the array from the vector.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2[] operator -(IntVector2 intVector, IntVector2[] intVectorArray)
          VB: Public Shared Operator -(intVector As IntVector2, intVectorArray As IntVector2()) As IntVector2()
        parameters:
        - id: intVector
          type: Global.IntVector2
        - id: intVectorArray
          type: Global.IntVector2[]
        return:
          type: Global.IntVector2[]
      overload: Global.IntVector2.op_Subtraction*
    - id: Global.IntVector2.op_Subtraction(IntVector2[],IntVector2)
      commentId: M:Global.IntVector2.op_Subtraction(IntVector2[],IntVector2)
      language: CSharp
      name:
        CSharp: operator -(IntVector2[], IntVector2)
        VB: -(IntVector2(), IntVector2)
      nameWithType:
        CSharp: IntVector2.operator -(IntVector2[], IntVector2)
        VB: IntVector2.-(IntVector2(), IntVector2)
      qualifiedName:
        CSharp: IntVector2.operator -(IntVector2[], IntVector2)
        VB: IntVector2.-(IntVector2(), IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Subtraction
        path: ''
        startLine: 3993
      summary: "\nSubtracts the vector from each element of the array.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2[] operator -(IntVector2[] intVectorArray, IntVector2 intVector)
          VB: Public Shared Operator -(intVectorArray As IntVector2(), intVector As IntVector2) As IntVector2()
        parameters:
        - id: intVectorArray
          type: Global.IntVector2[]
        - id: intVector
          type: Global.IntVector2
        return:
          type: Global.IntVector2[]
      overload: Global.IntVector2.op_Subtraction*
    - id: Global.IntVector2.op_Multiply(IntVector2,IntVector2)
      commentId: M:Global.IntVector2.op_Multiply(IntVector2,IntVector2)
      language: CSharp
      name:
        CSharp: operator *(IntVector2, IntVector2)
        VB: '*(IntVector2, IntVector2)'
      nameWithType:
        CSharp: IntVector2.operator *(IntVector2, IntVector2)
        VB: IntVector2.*(IntVector2, IntVector2)
      qualifiedName:
        CSharp: IntVector2.operator *(IntVector2, IntVector2)
        VB: IntVector2.*(IntVector2, IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Multiply
        path: ''
        startLine: 4001
      summary: "\nMultiplies component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 operator *(IntVector2 a, IntVector2 b)
          VB: Public Shared Operator *(a As IntVector2, b As IntVector2) As IntVector2
        parameters:
        - id: a
          type: Global.IntVector2
        - id: b
          type: Global.IntVector2
        return:
          type: Global.IntVector2
      overload: Global.IntVector2.op_Multiply*
    - id: Global.IntVector2.op_Multiply(System.Int32,IntVector2)
      commentId: M:Global.IntVector2.op_Multiply(System.Int32,IntVector2)
      language: CSharp
      name:
        CSharp: operator *(int, IntVector2)
        VB: '*(Integer, IntVector2)'
      nameWithType:
        CSharp: IntVector2.operator *(int, IntVector2)
        VB: IntVector2.*(Integer, IntVector2)
      qualifiedName:
        CSharp: IntVector2.operator *(int, IntVector2)
        VB: IntVector2.*(Integer, IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Multiply
        path: ''
        startLine: 4008
      summary: "\nMultiplies component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 operator *(int scalar, IntVector2 vector)
          VB: Public Shared Operator *(scalar As Integer, vector As IntVector2) As IntVector2
        parameters:
        - id: scalar
          type: System.Int32
        - id: vector
          type: Global.IntVector2
        return:
          type: Global.IntVector2
      overload: Global.IntVector2.op_Multiply*
    - id: Global.IntVector2.op_Multiply(IntVector2,System.Int32)
      commentId: M:Global.IntVector2.op_Multiply(IntVector2,System.Int32)
      language: CSharp
      name:
        CSharp: operator *(IntVector2, int)
        VB: '*(IntVector2, Integer)'
      nameWithType:
        CSharp: IntVector2.operator *(IntVector2, int)
        VB: IntVector2.*(IntVector2, Integer)
      qualifiedName:
        CSharp: IntVector2.operator *(IntVector2, int)
        VB: IntVector2.*(IntVector2, Integer)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Multiply
        path: ''
        startLine: 4015
      summary: "\nMultiplies component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 operator *(IntVector2 vector, int scalar)
          VB: Public Shared Operator *(vector As IntVector2, scalar As Integer) As IntVector2
        parameters:
        - id: vector
          type: Global.IntVector2
        - id: scalar
          type: System.Int32
        return:
          type: Global.IntVector2
      overload: Global.IntVector2.op_Multiply*
    - id: Global.IntVector2.op_Multiply(IntVector2,IntVector2[])
      commentId: M:Global.IntVector2.op_Multiply(IntVector2,IntVector2[])
      language: CSharp
      name:
        CSharp: operator *(IntVector2, IntVector2[])
        VB: '*(IntVector2, IntVector2())'
      nameWithType:
        CSharp: IntVector2.operator *(IntVector2, IntVector2[])
        VB: IntVector2.*(IntVector2, IntVector2())
      qualifiedName:
        CSharp: IntVector2.operator *(IntVector2, IntVector2[])
        VB: IntVector2.*(IntVector2, IntVector2())
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Multiply
        path: ''
        startLine: 4022
      summary: "\nMultiplies each element of the array by the vector.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2[] operator *(IntVector2 intVector, IntVector2[] intVectorArray)
          VB: Public Shared Operator *(intVector As IntVector2, intVectorArray As IntVector2()) As IntVector2()
        parameters:
        - id: intVector
          type: Global.IntVector2
        - id: intVectorArray
          type: Global.IntVector2[]
        return:
          type: Global.IntVector2[]
      overload: Global.IntVector2.op_Multiply*
    - id: Global.IntVector2.op_Multiply(IntVector2[],IntVector2)
      commentId: M:Global.IntVector2.op_Multiply(IntVector2[],IntVector2)
      language: CSharp
      name:
        CSharp: operator *(IntVector2[], IntVector2)
        VB: '*(IntVector2(), IntVector2)'
      nameWithType:
        CSharp: IntVector2.operator *(IntVector2[], IntVector2)
        VB: IntVector2.*(IntVector2(), IntVector2)
      qualifiedName:
        CSharp: IntVector2.operator *(IntVector2[], IntVector2)
        VB: IntVector2.*(IntVector2(), IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Multiply
        path: ''
        startLine: 4034
      summary: "\nMultiplies each element of the array by the vector.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2[] operator *(IntVector2[] intVectorArray, IntVector2 intVector)
          VB: Public Shared Operator *(intVectorArray As IntVector2(), intVector As IntVector2) As IntVector2()
        parameters:
        - id: intVectorArray
          type: Global.IntVector2[]
        - id: intVector
          type: Global.IntVector2
        return:
          type: Global.IntVector2[]
      overload: Global.IntVector2.op_Multiply*
    - id: Global.IntVector2.op_Division(IntVector2,IntVector2)
      commentId: M:Global.IntVector2.op_Division(IntVector2,IntVector2)
      language: CSharp
      name:
        CSharp: operator /(IntVector2, IntVector2)
        VB: /(IntVector2, IntVector2)
      nameWithType:
        CSharp: IntVector2.operator /(IntVector2, IntVector2)
        VB: IntVector2./(IntVector2, IntVector2)
      qualifiedName:
        CSharp: IntVector2.operator /(IntVector2, IntVector2)
        VB: IntVector2./(IntVector2, IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Division
        path: ''
        startLine: 4042
      summary: "\nDivides (integer division) component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 operator /(IntVector2 a, IntVector2 b)
          VB: Public Shared Operator /(a As IntVector2, b As IntVector2) As IntVector2
        parameters:
        - id: a
          type: Global.IntVector2
        - id: b
          type: Global.IntVector2
        return:
          type: Global.IntVector2
      overload: Global.IntVector2.op_Division*
    - id: Global.IntVector2.op_Division(IntVector2,System.Int32)
      commentId: M:Global.IntVector2.op_Division(IntVector2,System.Int32)
      language: CSharp
      name:
        CSharp: operator /(IntVector2, int)
        VB: /(IntVector2, Integer)
      nameWithType:
        CSharp: IntVector2.operator /(IntVector2, int)
        VB: IntVector2./(IntVector2, Integer)
      qualifiedName:
        CSharp: IntVector2.operator /(IntVector2, int)
        VB: IntVector2./(IntVector2, Integer)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Division
        path: ''
        startLine: 4049
      summary: "\nDivides (integer division) component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 operator /(IntVector2 vector, int scalar)
          VB: Public Shared Operator /(vector As IntVector2, scalar As Integer) As IntVector2
        parameters:
        - id: vector
          type: Global.IntVector2
        - id: scalar
          type: System.Int32
        return:
          type: Global.IntVector2
      overload: Global.IntVector2.op_Division*
    - id: Global.IntVector2.op_Division(IntVector2,IntVector2[])
      commentId: M:Global.IntVector2.op_Division(IntVector2,IntVector2[])
      language: CSharp
      name:
        CSharp: operator /(IntVector2, IntVector2[])
        VB: /(IntVector2, IntVector2())
      nameWithType:
        CSharp: IntVector2.operator /(IntVector2, IntVector2[])
        VB: IntVector2./(IntVector2, IntVector2())
      qualifiedName:
        CSharp: IntVector2.operator /(IntVector2, IntVector2[])
        VB: IntVector2./(IntVector2, IntVector2())
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Division
        path: ''
        startLine: 4056
      summary: "\nDivides the vector by each element of the array.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2[] operator /(IntVector2 intVector, IntVector2[] intVectorArray)
          VB: Public Shared Operator /(intVector As IntVector2, intVectorArray As IntVector2()) As IntVector2()
        parameters:
        - id: intVector
          type: Global.IntVector2
        - id: intVectorArray
          type: Global.IntVector2[]
        return:
          type: Global.IntVector2[]
      overload: Global.IntVector2.op_Division*
    - id: Global.IntVector2.op_Division(IntVector2[],IntVector2)
      commentId: M:Global.IntVector2.op_Division(IntVector2[],IntVector2)
      language: CSharp
      name:
        CSharp: operator /(IntVector2[], IntVector2)
        VB: /(IntVector2(), IntVector2)
      nameWithType:
        CSharp: IntVector2.operator /(IntVector2[], IntVector2)
        VB: IntVector2./(IntVector2(), IntVector2)
      qualifiedName:
        CSharp: IntVector2.operator /(IntVector2[], IntVector2)
        VB: IntVector2./(IntVector2(), IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Division
        path: ''
        startLine: 4068
      summary: "\nDivides each element of the array by the vector.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2[] operator /(IntVector2[] intVectorArray, IntVector2 intVector)
          VB: Public Shared Operator /(intVectorArray As IntVector2(), intVector As IntVector2) As IntVector2()
        parameters:
        - id: intVectorArray
          type: Global.IntVector2[]
        - id: intVector
          type: Global.IntVector2
        return:
          type: Global.IntVector2[]
      overload: Global.IntVector2.op_Division*
    - id: Global.IntVector2.op_Implicit(IntVector2)~Vector2
      commentId: M:Global.IntVector2.op_Implicit(IntVector2)~Vector2
      language: CSharp
      name:
        CSharp: implicit operator Vector2(IntVector2)
        VB: CType(IntVector2)
      nameWithType:
        CSharp: IntVector2.implicit operator Vector2(IntVector2)
        VB: IntVector2.CType(IntVector2)
      qualifiedName:
        CSharp: IntVector2.implicit operator Vector2(IntVector2)
        VB: IntVector2.CType(IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Implicit
        path: ''
        startLine: 4081
      summary: "\nCast to Unity Vector2.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator Vector2(IntVector2 intVector)
          VB: Public Shared Widening Operator CType(intVector As IntVector2) As Vector2
        parameters:
        - id: intVector
          type: Global.IntVector2
        return:
          type: Global.Vector2
      overload: Global.IntVector2.op_Implicit*
    - id: Global.IntVector2.ToVector2
      commentId: M:Global.IntVector2.ToVector2
      language: CSharp
      name:
        CSharp: ToVector2()
        VB: ToVector2()
      nameWithType:
        CSharp: IntVector2.ToVector2()
        VB: IntVector2.ToVector2()
      qualifiedName:
        CSharp: IntVector2.ToVector2()
        VB: IntVector2.ToVector2()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToVector2
        path: ''
        startLine: 4085
      summary: "\nCast to Unity Vector2.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector2 ToVector2()
          VB: Public Function ToVector2() As Vector2
        return:
          type: Global.Vector2
      overload: Global.IntVector2.ToVector2*
    - id: Global.IntVector2.op_Implicit(IntVector2)~Vector3
      commentId: M:Global.IntVector2.op_Implicit(IntVector2)~Vector3
      language: CSharp
      name:
        CSharp: implicit operator Vector3(IntVector2)
        VB: CType(IntVector2)
      nameWithType:
        CSharp: IntVector2.implicit operator Vector3(IntVector2)
        VB: IntVector2.CType(IntVector2)
      qualifiedName:
        CSharp: IntVector2.implicit operator Vector3(IntVector2)
        VB: IntVector2.CType(IntVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Implicit
        path: ''
        startLine: 4093
      summary: "\nCast to Unity Vector3, with a 0 in the z-coord.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator Vector3(IntVector2 intVector)
          VB: Public Shared Widening Operator CType(intVector As IntVector2) As Vector3
        parameters:
        - id: intVector
          type: Global.IntVector2
        return:
          type: Global.Vector3
      overload: Global.IntVector2.op_Implicit*
    - id: Global.IntVector2.ToVector3
      commentId: M:Global.IntVector2.ToVector3
      language: CSharp
      name:
        CSharp: ToVector3()
        VB: ToVector3()
      nameWithType:
        CSharp: IntVector2.ToVector3()
        VB: IntVector2.ToVector3()
      qualifiedName:
        CSharp: IntVector2.ToVector3()
        VB: IntVector2.ToVector3()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToVector3
        path: ''
        startLine: 4097
      summary: "\nCast to Unity Vector3, with a 0 in the z-coord.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3 ToVector3()
          VB: Public Function ToVector3() As Vector3
        return:
          type: Global.Vector3
      overload: Global.IntVector2.ToVector3*
    - id: Global.IntVector2.FloorToIntVector2(Vector2)
      commentId: M:Global.IntVector2.FloorToIntVector2(Vector2)
      language: CSharp
      name:
        CSharp: FloorToIntVector2(Vector2)
        VB: FloorToIntVector2(Vector2)
      nameWithType:
        CSharp: IntVector2.FloorToIntVector2(Vector2)
        VB: IntVector2.FloorToIntVector2(Vector2)
      qualifiedName:
        CSharp: IntVector2.FloorToIntVector2(Vector2)
        VB: IntVector2.FloorToIntVector2(Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FloorToIntVector2
        path: ''
        startLine: 4105
      summary: "\nFloors component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 FloorToIntVector2(Vector2 vector2)
          VB: Public Shared Function FloorToIntVector2(vector2 As Vector2) As IntVector2
        parameters:
        - id: vector2
          type: Global.Vector2
        return:
          type: Global.IntVector2
      overload: Global.IntVector2.FloorToIntVector2*
    - id: Global.IntVector2.CeilToIntVector2(Vector2)
      commentId: M:Global.IntVector2.CeilToIntVector2(Vector2)
      language: CSharp
      name:
        CSharp: CeilToIntVector2(Vector2)
        VB: CeilToIntVector2(Vector2)
      nameWithType:
        CSharp: IntVector2.CeilToIntVector2(Vector2)
        VB: IntVector2.CeilToIntVector2(Vector2)
      qualifiedName:
        CSharp: IntVector2.CeilToIntVector2(Vector2)
        VB: IntVector2.CeilToIntVector2(Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CeilToIntVector2
        path: ''
        startLine: 4112
      summary: "\nCeils component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 CeilToIntVector2(Vector2 vector2)
          VB: Public Shared Function CeilToIntVector2(vector2 As Vector2) As IntVector2
        parameters:
        - id: vector2
          type: Global.Vector2
        return:
          type: Global.IntVector2
      overload: Global.IntVector2.CeilToIntVector2*
    - id: Global.IntVector2.RoundToIntVector2(Vector2)
      commentId: M:Global.IntVector2.RoundToIntVector2(Vector2)
      language: CSharp
      name:
        CSharp: RoundToIntVector2(Vector2)
        VB: RoundToIntVector2(Vector2)
      nameWithType:
        CSharp: IntVector2.RoundToIntVector2(Vector2)
        VB: IntVector2.RoundToIntVector2(Vector2)
      qualifiedName:
        CSharp: IntVector2.RoundToIntVector2(Vector2)
        VB: IntVector2.RoundToIntVector2(Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RoundToIntVector2
        path: ''
        startLine: 4119
      summary: "\nRounds component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 RoundToIntVector2(Vector2 vector2)
          VB: Public Shared Function RoundToIntVector2(vector2 As Vector2) As IntVector2
        parameters:
        - id: vector2
          type: Global.Vector2
        return:
          type: Global.IntVector2
      overload: Global.IntVector2.RoundToIntVector2*
    - id: Global.IntVector2.Dot(IntVector2,IntVector2)
      commentId: M:Global.IntVector2.Dot(IntVector2,IntVector2)
      language: CSharp
      name:
        CSharp: Dot(IntVector2, IntVector2)
        VB: Dot(IntVector2, IntVector2)
      nameWithType:
        CSharp: IntVector2.Dot(IntVector2, IntVector2)
        VB: IntVector2.Dot(IntVector2, IntVector2)
      qualifiedName:
        CSharp: IntVector2.Dot(IntVector2, IntVector2)
        VB: IntVector2.Dot(IntVector2, IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Dot
        path: ''
        startLine: 4127
      summary: "\nComputes the dot product.\n"
      example: []
      syntax:
        content:
          CSharp: public static int Dot(IntVector2 a, IntVector2 b)
          VB: Public Shared Function Dot(a As IntVector2, b As IntVector2) As Integer
        parameters:
        - id: a
          type: Global.IntVector2
        - id: b
          type: Global.IntVector2
        return:
          type: System.Int32
      overload: Global.IntVector2.Dot*
    - id: Global.IntVector2.Distance(IntVector2,IntVector2)
      commentId: M:Global.IntVector2.Distance(IntVector2,IntVector2)
      language: CSharp
      name:
        CSharp: Distance(IntVector2, IntVector2)
        VB: Distance(IntVector2, IntVector2)
      nameWithType:
        CSharp: IntVector2.Distance(IntVector2, IntVector2)
        VB: IntVector2.Distance(IntVector2, IntVector2)
      qualifiedName:
        CSharp: IntVector2.Distance(IntVector2, IntVector2)
        VB: IntVector2.Distance(IntVector2, IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Distance
        path: ''
        startLine: 4135
      summary: "\nComputes the Euclidean distance between the vectors.\n"
      example: []
      syntax:
        content:
          CSharp: public static float Distance(IntVector2 a, IntVector2 b)
          VB: Public Shared Function Distance(a As IntVector2, b As IntVector2) As Single
        parameters:
        - id: a
          type: Global.IntVector2
        - id: b
          type: Global.IntVector2
        return:
          type: System.Single
      overload: Global.IntVector2.Distance*
    - id: Global.IntVector2.SqrDistance(IntVector2,IntVector2)
      commentId: M:Global.IntVector2.SqrDistance(IntVector2,IntVector2)
      language: CSharp
      name:
        CSharp: SqrDistance(IntVector2, IntVector2)
        VB: SqrDistance(IntVector2, IntVector2)
      nameWithType:
        CSharp: IntVector2.SqrDistance(IntVector2, IntVector2)
        VB: IntVector2.SqrDistance(IntVector2, IntVector2)
      qualifiedName:
        CSharp: IntVector2.SqrDistance(IntVector2, IntVector2)
        VB: IntVector2.SqrDistance(IntVector2, IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SqrDistance
        path: ''
        startLine: 4139
      syntax:
        content:
          CSharp: public static float SqrDistance(IntVector2 a, IntVector2 b)
          VB: Public Shared Function SqrDistance(a As IntVector2, b As IntVector2) As Single
        parameters:
        - id: a
          type: Global.IntVector2
        - id: b
          type: Global.IntVector2
        return:
          type: System.Single
      overload: Global.IntVector2.SqrDistance*
    - id: Global.IntVector2.Magnitude(IntVector2)
      commentId: M:Global.IntVector2.Magnitude(IntVector2)
      language: CSharp
      name:
        CSharp: Magnitude(IntVector2)
        VB: Magnitude(IntVector2)
      nameWithType:
        CSharp: IntVector2.Magnitude(IntVector2)
        VB: IntVector2.Magnitude(IntVector2)
      qualifiedName:
        CSharp: IntVector2.Magnitude(IntVector2)
        VB: IntVector2.Magnitude(IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Magnitude
        path: ''
        startLine: 4143
      syntax:
        content:
          CSharp: public static float Magnitude(IntVector2 a)
          VB: Public Shared Function Magnitude(a As IntVector2) As Single
        parameters:
        - id: a
          type: Global.IntVector2
        return:
          type: System.Single
      overload: Global.IntVector2.Magnitude*
    - id: Global.IntVector2.SqrMagnitude(IntVector2)
      commentId: M:Global.IntVector2.SqrMagnitude(IntVector2)
      language: CSharp
      name:
        CSharp: SqrMagnitude(IntVector2)
        VB: SqrMagnitude(IntVector2)
      nameWithType:
        CSharp: IntVector2.SqrMagnitude(IntVector2)
        VB: IntVector2.SqrMagnitude(IntVector2)
      qualifiedName:
        CSharp: IntVector2.SqrMagnitude(IntVector2)
        VB: IntVector2.SqrMagnitude(IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SqrMagnitude
        path: ''
        startLine: 4147
      syntax:
        content:
          CSharp: public static float SqrMagnitude(IntVector2 a)
          VB: Public Shared Function SqrMagnitude(a As IntVector2) As Single
        parameters:
        - id: a
          type: Global.IntVector2
        return:
          type: System.Single
      overload: Global.IntVector2.SqrMagnitude*
    - id: Global.IntVector2.Max(IntVector2,IntVector2)
      commentId: M:Global.IntVector2.Max(IntVector2,IntVector2)
      language: CSharp
      name:
        CSharp: Max(IntVector2, IntVector2)
        VB: Max(IntVector2, IntVector2)
      nameWithType:
        CSharp: IntVector2.Max(IntVector2, IntVector2)
        VB: IntVector2.Max(IntVector2, IntVector2)
      qualifiedName:
        CSharp: IntVector2.Max(IntVector2, IntVector2)
        VB: IntVector2.Max(IntVector2, IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Max
        path: ''
        startLine: 4155
      summary: "\nTakes the maximum of a and b component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 Max(IntVector2 a, IntVector2 b)
          VB: Public Shared Function Max(a As IntVector2, b As IntVector2) As IntVector2
        parameters:
        - id: a
          type: Global.IntVector2
        - id: b
          type: Global.IntVector2
        return:
          type: Global.IntVector2
      overload: Global.IntVector2.Max*
    - id: Global.IntVector2.Max(IntVector2[])
      commentId: M:Global.IntVector2.Max(IntVector2[])
      language: CSharp
      name:
        CSharp: Max(params IntVector2[])
        VB: Max(ParamArray IntVector2())
      nameWithType:
        CSharp: IntVector2.Max(params IntVector2[])
        VB: IntVector2.Max(ParamArray IntVector2())
      qualifiedName:
        CSharp: IntVector2.Max(params IntVector2[])
        VB: IntVector2.Max(ParamArray IntVector2())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Max
        path: ''
        startLine: 4163
      summary: "\nTakes the maximum of the vectors component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 Max(params IntVector2[] intVectors)
          VB: Public Shared Function Max(ParamArray intVectors As IntVector2()) As IntVector2
        parameters:
        - id: intVectors
          type: Global.IntVector2[]
        return:
          type: Global.IntVector2
      overload: Global.IntVector2.Max*
    - id: Global.IntVector2.Min(IntVector2,IntVector2)
      commentId: M:Global.IntVector2.Min(IntVector2,IntVector2)
      language: CSharp
      name:
        CSharp: Min(IntVector2, IntVector2)
        VB: Min(IntVector2, IntVector2)
      nameWithType:
        CSharp: IntVector2.Min(IntVector2, IntVector2)
        VB: IntVector2.Min(IntVector2, IntVector2)
      qualifiedName:
        CSharp: IntVector2.Min(IntVector2, IntVector2)
        VB: IntVector2.Min(IntVector2, IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Min
        path: ''
        startLine: 4174
      summary: "\nTakes the minimum of a and b component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 Min(IntVector2 a, IntVector2 b)
          VB: Public Shared Function Min(a As IntVector2, b As IntVector2) As IntVector2
        parameters:
        - id: a
          type: Global.IntVector2
        - id: b
          type: Global.IntVector2
        return:
          type: Global.IntVector2
      overload: Global.IntVector2.Min*
    - id: Global.IntVector2.Min(IntVector2[])
      commentId: M:Global.IntVector2.Min(IntVector2[])
      language: CSharp
      name:
        CSharp: Min(params IntVector2[])
        VB: Min(ParamArray IntVector2())
      nameWithType:
        CSharp: IntVector2.Min(params IntVector2[])
        VB: IntVector2.Min(ParamArray IntVector2())
      qualifiedName:
        CSharp: IntVector2.Min(params IntVector2[])
        VB: IntVector2.Min(ParamArray IntVector2())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Min
        path: ''
        startLine: 4181
      summary: "\nTakes the minimum of the vectors component-wise.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 Min(params IntVector2[] intVectors)
          VB: Public Shared Function Min(ParamArray intVectors As IntVector2()) As IntVector2
        parameters:
        - id: intVectors
          type: Global.IntVector2[]
        return:
          type: Global.IntVector2
      overload: Global.IntVector2.Min*
  - id: Global.DrawingArea
    commentId: T:Global.DrawingArea
    language: CSharp
    name:
      CSharp: DrawingArea
      VB: DrawingArea
    nameWithType:
      CSharp: DrawingArea
      VB: DrawingArea
    qualifiedName:
      CSharp: DrawingArea
      VB: DrawingArea
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: DrawingArea
      path: ''
      startLine: 4197
    syntax:
      content:
        CSharp: 'public class DrawingArea : MonoBehaviour'
        VB: Public Class DrawingArea Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.DrawingArea.scrollSpeed
      commentId: P:Global.DrawingArea.scrollSpeed
      language: CSharp
      name:
        CSharp: scrollSpeed
        VB: scrollSpeed
      nameWithType:
        CSharp: DrawingArea.scrollSpeed
        VB: DrawingArea.scrollSpeed
      qualifiedName:
        CSharp: DrawingArea.scrollSpeed
        VB: DrawingArea.scrollSpeed
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: scrollSpeed
        path: ''
        startLine: 4202
      syntax:
        content:
          CSharp: public float scrollSpeed { get; }
          VB: Public Property scrollSpeed As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.DrawingArea.scrollSpeed*
    - id: Global.DrawingArea.zoomScrollSpeed
      commentId: P:Global.DrawingArea.zoomScrollSpeed
      language: CSharp
      name:
        CSharp: zoomScrollSpeed
        VB: zoomScrollSpeed
      nameWithType:
        CSharp: DrawingArea.zoomScrollSpeed
        VB: DrawingArea.zoomScrollSpeed
      qualifiedName:
        CSharp: DrawingArea.zoomScrollSpeed
        VB: DrawingArea.zoomScrollSpeed
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: zoomScrollSpeed
        path: ''
        startLine: 4205
      syntax:
        content:
          CSharp: public float zoomScrollSpeed { get; }
          VB: Public Property zoomScrollSpeed As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.DrawingArea.zoomScrollSpeed*
    - id: Global.DrawingArea.file
      commentId: P:Global.DrawingArea.file
      language: CSharp
      name:
        CSharp: file
        VB: file
      nameWithType:
        CSharp: DrawingArea.file
        VB: DrawingArea.file
      qualifiedName:
        CSharp: DrawingArea.file
        VB: DrawingArea.file
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: file
        path: ''
        startLine: 4207
      syntax:
        content:
          CSharp: public File file { get; }
          VB: Public ReadOnly Property file As File
        parameters: []
        return:
          type: Global.File
      overload: Global.DrawingArea.file*
    - id: Global.DrawingArea.pixelsPerUnit
      commentId: P:Global.DrawingArea.pixelsPerUnit
      language: CSharp
      name:
        CSharp: pixelsPerUnit
        VB: pixelsPerUnit
      nameWithType:
        CSharp: DrawingArea.pixelsPerUnit
        VB: DrawingArea.pixelsPerUnit
      qualifiedName:
        CSharp: DrawingArea.pixelsPerUnit
        VB: DrawingArea.pixelsPerUnit
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: pixelsPerUnit
        path: ''
        startLine: 4223
      syntax:
        content:
          CSharp: public float pixelsPerUnit { get; }
          VB: Public ReadOnly Property pixelsPerUnit As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.DrawingArea.pixelsPerUnit*
    - id: Global.DrawingArea.selectionMask
      commentId: P:Global.DrawingArea.selectionMask
      language: CSharp
      name:
        CSharp: selectionMask
        VB: selectionMask
      nameWithType:
        CSharp: DrawingArea.selectionMask
        VB: DrawingArea.selectionMask
      qualifiedName:
        CSharp: DrawingArea.selectionMask
        VB: DrawingArea.selectionMask
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: selectionMask
        path: ''
        startLine: 4274
      syntax:
        content:
          CSharp: public Texture2D selectionMask { get; }
          VB: Public Property selectionMask As Texture2D
        parameters: []
        return:
          type: Global.Texture2D
      overload: Global.DrawingArea.selectionMask*
    - id: Global.DrawingArea.hasSelection
      commentId: P:Global.DrawingArea.hasSelection
      language: CSharp
      name:
        CSharp: hasSelection
        VB: hasSelection
      nameWithType:
        CSharp: DrawingArea.hasSelection
        VB: DrawingArea.hasSelection
      qualifiedName:
        CSharp: DrawingArea.hasSelection
        VB: DrawingArea.hasSelection
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hasSelection
        path: ''
        startLine: 4280
      syntax:
        content:
          CSharp: public bool hasSelection { get; }
          VB: Public ReadOnly Property hasSelection As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.DrawingArea.hasSelection*
    - id: Global.DrawingArea.selectionRect
      commentId: P:Global.DrawingArea.selectionRect
      language: CSharp
      name:
        CSharp: selectionRect
        VB: selectionRect
      nameWithType:
        CSharp: DrawingArea.selectionRect
        VB: DrawingArea.selectionRect
      qualifiedName:
        CSharp: DrawingArea.selectionRect
        VB: DrawingArea.selectionRect
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: selectionRect
        path: ''
        startLine: 4297
      syntax:
        content:
          CSharp: public IntRect selectionRect { get; }
          VB: Public ReadOnly Property selectionRect As IntRect
        parameters: []
        return:
          type: Global.IntRect
      overload: Global.DrawingArea.selectionRect*
    - id: Global.DrawingArea.UpdateDrawing
      commentId: M:Global.DrawingArea.UpdateDrawing
      language: CSharp
      name:
        CSharp: UpdateDrawing()
        VB: UpdateDrawing()
      nameWithType:
        CSharp: DrawingArea.UpdateDrawing()
        VB: DrawingArea.UpdateDrawing()
      qualifiedName:
        CSharp: DrawingArea.UpdateDrawing()
        VB: DrawingArea.UpdateDrawing()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UpdateDrawing
        path: ''
        startLine: 4533
      summary: "\nMakes any changes to the file visible on the drawing area.\n"
      example: []
      syntax:
        content:
          CSharp: public void UpdateDrawing()
          VB: Public Sub UpdateDrawing()
      overload: Global.DrawingArea.UpdateDrawing*
    - id: Global.DrawingArea.PreviewGradient(IntVector2,IntVector2,Color,Color,GradientMode)
      commentId: M:Global.DrawingArea.PreviewGradient(IntVector2,IntVector2,Color,Color,GradientMode)
      language: CSharp
      name:
        CSharp: PreviewGradient(IntVector2, IntVector2, Color, Color, GradientMode)
        VB: PreviewGradient(IntVector2, IntVector2, Color, Color, GradientMode)
      nameWithType:
        CSharp: DrawingArea.PreviewGradient(IntVector2, IntVector2, Color, Color, GradientMode)
        VB: DrawingArea.PreviewGradient(IntVector2, IntVector2, Color, Color, GradientMode)
      qualifiedName:
        CSharp: DrawingArea.PreviewGradient(IntVector2, IntVector2, Color, Color, GradientMode)
        VB: DrawingArea.PreviewGradient(IntVector2, IntVector2, Color, Color, GradientMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PreviewGradient
        path: ''
        startLine: 5120
      syntax:
        content:
          CSharp: public void PreviewGradient(IntVector2 start, IntVector2 end, Color startColour, Color endColour, GradientMode gradientMode)
          VB: Public Sub PreviewGradient(start As IntVector2, [end] As IntVector2, startColour As Color, endColour As Color, gradientMode As GradientMode)
        parameters:
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: startColour
          type: Global.Color
        - id: endColour
          type: Global.Color
        - id: gradientMode
          type: Global.GradientMode
      overload: Global.DrawingArea.PreviewGradient*
    - id: Global.DrawingArea.DeleteSelection
      commentId: M:Global.DrawingArea.DeleteSelection
      language: CSharp
      name:
        CSharp: DeleteSelection()
        VB: DeleteSelection()
      nameWithType:
        CSharp: DrawingArea.DeleteSelection()
        VB: DrawingArea.DeleteSelection()
      qualifiedName:
        CSharp: DrawingArea.DeleteSelection()
        VB: DrawingArea.DeleteSelection()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeleteSelection
        path: ''
        startLine: 5322
      syntax:
        content:
          CSharp: public void DeleteSelection()
          VB: Public Sub DeleteSelection()
      overload: Global.DrawingArea.DeleteSelection*
    - id: Global.DrawingArea.WorldPosToPixels(System.Single,System.Single)
      commentId: M:Global.DrawingArea.WorldPosToPixels(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: WorldPosToPixels(float, float)
        VB: WorldPosToPixels(Single, Single)
      nameWithType:
        CSharp: DrawingArea.WorldPosToPixels(float, float)
        VB: DrawingArea.WorldPosToPixels(Single, Single)
      qualifiedName:
        CSharp: DrawingArea.WorldPosToPixels(float, float)
        VB: DrawingArea.WorldPosToPixels(Single, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: WorldPosToPixels
        path: ''
        startLine: 5344
      summary: "\nTurns the world coord into a pixel coord in the drawing.\n"
      example: []
      syntax:
        content:
          CSharp: public IntVector2 WorldPosToPixels(float x, float y)
          VB: Public Function WorldPosToPixels(x As Single, y As Single) As IntVector2
        parameters:
        - id: x
          type: System.Single
        - id: y
          type: System.Single
        return:
          type: Global.IntVector2
      overload: Global.DrawingArea.WorldPosToPixels*
    - id: Global.DrawingArea.WorldPosToPixel(Vector2)
      commentId: M:Global.DrawingArea.WorldPosToPixel(Vector2)
      language: CSharp
      name:
        CSharp: WorldPosToPixel(Vector2)
        VB: WorldPosToPixel(Vector2)
      nameWithType:
        CSharp: DrawingArea.WorldPosToPixel(Vector2)
        VB: DrawingArea.WorldPosToPixel(Vector2)
      qualifiedName:
        CSharp: DrawingArea.WorldPosToPixel(Vector2)
        VB: DrawingArea.WorldPosToPixel(Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: WorldPosToPixel
        path: ''
        startLine: 5349
      summary: "\nTurns the world coord into a pixel coord in the drawing.\n"
      example: []
      syntax:
        content:
          CSharp: public IntVector2 WorldPosToPixel(Vector2 worldPos)
          VB: Public Function WorldPosToPixel(worldPos As Vector2) As IntVector2
        parameters:
        - id: worldPos
          type: Global.Vector2
        return:
          type: Global.IntVector2
      overload: Global.DrawingArea.WorldPosToPixel*
    - id: Global.DrawingArea.PixelsToWorldPos(IntVector2)
      commentId: M:Global.DrawingArea.PixelsToWorldPos(IntVector2)
      language: CSharp
      name:
        CSharp: PixelsToWorldPos(IntVector2)
        VB: PixelsToWorldPos(IntVector2)
      nameWithType:
        CSharp: DrawingArea.PixelsToWorldPos(IntVector2)
        VB: DrawingArea.PixelsToWorldPos(IntVector2)
      qualifiedName:
        CSharp: DrawingArea.PixelsToWorldPos(IntVector2)
        VB: DrawingArea.PixelsToWorldPos(IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PixelsToWorldPos
        path: ''
        startLine: 5359
      summary: "\nTurns the pixel coordinate in the drawing into a world coordinate (the resulting coord is the centre of the pixel in the world).\n"
      example: []
      syntax:
        content:
          CSharp: public Vector2 PixelsToWorldPos(IntVector2 pixel)
          VB: Public Function PixelsToWorldPos(pixel As IntVector2) As Vector2
        parameters:
        - id: pixel
          type: Global.IntVector2
        return:
          type: Global.Vector2
      overload: Global.DrawingArea.PixelsToWorldPos*
    - id: Global.DrawingArea.PixelsToWorldPos(System.Int32,System.Int32)
      commentId: M:Global.DrawingArea.PixelsToWorldPos(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: PixelsToWorldPos(int, int)
        VB: PixelsToWorldPos(Integer, Integer)
      nameWithType:
        CSharp: DrawingArea.PixelsToWorldPos(int, int)
        VB: DrawingArea.PixelsToWorldPos(Integer, Integer)
      qualifiedName:
        CSharp: DrawingArea.PixelsToWorldPos(int, int)
        VB: DrawingArea.PixelsToWorldPos(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PixelsToWorldPos
        path: ''
        startLine: 5364
      summary: "\nTurns the pixel coordinate in the drawing into a world coordinate (the resulting coord is the centre of the pixel in the world).\n"
      example: []
      syntax:
        content:
          CSharp: public Vector2 PixelsToWorldPos(int x, int y)
          VB: Public Function PixelsToWorldPos(x As Integer, y As Integer) As Vector2
        parameters:
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
        return:
          type: Global.Vector2
      overload: Global.DrawingArea.PixelsToWorldPos*
    - id: Global.DrawingArea.PixelsToWorldPos(Vector2)
      commentId: M:Global.DrawingArea.PixelsToWorldPos(Vector2)
      language: CSharp
      name:
        CSharp: PixelsToWorldPos(Vector2)
        VB: PixelsToWorldPos(Vector2)
      nameWithType:
        CSharp: DrawingArea.PixelsToWorldPos(Vector2)
        VB: DrawingArea.PixelsToWorldPos(Vector2)
      qualifiedName:
        CSharp: DrawingArea.PixelsToWorldPos(Vector2)
        VB: DrawingArea.PixelsToWorldPos(Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PixelsToWorldPos
        path: ''
        startLine: 5372
      summary: "\nTurns the pixel coordinate in the drawing into a world coordinate.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector2 PixelsToWorldPos(Vector2 pixel)
          VB: Public Function PixelsToWorldPos(pixel As Vector2) As Vector2
        parameters:
        - id: pixel
          type: Global.Vector2
        return:
          type: Global.Vector2
      overload: Global.DrawingArea.PixelsToWorldPos*
    - id: Global.DrawingArea.PixelsToWorldPos(System.Single,System.Single)
      commentId: M:Global.DrawingArea.PixelsToWorldPos(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: PixelsToWorldPos(float, float)
        VB: PixelsToWorldPos(Single, Single)
      nameWithType:
        CSharp: DrawingArea.PixelsToWorldPos(float, float)
        VB: DrawingArea.PixelsToWorldPos(Single, Single)
      qualifiedName:
        CSharp: DrawingArea.PixelsToWorldPos(float, float)
        VB: DrawingArea.PixelsToWorldPos(Single, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PixelsToWorldPos
        path: ''
        startLine: 5377
      summary: "\nTurns the pixel coordinate in the drawing into a world coordinate.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector2 PixelsToWorldPos(float x, float y)
          VB: Public Function PixelsToWorldPos(x As Single, y As Single) As Vector2
        parameters:
        - id: x
          type: System.Single
        - id: y
          type: System.Single
        return:
          type: Global.Vector2
      overload: Global.DrawingArea.PixelsToWorldPos*
  - id: Global.GridManager
    commentId: T:Global.GridManager
    language: CSharp
    name:
      CSharp: GridManager
      VB: GridManager
    nameWithType:
      CSharp: GridManager
      VB: GridManager
    qualifiedName:
      CSharp: GridManager
      VB: GridManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GridManager
      path: ''
      startLine: 5405
    summary: "\nHandles drawing a grid over the image when the grid is enabled.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GridManager : MonoBehaviour'
        VB: Public Class GridManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.GridManager.lineThickness
      commentId: F:Global.GridManager.lineThickness
      language: CSharp
      name:
        CSharp: lineThickness
        VB: lineThickness
      nameWithType:
        CSharp: GridManager.lineThickness
        VB: GridManager.lineThickness
      qualifiedName:
        CSharp: GridManager.lineThickness
        VB: GridManager.lineThickness
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: lineThickness
        path: ''
        startLine: 5411
      syntax:
        content:
          CSharp: public float lineThickness
          VB: Public lineThickness As Single
        return:
          type: System.Single
    - id: Global.GridManager.width
      commentId: P:Global.GridManager.width
      language: CSharp
      name:
        CSharp: width
        VB: width
      nameWithType:
        CSharp: GridManager.width
        VB: GridManager.width
      qualifiedName:
        CSharp: GridManager.width
        VB: GridManager.width
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: width
        path: ''
        startLine: 5417
      syntax:
        content:
          CSharp: public int width { get; }
          VB: Public Property width As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.GridManager.width*
    - id: Global.GridManager.height
      commentId: P:Global.GridManager.height
      language: CSharp
      name:
        CSharp: height
        VB: height
      nameWithType:
        CSharp: GridManager.height
        VB: GridManager.height
      qualifiedName:
        CSharp: GridManager.height
        VB: GridManager.height
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: height
        path: ''
        startLine: 5418
      syntax:
        content:
          CSharp: public int height { get; }
          VB: Public Property height As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.GridManager.height*
    - id: Global.GridManager.xOffset
      commentId: P:Global.GridManager.xOffset
      language: CSharp
      name:
        CSharp: xOffset
        VB: xOffset
      nameWithType:
        CSharp: GridManager.xOffset
        VB: GridManager.xOffset
      qualifiedName:
        CSharp: GridManager.xOffset
        VB: GridManager.xOffset
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: xOffset
        path: ''
        startLine: 5419
      syntax:
        content:
          CSharp: public int xOffset { get; }
          VB: Public Property xOffset As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.GridManager.xOffset*
    - id: Global.GridManager.yOffset
      commentId: P:Global.GridManager.yOffset
      language: CSharp
      name:
        CSharp: yOffset
        VB: yOffset
      nameWithType:
        CSharp: GridManager.yOffset
        VB: GridManager.yOffset
      qualifiedName:
        CSharp: GridManager.yOffset
        VB: GridManager.yOffset
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: yOffset
        path: ''
        startLine: 5420
      syntax:
        content:
          CSharp: public int yOffset { get; }
          VB: Public Property yOffset As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.GridManager.yOffset*
    - id: Global.GridManager.on
      commentId: P:Global.GridManager.on
      language: CSharp
      name:
        CSharp: on
        VB: on
      nameWithType:
        CSharp: GridManager.on
        VB: GridManager.on
      qualifiedName:
        CSharp: GridManager.on
        VB: GridManager.on
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: on
        path: ''
        startLine: 5422
      syntax:
        content:
          CSharp: public bool on { get; }
          VB: Public Property [on] As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.GridManager.on*
    - id: Global.GridManager.SetGrid(System.Int32,System.Int32,System.Int32,System.Int32)
      commentId: M:Global.GridManager.SetGrid(System.Int32,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: SetGrid(int, int, int, int)
        VB: SetGrid(Integer, Integer, Integer, Integer)
      nameWithType:
        CSharp: GridManager.SetGrid(int, int, int, int)
        VB: GridManager.SetGrid(Integer, Integer, Integer, Integer)
      qualifiedName:
        CSharp: GridManager.SetGrid(int, int, int, int)
        VB: GridManager.SetGrid(Integer, Integer, Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetGrid
        path: ''
        startLine: 5509
      syntax:
        content:
          CSharp: public void SetGrid(int width, int height, int xOffset, int yOffset)
          VB: Public Sub SetGrid(width As Integer, height As Integer, xOffset As Integer, yOffset As Integer)
        parameters:
        - id: width
          type: System.Int32
        - id: height
          type: System.Int32
        - id: xOffset
          type: System.Int32
        - id: yOffset
          type: System.Int32
      overload: Global.GridManager.SetGrid*
    - id: Global.GridManager.SetOnOff(System.Boolean)
      commentId: M:Global.GridManager.SetOnOff(System.Boolean)
      language: CSharp
      name:
        CSharp: SetOnOff(bool)
        VB: SetOnOff(Boolean)
      nameWithType:
        CSharp: GridManager.SetOnOff(bool)
        VB: GridManager.SetOnOff(Boolean)
      qualifiedName:
        CSharp: GridManager.SetOnOff(bool)
        VB: GridManager.SetOnOff(Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetOnOff
        path: ''
        startLine: 5521
      syntax:
        content:
          CSharp: public void SetOnOff(bool on)
          VB: Public Sub SetOnOff([on] As Boolean)
        parameters:
        - id: on
          type: System.Boolean
      overload: Global.GridManager.SetOnOff*
    - id: Global.GridManager.SetOnOffNoDisplayUpdate(System.Boolean)
      commentId: M:Global.GridManager.SetOnOffNoDisplayUpdate(System.Boolean)
      language: CSharp
      name:
        CSharp: SetOnOffNoDisplayUpdate(bool)
        VB: SetOnOffNoDisplayUpdate(Boolean)
      nameWithType:
        CSharp: GridManager.SetOnOffNoDisplayUpdate(bool)
        VB: GridManager.SetOnOffNoDisplayUpdate(Boolean)
      qualifiedName:
        CSharp: GridManager.SetOnOffNoDisplayUpdate(bool)
        VB: GridManager.SetOnOffNoDisplayUpdate(Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetOnOffNoDisplayUpdate
        path: ''
        startLine: 5535
      syntax:
        content:
          CSharp: public void SetOnOffNoDisplayUpdate(bool on)
          VB: Public Sub SetOnOffNoDisplayUpdate([on] As Boolean)
        parameters:
        - id: on
          type: System.Boolean
      overload: Global.GridManager.SetOnOffNoDisplayUpdate*
  - id: Global.Shapes
    commentId: T:Global.Shapes
    language: CSharp
    name:
      CSharp: Shapes
      VB: Shapes
    nameWithType:
      CSharp: Shapes
      VB: Shapes
    qualifiedName:
      CSharp: Shapes
      VB: Shapes
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Shapes
      path: ''
      startLine: 5549
    summary: "\nA class to define how different shapes are drawn.\n"
    example: []
    syntax:
      content:
        CSharp: public static class Shapes
        VB: Public Module Shapes
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.Shapes.LineCoords(IntVector2,IntVector2)
      commentId: M:Global.Shapes.LineCoords(IntVector2,IntVector2)
      language: CSharp
      name:
        CSharp: LineCoords(IntVector2, IntVector2)
        VB: LineCoords(IntVector2, IntVector2)
      nameWithType:
        CSharp: Shapes.LineCoords(IntVector2, IntVector2)
        VB: Shapes.LineCoords(IntVector2, IntVector2)
      qualifiedName:
        CSharp: Shapes.LineCoords(IntVector2, IntVector2)
        VB: Shapes.LineCoords(IntVector2, IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LineCoords
        path: ''
        startLine: 5554
      summary: "\nGets the coords of a pixel-perfect line between two points, ordered from start to end.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2[] LineCoords(IntVector2 start, IntVector2 end)
          VB: Public Shared Function LineCoords(start As IntVector2, [end] As IntVector2) As IntVector2()
        parameters:
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        return:
          type: Global.IntVector2[]
      overload: Global.Shapes.LineCoords*
    - id: Global.Shapes.Line(System.Int32,System.Int32,IntVector2,IntVector2,Color)
      commentId: M:Global.Shapes.Line(System.Int32,System.Int32,IntVector2,IntVector2,Color)
      language: CSharp
      name:
        CSharp: Line(int, int, IntVector2, IntVector2, Color)
        VB: Line(Integer, Integer, IntVector2, IntVector2, Color)
      nameWithType:
        CSharp: Shapes.Line(int, int, IntVector2, IntVector2, Color)
        VB: Shapes.Line(Integer, Integer, IntVector2, IntVector2, Color)
      qualifiedName:
        CSharp: Shapes.Line(int, int, IntVector2, IntVector2, Color)
        VB: Shapes.Line(Integer, Integer, IntVector2, IntVector2, Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Line
        path: ''
        startLine: 5689
      syntax:
        content:
          CSharp: public static Texture2D Line(int texWidth, int texHeight, IntVector2 start, IntVector2 end, Color colour)
          VB: Public Shared Function Line(texWidth As Integer, texHeight As Integer, start As IntVector2, [end] As IntVector2, colour As Color) As Texture2D
        parameters:
        - id: texWidth
          type: System.Int32
        - id: texHeight
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: colour
          type: Global.Color
        return:
          type: Global.Texture2D
      overload: Global.Shapes.Line*
    - id: Global.Shapes.Rectangle(System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean)
      commentId: M:Global.Shapes.Rectangle(System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean)
      language: CSharp
      name:
        CSharp: Rectangle(int, int, IntVector2, IntVector2, Color, bool)
        VB: Rectangle(Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      nameWithType:
        CSharp: Shapes.Rectangle(int, int, IntVector2, IntVector2, Color, bool)
        VB: Shapes.Rectangle(Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      qualifiedName:
        CSharp: Shapes.Rectangle(int, int, IntVector2, IntVector2, Color, bool)
        VB: Shapes.Rectangle(Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Rectangle
        path: ''
        startLine: 5702
      syntax:
        content:
          CSharp: public static Texture2D Rectangle(int texWidth, int texHeight, IntVector2 start, IntVector2 end, Color colour, bool filled)
          VB: Public Shared Function Rectangle(texWidth As Integer, texHeight As Integer, start As IntVector2, [end] As IntVector2, colour As Color, filled As Boolean) As Texture2D
        parameters:
        - id: texWidth
          type: System.Int32
        - id: texHeight
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: colour
          type: Global.Color
        - id: filled
          type: System.Boolean
        return:
          type: Global.Texture2D
      overload: Global.Shapes.Rectangle*
    - id: Global.Shapes.Square(System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean,System.Boolean)
      commentId: M:Global.Shapes.Square(System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: Square(int, int, IntVector2, IntVector2, Color, bool, bool)
        VB: Square(Integer, Integer, IntVector2, IntVector2, Color, Boolean, Boolean)
      nameWithType:
        CSharp: Shapes.Square(int, int, IntVector2, IntVector2, Color, bool, bool)
        VB: Shapes.Square(Integer, Integer, IntVector2, IntVector2, Color, Boolean, Boolean)
      qualifiedName:
        CSharp: Shapes.Square(int, int, IntVector2, IntVector2, Color, bool, bool)
        VB: Shapes.Square(Integer, Integer, IntVector2, IntVector2, Color, Boolean, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Square
        path: ''
        startLine: 5753
      syntax:
        content:
          CSharp: public static Texture2D Square(int texWidth, int texHeight, IntVector2 start, IntVector2 end, Color colour, bool filled, bool stayWithinImageBounds)
          VB: Public Shared Function Square(texWidth As Integer, texHeight As Integer, start As IntVector2, [end] As IntVector2, colour As Color, filled As Boolean, stayWithinImageBounds As Boolean) As Texture2D
        parameters:
        - id: texWidth
          type: System.Int32
        - id: texHeight
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: colour
          type: Global.Color
        - id: filled
          type: System.Boolean
        - id: stayWithinImageBounds
          type: System.Boolean
        return:
          type: Global.Texture2D
      overload: Global.Shapes.Square*
    - id: Global.Shapes.SnapEndCoordToSquare(IntVector2,IntVector2)
      commentId: M:Global.Shapes.SnapEndCoordToSquare(IntVector2,IntVector2)
      language: CSharp
      name:
        CSharp: SnapEndCoordToSquare(IntVector2, IntVector2)
        VB: SnapEndCoordToSquare(IntVector2, IntVector2)
      nameWithType:
        CSharp: Shapes.SnapEndCoordToSquare(IntVector2, IntVector2)
        VB: Shapes.SnapEndCoordToSquare(IntVector2, IntVector2)
      qualifiedName:
        CSharp: Shapes.SnapEndCoordToSquare(IntVector2, IntVector2)
        VB: Shapes.SnapEndCoordToSquare(IntVector2, IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SnapEndCoordToSquare
        path: ''
        startLine: 5761
      summary: "\nSnaps the end coord so that the rect it forms with the start coord is a square.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 SnapEndCoordToSquare(IntVector2 start, IntVector2 end)
          VB: Public Shared Function SnapEndCoordToSquare(start As IntVector2, [end] As IntVector2) As IntVector2
        parameters:
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        return:
          type: Global.IntVector2
      overload: Global.Shapes.SnapEndCoordToSquare*
    - id: Global.Shapes.SnapEndCoordToSquare(System.Int32,System.Int32,IntVector2,IntVector2,System.Boolean)
      commentId: M:Global.Shapes.SnapEndCoordToSquare(System.Int32,System.Int32,IntVector2,IntVector2,System.Boolean)
      language: CSharp
      name:
        CSharp: SnapEndCoordToSquare(int, int, IntVector2, IntVector2, bool)
        VB: SnapEndCoordToSquare(Integer, Integer, IntVector2, IntVector2, Boolean)
      nameWithType:
        CSharp: Shapes.SnapEndCoordToSquare(int, int, IntVector2, IntVector2, bool)
        VB: Shapes.SnapEndCoordToSquare(Integer, Integer, IntVector2, IntVector2, Boolean)
      qualifiedName:
        CSharp: Shapes.SnapEndCoordToSquare(int, int, IntVector2, IntVector2, bool)
        VB: Shapes.SnapEndCoordToSquare(Integer, Integer, IntVector2, IntVector2, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SnapEndCoordToSquare
        path: ''
        startLine: 5770
      summary: "\nSnaps the end coord so that the rect it forms with the start coord is a square.\n"
      example: []
      syntax:
        content:
          CSharp: public static IntVector2 SnapEndCoordToSquare(int texWidth, int texHeight, IntVector2 start, IntVector2 end, bool stayWithinImageBounds)
          VB: Public Shared Function SnapEndCoordToSquare(texWidth As Integer, texHeight As Integer, start As IntVector2, [end] As IntVector2, stayWithinImageBounds As Boolean) As IntVector2
        parameters:
        - id: texWidth
          type: System.Int32
        - id: texHeight
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: stayWithinImageBounds
          type: System.Boolean
        return:
          type: Global.IntVector2
      overload: Global.Shapes.SnapEndCoordToSquare*
    - id: Global.Shapes.Ellipse(System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean)
      commentId: M:Global.Shapes.Ellipse(System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean)
      language: CSharp
      name:
        CSharp: Ellipse(int, int, IntVector2, IntVector2, Color, bool)
        VB: Ellipse(Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      nameWithType:
        CSharp: Shapes.Ellipse(int, int, IntVector2, IntVector2, Color, bool)
        VB: Shapes.Ellipse(Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      qualifiedName:
        CSharp: Shapes.Ellipse(int, int, IntVector2, IntVector2, Color, bool)
        VB: Shapes.Ellipse(Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Ellipse
        path: ''
        startLine: 5787
      syntax:
        content:
          CSharp: public static Texture2D Ellipse(int texWidth, int texHeight, IntVector2 start, IntVector2 end, Color colour, bool filled)
          VB: Public Shared Function Ellipse(texWidth As Integer, texHeight As Integer, start As IntVector2, [end] As IntVector2, colour As Color, filled As Boolean) As Texture2D
        parameters:
        - id: texWidth
          type: System.Int32
        - id: texHeight
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: colour
          type: Global.Color
        - id: filled
          type: System.Boolean
        return:
          type: Global.Texture2D
      overload: Global.Shapes.Ellipse*
    - id: Global.Shapes.Circle(System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean,System.Boolean)
      commentId: M:Global.Shapes.Circle(System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: Circle(int, int, IntVector2, IntVector2, Color, bool, bool)
        VB: Circle(Integer, Integer, IntVector2, IntVector2, Color, Boolean, Boolean)
      nameWithType:
        CSharp: Shapes.Circle(int, int, IntVector2, IntVector2, Color, bool, bool)
        VB: Shapes.Circle(Integer, Integer, IntVector2, IntVector2, Color, Boolean, Boolean)
      qualifiedName:
        CSharp: Shapes.Circle(int, int, IntVector2, IntVector2, Color, bool, bool)
        VB: Shapes.Circle(Integer, Integer, IntVector2, IntVector2, Color, Boolean, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Circle
        path: ''
        startLine: 5883
      syntax:
        content:
          CSharp: public static Texture2D Circle(int texWidth, int texHeight, IntVector2 start, IntVector2 end, Color colour, bool filled, bool stayWithinImageBounds)
          VB: Public Shared Function Circle(texWidth As Integer, texHeight As Integer, start As IntVector2, [end] As IntVector2, colour As Color, filled As Boolean, stayWithinImageBounds As Boolean) As Texture2D
        parameters:
        - id: texWidth
          type: System.Int32
        - id: texHeight
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: colour
          type: Global.Color
        - id: filled
          type: System.Boolean
        - id: stayWithinImageBounds
          type: System.Boolean
        return:
          type: Global.Texture2D
      overload: Global.Shapes.Circle*
    - id: Global.Shapes.RightTriangle(System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean,System.Boolean)
      commentId: M:Global.Shapes.RightTriangle(System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: RightTriangle(int, int, IntVector2, IntVector2, Color, bool, bool)
        VB: RightTriangle(Integer, Integer, IntVector2, IntVector2, Color, Boolean, Boolean)
      nameWithType:
        CSharp: Shapes.RightTriangle(int, int, IntVector2, IntVector2, Color, bool, bool)
        VB: Shapes.RightTriangle(Integer, Integer, IntVector2, IntVector2, Color, Boolean, Boolean)
      qualifiedName:
        CSharp: Shapes.RightTriangle(int, int, IntVector2, IntVector2, Color, bool, bool)
        VB: Shapes.RightTriangle(Integer, Integer, IntVector2, IntVector2, Color, Boolean, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RightTriangle
        path: ''
        startLine: 5888
      syntax:
        content:
          CSharp: public static Texture2D RightTriangle(int texWidth, int texHeight, IntVector2 start, IntVector2 end, Color colour, bool rightAngleOnBottom, bool filled)
          VB: Public Shared Function RightTriangle(texWidth As Integer, texHeight As Integer, start As IntVector2, [end] As IntVector2, colour As Color, rightAngleOnBottom As Boolean, filled As Boolean) As Texture2D
        parameters:
        - id: texWidth
          type: System.Int32
        - id: texHeight
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: colour
          type: Global.Color
        - id: rightAngleOnBottom
          type: System.Boolean
        - id: filled
          type: System.Boolean
        return:
          type: Global.Texture2D
      overload: Global.Shapes.RightTriangle*
    - id: Global.Shapes.Diamond(System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean)
      commentId: M:Global.Shapes.Diamond(System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean)
      language: CSharp
      name:
        CSharp: Diamond(int, int, IntVector2, IntVector2, Color, bool)
        VB: Diamond(Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      nameWithType:
        CSharp: Shapes.Diamond(int, int, IntVector2, IntVector2, Color, bool)
        VB: Shapes.Diamond(Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      qualifiedName:
        CSharp: Shapes.Diamond(int, int, IntVector2, IntVector2, Color, bool)
        VB: Shapes.Diamond(Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Diamond
        path: ''
        startLine: 5955
      syntax:
        content:
          CSharp: public static Texture2D Diamond(int texWidth, int texHeight, IntVector2 start, IntVector2 end, Color colour, bool filled)
          VB: Public Shared Function Diamond(texWidth As Integer, texHeight As Integer, start As IntVector2, [end] As IntVector2, colour As Color, filled As Boolean) As Texture2D
        parameters:
        - id: texWidth
          type: System.Int32
        - id: texHeight
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: colour
          type: Global.Color
        - id: filled
          type: System.Boolean
        return:
          type: Global.Texture2D
      overload: Global.Shapes.Diamond*
    - id: Global.Shapes.IsoRectangle(System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean)
      commentId: M:Global.Shapes.IsoRectangle(System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean)
      language: CSharp
      name:
        CSharp: IsoRectangle(int, int, IntVector2, IntVector2, Color, bool)
        VB: IsoRectangle(Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      nameWithType:
        CSharp: Shapes.IsoRectangle(int, int, IntVector2, IntVector2, Color, bool)
        VB: Shapes.IsoRectangle(Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      qualifiedName:
        CSharp: Shapes.IsoRectangle(int, int, IntVector2, IntVector2, Color, bool)
        VB: Shapes.IsoRectangle(Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsoRectangle
        path: ''
        startLine: 5997
      syntax:
        content:
          CSharp: public static Texture2D IsoRectangle(int texWidth, int texHeight, IntVector2 start, IntVector2 end, Color colour, bool filled)
          VB: Public Shared Function IsoRectangle(texWidth As Integer, texHeight As Integer, start As IntVector2, [end] As IntVector2, colour As Color, filled As Boolean) As Texture2D
        parameters:
        - id: texWidth
          type: System.Int32
        - id: texHeight
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: colour
          type: Global.Color
        - id: filled
          type: System.Boolean
        return:
          type: Global.Texture2D
      overload: Global.Shapes.IsoRectangle*
    - id: Global.Shapes.IsoBox(System.Int32,System.Int32,IntVector2,IntVector2,IntVector2,Color,System.Boolean)
      commentId: M:Global.Shapes.IsoBox(System.Int32,System.Int32,IntVector2,IntVector2,IntVector2,Color,System.Boolean)
      language: CSharp
      name:
        CSharp: IsoBox(int, int, IntVector2, IntVector2, IntVector2, Color, bool)
        VB: IsoBox(Integer, Integer, IntVector2, IntVector2, IntVector2, Color, Boolean)
      nameWithType:
        CSharp: Shapes.IsoBox(int, int, IntVector2, IntVector2, IntVector2, Color, bool)
        VB: Shapes.IsoBox(Integer, Integer, IntVector2, IntVector2, IntVector2, Color, Boolean)
      qualifiedName:
        CSharp: Shapes.IsoBox(int, int, IntVector2, IntVector2, IntVector2, Color, bool)
        VB: Shapes.IsoBox(Integer, Integer, IntVector2, IntVector2, IntVector2, Color, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsoBox
        path: ''
        startLine: 6286
      syntax:
        content:
          CSharp: public static Texture2D IsoBox(int texWidth, int texHeight, IntVector2 baseStart, IntVector2 baseEnd, IntVector2 heightEnd, Color colour, bool filled)
          VB: Public Shared Function IsoBox(texWidth As Integer, texHeight As Integer, baseStart As IntVector2, baseEnd As IntVector2, heightEnd As IntVector2, colour As Color, filled As Boolean) As Texture2D
        parameters:
        - id: texWidth
          type: System.Int32
        - id: texHeight
          type: System.Int32
        - id: baseStart
          type: Global.IntVector2
        - id: baseEnd
          type: Global.IntVector2
        - id: heightEnd
          type: Global.IntVector2
        - id: colour
          type: Global.Color
        - id: filled
          type: System.Boolean
        return:
          type: Global.Texture2D
      overload: Global.Shapes.IsoBox*
    - id: Global.Shapes.Gradient(System.Int32,System.Int32,IntVector2,IntVector2,Color,Color,GradientMode)
      commentId: M:Global.Shapes.Gradient(System.Int32,System.Int32,IntVector2,IntVector2,Color,Color,GradientMode)
      language: CSharp
      name:
        CSharp: Gradient(int, int, IntVector2, IntVector2, Color, Color, GradientMode)
        VB: Gradient(Integer, Integer, IntVector2, IntVector2, Color, Color, GradientMode)
      nameWithType:
        CSharp: Shapes.Gradient(int, int, IntVector2, IntVector2, Color, Color, GradientMode)
        VB: Shapes.Gradient(Integer, Integer, IntVector2, IntVector2, Color, Color, GradientMode)
      qualifiedName:
        CSharp: Shapes.Gradient(int, int, IntVector2, IntVector2, Color, Color, GradientMode)
        VB: Shapes.Gradient(Integer, Integer, IntVector2, IntVector2, Color, Color, GradientMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Gradient
        path: ''
        startLine: 6333
      syntax:
        content:
          CSharp: public static Texture2D Gradient(int texWidth, int texHeight, IntVector2 start, IntVector2 end, Color startColour, Color endColour, GradientMode gradientMode)
          VB: Public Shared Function Gradient(texWidth As Integer, texHeight As Integer, start As IntVector2, [end] As IntVector2, startColour As Color, endColour As Color, gradientMode As GradientMode) As Texture2D
        parameters:
        - id: texWidth
          type: System.Int32
        - id: texHeight
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: startColour
          type: Global.Color
        - id: endColour
          type: Global.Color
        - id: gradientMode
          type: Global.GradientMode
        return:
          type: Global.Texture2D
      overload: Global.Shapes.Gradient*
    - id: Global.Shapes.GradientLinear(System.Int32,System.Int32,IntVector2,IntVector2,Color,Color)
      commentId: M:Global.Shapes.GradientLinear(System.Int32,System.Int32,IntVector2,IntVector2,Color,Color)
      language: CSharp
      name:
        CSharp: GradientLinear(int, int, IntVector2, IntVector2, Color, Color)
        VB: GradientLinear(Integer, Integer, IntVector2, IntVector2, Color, Color)
      nameWithType:
        CSharp: Shapes.GradientLinear(int, int, IntVector2, IntVector2, Color, Color)
        VB: Shapes.GradientLinear(Integer, Integer, IntVector2, IntVector2, Color, Color)
      qualifiedName:
        CSharp: Shapes.GradientLinear(int, int, IntVector2, IntVector2, Color, Color)
        VB: Shapes.GradientLinear(Integer, Integer, IntVector2, IntVector2, Color, Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GradientLinear
        path: ''
        startLine: 6343
      syntax:
        content:
          CSharp: public static Texture2D GradientLinear(int texWidth, int texHeight, IntVector2 start, IntVector2 end, Color startColour, Color endColour)
          VB: Public Shared Function GradientLinear(texWidth As Integer, texHeight As Integer, start As IntVector2, [end] As IntVector2, startColour As Color, endColour As Color) As Texture2D
        parameters:
        - id: texWidth
          type: System.Int32
        - id: texHeight
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: startColour
          type: Global.Color
        - id: endColour
          type: Global.Color
        return:
          type: Global.Texture2D
      overload: Global.Shapes.GradientLinear*
    - id: Global.Shapes.GradientRadial(System.Int32,System.Int32,IntVector2,IntVector2,Color,Color)
      commentId: M:Global.Shapes.GradientRadial(System.Int32,System.Int32,IntVector2,IntVector2,Color,Color)
      language: CSharp
      name:
        CSharp: GradientRadial(int, int, IntVector2, IntVector2, Color, Color)
        VB: GradientRadial(Integer, Integer, IntVector2, IntVector2, Color, Color)
      nameWithType:
        CSharp: Shapes.GradientRadial(int, int, IntVector2, IntVector2, Color, Color)
        VB: Shapes.GradientRadial(Integer, Integer, IntVector2, IntVector2, Color, Color)
      qualifiedName:
        CSharp: Shapes.GradientRadial(int, int, IntVector2, IntVector2, Color, Color)
        VB: Shapes.GradientRadial(Integer, Integer, IntVector2, IntVector2, Color, Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GradientRadial
        path: ''
        startLine: 6389
      syntax:
        content:
          CSharp: public static Texture2D GradientRadial(int texWidth, int texHeight, IntVector2 start, IntVector2 end, Color startColour, Color endColour)
          VB: Public Shared Function GradientRadial(texWidth As Integer, texHeight As Integer, start As IntVector2, [end] As IntVector2, startColour As Color, endColour As Color) As Texture2D
        parameters:
        - id: texWidth
          type: System.Int32
        - id: texHeight
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: startColour
          type: Global.Color
        - id: endColour
          type: Global.Color
        return:
          type: Global.Texture2D
      overload: Global.Shapes.GradientRadial*
  - id: Global.Tool
    commentId: T:Global.Tool
    language: CSharp
    name:
      CSharp: Tool
      VB: Tool
    nameWithType:
      CSharp: Tool
      VB: Tool
    qualifiedName:
      CSharp: Tool
      VB: Tool
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Tool
      path: ''
      startLine: 6433
    summary: "\nDefines the tools available to use and their properties.\n"
    example: []
    syntax:
      content:
        CSharp: public class Tool
        VB: Public Class Tool
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.Tool.name
      commentId: P:Global.Tool.name
      language: CSharp
      name:
        CSharp: name
        VB: name
      nameWithType:
        CSharp: Tool.name
        VB: Tool.name
      qualifiedName:
        CSharp: Tool.name
        VB: Tool.name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: name
        path: ''
        startLine: 6436
      syntax:
        content:
          CSharp: public string name { get; }
          VB: Public Property name As String
        parameters: []
        return:
          type: System.String
      overload: Global.Tool.name*
    - id: Global.Tool.useMovementInterpolation
      commentId: P:Global.Tool.useMovementInterpolation
      language: CSharp
      name:
        CSharp: useMovementInterpolation
        VB: useMovementInterpolation
      nameWithType:
        CSharp: Tool.useMovementInterpolation
        VB: Tool.useMovementInterpolation
      qualifiedName:
        CSharp: Tool.useMovementInterpolation
        VB: Tool.useMovementInterpolation
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: useMovementInterpolation
        path: ''
        startLine: 6438
      summary: 'When the mouse position jumps between frames: true - the tool should be applied to each coord the mouse moved through; false - just applied to the ending coord.'
      example: []
      syntax:
        content:
          CSharp: public bool useMovementInterpolation { get; }
          VB: Public Property useMovementInterpolation As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Tool.useMovementInterpolation*
    - id: Global.Tool.showBrushBorder
      commentId: P:Global.Tool.showBrushBorder
      language: CSharp
      name:
        CSharp: showBrushBorder
        VB: showBrushBorder
      nameWithType:
        CSharp: Tool.showBrushBorder
        VB: Tool.showBrushBorder
      qualifiedName:
        CSharp: Tool.showBrushBorder
        VB: Tool.showBrushBorder
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: showBrushBorder
        path: ''
        startLine: 6440
      summary: Whether the outline of the brush shape should be shown.
      example: []
      syntax:
        content:
          CSharp: public bool showBrushBorder { get; }
          VB: Public Property showBrushBorder As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Tool.showBrushBorder*
    - id: Global.Tool.finishMode
      commentId: P:Global.Tool.finishMode
      language: CSharp
      name:
        CSharp: finishMode
        VB: finishMode
      nameWithType:
        CSharp: Tool.finishMode
        VB: Tool.finishMode
      qualifiedName:
        CSharp: Tool.finishMode
        VB: Tool.finishMode
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: finishMode
        path: ''
        startLine: 6442
      summary: What action causes a use of the tool to be ended.
      example: []
      syntax:
        content:
          CSharp: public MouseTargetDeselectMode finishMode { get; }
          VB: Public Property finishMode As MouseTargetDeselectMode
        parameters: []
        return:
          type: Global.MouseTargetDeselectMode
      overload: Global.Tool.finishMode*
    - id: Global.Tool.canBeCancelled
      commentId: F:Global.Tool.canBeCancelled
      language: CSharp
      name:
        CSharp: canBeCancelled
        VB: canBeCancelled
      nameWithType:
        CSharp: Tool.canBeCancelled
        VB: Tool.canBeCancelled
      qualifiedName:
        CSharp: Tool.canBeCancelled
        VB: Tool.canBeCancelled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: canBeCancelled
        path: ''
        startLine: 6443
      syntax:
        content:
          CSharp: public bool canBeCancelled
          VB: Public canBeCancelled As Boolean
        return:
          type: System.Boolean
    - id: Global.Tool.None
      commentId: F:Global.Tool.None
      language: CSharp
      name:
        CSharp: None
        VB: None
      nameWithType:
        CSharp: Tool.None
        VB: Tool.None
      qualifiedName:
        CSharp: Tool.None
        VB: Tool.None
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: None
        path: ''
        startLine: 6447
      syntax:
        content:
          CSharp: public static Tool None
          VB: Public Shared None As Tool
        return:
          type: Global.Tool
    - id: Global.Tool.Pencil
      commentId: F:Global.Tool.Pencil
      language: CSharp
      name:
        CSharp: Pencil
        VB: Pencil
      nameWithType:
        CSharp: Tool.Pencil
        VB: Tool.Pencil
      qualifiedName:
        CSharp: Tool.Pencil
        VB: Tool.Pencil
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Pencil
        path: ''
        startLine: 6454
      syntax:
        content:
          CSharp: public static Tool Pencil
          VB: Public Shared Pencil As Tool
        return:
          type: Global.Tool
    - id: Global.Tool.Brush
      commentId: F:Global.Tool.Brush
      language: CSharp
      name:
        CSharp: Brush
        VB: Brush
      nameWithType:
        CSharp: Tool.Brush
        VB: Tool.Brush
      qualifiedName:
        CSharp: Tool.Brush
        VB: Tool.Brush
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Brush
        path: ''
        startLine: 6461
      syntax:
        content:
          CSharp: public static Tool Brush
          VB: Public Shared Brush As Tool
        return:
          type: Global.Tool
    - id: Global.Tool.Rubber
      commentId: F:Global.Tool.Rubber
      language: CSharp
      name:
        CSharp: Rubber
        VB: Rubber
      nameWithType:
        CSharp: Tool.Rubber
        VB: Tool.Rubber
      qualifiedName:
        CSharp: Tool.Rubber
        VB: Tool.Rubber
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Rubber
        path: ''
        startLine: 6468
      syntax:
        content:
          CSharp: public static Tool Rubber
          VB: Public Shared Rubber As Tool
        return:
          type: Global.Tool
    - id: Global.Tool.EyeDropper
      commentId: F:Global.Tool.EyeDropper
      language: CSharp
      name:
        CSharp: EyeDropper
        VB: EyeDropper
      nameWithType:
        CSharp: Tool.EyeDropper
        VB: Tool.EyeDropper
      qualifiedName:
        CSharp: Tool.EyeDropper
        VB: Tool.EyeDropper
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: EyeDropper
        path: ''
        startLine: 6475
      syntax:
        content:
          CSharp: public static Tool EyeDropper
          VB: Public Shared EyeDropper As Tool
        return:
          type: Global.Tool
    - id: Global.Tool.GlobalEyeDropper
      commentId: F:Global.Tool.GlobalEyeDropper
      language: CSharp
      name:
        CSharp: GlobalEyeDropper
        VB: GlobalEyeDropper
      nameWithType:
        CSharp: Tool.GlobalEyeDropper
        VB: Tool.GlobalEyeDropper
      qualifiedName:
        CSharp: Tool.GlobalEyeDropper
        VB: Tool.GlobalEyeDropper
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GlobalEyeDropper
        path: ''
        startLine: 6482
      syntax:
        content:
          CSharp: public static Tool GlobalEyeDropper
          VB: Public Shared GlobalEyeDropper As Tool
        return:
          type: Global.Tool
    - id: Global.Tool.Fill
      commentId: F:Global.Tool.Fill
      language: CSharp
      name:
        CSharp: Fill
        VB: Fill
      nameWithType:
        CSharp: Tool.Fill
        VB: Tool.Fill
      qualifiedName:
        CSharp: Tool.Fill
        VB: Tool.Fill
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Fill
        path: ''
        startLine: 6489
      syntax:
        content:
          CSharp: public static Tool Fill
          VB: Public Shared Fill As Tool
        return:
          type: Global.Tool
    - id: Global.Tool.Shape
      commentId: F:Global.Tool.Shape
      language: CSharp
      name:
        CSharp: Shape
        VB: Shape
      nameWithType:
        CSharp: Tool.Shape
        VB: Tool.Shape
      qualifiedName:
        CSharp: Tool.Shape
        VB: Tool.Shape
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Shape
        path: ''
        startLine: 6496
      syntax:
        content:
          CSharp: public static Tool Shape
          VB: Public Shared Shape As Tool
        return:
          type: Global.Tool
    - id: Global.Tool.Line
      commentId: F:Global.Tool.Line
      language: CSharp
      name:
        CSharp: Line
        VB: Line
      nameWithType:
        CSharp: Tool.Line
        VB: Tool.Line
      qualifiedName:
        CSharp: Tool.Line
        VB: Tool.Line
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Line
        path: ''
        startLine: 6504
      syntax:
        content:
          CSharp: public static Tool Line
          VB: Public Shared Line As Tool
        return:
          type: Global.Tool
    - id: Global.Tool.IsoBox
      commentId: F:Global.Tool.IsoBox
      language: CSharp
      name:
        CSharp: IsoBox
        VB: IsoBox
      nameWithType:
        CSharp: Tool.IsoBox
        VB: Tool.IsoBox
      qualifiedName:
        CSharp: Tool.IsoBox
        VB: Tool.IsoBox
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsoBox
        path: ''
        startLine: 6512
      syntax:
        content:
          CSharp: public static Tool IsoBox
          VB: Public Shared IsoBox As Tool
        return:
          type: Global.Tool
    - id: Global.Tool.Gradient
      commentId: F:Global.Tool.Gradient
      language: CSharp
      name:
        CSharp: Gradient
        VB: Gradient
      nameWithType:
        CSharp: Tool.Gradient
        VB: Tool.Gradient
      qualifiedName:
        CSharp: Tool.Gradient
        VB: Tool.Gradient
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Gradient
        path: ''
        startLine: 6521
      syntax:
        content:
          CSharp: public static Tool Gradient
          VB: Public Shared Gradient As Tool
        return:
          type: Global.Tool
    - id: Global.Tool.Move
      commentId: F:Global.Tool.Move
      language: CSharp
      name:
        CSharp: Move
        VB: Move
      nameWithType:
        CSharp: Tool.Move
        VB: Tool.Move
      qualifiedName:
        CSharp: Tool.Move
        VB: Tool.Move
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Move
        path: ''
        startLine: 6529
      syntax:
        content:
          CSharp: public static Tool Move
          VB: Public Shared Move As Tool
        return:
          type: Global.Tool
    - id: Global.Tool.Selection
      commentId: F:Global.Tool.Selection
      language: CSharp
      name:
        CSharp: Selection
        VB: Selection
      nameWithType:
        CSharp: Tool.Selection
        VB: Tool.Selection
      qualifiedName:
        CSharp: Tool.Selection
        VB: Tool.Selection
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Selection
        path: ''
        startLine: 6536
      syntax:
        content:
          CSharp: public static Tool Selection
          VB: Public Shared Selection As Tool
        return:
          type: Global.Tool
    - id: Global.Tool.tools
      commentId: F:Global.Tool.tools
      language: CSharp
      name:
        CSharp: tools
        VB: tools
      nameWithType:
        CSharp: Tool.tools
        VB: Tool.tools
      qualifiedName:
        CSharp: Tool.tools
        VB: Tool.tools
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: tools
        path: ''
        startLine: 6544
      summary: All implemented tools.
      example: []
      syntax:
        content:
          CSharp: public static readonly Tool[] tools
          VB: Public Shared ReadOnly tools As Tool()
        return:
          type: Global.Tool[]
    - id: Global.Tool.StringToTool(System.String)
      commentId: M:Global.Tool.StringToTool(System.String)
      language: CSharp
      name:
        CSharp: StringToTool(string)
        VB: StringToTool(String)
      nameWithType:
        CSharp: Tool.StringToTool(string)
        VB: Tool.StringToTool(String)
      qualifiedName:
        CSharp: Tool.StringToTool(string)
        VB: Tool.StringToTool(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: StringToTool
        path: ''
        startLine: 6549
      summary: "\nGets the tool with that name.\n"
      example: []
      syntax:
        content:
          CSharp: public static Tool StringToTool(string toolName)
          VB: Public Shared Function StringToTool(toolName As String) As Tool
        parameters:
        - id: toolName
          type: System.String
        return:
          type: Global.Tool
      overload: Global.Tool.StringToTool*
  - id: Global.Shape
    commentId: T:Global.Shape
    language: CSharp
    name:
      CSharp: Shape
      VB: Shape
    nameWithType:
      CSharp: Shape
      VB: Shape
    qualifiedName:
      CSharp: Shape
      VB: Shape
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Shape
      path: ''
      startLine: 6568
    syntax:
      content:
        CSharp: public enum Shape
        VB: Public Enum Shape
    items:
    - id: Global.Shape.Rectangle
      commentId: F:Global.Shape.Rectangle
      language: CSharp
      name:
        CSharp: Rectangle
        VB: Rectangle
      nameWithType:
        CSharp: Shape.Rectangle
        VB: Shape.Rectangle
      qualifiedName:
        CSharp: Shape.Rectangle
        VB: Shape.Rectangle
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Rectangle
        path: ''
        startLine: 6570
      syntax:
        content:
          CSharp: Rectangle = 0
          VB: Rectangle = 0
        return:
          type: Global.Shape
    - id: Global.Shape.Ellipse
      commentId: F:Global.Shape.Ellipse
      language: CSharp
      name:
        CSharp: Ellipse
        VB: Ellipse
      nameWithType:
        CSharp: Shape.Ellipse
        VB: Shape.Ellipse
      qualifiedName:
        CSharp: Shape.Ellipse
        VB: Shape.Ellipse
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Ellipse
        path: ''
        startLine: 6571
      syntax:
        content:
          CSharp: Ellipse = 1
          VB: Ellipse = 1
        return:
          type: Global.Shape
    - id: Global.Shape.Triangle
      commentId: F:Global.Shape.Triangle
      language: CSharp
      name:
        CSharp: Triangle
        VB: Triangle
      nameWithType:
        CSharp: Shape.Triangle
        VB: Shape.Triangle
      qualifiedName:
        CSharp: Shape.Triangle
        VB: Shape.Triangle
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Triangle
        path: ''
        startLine: 6572
      syntax:
        content:
          CSharp: Triangle = 2
          VB: Triangle = 2
        return:
          type: Global.Shape
  - id: Global.SelectionMode
    commentId: T:Global.SelectionMode
    language: CSharp
    name:
      CSharp: SelectionMode
      VB: SelectionMode
    nameWithType:
      CSharp: SelectionMode
      VB: SelectionMode
    qualifiedName:
      CSharp: SelectionMode
      VB: SelectionMode
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: SelectionMode
      path: ''
      startLine: 6575
    syntax:
      content:
        CSharp: public enum SelectionMode
        VB: Public Enum SelectionMode
    items:
    - id: Global.SelectionMode.Draw
      commentId: F:Global.SelectionMode.Draw
      language: CSharp
      name:
        CSharp: Draw
        VB: Draw
      nameWithType:
        CSharp: SelectionMode.Draw
        VB: SelectionMode.Draw
      qualifiedName:
        CSharp: SelectionMode.Draw
        VB: SelectionMode.Draw
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Draw
        path: ''
        startLine: 6577
      syntax:
        content:
          CSharp: Draw = 0
          VB: Draw = 0
        return:
          type: Global.SelectionMode
    - id: Global.SelectionMode.MagicWand
      commentId: F:Global.SelectionMode.MagicWand
      language: CSharp
      name:
        CSharp: MagicWand
        VB: MagicWand
      nameWithType:
        CSharp: SelectionMode.MagicWand
        VB: SelectionMode.MagicWand
      qualifiedName:
        CSharp: SelectionMode.MagicWand
        VB: SelectionMode.MagicWand
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MagicWand
        path: ''
        startLine: 6578
      syntax:
        content:
          CSharp: MagicWand = 1
          VB: MagicWand = 1
        return:
          type: Global.SelectionMode
    - id: Global.SelectionMode.Rectangle
      commentId: F:Global.SelectionMode.Rectangle
      language: CSharp
      name:
        CSharp: Rectangle
        VB: Rectangle
      nameWithType:
        CSharp: SelectionMode.Rectangle
        VB: SelectionMode.Rectangle
      qualifiedName:
        CSharp: SelectionMode.Rectangle
        VB: SelectionMode.Rectangle
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Rectangle
        path: ''
        startLine: 6579
      syntax:
        content:
          CSharp: Rectangle = 10
          VB: Rectangle = 10
        return:
          type: Global.SelectionMode
    - id: Global.SelectionMode.Ellipse
      commentId: F:Global.SelectionMode.Ellipse
      language: CSharp
      name:
        CSharp: Ellipse
        VB: Ellipse
      nameWithType:
        CSharp: SelectionMode.Ellipse
        VB: SelectionMode.Ellipse
      qualifiedName:
        CSharp: SelectionMode.Ellipse
        VB: SelectionMode.Ellipse
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Ellipse
        path: ''
        startLine: 6580
      syntax:
        content:
          CSharp: Ellipse = 11
          VB: Ellipse = 11
        return:
          type: Global.SelectionMode
  - id: Global.BrushShape
    commentId: T:Global.BrushShape
    language: CSharp
    name:
      CSharp: BrushShape
      VB: BrushShape
    nameWithType:
      CSharp: BrushShape
      VB: BrushShape
    qualifiedName:
      CSharp: BrushShape
      VB: BrushShape
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: BrushShape
      path: ''
      startLine: 6583
    syntax:
      content:
        CSharp: public enum BrushShape
        VB: Public Enum BrushShape
    items:
    - id: Global.BrushShape.Custom
      commentId: F:Global.BrushShape.Custom
      language: CSharp
      name:
        CSharp: Custom
        VB: Custom
      nameWithType:
        CSharp: BrushShape.Custom
        VB: BrushShape.Custom
      qualifiedName:
        CSharp: BrushShape.Custom
        VB: BrushShape.Custom
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Custom
        path: ''
        startLine: 6585
      syntax:
        content:
          CSharp: Custom = -1
          VB: Custom = -1
        return:
          type: Global.BrushShape
    - id: Global.BrushShape.Circle
      commentId: F:Global.BrushShape.Circle
      language: CSharp
      name:
        CSharp: Circle
        VB: Circle
      nameWithType:
        CSharp: BrushShape.Circle
        VB: BrushShape.Circle
      qualifiedName:
        CSharp: BrushShape.Circle
        VB: BrushShape.Circle
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Circle
        path: ''
        startLine: 6586
      syntax:
        content:
          CSharp: Circle = 0
          VB: Circle = 0
        return:
          type: Global.BrushShape
    - id: Global.BrushShape.Square
      commentId: F:Global.BrushShape.Square
      language: CSharp
      name:
        CSharp: Square
        VB: Square
      nameWithType:
        CSharp: BrushShape.Square
        VB: BrushShape.Square
      qualifiedName:
        CSharp: BrushShape.Square
        VB: BrushShape.Square
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Square
        path: ''
        startLine: 6587
      syntax:
        content:
          CSharp: Square = 1
          VB: Square = 1
        return:
          type: Global.BrushShape
    - id: Global.BrushShape.Diamond
      commentId: F:Global.BrushShape.Diamond
      language: CSharp
      name:
        CSharp: Diamond
        VB: Diamond
      nameWithType:
        CSharp: BrushShape.Diamond
        VB: BrushShape.Diamond
      qualifiedName:
        CSharp: BrushShape.Diamond
        VB: BrushShape.Diamond
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Diamond
        path: ''
        startLine: 6588
      syntax:
        content:
          CSharp: Diamond = 2
          VB: Diamond = 2
        return:
          type: Global.BrushShape
  - id: Global.GradientMode
    commentId: T:Global.GradientMode
    language: CSharp
    name:
      CSharp: GradientMode
      VB: GradientMode
    nameWithType:
      CSharp: GradientMode
      VB: GradientMode
    qualifiedName:
      CSharp: GradientMode
      VB: GradientMode
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GradientMode
      path: ''
      startLine: 6591
    syntax:
      content:
        CSharp: public enum GradientMode
        VB: Public Enum GradientMode
    items:
    - id: Global.GradientMode.Linear
      commentId: F:Global.GradientMode.Linear
      language: CSharp
      name:
        CSharp: Linear
        VB: Linear
      nameWithType:
        CSharp: GradientMode.Linear
        VB: GradientMode.Linear
      qualifiedName:
        CSharp: GradientMode.Linear
        VB: GradientMode.Linear
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Linear
        path: ''
        startLine: 6593
      syntax:
        content:
          CSharp: Linear = 0
          VB: Linear = 0
        return:
          type: Global.GradientMode
    - id: Global.GradientMode.Radial
      commentId: F:Global.GradientMode.Radial
      language: CSharp
      name:
        CSharp: Radial
        VB: Radial
      nameWithType:
        CSharp: GradientMode.Radial
        VB: GradientMode.Radial
      qualifiedName:
        CSharp: GradientMode.Radial
        VB: GradientMode.Radial
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Radial
        path: ''
        startLine: 6594
      syntax:
        content:
          CSharp: Radial = 1
          VB: Radial = 1
        return:
          type: Global.GradientMode
  - id: Global.Toolbar
    commentId: T:Global.Toolbar
    language: CSharp
    name:
      CSharp: Toolbar
      VB: Toolbar
    nameWithType:
      CSharp: Toolbar
      VB: Toolbar
    qualifiedName:
      CSharp: Toolbar
      VB: Toolbar
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Toolbar
      path: ''
      startLine: 6601
    summary: "\nHandles selecting tools, brush size, etc.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Toolbar : MonoBehaviour'
        VB: Public Class Toolbar Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.Toolbar.maxBrushSize
      commentId: P:Global.Toolbar.maxBrushSize
      language: CSharp
      name:
        CSharp: maxBrushSize
        VB: maxBrushSize
      nameWithType:
        CSharp: Toolbar.maxBrushSize
        VB: Toolbar.maxBrushSize
      qualifiedName:
        CSharp: Toolbar.maxBrushSize
        VB: Toolbar.maxBrushSize
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: maxBrushSize
        path: ''
        startLine: 6606
      syntax:
        content:
          CSharp: public int maxBrushSize { get; }
          VB: Public ReadOnly Property maxBrushSize As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.Toolbar.maxBrushSize*
    - id: Global.Toolbar.brushSize
      commentId: P:Global.Toolbar.brushSize
      language: CSharp
      name:
        CSharp: brushSize
        VB: brushSize
      nameWithType:
        CSharp: Toolbar.brushSize
        VB: Toolbar.brushSize
      qualifiedName:
        CSharp: Toolbar.brushSize
        VB: Toolbar.brushSize
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: brushSize
        path: ''
        startLine: 6610
      syntax:
        content:
          CSharp: public int brushSize { get; }
          VB: Public Property brushSize As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.Toolbar.brushSize*
    - id: Global.Toolbar.lineSmoothingTime
      commentId: P:Global.Toolbar.lineSmoothingTime
      language: CSharp
      name:
        CSharp: lineSmoothingTime
        VB: lineSmoothingTime
      nameWithType:
        CSharp: Toolbar.lineSmoothingTime
        VB: Toolbar.lineSmoothingTime
      qualifiedName:
        CSharp: Toolbar.lineSmoothingTime
        VB: Toolbar.lineSmoothingTime
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: lineSmoothingTime
        path: ''
        startLine: 6626
      summary: "\nThe amount of time you have to draw a new pixel in for an old one to be potentially smoothed.\n"
      example: []
      syntax:
        content:
          CSharp: public float lineSmoothingTime { get; }
          VB: Public ReadOnly Property lineSmoothingTime As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.Toolbar.lineSmoothingTime*
    - id: Global.Toolbar.selectedTool
      commentId: P:Global.Toolbar.selectedTool
      language: CSharp
      name:
        CSharp: selectedTool
        VB: selectedTool
      nameWithType:
        CSharp: Toolbar.selectedTool
        VB: Toolbar.selectedTool
      qualifiedName:
        CSharp: Toolbar.selectedTool
        VB: Toolbar.selectedTool
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: selectedTool
        path: ''
        startLine: 6628
      syntax:
        content:
          CSharp: public Tool selectedTool { get; }
          VB: Public ReadOnly Property selectedTool As Tool
        parameters: []
        return:
          type: Global.Tool
      overload: Global.Toolbar.selectedTool*
    - id: Global.Toolbar.previousTool
      commentId: P:Global.Toolbar.previousTool
      language: CSharp
      name:
        CSharp: previousTool
        VB: previousTool
      nameWithType:
        CSharp: Toolbar.previousTool
        VB: Toolbar.previousTool
      qualifiedName:
        CSharp: Toolbar.previousTool
        VB: Toolbar.previousTool
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: previousTool
        path: ''
        startLine: 6629
      syntax:
        content:
          CSharp: public Tool previousTool { get; }
          VB: Public Property previousTool As Tool
        parameters: []
        return:
          type: Global.Tool
      overload: Global.Toolbar.previousTool*
    - id: Global.Toolbar.brushShape
      commentId: P:Global.Toolbar.brushShape
      language: CSharp
      name:
        CSharp: brushShape
        VB: brushShape
      nameWithType:
        CSharp: Toolbar.brushShape
        VB: Toolbar.brushShape
      qualifiedName:
        CSharp: Toolbar.brushShape
        VB: Toolbar.brushShape
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: brushShape
        path: ''
        startLine: 6635
      syntax:
        content:
          CSharp: public BrushShape brushShape { get; set; }
          VB: Public Property brushShape As BrushShape
        parameters: []
        return:
          type: Global.BrushShape
      overload: Global.Toolbar.brushShape*
    - id: Global.Toolbar.shapeToolShape
      commentId: P:Global.Toolbar.shapeToolShape
      language: CSharp
      name:
        CSharp: shapeToolShape
        VB: shapeToolShape
      nameWithType:
        CSharp: Toolbar.shapeToolShape
        VB: Toolbar.shapeToolShape
      qualifiedName:
        CSharp: Toolbar.shapeToolShape
        VB: Toolbar.shapeToolShape
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: shapeToolShape
        path: ''
        startLine: 6647
      syntax:
        content:
          CSharp: public Shape shapeToolShape { get; }
          VB: Public Property shapeToolShape As Shape
        parameters: []
        return:
          type: Global.Shape
      overload: Global.Toolbar.shapeToolShape*
    - id: Global.Toolbar.gradientMode
      commentId: P:Global.Toolbar.gradientMode
      language: CSharp
      name:
        CSharp: gradientMode
        VB: gradientMode
      nameWithType:
        CSharp: Toolbar.gradientMode
        VB: Toolbar.gradientMode
      qualifiedName:
        CSharp: Toolbar.gradientMode
        VB: Toolbar.gradientMode
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: gradientMode
        path: ''
        startLine: 6659
      syntax:
        content:
          CSharp: public GradientMode gradientMode { get; }
          VB: Public Property gradientMode As GradientMode
        parameters: []
        return:
          type: Global.GradientMode
      overload: Global.Toolbar.gradientMode*
    - id: Global.Toolbar.selectionMode
      commentId: P:Global.Toolbar.selectionMode
      language: CSharp
      name:
        CSharp: selectionMode
        VB: selectionMode
      nameWithType:
        CSharp: Toolbar.selectionMode
        VB: Toolbar.selectionMode
      qualifiedName:
        CSharp: Toolbar.selectionMode
        VB: Toolbar.selectionMode
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: selectionMode
        path: ''
        startLine: 6671
      syntax:
        content:
          CSharp: public SelectionMode selectionMode { get; }
          VB: Public Property selectionMode As SelectionMode
        parameters: []
        return:
          type: Global.SelectionMode
      overload: Global.Toolbar.selectionMode*
    - id: Global.Toolbar.brushPixels
      commentId: P:Global.Toolbar.brushPixels
      language: CSharp
      name:
        CSharp: brushPixels
        VB: brushPixels
      nameWithType:
        CSharp: Toolbar.brushPixels
        VB: Toolbar.brushPixels
      qualifiedName:
        CSharp: Toolbar.brushPixels
        VB: Toolbar.brushPixels
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: brushPixels
        path: ''
        startLine: 6693
      summary: The pixels, given relative to the position of the mouse, that will be affected by the current brush.
      example: []
      syntax:
        content:
          CSharp: public IntVector2[] brushPixels { get; }
          VB: Public Property brushPixels As IntVector2()
        parameters: []
        return:
          type: Global.IntVector2[]
      overload: Global.Toolbar.brushPixels*
    - id: Global.Toolbar.brushTexture
      commentId: P:Global.Toolbar.brushTexture
      language: CSharp
      name:
        CSharp: brushTexture
        VB: brushTexture
      nameWithType:
        CSharp: Toolbar.brushTexture
        VB: Toolbar.brushTexture
      qualifiedName:
        CSharp: Toolbar.brushTexture
        VB: Toolbar.brushTexture
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: brushTexture
        path: ''
        startLine: 6694
      syntax:
        content:
          CSharp: public Texture2D brushTexture { get; }
          VB: Public Property brushTexture As Texture2D
        parameters: []
        return:
          type: Global.Texture2D
      overload: Global.Toolbar.brushTexture*
    - id: Global.Toolbar.brushPixelsWidth
      commentId: P:Global.Toolbar.brushPixelsWidth
      language: CSharp
      name:
        CSharp: brushPixelsWidth
        VB: brushPixelsWidth
      nameWithType:
        CSharp: Toolbar.brushPixelsWidth
        VB: Toolbar.brushPixelsWidth
      qualifiedName:
        CSharp: Toolbar.brushPixelsWidth
        VB: Toolbar.brushPixelsWidth
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: brushPixelsWidth
        path: ''
        startLine: 6695
      syntax:
        content:
          CSharp: public int brushPixelsWidth { get; }
          VB: Public Property brushPixelsWidth As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.Toolbar.brushPixelsWidth*
    - id: Global.Toolbar.brushPixelsHeight
      commentId: P:Global.Toolbar.brushPixelsHeight
      language: CSharp
      name:
        CSharp: brushPixelsHeight
        VB: brushPixelsHeight
      nameWithType:
        CSharp: Toolbar.brushPixelsHeight
        VB: Toolbar.brushPixelsHeight
      qualifiedName:
        CSharp: Toolbar.brushPixelsHeight
        VB: Toolbar.brushPixelsHeight
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: brushPixelsHeight
        path: ''
        startLine: 6696
      syntax:
        content:
          CSharp: public int brushPixelsHeight { get; }
          VB: Public Property brushPixelsHeight As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.Toolbar.brushPixelsHeight*
    - id: Global.Toolbar.brushPixelsIsEmpty
      commentId: P:Global.Toolbar.brushPixelsIsEmpty
      language: CSharp
      name:
        CSharp: brushPixelsIsEmpty
        VB: brushPixelsIsEmpty
      nameWithType:
        CSharp: Toolbar.brushPixelsIsEmpty
        VB: Toolbar.brushPixelsIsEmpty
      qualifiedName:
        CSharp: Toolbar.brushPixelsIsEmpty
        VB: Toolbar.brushPixelsIsEmpty
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: brushPixelsIsEmpty
        path: ''
        startLine: 6697
      syntax:
        content:
          CSharp: public bool brushPixelsIsEmpty { get; }
          VB: Public ReadOnly Property brushPixelsIsEmpty As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Toolbar.brushPixelsIsEmpty*
    - id: Global.Toolbar.brushPixelsIsSingleCentralPixel
      commentId: P:Global.Toolbar.brushPixelsIsSingleCentralPixel
      language: CSharp
      name:
        CSharp: brushPixelsIsSingleCentralPixel
        VB: brushPixelsIsSingleCentralPixel
      nameWithType:
        CSharp: Toolbar.brushPixelsIsSingleCentralPixel
        VB: Toolbar.brushPixelsIsSingleCentralPixel
      qualifiedName:
        CSharp: Toolbar.brushPixelsIsSingleCentralPixel
        VB: Toolbar.brushPixelsIsSingleCentralPixel
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: brushPixelsIsSingleCentralPixel
        path: ''
        startLine: 6698
      syntax:
        content:
          CSharp: public bool brushPixelsIsSingleCentralPixel { get; }
          VB: Public ReadOnly Property brushPixelsIsSingleCentralPixel As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Toolbar.brushPixelsIsSingleCentralPixel*
    - id: Global.Toolbar.SetBrushSize(System.Int32)
      commentId: M:Global.Toolbar.SetBrushSize(System.Int32)
      language: CSharp
      name:
        CSharp: SetBrushSize(int)
        VB: SetBrushSize(Integer)
      nameWithType:
        CSharp: Toolbar.SetBrushSize(int)
        VB: Toolbar.SetBrushSize(Integer)
      qualifiedName:
        CSharp: Toolbar.SetBrushSize(int)
        VB: Toolbar.SetBrushSize(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetBrushSize
        path: ''
        startLine: 6756
      syntax:
        content:
          CSharp: public bool SetBrushSize(int brushSize)
          VB: Public Function SetBrushSize(brushSize As Integer) As Boolean
        parameters:
        - id: brushSize
          type: System.Int32
        return:
          type: System.Boolean
      overload: Global.Toolbar.SetBrushSize*
    - id: Global.Toolbar.SelectGlobalEyeDropper
      commentId: M:Global.Toolbar.SelectGlobalEyeDropper
      language: CSharp
      name:
        CSharp: SelectGlobalEyeDropper()
        VB: SelectGlobalEyeDropper()
      nameWithType:
        CSharp: Toolbar.SelectGlobalEyeDropper()
        VB: Toolbar.SelectGlobalEyeDropper()
      qualifiedName:
        CSharp: Toolbar.SelectGlobalEyeDropper()
        VB: Toolbar.SelectGlobalEyeDropper()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SelectGlobalEyeDropper
        path: ''
        startLine: 6834
      syntax:
        content:
          CSharp: public void SelectGlobalEyeDropper()
          VB: Public Sub SelectGlobalEyeDropper()
      overload: Global.Toolbar.SelectGlobalEyeDropper*
    - id: Global.Toolbar.DeselectGlobalEyeDropper
      commentId: M:Global.Toolbar.DeselectGlobalEyeDropper
      language: CSharp
      name:
        CSharp: DeselectGlobalEyeDropper()
        VB: DeselectGlobalEyeDropper()
      nameWithType:
        CSharp: Toolbar.DeselectGlobalEyeDropper()
        VB: Toolbar.DeselectGlobalEyeDropper()
      qualifiedName:
        CSharp: Toolbar.DeselectGlobalEyeDropper()
        VB: Toolbar.DeselectGlobalEyeDropper()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeselectGlobalEyeDropper
        path: ''
        startLine: 6844
      syntax:
        content:
          CSharp: public void DeselectGlobalEyeDropper()
          VB: Public Sub DeselectGlobalEyeDropper()
      overload: Global.Toolbar.DeselectGlobalEyeDropper*
    - id: Global.Toolbar.LoadCustomBrush(Texture2D)
      commentId: M:Global.Toolbar.LoadCustomBrush(Texture2D)
      language: CSharp
      name:
        CSharp: LoadCustomBrush(Texture2D)
        VB: LoadCustomBrush(Texture2D)
      nameWithType:
        CSharp: Toolbar.LoadCustomBrush(Texture2D)
        VB: Toolbar.LoadCustomBrush(Texture2D)
      qualifiedName:
        CSharp: Toolbar.LoadCustomBrush(Texture2D)
        VB: Toolbar.LoadCustomBrush(Texture2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LoadCustomBrush
        path: ''
        startLine: 6949
      summary: "\nTurns the given texture into a brush shape by taking any pixels with non-zero alpha.\n"
      example: []
      syntax:
        content:
          CSharp: public void LoadCustomBrush(Texture2D brushShape)
          VB: Public Sub LoadCustomBrush(brushShape As Texture2D)
        parameters:
        - id: brushShape
          type: Global.Texture2D
      overload: Global.Toolbar.LoadCustomBrush*
    - id: Global.Toolbar.SubscribeToOnToolChanged(UnityAction)
      commentId: M:Global.Toolbar.SubscribeToOnToolChanged(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnToolChanged(UnityAction)
        VB: SubscribeToOnToolChanged(UnityAction)
      nameWithType:
        CSharp: Toolbar.SubscribeToOnToolChanged(UnityAction)
        VB: Toolbar.SubscribeToOnToolChanged(UnityAction)
      qualifiedName:
        CSharp: Toolbar.SubscribeToOnToolChanged(UnityAction)
        VB: Toolbar.SubscribeToOnToolChanged(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnToolChanged
        path: ''
        startLine: 6970
      summary: "\nEvent invoked when selected tool changes.\n"
      example: []
      syntax:
        content:
          CSharp: public void SubscribeToOnToolChanged(UnityAction call)
          VB: Public Sub SubscribeToOnToolChanged([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.Toolbar.SubscribeToOnToolChanged*
    - id: Global.Toolbar.SubscribeToOnBrushSizeChanged(UnityAction)
      commentId: M:Global.Toolbar.SubscribeToOnBrushSizeChanged(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnBrushSizeChanged(UnityAction)
        VB: SubscribeToOnBrushSizeChanged(UnityAction)
      nameWithType:
        CSharp: Toolbar.SubscribeToOnBrushSizeChanged(UnityAction)
        VB: Toolbar.SubscribeToOnBrushSizeChanged(UnityAction)
      qualifiedName:
        CSharp: Toolbar.SubscribeToOnBrushSizeChanged(UnityAction)
        VB: Toolbar.SubscribeToOnBrushSizeChanged(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnBrushSizeChanged
        path: ''
        startLine: 6977
      summary: "\nEvent invoked when brush size changes.\n"
      example: []
      syntax:
        content:
          CSharp: public void SubscribeToOnBrushSizeChanged(UnityAction call)
          VB: Public Sub SubscribeToOnBrushSizeChanged([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.Toolbar.SubscribeToOnBrushSizeChanged*
    - id: Global.Toolbar.SubscribeToOnBrushPixelsChanged(UnityAction)
      commentId: M:Global.Toolbar.SubscribeToOnBrushPixelsChanged(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnBrushPixelsChanged(UnityAction)
        VB: SubscribeToOnBrushPixelsChanged(UnityAction)
      nameWithType:
        CSharp: Toolbar.SubscribeToOnBrushPixelsChanged(UnityAction)
        VB: Toolbar.SubscribeToOnBrushPixelsChanged(UnityAction)
      qualifiedName:
        CSharp: Toolbar.SubscribeToOnBrushPixelsChanged(UnityAction)
        VB: Toolbar.SubscribeToOnBrushPixelsChanged(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnBrushPixelsChanged
        path: ''
        startLine: 6984
      summary: "\nEvent invoked when brush pixels change.\n"
      example: []
      syntax:
        content:
          CSharp: public void SubscribeToOnBrushPixelsChanged(UnityAction call)
          VB: Public Sub SubscribeToOnBrushPixelsChanged([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.Toolbar.SubscribeToOnBrushPixelsChanged*
  - id: Global.Tools
    commentId: T:Global.Tools
    language: CSharp
    name:
      CSharp: Tools
      VB: Tools
    nameWithType:
      CSharp: Tools
      VB: Tools
    qualifiedName:
      CSharp: Tools
      VB: Tools
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Tools
      path: ''
      startLine: 6999
    summary: "\nDefines how different tools act.\nI may rework this to be more like the BlendMode class where each Tool instance defines how it acts. Then to use a tool you would just do tool.Use(pixel) or similar.\n"
    example: []
    syntax:
      content:
        CSharp: public static class Tools
        VB: Public Module Tools
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.Tools.UsePencil(File,System.Int32,System.Int32,IntVector2,Color)
      commentId: M:Global.Tools.UsePencil(File,System.Int32,System.Int32,IntVector2,Color)
      language: CSharp
      name:
        CSharp: UsePencil(File, int, int, IntVector2, Color)
        VB: UsePencil(File, Integer, Integer, IntVector2, Color)
      nameWithType:
        CSharp: Tools.UsePencil(File, int, int, IntVector2, Color)
        VB: Tools.UsePencil(File, Integer, Integer, IntVector2, Color)
      qualifiedName:
        CSharp: Tools.UsePencil(File, int, int, IntVector2, Color)
        VB: Tools.UsePencil(File, Integer, Integer, IntVector2, Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UsePencil
        path: ''
        startLine: 7001
      syntax:
        content:
          CSharp: public static void UsePencil(File file, int layer, int frame, IntVector2 pixel, Color colour)
          VB: Public Shared Sub UsePencil(file As File, layer As Integer, frame As Integer, pixel As IntVector2, colour As Color)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: pixel
          type: Global.IntVector2
        - id: colour
          type: Global.Color
      overload: Global.Tools.UsePencil*
    - id: Global.Tools.UsePencil(File,System.Int32,System.Int32,System.Int32,System.Int32,Color)
      commentId: M:Global.Tools.UsePencil(File,System.Int32,System.Int32,System.Int32,System.Int32,Color)
      language: CSharp
      name:
        CSharp: UsePencil(File, int, int, int, int, Color)
        VB: UsePencil(File, Integer, Integer, Integer, Integer, Color)
      nameWithType:
        CSharp: Tools.UsePencil(File, int, int, int, int, Color)
        VB: Tools.UsePencil(File, Integer, Integer, Integer, Integer, Color)
      qualifiedName:
        CSharp: Tools.UsePencil(File, int, int, int, int, Color)
        VB: Tools.UsePencil(File, Integer, Integer, Integer, Integer, Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UsePencil
        path: ''
        startLine: 7002
      syntax:
        content:
          CSharp: public static void UsePencil(File file, int layer, int frame, int x, int y, Color colour)
          VB: Public Shared Sub UsePencil(file As File, layer As Integer, frame As Integer, x As Integer, y As Integer, colour As Color)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
        - id: colour
          type: Global.Color
      overload: Global.Tools.UsePencil*
    - id: Global.Tools.PencilLineSmoothing(File,System.Int32,System.Int32,IntVector2[],IntVector2[],Color)
      commentId: M:Global.Tools.PencilLineSmoothing(File,System.Int32,System.Int32,IntVector2[],IntVector2[],Color)
      language: CSharp
      name:
        CSharp: PencilLineSmoothing(File, int, int, IntVector2[], IntVector2[], Color)
        VB: PencilLineSmoothing(File, Integer, Integer, IntVector2(), IntVector2(), Color)
      nameWithType:
        CSharp: Tools.PencilLineSmoothing(File, int, int, IntVector2[], IntVector2[], Color)
        VB: Tools.PencilLineSmoothing(File, Integer, Integer, IntVector2(), IntVector2(), Color)
      qualifiedName:
        CSharp: Tools.PencilLineSmoothing(File, int, int, IntVector2[], IntVector2[], Color)
        VB: Tools.PencilLineSmoothing(File, Integer, Integer, IntVector2(), IntVector2(), Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PencilLineSmoothing
        path: ''
        startLine: 7010
      summary: "\nSmooth the meeting point of the two lines (given as coords) so it is pixel-perfect - i.e. no hard 90-degree corner.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool PencilLineSmoothing(File file, int layer, int frame, IntVector2[] line, IntVector2[] previousLine, Color colourLineMeetingPoint)
          VB: Public Shared Function PencilLineSmoothing(file As File, layer As Integer, frame As Integer, line As IntVector2(), previousLine As IntVector2(), colourLineMeetingPoint As Color) As Boolean
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: line
          type: Global.IntVector2[]
        - id: previousLine
          type: Global.IntVector2[]
        - id: colourLineMeetingPoint
          type: Global.Color
        return:
          type: System.Boolean
      overload: Global.Tools.PencilLineSmoothing*
    - id: Global.Tools.UseBrush(File,System.Int32,System.Int32,System.Int32,System.Int32,IntVector2[],Color)
      commentId: M:Global.Tools.UseBrush(File,System.Int32,System.Int32,System.Int32,System.Int32,IntVector2[],Color)
      language: CSharp
      name:
        CSharp: UseBrush(File, int, int, int, int, IntVector2[], Color)
        VB: UseBrush(File, Integer, Integer, Integer, Integer, IntVector2(), Color)
      nameWithType:
        CSharp: Tools.UseBrush(File, int, int, int, int, IntVector2[], Color)
        VB: Tools.UseBrush(File, Integer, Integer, Integer, Integer, IntVector2(), Color)
      qualifiedName:
        CSharp: Tools.UseBrush(File, int, int, int, int, IntVector2[], Color)
        VB: Tools.UseBrush(File, Integer, Integer, Integer, Integer, IntVector2(), Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseBrush
        path: ''
        startLine: 7032
      syntax:
        content:
          CSharp: public static void UseBrush(File file, int layer, int frame, int x, int y, IntVector2[] brushBorderMaskPixels, Color colour)
          VB: Public Shared Sub UseBrush(file As File, layer As Integer, frame As Integer, x As Integer, y As Integer, brushBorderMaskPixels As IntVector2(), colour As Color)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
        - id: brushBorderMaskPixels
          type: Global.IntVector2[]
        - id: colour
          type: Global.Color
      overload: Global.Tools.UseBrush*
    - id: Global.Tools.UseBrush(File,System.Int32,System.Int32,IntVector2,IntVector2[],Color)
      commentId: M:Global.Tools.UseBrush(File,System.Int32,System.Int32,IntVector2,IntVector2[],Color)
      language: CSharp
      name:
        CSharp: UseBrush(File, int, int, IntVector2, IntVector2[], Color)
        VB: UseBrush(File, Integer, Integer, IntVector2, IntVector2(), Color)
      nameWithType:
        CSharp: Tools.UseBrush(File, int, int, IntVector2, IntVector2[], Color)
        VB: Tools.UseBrush(File, Integer, Integer, IntVector2, IntVector2(), Color)
      qualifiedName:
        CSharp: Tools.UseBrush(File, int, int, IntVector2, IntVector2[], Color)
        VB: Tools.UseBrush(File, Integer, Integer, IntVector2, IntVector2(), Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseBrush
        path: ''
        startLine: 7036
      syntax:
        content:
          CSharp: public static void UseBrush(File file, int layer, int frame, IntVector2 pixel, IntVector2[] brushBorderMaskPixels, Color colour)
          VB: Public Shared Sub UseBrush(file As File, layer As Integer, frame As Integer, pixel As IntVector2, brushBorderMaskPixels As IntVector2(), colour As Color)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: pixel
          type: Global.IntVector2
        - id: brushBorderMaskPixels
          type: Global.IntVector2[]
        - id: colour
          type: Global.Color
      overload: Global.Tools.UseBrush*
    - id: Global.Tools.UseRubber(File,System.Int32,System.Int32,System.Int32,System.Int32)
      commentId: M:Global.Tools.UseRubber(File,System.Int32,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: UseRubber(File, int, int, int, int)
        VB: UseRubber(File, Integer, Integer, Integer, Integer)
      nameWithType:
        CSharp: Tools.UseRubber(File, int, int, int, int)
        VB: Tools.UseRubber(File, Integer, Integer, Integer, Integer)
      qualifiedName:
        CSharp: Tools.UseRubber(File, int, int, int, int)
        VB: Tools.UseRubber(File, Integer, Integer, Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseRubber
        path: ''
        startLine: 7041
      syntax:
        content:
          CSharp: public static void UseRubber(File file, int layer, int frame, int x, int y)
          VB: Public Shared Sub UseRubber(file As File, layer As Integer, frame As Integer, x As Integer, y As Integer)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
      overload: Global.Tools.UseRubber*
    - id: Global.Tools.UseRubber(File,System.Int32,System.Int32,IntVector2)
      commentId: M:Global.Tools.UseRubber(File,System.Int32,System.Int32,IntVector2)
      language: CSharp
      name:
        CSharp: UseRubber(File, int, int, IntVector2)
        VB: UseRubber(File, Integer, Integer, IntVector2)
      nameWithType:
        CSharp: Tools.UseRubber(File, int, int, IntVector2)
        VB: Tools.UseRubber(File, Integer, Integer, IntVector2)
      qualifiedName:
        CSharp: Tools.UseRubber(File, int, int, IntVector2)
        VB: Tools.UseRubber(File, Integer, Integer, IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseRubber
        path: ''
        startLine: 7042
      syntax:
        content:
          CSharp: public static void UseRubber(File file, int layer, int frame, IntVector2 pixel)
          VB: Public Shared Sub UseRubber(file As File, layer As Integer, frame As Integer, pixel As IntVector2)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: pixel
          type: Global.IntVector2
      overload: Global.Tools.UseRubber*
    - id: Global.Tools.UseRubber(File,System.Int32,System.Int32,System.Int32,System.Int32,IntVector2[])
      commentId: M:Global.Tools.UseRubber(File,System.Int32,System.Int32,System.Int32,System.Int32,IntVector2[])
      language: CSharp
      name:
        CSharp: UseRubber(File, int, int, int, int, IntVector2[])
        VB: UseRubber(File, Integer, Integer, Integer, Integer, IntVector2())
      nameWithType:
        CSharp: Tools.UseRubber(File, int, int, int, int, IntVector2[])
        VB: Tools.UseRubber(File, Integer, Integer, Integer, Integer, IntVector2())
      qualifiedName:
        CSharp: Tools.UseRubber(File, int, int, int, int, IntVector2[])
        VB: Tools.UseRubber(File, Integer, Integer, Integer, Integer, IntVector2())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseRubber
        path: ''
        startLine: 7043
      syntax:
        content:
          CSharp: public static void UseRubber(File file, int layer, int frame, int x, int y, IntVector2[] brushBorderMaskPixels)
          VB: Public Shared Sub UseRubber(file As File, layer As Integer, frame As Integer, x As Integer, y As Integer, brushBorderMaskPixels As IntVector2())
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
        - id: brushBorderMaskPixels
          type: Global.IntVector2[]
      overload: Global.Tools.UseRubber*
    - id: Global.Tools.UseRubber(File,System.Int32,System.Int32,IntVector2,IntVector2[])
      commentId: M:Global.Tools.UseRubber(File,System.Int32,System.Int32,IntVector2,IntVector2[])
      language: CSharp
      name:
        CSharp: UseRubber(File, int, int, IntVector2, IntVector2[])
        VB: UseRubber(File, Integer, Integer, IntVector2, IntVector2())
      nameWithType:
        CSharp: Tools.UseRubber(File, int, int, IntVector2, IntVector2[])
        VB: Tools.UseRubber(File, Integer, Integer, IntVector2, IntVector2())
      qualifiedName:
        CSharp: Tools.UseRubber(File, int, int, IntVector2, IntVector2[])
        VB: Tools.UseRubber(File, Integer, Integer, IntVector2, IntVector2())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseRubber
        path: ''
        startLine: 7044
      syntax:
        content:
          CSharp: public static void UseRubber(File file, int layer, int frame, IntVector2 pixel, IntVector2[] brushBorderMaskPixels)
          VB: Public Shared Sub UseRubber(file As File, layer As Integer, frame As Integer, pixel As IntVector2, brushBorderMaskPixels As IntVector2())
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: pixel
          type: Global.IntVector2
        - id: brushBorderMaskPixels
          type: Global.IntVector2[]
      overload: Global.Tools.UseRubber*
    - id: Global.Tools.UseEyeDropper(File,System.Int32,System.Int32,IntVector2)
      commentId: M:Global.Tools.UseEyeDropper(File,System.Int32,System.Int32,IntVector2)
      language: CSharp
      name:
        CSharp: UseEyeDropper(File, int, int, IntVector2)
        VB: UseEyeDropper(File, Integer, Integer, IntVector2)
      nameWithType:
        CSharp: Tools.UseEyeDropper(File, int, int, IntVector2)
        VB: Tools.UseEyeDropper(File, Integer, Integer, IntVector2)
      qualifiedName:
        CSharp: Tools.UseEyeDropper(File, int, int, IntVector2)
        VB: Tools.UseEyeDropper(File, Integer, Integer, IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseEyeDropper
        path: ''
        startLine: 7049
      syntax:
        content:
          CSharp: public static Color UseEyeDropper(File file, int layer, int frame, IntVector2 pixel)
          VB: Public Shared Function UseEyeDropper(file As File, layer As Integer, frame As Integer, pixel As IntVector2) As Color
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: pixel
          type: Global.IntVector2
        return:
          type: Global.Color
      overload: Global.Tools.UseEyeDropper*
    - id: Global.Tools.UseEyeDropper(File,System.Int32,System.Int32,System.Int32,System.Int32)
      commentId: M:Global.Tools.UseEyeDropper(File,System.Int32,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: UseEyeDropper(File, int, int, int, int)
        VB: UseEyeDropper(File, Integer, Integer, Integer, Integer)
      nameWithType:
        CSharp: Tools.UseEyeDropper(File, int, int, int, int)
        VB: Tools.UseEyeDropper(File, Integer, Integer, Integer, Integer)
      qualifiedName:
        CSharp: Tools.UseEyeDropper(File, int, int, int, int)
        VB: Tools.UseEyeDropper(File, Integer, Integer, Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseEyeDropper
        path: ''
        startLine: 7050
      syntax:
        content:
          CSharp: public static Color UseEyeDropper(File file, int layer, int frame, int x, int y)
          VB: Public Shared Function UseEyeDropper(file As File, layer As Integer, frame As Integer, x As Integer, y As Integer) As Color
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
        return:
          type: Global.Color
      overload: Global.Tools.UseEyeDropper*
    - id: Global.Tools.UseFill(File,System.Int32,System.Int32,System.Int32,System.Int32,Color,System.Int32)
      commentId: M:Global.Tools.UseFill(File,System.Int32,System.Int32,System.Int32,System.Int32,Color,System.Int32)
      language: CSharp
      name:
        CSharp: UseFill(File, int, int, int, int, Color, int)
        VB: UseFill(File, Integer, Integer, Integer, Integer, Color, Integer)
      nameWithType:
        CSharp: Tools.UseFill(File, int, int, int, int, Color, int)
        VB: Tools.UseFill(File, Integer, Integer, Integer, Integer, Color, Integer)
      qualifiedName:
        CSharp: Tools.UseFill(File, int, int, int, int, Color, int)
        VB: Tools.UseFill(File, Integer, Integer, Integer, Integer, Color, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseFill
        path: ''
        startLine: 7055
      syntax:
        content:
          CSharp: public static void UseFill(File file, int layer, int frame, int x, int y, Color colour, int maxNumOfIterations = 100000)
          VB: Public Shared Sub UseFill(file As File, layer As Integer, frame As Integer, x As Integer, y As Integer, colour As Color, maxNumOfIterations As Integer = 100000)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
        - id: colour
          type: Global.Color
        - id: maxNumOfIterations
          type: System.Int32
      overload: Global.Tools.UseFill*
    - id: Global.Tools.UseFill(File,System.Int32,System.Int32,IntVector2,Color,System.Int32)
      commentId: M:Global.Tools.UseFill(File,System.Int32,System.Int32,IntVector2,Color,System.Int32)
      language: CSharp
      name:
        CSharp: UseFill(File, int, int, IntVector2, Color, int)
        VB: UseFill(File, Integer, Integer, IntVector2, Color, Integer)
      nameWithType:
        CSharp: Tools.UseFill(File, int, int, IntVector2, Color, int)
        VB: Tools.UseFill(File, Integer, Integer, IntVector2, Color, Integer)
      qualifiedName:
        CSharp: Tools.UseFill(File, int, int, IntVector2, Color, int)
        VB: Tools.UseFill(File, Integer, Integer, IntVector2, Color, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseFill
        path: ''
        startLine: 7059
      syntax:
        content:
          CSharp: public static void UseFill(File file, int layer, int frame, IntVector2 pixel, Color colour, int maxNumOfIterations = 100000)
          VB: Public Shared Sub UseFill(file As File, layer As Integer, frame As Integer, pixel As IntVector2, colour As Color, maxNumOfIterations As Integer = 100000)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: pixel
          type: Global.IntVector2
        - id: colour
          type: Global.Color
        - id: maxNumOfIterations
          type: System.Int32
      overload: Global.Tools.UseFill*
    - id: Global.Tools.UseLine(File,System.Int32,System.Int32,IntVector2,IntVector2,Color)
      commentId: M:Global.Tools.UseLine(File,System.Int32,System.Int32,IntVector2,IntVector2,Color)
      language: CSharp
      name:
        CSharp: UseLine(File, int, int, IntVector2, IntVector2, Color)
        VB: UseLine(File, Integer, Integer, IntVector2, IntVector2, Color)
      nameWithType:
        CSharp: Tools.UseLine(File, int, int, IntVector2, IntVector2, Color)
        VB: Tools.UseLine(File, Integer, Integer, IntVector2, IntVector2, Color)
      qualifiedName:
        CSharp: Tools.UseLine(File, int, int, IntVector2, IntVector2, Color)
        VB: Tools.UseLine(File, Integer, Integer, IntVector2, IntVector2, Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseLine
        path: ''
        startLine: 7064
      syntax:
        content:
          CSharp: public static void UseLine(File file, int layer, int frame, IntVector2 start, IntVector2 end, Color colour)
          VB: Public Shared Sub UseLine(file As File, layer As Integer, frame As Integer, start As IntVector2, [end] As IntVector2, colour As Color)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: colour
          type: Global.Color
      overload: Global.Tools.UseLine*
    - id: Global.Tools.UseSquare(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean,System.Boolean)
      commentId: M:Global.Tools.UseSquare(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: UseSquare(File, int, int, IntVector2, IntVector2, Color, bool, bool)
        VB: UseSquare(File, Integer, Integer, IntVector2, IntVector2, Color, Boolean, Boolean)
      nameWithType:
        CSharp: Tools.UseSquare(File, int, int, IntVector2, IntVector2, Color, bool, bool)
        VB: Tools.UseSquare(File, Integer, Integer, IntVector2, IntVector2, Color, Boolean, Boolean)
      qualifiedName:
        CSharp: Tools.UseSquare(File, int, int, IntVector2, IntVector2, Color, bool, bool)
        VB: Tools.UseSquare(File, Integer, Integer, IntVector2, IntVector2, Color, Boolean, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseSquare
        path: ''
        startLine: 7074
      syntax:
        content:
          CSharp: public static void UseSquare(File file, int layer, int frame, IntVector2 start, IntVector2 end, Color colour, bool filled, bool stayWithinImageBounds)
          VB: Public Shared Sub UseSquare(file As File, layer As Integer, frame As Integer, start As IntVector2, [end] As IntVector2, colour As Color, filled As Boolean, stayWithinImageBounds As Boolean)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: colour
          type: Global.Color
        - id: filled
          type: System.Boolean
        - id: stayWithinImageBounds
          type: System.Boolean
      overload: Global.Tools.UseSquare*
    - id: Global.Tools.UseRectangle(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean)
      commentId: M:Global.Tools.UseRectangle(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean)
      language: CSharp
      name:
        CSharp: UseRectangle(File, int, int, IntVector2, IntVector2, Color, bool)
        VB: UseRectangle(File, Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      nameWithType:
        CSharp: Tools.UseRectangle(File, int, int, IntVector2, IntVector2, Color, bool)
        VB: Tools.UseRectangle(File, Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      qualifiedName:
        CSharp: Tools.UseRectangle(File, int, int, IntVector2, IntVector2, Color, bool)
        VB: Tools.UseRectangle(File, Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseRectangle
        path: ''
        startLine: 7084
      syntax:
        content:
          CSharp: public static void UseRectangle(File file, int layer, int frame, IntVector2 start, IntVector2 end, Color colour, bool filled)
          VB: Public Shared Sub UseRectangle(file As File, layer As Integer, frame As Integer, start As IntVector2, [end] As IntVector2, colour As Color, filled As Boolean)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: colour
          type: Global.Color
        - id: filled
          type: System.Boolean
      overload: Global.Tools.UseRectangle*
    - id: Global.Tools.UseCircle(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean,System.Boolean)
      commentId: M:Global.Tools.UseCircle(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: UseCircle(File, int, int, IntVector2, IntVector2, Color, bool, bool)
        VB: UseCircle(File, Integer, Integer, IntVector2, IntVector2, Color, Boolean, Boolean)
      nameWithType:
        CSharp: Tools.UseCircle(File, int, int, IntVector2, IntVector2, Color, bool, bool)
        VB: Tools.UseCircle(File, Integer, Integer, IntVector2, IntVector2, Color, Boolean, Boolean)
      qualifiedName:
        CSharp: Tools.UseCircle(File, int, int, IntVector2, IntVector2, Color, bool, bool)
        VB: Tools.UseCircle(File, Integer, Integer, IntVector2, IntVector2, Color, Boolean, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseCircle
        path: ''
        startLine: 7094
      syntax:
        content:
          CSharp: public static void UseCircle(File file, int layer, int frame, IntVector2 start, IntVector2 end, Color colour, bool filled, bool stayWithinImageBounds)
          VB: Public Shared Sub UseCircle(file As File, layer As Integer, frame As Integer, start As IntVector2, [end] As IntVector2, colour As Color, filled As Boolean, stayWithinImageBounds As Boolean)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: colour
          type: Global.Color
        - id: filled
          type: System.Boolean
        - id: stayWithinImageBounds
          type: System.Boolean
      overload: Global.Tools.UseCircle*
    - id: Global.Tools.UseEllipse(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean)
      commentId: M:Global.Tools.UseEllipse(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean)
      language: CSharp
      name:
        CSharp: UseEllipse(File, int, int, IntVector2, IntVector2, Color, bool)
        VB: UseEllipse(File, Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      nameWithType:
        CSharp: Tools.UseEllipse(File, int, int, IntVector2, IntVector2, Color, bool)
        VB: Tools.UseEllipse(File, Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      qualifiedName:
        CSharp: Tools.UseEllipse(File, int, int, IntVector2, IntVector2, Color, bool)
        VB: Tools.UseEllipse(File, Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseEllipse
        path: ''
        startLine: 7104
      syntax:
        content:
          CSharp: public static void UseEllipse(File file, int layer, int frame, IntVector2 start, IntVector2 end, Color colour, bool filled)
          VB: Public Shared Sub UseEllipse(file As File, layer As Integer, frame As Integer, start As IntVector2, [end] As IntVector2, colour As Color, filled As Boolean)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: colour
          type: Global.Color
        - id: filled
          type: System.Boolean
      overload: Global.Tools.UseEllipse*
    - id: Global.Tools.UseRightTriangle(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean,System.Boolean)
      commentId: M:Global.Tools.UseRightTriangle(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: UseRightTriangle(File, int, int, IntVector2, IntVector2, Color, bool, bool)
        VB: UseRightTriangle(File, Integer, Integer, IntVector2, IntVector2, Color, Boolean, Boolean)
      nameWithType:
        CSharp: Tools.UseRightTriangle(File, int, int, IntVector2, IntVector2, Color, bool, bool)
        VB: Tools.UseRightTriangle(File, Integer, Integer, IntVector2, IntVector2, Color, Boolean, Boolean)
      qualifiedName:
        CSharp: Tools.UseRightTriangle(File, int, int, IntVector2, IntVector2, Color, bool, bool)
        VB: Tools.UseRightTriangle(File, Integer, Integer, IntVector2, IntVector2, Color, Boolean, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseRightTriangle
        path: ''
        startLine: 7114
      syntax:
        content:
          CSharp: public static void UseRightTriangle(File file, int layer, int frame, IntVector2 start, IntVector2 end, Color colour, bool rightAngleOnBottom, bool filled)
          VB: Public Shared Sub UseRightTriangle(file As File, layer As Integer, frame As Integer, start As IntVector2, [end] As IntVector2, colour As Color, rightAngleOnBottom As Boolean, filled As Boolean)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: colour
          type: Global.Color
        - id: rightAngleOnBottom
          type: System.Boolean
        - id: filled
          type: System.Boolean
      overload: Global.Tools.UseRightTriangle*
    - id: Global.Tools.UseIsoRectangle(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean)
      commentId: M:Global.Tools.UseIsoRectangle(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,System.Boolean)
      language: CSharp
      name:
        CSharp: UseIsoRectangle(File, int, int, IntVector2, IntVector2, Color, bool)
        VB: UseIsoRectangle(File, Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      nameWithType:
        CSharp: Tools.UseIsoRectangle(File, int, int, IntVector2, IntVector2, Color, bool)
        VB: Tools.UseIsoRectangle(File, Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      qualifiedName:
        CSharp: Tools.UseIsoRectangle(File, int, int, IntVector2, IntVector2, Color, bool)
        VB: Tools.UseIsoRectangle(File, Integer, Integer, IntVector2, IntVector2, Color, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseIsoRectangle
        path: ''
        startLine: 7124
      syntax:
        content:
          CSharp: public static void UseIsoRectangle(File file, int layer, int frame, IntVector2 start, IntVector2 end, Color colour, bool filled)
          VB: Public Shared Sub UseIsoRectangle(file As File, layer As Integer, frame As Integer, start As IntVector2, [end] As IntVector2, colour As Color, filled As Boolean)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: colour
          type: Global.Color
        - id: filled
          type: System.Boolean
      overload: Global.Tools.UseIsoRectangle*
    - id: Global.Tools.UseIsoBox(File,System.Int32,System.Int32,IntVector2,IntVector2,IntVector2,Color,System.Boolean)
      commentId: M:Global.Tools.UseIsoBox(File,System.Int32,System.Int32,IntVector2,IntVector2,IntVector2,Color,System.Boolean)
      language: CSharp
      name:
        CSharp: UseIsoBox(File, int, int, IntVector2, IntVector2, IntVector2, Color, bool)
        VB: UseIsoBox(File, Integer, Integer, IntVector2, IntVector2, IntVector2, Color, Boolean)
      nameWithType:
        CSharp: Tools.UseIsoBox(File, int, int, IntVector2, IntVector2, IntVector2, Color, bool)
        VB: Tools.UseIsoBox(File, Integer, Integer, IntVector2, IntVector2, IntVector2, Color, Boolean)
      qualifiedName:
        CSharp: Tools.UseIsoBox(File, int, int, IntVector2, IntVector2, IntVector2, Color, bool)
        VB: Tools.UseIsoBox(File, Integer, Integer, IntVector2, IntVector2, IntVector2, Color, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseIsoBox
        path: ''
        startLine: 7134
      syntax:
        content:
          CSharp: public static void UseIsoBox(File file, int layer, int frame, IntVector2 baseStart, IntVector2 baseEnd, IntVector2 heightEnd, Color colour, bool filled)
          VB: Public Shared Sub UseIsoBox(file As File, layer As Integer, frame As Integer, baseStart As IntVector2, baseEnd As IntVector2, heightEnd As IntVector2, colour As Color, filled As Boolean)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: baseStart
          type: Global.IntVector2
        - id: baseEnd
          type: Global.IntVector2
        - id: heightEnd
          type: Global.IntVector2
        - id: colour
          type: Global.Color
        - id: filled
          type: System.Boolean
      overload: Global.Tools.UseIsoBox*
    - id: Global.Tools.UseGradient(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,Color,GradientMode)
      commentId: M:Global.Tools.UseGradient(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,Color,GradientMode)
      language: CSharp
      name:
        CSharp: UseGradient(File, int, int, IntVector2, IntVector2, Color, Color, GradientMode)
        VB: UseGradient(File, Integer, Integer, IntVector2, IntVector2, Color, Color, GradientMode)
      nameWithType:
        CSharp: Tools.UseGradient(File, int, int, IntVector2, IntVector2, Color, Color, GradientMode)
        VB: Tools.UseGradient(File, Integer, Integer, IntVector2, IntVector2, Color, Color, GradientMode)
      qualifiedName:
        CSharp: Tools.UseGradient(File, int, int, IntVector2, IntVector2, Color, Color, GradientMode)
        VB: Tools.UseGradient(File, Integer, Integer, IntVector2, IntVector2, Color, Color, GradientMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseGradient
        path: ''
        startLine: 7144
      syntax:
        content:
          CSharp: public static void UseGradient(File file, int layer, int frame, IntVector2 start, IntVector2 end, Color startColour, Color endColour, GradientMode gradientMode)
          VB: Public Shared Sub UseGradient(file As File, layer As Integer, frame As Integer, start As IntVector2, [end] As IntVector2, startColour As Color, endColour As Color, gradientMode As GradientMode)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: startColour
          type: Global.Color
        - id: endColour
          type: Global.Color
        - id: gradientMode
          type: Global.GradientMode
      overload: Global.Tools.UseGradient*
    - id: Global.Tools.UseGradient(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,Color,GradientMode,Texture2D)
      commentId: M:Global.Tools.UseGradient(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,Color,GradientMode,Texture2D)
      language: CSharp
      name:
        CSharp: UseGradient(File, int, int, IntVector2, IntVector2, Color, Color, GradientMode, Texture2D)
        VB: UseGradient(File, Integer, Integer, IntVector2, IntVector2, Color, Color, GradientMode, Texture2D)
      nameWithType:
        CSharp: Tools.UseGradient(File, int, int, IntVector2, IntVector2, Color, Color, GradientMode, Texture2D)
        VB: Tools.UseGradient(File, Integer, Integer, IntVector2, IntVector2, Color, Color, GradientMode, Texture2D)
      qualifiedName:
        CSharp: Tools.UseGradient(File, int, int, IntVector2, IntVector2, Color, Color, GradientMode, Texture2D)
        VB: Tools.UseGradient(File, Integer, Integer, IntVector2, IntVector2, Color, Color, GradientMode, Texture2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseGradient
        path: ''
        startLine: 7148
      syntax:
        content:
          CSharp: public static void UseGradient(File file, int layer, int frame, IntVector2 start, IntVector2 end, Color startColour, Color endColour, GradientMode gradientMode, Texture2D mask)
          VB: Public Shared Sub UseGradient(file As File, layer As Integer, frame As Integer, start As IntVector2, [end] As IntVector2, startColour As Color, endColour As Color, gradientMode As GradientMode, mask As Texture2D)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: startColour
          type: Global.Color
        - id: endColour
          type: Global.Color
        - id: gradientMode
          type: Global.GradientMode
        - id: mask
          type: Global.Texture2D
      overload: Global.Tools.UseGradient*
    - id: Global.Tools.UseGradient(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,Color,GradientMode,IntVector2[])
      commentId: M:Global.Tools.UseGradient(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,Color,GradientMode,IntVector2[])
      language: CSharp
      name:
        CSharp: UseGradient(File, int, int, IntVector2, IntVector2, Color, Color, GradientMode, IntVector2[])
        VB: UseGradient(File, Integer, Integer, IntVector2, IntVector2, Color, Color, GradientMode, IntVector2())
      nameWithType:
        CSharp: Tools.UseGradient(File, int, int, IntVector2, IntVector2, Color, Color, GradientMode, IntVector2[])
        VB: Tools.UseGradient(File, Integer, Integer, IntVector2, IntVector2, Color, Color, GradientMode, IntVector2())
      qualifiedName:
        CSharp: Tools.UseGradient(File, int, int, IntVector2, IntVector2, Color, Color, GradientMode, IntVector2[])
        VB: Tools.UseGradient(File, Integer, Integer, IntVector2, IntVector2, Color, Color, GradientMode, IntVector2())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseGradient
        path: ''
        startLine: 7167
      syntax:
        content:
          CSharp: public static void UseGradient(File file, int layer, int frame, IntVector2 start, IntVector2 end, Color startColour, Color endColour, GradientMode gradientMode, IntVector2[] mask)
          VB: Public Shared Sub UseGradient(file As File, layer As Integer, frame As Integer, start As IntVector2, [end] As IntVector2, startColour As Color, endColour As Color, gradientMode As GradientMode, mask As IntVector2())
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: startColour
          type: Global.Color
        - id: endColour
          type: Global.Color
        - id: gradientMode
          type: Global.GradientMode
        - id: mask
          type: Global.IntVector2[]
      overload: Global.Tools.UseGradient*
    - id: Global.Tools.UseGradientLinear(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,Color)
      commentId: M:Global.Tools.UseGradientLinear(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,Color)
      language: CSharp
      name:
        CSharp: UseGradientLinear(File, int, int, IntVector2, IntVector2, Color, Color)
        VB: UseGradientLinear(File, Integer, Integer, IntVector2, IntVector2, Color, Color)
      nameWithType:
        CSharp: Tools.UseGradientLinear(File, int, int, IntVector2, IntVector2, Color, Color)
        VB: Tools.UseGradientLinear(File, Integer, Integer, IntVector2, IntVector2, Color, Color)
      qualifiedName:
        CSharp: Tools.UseGradientLinear(File, int, int, IntVector2, IntVector2, Color, Color)
        VB: Tools.UseGradientLinear(File, Integer, Integer, IntVector2, IntVector2, Color, Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseGradientLinear
        path: ''
        startLine: 7183
      syntax:
        content:
          CSharp: public static void UseGradientLinear(File file, int layer, int frame, IntVector2 start, IntVector2 end, Color startColour, Color endColour)
          VB: Public Shared Sub UseGradientLinear(file As File, layer As Integer, frame As Integer, start As IntVector2, [end] As IntVector2, startColour As Color, endColour As Color)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: startColour
          type: Global.Color
        - id: endColour
          type: Global.Color
      overload: Global.Tools.UseGradientLinear*
    - id: Global.Tools.UseGradientLinear(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,Color,Texture2D)
      commentId: M:Global.Tools.UseGradientLinear(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,Color,Texture2D)
      language: CSharp
      name:
        CSharp: UseGradientLinear(File, int, int, IntVector2, IntVector2, Color, Color, Texture2D)
        VB: UseGradientLinear(File, Integer, Integer, IntVector2, IntVector2, Color, Color, Texture2D)
      nameWithType:
        CSharp: Tools.UseGradientLinear(File, int, int, IntVector2, IntVector2, Color, Color, Texture2D)
        VB: Tools.UseGradientLinear(File, Integer, Integer, IntVector2, IntVector2, Color, Color, Texture2D)
      qualifiedName:
        CSharp: Tools.UseGradientLinear(File, int, int, IntVector2, IntVector2, Color, Color, Texture2D)
        VB: Tools.UseGradientLinear(File, Integer, Integer, IntVector2, IntVector2, Color, Color, Texture2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseGradientLinear
        path: ''
        startLine: 7187
      syntax:
        content:
          CSharp: public static void UseGradientLinear(File file, int layer, int frame, IntVector2 start, IntVector2 end, Color startColour, Color endColour, Texture2D mask)
          VB: Public Shared Sub UseGradientLinear(file As File, layer As Integer, frame As Integer, start As IntVector2, [end] As IntVector2, startColour As Color, endColour As Color, mask As Texture2D)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: startColour
          type: Global.Color
        - id: endColour
          type: Global.Color
        - id: mask
          type: Global.Texture2D
      overload: Global.Tools.UseGradientLinear*
    - id: Global.Tools.UseGradientLinear(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,Color,IntVector2[])
      commentId: M:Global.Tools.UseGradientLinear(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,Color,IntVector2[])
      language: CSharp
      name:
        CSharp: UseGradientLinear(File, int, int, IntVector2, IntVector2, Color, Color, IntVector2[])
        VB: UseGradientLinear(File, Integer, Integer, IntVector2, IntVector2, Color, Color, IntVector2())
      nameWithType:
        CSharp: Tools.UseGradientLinear(File, int, int, IntVector2, IntVector2, Color, Color, IntVector2[])
        VB: Tools.UseGradientLinear(File, Integer, Integer, IntVector2, IntVector2, Color, Color, IntVector2())
      qualifiedName:
        CSharp: Tools.UseGradientLinear(File, int, int, IntVector2, IntVector2, Color, Color, IntVector2[])
        VB: Tools.UseGradientLinear(File, Integer, Integer, IntVector2, IntVector2, Color, Color, IntVector2())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseGradientLinear
        path: ''
        startLine: 7191
      syntax:
        content:
          CSharp: public static void UseGradientLinear(File file, int layer, int frame, IntVector2 start, IntVector2 end, Color startColour, Color endColour, IntVector2[] mask)
          VB: Public Shared Sub UseGradientLinear(file As File, layer As Integer, frame As Integer, start As IntVector2, [end] As IntVector2, startColour As Color, endColour As Color, mask As IntVector2())
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: startColour
          type: Global.Color
        - id: endColour
          type: Global.Color
        - id: mask
          type: Global.IntVector2[]
      overload: Global.Tools.UseGradientLinear*
    - id: Global.Tools.UseGradientRadial(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,Color)
      commentId: M:Global.Tools.UseGradientRadial(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,Color)
      language: CSharp
      name:
        CSharp: UseGradientRadial(File, int, int, IntVector2, IntVector2, Color, Color)
        VB: UseGradientRadial(File, Integer, Integer, IntVector2, IntVector2, Color, Color)
      nameWithType:
        CSharp: Tools.UseGradientRadial(File, int, int, IntVector2, IntVector2, Color, Color)
        VB: Tools.UseGradientRadial(File, Integer, Integer, IntVector2, IntVector2, Color, Color)
      qualifiedName:
        CSharp: Tools.UseGradientRadial(File, int, int, IntVector2, IntVector2, Color, Color)
        VB: Tools.UseGradientRadial(File, Integer, Integer, IntVector2, IntVector2, Color, Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseGradientRadial
        path: ''
        startLine: 7196
      syntax:
        content:
          CSharp: public static void UseGradientRadial(File file, int layer, int frame, IntVector2 start, IntVector2 end, Color startColour, Color endColour)
          VB: Public Shared Sub UseGradientRadial(file As File, layer As Integer, frame As Integer, start As IntVector2, [end] As IntVector2, startColour As Color, endColour As Color)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: startColour
          type: Global.Color
        - id: endColour
          type: Global.Color
      overload: Global.Tools.UseGradientRadial*
    - id: Global.Tools.UseGradientRadial(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,Color,Texture2D)
      commentId: M:Global.Tools.UseGradientRadial(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,Color,Texture2D)
      language: CSharp
      name:
        CSharp: UseGradientRadial(File, int, int, IntVector2, IntVector2, Color, Color, Texture2D)
        VB: UseGradientRadial(File, Integer, Integer, IntVector2, IntVector2, Color, Color, Texture2D)
      nameWithType:
        CSharp: Tools.UseGradientRadial(File, int, int, IntVector2, IntVector2, Color, Color, Texture2D)
        VB: Tools.UseGradientRadial(File, Integer, Integer, IntVector2, IntVector2, Color, Color, Texture2D)
      qualifiedName:
        CSharp: Tools.UseGradientRadial(File, int, int, IntVector2, IntVector2, Color, Color, Texture2D)
        VB: Tools.UseGradientRadial(File, Integer, Integer, IntVector2, IntVector2, Color, Color, Texture2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseGradientRadial
        path: ''
        startLine: 7200
      syntax:
        content:
          CSharp: public static void UseGradientRadial(File file, int layer, int frame, IntVector2 start, IntVector2 end, Color startColour, Color endColour, Texture2D mask)
          VB: Public Shared Sub UseGradientRadial(file As File, layer As Integer, frame As Integer, start As IntVector2, [end] As IntVector2, startColour As Color, endColour As Color, mask As Texture2D)
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: startColour
          type: Global.Color
        - id: endColour
          type: Global.Color
        - id: mask
          type: Global.Texture2D
      overload: Global.Tools.UseGradientRadial*
    - id: Global.Tools.UseGradientRadial(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,Color,IntVector2[])
      commentId: M:Global.Tools.UseGradientRadial(File,System.Int32,System.Int32,IntVector2,IntVector2,Color,Color,IntVector2[])
      language: CSharp
      name:
        CSharp: UseGradientRadial(File, int, int, IntVector2, IntVector2, Color, Color, IntVector2[])
        VB: UseGradientRadial(File, Integer, Integer, IntVector2, IntVector2, Color, Color, IntVector2())
      nameWithType:
        CSharp: Tools.UseGradientRadial(File, int, int, IntVector2, IntVector2, Color, Color, IntVector2[])
        VB: Tools.UseGradientRadial(File, Integer, Integer, IntVector2, IntVector2, Color, Color, IntVector2())
      qualifiedName:
        CSharp: Tools.UseGradientRadial(File, int, int, IntVector2, IntVector2, Color, Color, IntVector2[])
        VB: Tools.UseGradientRadial(File, Integer, Integer, IntVector2, IntVector2, Color, Color, IntVector2())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseGradientRadial
        path: ''
        startLine: 7204
      syntax:
        content:
          CSharp: public static void UseGradientRadial(File file, int layer, int frame, IntVector2 start, IntVector2 end, Color startColour, Color endColour, IntVector2[] mask)
          VB: Public Shared Sub UseGradientRadial(file As File, layer As Integer, frame As Integer, start As IntVector2, [end] As IntVector2, startColour As Color, endColour As Color, mask As IntVector2())
        parameters:
        - id: file
          type: Global.File
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: start
          type: Global.IntVector2
        - id: end
          type: Global.IntVector2
        - id: startColour
          type: Global.Color
        - id: endColour
          type: Global.Color
        - id: mask
          type: Global.IntVector2[]
      overload: Global.Tools.UseGradientRadial*
  - id: Global.File
    commentId: T:Global.File
    language: CSharp
    name:
      CSharp: File
      VB: File
    nameWithType:
      CSharp: File
      VB: File
    qualifiedName:
      CSharp: File
      VB: File
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: File
      path: ''
      startLine: 7221
    summary: "\nA class to represent a single Pixel Art Creator file.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class File : IJSONable'
        VB: Public Class File Implements IJSONable
    inheritance:
    - System.Object
    implements:
    - Global.IJSONable
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.File.name
      commentId: P:Global.File.name
      language: CSharp
      name:
        CSharp: name
        VB: name
      nameWithType:
        CSharp: File.name
        VB: File.name
      qualifiedName:
        CSharp: File.name
        VB: File.name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: name
        path: ''
        startLine: 7223
      syntax:
        content:
          CSharp: public string name { get; set; }
          VB: Public Property name As String
        parameters: []
        return:
          type: System.String
      overload: Global.File.name*
    - id: Global.File.mostRecentSavePath
      commentId: P:Global.File.mostRecentSavePath
      language: CSharp
      name:
        CSharp: mostRecentSavePath
        VB: mostRecentSavePath
      nameWithType:
        CSharp: File.mostRecentSavePath
        VB: File.mostRecentSavePath
      qualifiedName:
        CSharp: File.mostRecentSavePath
        VB: File.mostRecentSavePath
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: mostRecentSavePath
        path: ''
        startLine: 7225
      syntax:
        content:
          CSharp: public string mostRecentSavePath { get; }
          VB: Public Property mostRecentSavePath As String
        parameters: []
        return:
          type: System.String
      overload: Global.File.mostRecentSavePath*
    - id: Global.File.savedSinceLastEdit
      commentId: P:Global.File.savedSinceLastEdit
      language: CSharp
      name:
        CSharp: savedSinceLastEdit
        VB: savedSinceLastEdit
      nameWithType:
        CSharp: File.savedSinceLastEdit
        VB: File.savedSinceLastEdit
      qualifiedName:
        CSharp: File.savedSinceLastEdit
        VB: File.savedSinceLastEdit
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: savedSinceLastEdit
        path: ''
        startLine: 7227
      syntax:
        content:
          CSharp: public bool savedSinceLastEdit { get; }
          VB: Public Property savedSinceLastEdit As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.File.savedSinceLastEdit*
    - id: Global.File.width
      commentId: P:Global.File.width
      language: CSharp
      name:
        CSharp: width
        VB: width
      nameWithType:
        CSharp: File.width
        VB: File.width
      qualifiedName:
        CSharp: File.width
        VB: File.width
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: width
        path: ''
        startLine: 7237
      syntax:
        content:
          CSharp: public int width { get; }
          VB: Public Property width As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.File.width*
    - id: Global.File.height
      commentId: P:Global.File.height
      language: CSharp
      name:
        CSharp: height
        VB: height
      nameWithType:
        CSharp: File.height
        VB: File.height
      qualifiedName:
        CSharp: File.height
        VB: File.height
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: height
        path: ''
        startLine: 7238
      syntax:
        content:
          CSharp: public int height { get; }
          VB: Public Property height As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.File.height*
    - id: Global.File.rect
      commentId: P:Global.File.rect
      language: CSharp
      name:
        CSharp: rect
        VB: rect
      nameWithType:
        CSharp: File.rect
        VB: File.rect
      qualifiedName:
        CSharp: File.rect
        VB: File.rect
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: rect
        path: ''
        startLine: 7239
      syntax:
        content:
          CSharp: public IntRect rect { get; }
          VB: Public ReadOnly Property rect As IntRect
        parameters: []
        return:
          type: Global.IntRect
      overload: Global.File.rect*
    - id: Global.File.layers
      commentId: P:Global.File.layers
      language: CSharp
      name:
        CSharp: layers
        VB: layers
      nameWithType:
        CSharp: File.layers
        VB: File.layers
      qualifiedName:
        CSharp: File.layers
        VB: File.layers
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: layers
        path: ''
        startLine: 7241
      syntax:
        content:
          CSharp: public List<Layer> layers { get; }
          VB: Public Property layers As List(Of Layer)
        parameters: []
        return:
          type: System.Collections.Generic.List{Layer}
      overload: Global.File.layers*
    - id: Global.File.numOfFrames
      commentId: P:Global.File.numOfFrames
      language: CSharp
      name:
        CSharp: numOfFrames
        VB: numOfFrames
      nameWithType:
        CSharp: File.numOfFrames
        VB: File.numOfFrames
      qualifiedName:
        CSharp: File.numOfFrames
        VB: File.numOfFrames
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: numOfFrames
        path: ''
        startLine: 7280
      summary: The number of frames the animation lasts for.
      example: []
      syntax:
        content:
          CSharp: public int numOfFrames { get; set; }
          VB: Public Property numOfFrames As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.File.numOfFrames*
    - id: Global.File.keyFrameIndices
      commentId: P:Global.File.keyFrameIndices
      language: CSharp
      name:
        CSharp: keyFrameIndices
        VB: keyFrameIndices
      nameWithType:
        CSharp: File.keyFrameIndices
        VB: File.keyFrameIndices
      qualifiedName:
        CSharp: File.keyFrameIndices
        VB: File.keyFrameIndices
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: keyFrameIndices
        path: ''
        startLine: 7282
      summary: The frame indices at which some layer has a key frame.
      example: []
      syntax:
        content:
          CSharp: public int[] keyFrameIndices { get; }
          VB: Public ReadOnly Property keyFrameIndices As Integer()
        parameters: []
        return:
          type: System.Int32[]
      overload: Global.File.keyFrameIndices*
    - id: Global.File.liveRender
      commentId: P:Global.File.liveRender
      language: CSharp
      name:
        CSharp: liveRender
        VB: liveRender
      nameWithType:
        CSharp: File.liveRender
        VB: File.liveRender
      qualifiedName:
        CSharp: File.liveRender
        VB: File.liveRender
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: liveRender
        path: ''
        startLine: 7284
      syntax:
        content:
          CSharp: public Texture2D liveRender { get; }
          VB: Public Property liveRender As Texture2D
        parameters: []
        return:
          type: Global.Texture2D
      overload: Global.File.liveRender*
    - id: Global.File.tiles
      commentId: P:Global.File.tiles
      language: CSharp
      name:
        CSharp: tiles
        VB: tiles
      nameWithType:
        CSharp: File.tiles
        VB: File.tiles
      qualifiedName:
        CSharp: File.tiles
        VB: File.tiles
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: tiles
        path: ''
        startLine: 7290
      summary: All the tile objects currently in the file.
      example: []
      syntax:
        content:
          CSharp: public Tile[] tiles { get; }
          VB: Public ReadOnly Property tiles As Tile()
        parameters: []
        return:
          type: Global.Tile[]
      overload: Global.File.tiles*
    - id: Global.File.#ctor(System.String,System.Int32,System.Int32)
      commentId: M:Global.File.#ctor(System.String,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: File(string, int, int)
        VB: New(String, Integer, Integer)
      nameWithType:
        CSharp: File.File(string, int, int)
        VB: File.New(String, Integer, Integer)
      qualifiedName:
        CSharp: File.File(string, int, int)
        VB: File.New(String, Integer, Integer)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 7312
      summary: "\nCreates a blank file.\n"
      example: []
      syntax:
        content:
          CSharp: public File(string name, int width, int height)
          VB: Public Sub New(name As String, width As Integer, height As Integer)
        parameters:
        - id: name
          type: System.String
        - id: width
          type: System.Int32
        - id: height
          type: System.Int32
      overload: Global.File.#ctor*
    - id: Global.File.#ctor(File)
      commentId: M:Global.File.#ctor(File)
      language: CSharp
      name:
        CSharp: File(File)
        VB: New(File)
      nameWithType:
        CSharp: File.File(File)
        VB: File.New(File)
      qualifiedName:
        CSharp: File.File(File)
        VB: File.New(File)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 7328
      summary: "\nCreates a deep copy of the File.\n"
      example: []
      syntax:
        content:
          CSharp: public File(File file)
          VB: Public Sub New(file As File)
        parameters:
        - id: file
          type: Global.File
      overload: Global.File.#ctor*
    - id: Global.File.DeepCopy
      commentId: M:Global.File.DeepCopy
      language: CSharp
      name:
        CSharp: DeepCopy()
        VB: DeepCopy()
      nameWithType:
        CSharp: File.DeepCopy()
        VB: File.DeepCopy()
      qualifiedName:
        CSharp: File.DeepCopy()
        VB: File.DeepCopy()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeepCopy
        path: ''
        startLine: 7348
      summary: "\nCreates a deep copy of the File.\n"
      example: []
      syntax:
        content:
          CSharp: public File DeepCopy()
          VB: Public Function DeepCopy() As File
        return:
          type: Global.File
      overload: Global.File.DeepCopy*
    - id: Global.File.OpenFile(System.String)
      commentId: M:Global.File.OpenFile(System.String)
      language: CSharp
      name:
        CSharp: OpenFile(string)
        VB: OpenFile(String)
      nameWithType:
        CSharp: File.OpenFile(string)
        VB: File.OpenFile(String)
      qualifiedName:
        CSharp: File.OpenFile(string)
        VB: File.OpenFile(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenFile
        path: ''
        startLine: 7356
      summary: "\nOpens the file according to its file extension.\n"
      example: []
      syntax:
        content:
          CSharp: public static File OpenFile(string filePath)
          VB: Public Shared Function OpenFile(filePath As String) As File
        parameters:
        - id: filePath
          type: System.String
        return:
          type: Global.File
      overload: Global.File.OpenFile*
    - id: Global.File.OpenPNG(System.String)
      commentId: M:Global.File.OpenPNG(System.String)
      language: CSharp
      name:
        CSharp: OpenPNG(string)
        VB: OpenPNG(String)
      nameWithType:
        CSharp: File.OpenPNG(string)
        VB: File.OpenPNG(String)
      qualifiedName:
        CSharp: File.OpenPNG(string)
        VB: File.OpenPNG(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenPNG
        path: ''
        startLine: 7388
      summary: "\nOpens the PNG file. Throws an error if the file is not a PNG file.\n"
      example: []
      syntax:
        content:
          CSharp: public static File OpenPNG(string filePath)
          VB: Public Shared Function OpenPNG(filePath As String) As File
        parameters:
        - id: filePath
          type: System.String
        return:
          type: Global.File
      overload: Global.File.OpenPNG*
    - id: Global.File.OpenJPEG(System.String)
      commentId: M:Global.File.OpenJPEG(System.String)
      language: CSharp
      name:
        CSharp: OpenJPEG(string)
        VB: OpenJPEG(String)
      nameWithType:
        CSharp: File.OpenJPEG(string)
        VB: File.OpenJPEG(String)
      qualifiedName:
        CSharp: File.OpenJPEG(string)
        VB: File.OpenJPEG(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenJPEG
        path: ''
        startLine: 7399
      summary: "\nOpens the JPEG/JPG file. Throws an error if the file is not a JPEG/JPG file.\n"
      example: []
      syntax:
        content:
          CSharp: public static File OpenJPEG(string filePath)
          VB: Public Shared Function OpenJPEG(filePath As String) As File
        parameters:
        - id: filePath
          type: System.String
        return:
          type: Global.File
      overload: Global.File.OpenJPEG*
    - id: Global.File.OpenImage(System.String)
      commentId: M:Global.File.OpenImage(System.String)
      language: CSharp
      name:
        CSharp: OpenImage(string)
        VB: OpenImage(String)
      nameWithType:
        CSharp: File.OpenImage(string)
        VB: File.OpenImage(String)
      qualifiedName:
        CSharp: File.OpenImage(string)
        VB: File.OpenImage(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenImage
        path: ''
        startLine: 7410
      summary: "\nOpens the file at the file path if it is an image file type, e.g. PNG or JPEG.\n"
      example: []
      syntax:
        content:
          CSharp: public static File OpenImage(string filePath)
          VB: Public Shared Function OpenImage(filePath As String) As File
        parameters:
        - id: filePath
          type: System.String
        return:
          type: Global.File
      overload: Global.File.OpenImage*
    - id: Global.File.OpenPAC(System.String)
      commentId: M:Global.File.OpenPAC(System.String)
      language: CSharp
      name:
        CSharp: OpenPAC(string)
        VB: OpenPAC(String)
      nameWithType:
        CSharp: File.OpenPAC(string)
        VB: File.OpenPAC(String)
      qualifiedName:
        CSharp: File.OpenPAC(string)
        VB: File.OpenPAC(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenPAC
        path: ''
        startLine: 7438
      summary: "\nOpens the PAC file. Throws an error if the file is not a PAC file.\n"
      example: []
      syntax:
        content:
          CSharp: public static File OpenPAC(string filePath)
          VB: Public Shared Function OpenPAC(filePath As String) As File
        parameters:
        - id: filePath
          type: System.String
        return:
          type: Global.File
      overload: Global.File.OpenPAC*
    - id: Global.File.ImportImage(System.String)
      commentId: M:Global.File.ImportImage(System.String)
      language: CSharp
      name:
        CSharp: ImportImage(string)
        VB: ImportImage(String)
      nameWithType:
        CSharp: File.ImportImage(string)
        VB: File.ImportImage(String)
      qualifiedName:
        CSharp: File.ImportImage(string)
        VB: File.ImportImage(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ImportImage
        path: ''
        startLine: 7464
      summary: "\nAdds the image at the file path as a new layer.\n"
      example: []
      syntax:
        content:
          CSharp: public void ImportImage(string filePath)
          VB: Public Sub ImportImage(filePath As String)
        parameters:
        - id: filePath
          type: System.String
          description: ''
      overload: Global.File.ImportImage*
    - id: Global.File.SavePAC
      commentId: M:Global.File.SavePAC
      language: CSharp
      name:
        CSharp: SavePAC()
        VB: SavePAC()
      nameWithType:
        CSharp: File.SavePAC()
        VB: File.SavePAC()
      qualifiedName:
        CSharp: File.SavePAC()
        VB: File.SavePAC()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SavePAC
        path: ''
        startLine: 7492
      summary: "\nSaves the file as a PAC file at the location it was most recently saved at. Throws an error if the file hasn&apos;t been saved before.\n"
      example: []
      syntax:
        content:
          CSharp: public void SavePAC()
          VB: Public Sub SavePAC()
      overload: Global.File.SavePAC*
    - id: Global.File.SaveAsPAC(System.String)
      commentId: M:Global.File.SaveAsPAC(System.String)
      language: CSharp
      name:
        CSharp: SaveAsPAC(string)
        VB: SaveAsPAC(String)
      nameWithType:
        CSharp: File.SaveAsPAC(string)
        VB: File.SaveAsPAC(String)
      qualifiedName:
        CSharp: File.SaveAsPAC(string)
        VB: File.SaveAsPAC(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SaveAsPAC
        path: ''
        startLine: 7504
      summary: "\nSaves the file as a PAC file at the given file path. Throws an error if the file is not a PAC file.\n"
      example: []
      syntax:
        content:
          CSharp: public void SaveAsPAC(string filePath)
          VB: Public Sub SaveAsPAC(filePath As String)
        parameters:
        - id: filePath
          type: System.String
      overload: Global.File.SaveAsPAC*
    - id: Global.File.ToJSON
      commentId: M:Global.File.ToJSON
      language: CSharp
      name:
        CSharp: ToJSON()
        VB: ToJSON()
      nameWithType:
        CSharp: File.ToJSON()
        VB: File.ToJSON()
      qualifiedName:
        CSharp: File.ToJSON()
        VB: File.ToJSON()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToJSON
        path: ''
        startLine: 7527
      summary: "\nGets a JSON representation of the file.\n"
      example: []
      syntax:
        content:
          CSharp: public JSON ToJSON()
          VB: Public Function ToJSON() As JSON
        return:
          type: Global.JSON
      overload: Global.File.ToJSON*
      implements:
      - Global.IJSONable.ToJSON
    - id: Global.File.FromJSON(JSON)
      commentId: M:Global.File.FromJSON(JSON)
      language: CSharp
      name:
        CSharp: FromJSON(JSON)
        VB: FromJSON(JSON)
      nameWithType:
        CSharp: File.FromJSON(JSON)
        VB: File.FromJSON(JSON)
      qualifiedName:
        CSharp: File.FromJSON(JSON)
        VB: File.FromJSON(JSON)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FromJSON
        path: ''
        startLine: 7548
      summary: "\nGets a file from its JSON representation.\n"
      example: []
      syntax:
        content:
          CSharp: public static File FromJSON(JSON json)
          VB: Public Shared Function FromJSON(json As JSON) As File
        parameters:
        - id: json
          type: Global.JSON
        return:
          type: Global.File
      overload: Global.File.FromJSON*
    - id: Global.File.ExportFrame(System.Int32,System.String)
      commentId: M:Global.File.ExportFrame(System.Int32,System.String)
      language: CSharp
      name:
        CSharp: ExportFrame(int, string)
        VB: ExportFrame(Integer, String)
      nameWithType:
        CSharp: File.ExportFrame(int, string)
        VB: File.ExportFrame(Integer, String)
      qualifiedName:
        CSharp: File.ExportFrame(int, string)
        VB: File.ExportFrame(Integer, String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ExportFrame
        path: ''
        startLine: 7612
      summary: "\nExports the frame to the file path, according to the file extension.\n"
      example: []
      syntax:
        content:
          CSharp: public bool ExportFrame(int frame, string filePath)
          VB: Public Function ExportFrame(frame As Integer, filePath As String) As Boolean
        parameters:
        - id: frame
          type: System.Int32
        - id: filePath
          type: System.String
        return:
          type: System.Boolean
      overload: Global.File.ExportFrame*
    - id: Global.File.ExportAnimation(System.String)
      commentId: M:Global.File.ExportAnimation(System.String)
      language: CSharp
      name:
        CSharp: ExportAnimation(string)
        VB: ExportAnimation(String)
      nameWithType:
        CSharp: File.ExportAnimation(string)
        VB: File.ExportAnimation(String)
      qualifiedName:
        CSharp: File.ExportAnimation(string)
        VB: File.ExportAnimation(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ExportAnimation
        path: ''
        startLine: 7644
      summary: "\nExports each frame of the animation and puts them in a folder. The file path specifies the folder name and location, and the file extension to export each frame as.\n"
      example: []
      syntax:
        content:
          CSharp: public bool ExportAnimation(string filePath)
          VB: Public Function ExportAnimation(filePath As String) As Boolean
        parameters:
        - id: filePath
          type: System.String
        return:
          type: System.Boolean
      overload: Global.File.ExportAnimation*
    - id: Global.File.IsBlank
      commentId: M:Global.File.IsBlank
      language: CSharp
      name:
        CSharp: IsBlank()
        VB: IsBlank()
      nameWithType:
        CSharp: File.IsBlank()
        VB: File.IsBlank()
      qualifiedName:
        CSharp: File.IsBlank()
        VB: File.IsBlank()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsBlank
        path: ''
        startLine: 7712
      summary: "\nReturns true if and only if all pixels on all layers are completely transparent.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsBlank()
          VB: Public Function IsBlank() As Boolean
        return:
          type: System.Boolean
      overload: Global.File.IsBlank*
    - id: Global.File.IndexOfLayer(Layer)
      commentId: M:Global.File.IndexOfLayer(Layer)
      language: CSharp
      name:
        CSharp: IndexOfLayer(Layer)
        VB: IndexOfLayer(Layer)
      nameWithType:
        CSharp: File.IndexOfLayer(Layer)
        VB: File.IndexOfLayer(Layer)
      qualifiedName:
        CSharp: File.IndexOfLayer(Layer)
        VB: File.IndexOfLayer(Layer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IndexOfLayer
        path: ''
        startLine: 7728
      summary: "\nGets the index of the layer within the file.\n"
      example: []
      syntax:
        content:
          CSharp: public int IndexOfLayer(Layer layer)
          VB: Public Function IndexOfLayer(layer As Layer) As Integer
        parameters:
        - id: layer
          type: Global.Layer
        return:
          type: System.Int32
          description: The index of the layer, or -1 if the layer is not in the file.
      overload: Global.File.IndexOfLayer*
    - id: Global.File.AddLayer(Layer)
      commentId: M:Global.File.AddLayer(Layer)
      language: CSharp
      name:
        CSharp: AddLayer(Layer)
        VB: AddLayer(Layer)
      nameWithType:
        CSharp: File.AddLayer(Layer)
        VB: File.AddLayer(Layer)
      qualifiedName:
        CSharp: File.AddLayer(Layer)
        VB: File.AddLayer(Layer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddLayer
        path: ''
        startLine: 7736
      summary: "\nAdds the given layer on top of all existing layers.\n"
      example: []
      syntax:
        content:
          CSharp: public void AddLayer(Layer layer)
          VB: Public Sub AddLayer(layer As Layer)
        parameters:
        - id: layer
          type: Global.Layer
      overload: Global.File.AddLayer*
    - id: Global.File.AddLayer(Layer,System.Int32)
      commentId: M:Global.File.AddLayer(Layer,System.Int32)
      language: CSharp
      name:
        CSharp: AddLayer(Layer, int)
        VB: AddLayer(Layer, Integer)
      nameWithType:
        CSharp: File.AddLayer(Layer, int)
        VB: File.AddLayer(Layer, Integer)
      qualifiedName:
        CSharp: File.AddLayer(Layer, int)
        VB: File.AddLayer(Layer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddLayer
        path: ''
        startLine: 7740
      summary: "\nAdds the given layer at the given index. Throws an error if the layer is already in the file.\n"
      example: []
      syntax:
        content:
          CSharp: public void AddLayer(Layer layer, int index)
          VB: Public Sub AddLayer(layer As Layer, index As Integer)
        parameters:
        - id: layer
          type: Global.Layer
        - id: index
          type: System.Int32
      overload: Global.File.AddLayer*
    - id: Global.File.AddLayers(Layer[])
      commentId: M:Global.File.AddLayers(Layer[])
      language: CSharp
      name:
        CSharp: AddLayers(params Layer[])
        VB: AddLayers(ParamArray Layer())
      nameWithType:
        CSharp: File.AddLayers(params Layer[])
        VB: File.AddLayers(ParamArray Layer())
      qualifiedName:
        CSharp: File.AddLayers(params Layer[])
        VB: File.AddLayers(ParamArray Layer())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddLayers
        path: ''
        startLine: 7759
      summary: "\nAdds the layers on top of all existing layers, retaining the order they have in the array - i.e. first layer in the array is the one on top, etc.\n"
      example: []
      syntax:
        content:
          CSharp: public void AddLayers(params Layer[] layers)
          VB: Public Sub AddLayers(ParamArray layers As Layer())
        parameters:
        - id: layers
          type: Global.Layer[]
      overload: Global.File.AddLayers*
    - id: Global.File.ImportLayers(Layer[])
      commentId: M:Global.File.ImportLayers(Layer[])
      language: CSharp
      name:
        CSharp: ImportLayers(params Layer[])
        VB: ImportLayers(ParamArray Layer())
      nameWithType:
        CSharp: File.ImportLayers(params Layer[])
        VB: File.ImportLayers(ParamArray Layer())
      qualifiedName:
        CSharp: File.ImportLayers(params Layer[])
        VB: File.ImportLayers(ParamArray Layer())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ImportLayers
        path: ''
        startLine: 7769
      summary: "\nAdds deep copies of the layers on top of all existing layers, retaining the order they have in the array - i.e. first layer in the array is the one on top, etc.\n"
      example: []
      syntax:
        content:
          CSharp: public void ImportLayers(params Layer[] layers)
          VB: Public Sub ImportLayers(ParamArray layers As Layer())
        parameters:
        - id: layers
          type: Global.Layer[]
      overload: Global.File.ImportLayers*
    - id: Global.File.AddNormalLayer
      commentId: M:Global.File.AddNormalLayer
      language: CSharp
      name:
        CSharp: AddNormalLayer()
        VB: AddNormalLayer()
      nameWithType:
        CSharp: File.AddNormalLayer()
        VB: File.AddNormalLayer()
      qualifiedName:
        CSharp: File.AddNormalLayer()
        VB: File.AddNormalLayer()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddNormalLayer
        path: ''
        startLine: 7779
      summary: "\nAdds a blank normal layer on top of all existing layers.\n"
      example: []
      syntax:
        content:
          CSharp: public void AddNormalLayer()
          VB: Public Sub AddNormalLayer()
      overload: Global.File.AddNormalLayer*
    - id: Global.File.AddNormalLayer(System.Int32)
      commentId: M:Global.File.AddNormalLayer(System.Int32)
      language: CSharp
      name:
        CSharp: AddNormalLayer(int)
        VB: AddNormalLayer(Integer)
      nameWithType:
        CSharp: File.AddNormalLayer(int)
        VB: File.AddNormalLayer(Integer)
      qualifiedName:
        CSharp: File.AddNormalLayer(int)
        VB: File.AddNormalLayer(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddNormalLayer
        path: ''
        startLine: 7783
      summary: "\nAdds a blank normal layer at the given index.\n"
      example: []
      syntax:
        content:
          CSharp: public void AddNormalLayer(int index)
          VB: Public Sub AddNormalLayer(index As Integer)
        parameters:
        - id: index
          type: System.Int32
      overload: Global.File.AddNormalLayer*
    - id: Global.File.AddNormalLayer(Texture2D,System.Int32)
      commentId: M:Global.File.AddNormalLayer(Texture2D,System.Int32)
      language: CSharp
      name:
        CSharp: AddNormalLayer(Texture2D, int)
        VB: AddNormalLayer(Texture2D, Integer)
      nameWithType:
        CSharp: File.AddNormalLayer(Texture2D, int)
        VB: File.AddNormalLayer(Texture2D, Integer)
      qualifiedName:
        CSharp: File.AddNormalLayer(Texture2D, int)
        VB: File.AddNormalLayer(Texture2D, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddNormalLayer
        path: ''
        startLine: 7787
      summary: "\nAdds a normal layer at the given index with the given texture.\n"
      example: []
      syntax:
        content:
          CSharp: public void AddNormalLayer(Texture2D texture, int index = 0)
          VB: Public Sub AddNormalLayer(texture As Texture2D, index As Integer = 0)
        parameters:
        - id: texture
          type: Global.Texture2D
        - id: index
          type: System.Int32
      overload: Global.File.AddNormalLayer*
    - id: Global.File.AddTileLayer
      commentId: M:Global.File.AddTileLayer
      language: CSharp
      name:
        CSharp: AddTileLayer()
        VB: AddTileLayer()
      nameWithType:
        CSharp: File.AddTileLayer()
        VB: File.AddTileLayer()
      qualifiedName:
        CSharp: File.AddTileLayer()
        VB: File.AddTileLayer()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddTileLayer
        path: ''
        startLine: 7803
      summary: "\nAdds a blank tile layer on top of all existing layers.\n"
      example: []
      syntax:
        content:
          CSharp: public void AddTileLayer()
          VB: Public Sub AddTileLayer()
      overload: Global.File.AddTileLayer*
    - id: Global.File.AddTileLayer(System.Int32)
      commentId: M:Global.File.AddTileLayer(System.Int32)
      language: CSharp
      name:
        CSharp: AddTileLayer(int)
        VB: AddTileLayer(Integer)
      nameWithType:
        CSharp: File.AddTileLayer(int)
        VB: File.AddTileLayer(Integer)
      qualifiedName:
        CSharp: File.AddTileLayer(int)
        VB: File.AddTileLayer(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddTileLayer
        path: ''
        startLine: 7807
      summary: "\nAdds a blank tile layer at the given index.\n"
      example: []
      syntax:
        content:
          CSharp: public void AddTileLayer(int index)
          VB: Public Sub AddTileLayer(index As Integer)
        parameters:
        - id: index
          type: System.Int32
      overload: Global.File.AddTileLayer*
    - id: Global.File.RemoveLayer(System.Int32)
      commentId: M:Global.File.RemoveLayer(System.Int32)
      language: CSharp
      name:
        CSharp: RemoveLayer(int)
        VB: RemoveLayer(Integer)
      nameWithType:
        CSharp: File.RemoveLayer(int)
        VB: File.RemoveLayer(Integer)
      qualifiedName:
        CSharp: File.RemoveLayer(int)
        VB: File.RemoveLayer(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RemoveLayer
        path: ''
        startLine: 7818
      summary: "\nRemoves the layer at the given index.\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveLayer(int layer)
          VB: Public Sub RemoveLayer(layer As Integer)
        parameters:
        - id: layer
          type: System.Int32
      overload: Global.File.RemoveLayer*
    - id: Global.File.RemoveLayer(Layer)
      commentId: M:Global.File.RemoveLayer(Layer)
      language: CSharp
      name:
        CSharp: RemoveLayer(Layer)
        VB: RemoveLayer(Layer)
      nameWithType:
        CSharp: File.RemoveLayer(Layer)
        VB: File.RemoveLayer(Layer)
      qualifiedName:
        CSharp: File.RemoveLayer(Layer)
        VB: File.RemoveLayer(Layer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RemoveLayer
        path: ''
        startLine: 7822
      summary: "\nRemoves the layer from the file. Throws an error if the layer is not in the file.\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveLayer(Layer layer)
          VB: Public Sub RemoveLayer(layer As Layer)
        parameters:
        - id: layer
          type: Global.Layer
      overload: Global.File.RemoveLayer*
    - id: Global.File.RemoveLayers(System.Int32[])
      commentId: M:Global.File.RemoveLayers(System.Int32[])
      language: CSharp
      name:
        CSharp: RemoveLayers(int[])
        VB: RemoveLayers(Integer())
      nameWithType:
        CSharp: File.RemoveLayers(int[])
        VB: File.RemoveLayers(Integer())
      qualifiedName:
        CSharp: File.RemoveLayers(int[])
        VB: File.RemoveLayers(Integer())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RemoveLayers
        path: ''
        startLine: 7826
      summary: "\nRemoves the layers at the given indices.\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveLayers(int[] layers)
          VB: Public Sub RemoveLayers(layers As Integer())
        parameters:
        - id: layers
          type: System.Int32[]
      overload: Global.File.RemoveLayers*
    - id: Global.File.RemoveLayers(Layer[])
      commentId: M:Global.File.RemoveLayers(Layer[])
      language: CSharp
      name:
        CSharp: RemoveLayers(Layer[])
        VB: RemoveLayers(Layer())
      nameWithType:
        CSharp: File.RemoveLayers(Layer[])
        VB: File.RemoveLayers(Layer())
      qualifiedName:
        CSharp: File.RemoveLayers(Layer[])
        VB: File.RemoveLayers(Layer())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RemoveLayers
        path: ''
        startLine: 7853
      summary: "\nRemoves the given layers from the file. Throws an error if a layer is not in the file.\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveLayers(Layer[] layers)
          VB: Public Sub RemoveLayers(layers As Layer())
        parameters:
        - id: layers
          type: Global.Layer[]
      overload: Global.File.RemoveLayers*
    - id: Global.File.RemoveAllLayers
      commentId: M:Global.File.RemoveAllLayers
      language: CSharp
      name:
        CSharp: RemoveAllLayers()
        VB: RemoveAllLayers()
      nameWithType:
        CSharp: File.RemoveAllLayers()
        VB: File.RemoveAllLayers()
      qualifiedName:
        CSharp: File.RemoveAllLayers()
        VB: File.RemoveAllLayers()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RemoveAllLayers
        path: ''
        startLine: 7869
      summary: "\nRemoves all layers, then adds a blank normal layer.\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveAllLayers()
          VB: Public Sub RemoveAllLayers()
      overload: Global.File.RemoveAllLayers*
    - id: Global.File.ReplaceLayer(System.Int32,Layer)
      commentId: M:Global.File.ReplaceLayer(System.Int32,Layer)
      language: CSharp
      name:
        CSharp: ReplaceLayer(int, Layer)
        VB: ReplaceLayer(Integer, Layer)
      nameWithType:
        CSharp: File.ReplaceLayer(int, Layer)
        VB: File.ReplaceLayer(Integer, Layer)
      qualifiedName:
        CSharp: File.ReplaceLayer(int, Layer)
        VB: File.ReplaceLayer(Integer, Layer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ReplaceLayer
        path: ''
        startLine: 7884
      summary: "\nReplaces the layer at the given index with the given layer. Throws an error if the layer to replace with is already in the file.\n"
      example: []
      syntax:
        content:
          CSharp: public void ReplaceLayer(int layerToReplace, Layer layerToReplaceWith)
          VB: Public Sub ReplaceLayer(layerToReplace As Integer, layerToReplaceWith As Layer)
        parameters:
        - id: layerToReplace
          type: System.Int32
        - id: layerToReplaceWith
          type: Global.Layer
      overload: Global.File.ReplaceLayer*
    - id: Global.File.ReplaceLayer(Layer,Layer)
      commentId: M:Global.File.ReplaceLayer(Layer,Layer)
      language: CSharp
      name:
        CSharp: ReplaceLayer(Layer, Layer)
        VB: ReplaceLayer(Layer, Layer)
      nameWithType:
        CSharp: File.ReplaceLayer(Layer, Layer)
        VB: File.ReplaceLayer(Layer, Layer)
      qualifiedName:
        CSharp: File.ReplaceLayer(Layer, Layer)
        VB: File.ReplaceLayer(Layer, Layer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ReplaceLayer
        path: ''
        startLine: 7909
      summary: "\nReplaces the layer with the given layer. Throws an error if the layer to replace is not in the file, or if the layer to replace with is already in the file.\n"
      example: []
      syntax:
        content:
          CSharp: public void ReplaceLayer(Layer layerToReplace, Layer layerToReplaceWith)
          VB: Public Sub ReplaceLayer(layerToReplace As Layer, layerToReplaceWith As Layer)
        parameters:
        - id: layerToReplace
          type: Global.Layer
        - id: layerToReplaceWith
          type: Global.Layer
      overload: Global.File.ReplaceLayer*
    - id: Global.File.MoveLayer(System.Int32,System.Int32)
      commentId: M:Global.File.MoveLayer(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: MoveLayer(int, int)
        VB: MoveLayer(Integer, Integer)
      nameWithType:
        CSharp: File.MoveLayer(int, int)
        VB: File.MoveLayer(Integer, Integer)
      qualifiedName:
        CSharp: File.MoveLayer(int, int)
        VB: File.MoveLayer(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MoveLayer
        path: ''
        startLine: 7925
      summary: "\nMoves the layer at indexToMove to indexToMoveTo.\n"
      example: []
      syntax:
        content:
          CSharp: public void MoveLayer(int layerToMove, int indexToMoveTo)
          VB: Public Sub MoveLayer(layerToMove As Integer, indexToMoveTo As Integer)
        parameters:
        - id: layerToMove
          type: System.Int32
        - id: indexToMoveTo
          type: System.Int32
      overload: Global.File.MoveLayer*
    - id: Global.File.MoveLayer(Layer,System.Int32)
      commentId: M:Global.File.MoveLayer(Layer,System.Int32)
      language: CSharp
      name:
        CSharp: MoveLayer(Layer, int)
        VB: MoveLayer(Layer, Integer)
      nameWithType:
        CSharp: File.MoveLayer(Layer, int)
        VB: File.MoveLayer(Layer, Integer)
      qualifiedName:
        CSharp: File.MoveLayer(Layer, int)
        VB: File.MoveLayer(Layer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MoveLayer
        path: ''
        startLine: 7952
      summary: "\nMoves the layer to indexToMoveTo. Throws an error if the layer is not in the file.\n"
      example: []
      syntax:
        content:
          CSharp: public void MoveLayer(Layer layerToMove, int indexToMoveTo)
          VB: Public Sub MoveLayer(layerToMove As Layer, indexToMoveTo As Integer)
        parameters:
        - id: layerToMove
          type: Global.Layer
        - id: indexToMoveTo
          type: System.Int32
      overload: Global.File.MoveLayer*
    - id: Global.File.Render(System.Int32)
      commentId: M:Global.File.Render(System.Int32)
      language: CSharp
      name:
        CSharp: Render(int)
        VB: Render(Integer)
      nameWithType:
        CSharp: File.Render(int)
        VB: File.Render(Integer)
      qualifiedName:
        CSharp: File.Render(int)
        VB: File.Render(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Render
        path: ''
        startLine: 7969
      summary: "\nRenders all layers down to a Texture2D.\nDoes not apply the texture.\n"
      example: []
      syntax:
        content:
          CSharp: public Texture2D Render(int frame)
          VB: Public Function Render(frame As Integer) As Texture2D
        parameters:
        - id: frame
          type: System.Int32
        return:
          type: Global.Texture2D
      overload: Global.File.Render*
    - id: Global.File.RenderLayers(System.Int32,System.Int32,System.Int32,System.Boolean)
      commentId: M:Global.File.RenderLayers(System.Int32,System.Int32,System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: RenderLayers(int, int, int, bool)
        VB: RenderLayers(Integer, Integer, Integer, Boolean)
      nameWithType:
        CSharp: File.RenderLayers(int, int, int, bool)
        VB: File.RenderLayers(Integer, Integer, Integer, Boolean)
      qualifiedName:
        CSharp: File.RenderLayers(int, int, int, bool)
        VB: File.RenderLayers(Integer, Integer, Integer, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RenderLayers
        path: ''
        startLine: 7981
      summary: "\nRenders all the layers with index between lowestLayer and highestLayer (inclusive iff inclusive == true) down to a Texture2D.\nhighestLayer and lowestLayer are automatically clamped to be in the valid range of layers.\nDoes not apply the texture.\n"
      example: []
      syntax:
        content:
          CSharp: public Texture2D RenderLayers(int highestLayer, int lowestLayer, int frame, bool inclusive = true)
          VB: Public Function RenderLayers(highestLayer As Integer, lowestLayer As Integer, frame As Integer, inclusive As Boolean = True) As Texture2D
        parameters:
        - id: highestLayer
          type: System.Int32
          description: The higher layer (so lower index).
        - id: lowestLayer
          type: System.Int32
          description: The lower layer (so higher index).
        - id: frame
          type: System.Int32
        - id: inclusive
          type: System.Boolean
        return:
          type: Global.Texture2D
      overload: Global.File.RenderLayers*
    - id: Global.File.RenderLayers(System.Int32[],System.Int32)
      commentId: M:Global.File.RenderLayers(System.Int32[],System.Int32)
      language: CSharp
      name:
        CSharp: RenderLayers(int[], int)
        VB: RenderLayers(Integer(), Integer)
      nameWithType:
        CSharp: File.RenderLayers(int[], int)
        VB: File.RenderLayers(Integer(), Integer)
      qualifiedName:
        CSharp: File.RenderLayers(int[], int)
        VB: File.RenderLayers(Integer(), Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RenderLayers
        path: ''
        startLine: 8030
      summary: "\nRenders the layers at the given layer indices down to a Texture2D.\nDoes not apply the texture.\n"
      example: []
      syntax:
        content:
          CSharp: public Texture2D RenderLayers(int[] layerIndices, int frame)
          VB: Public Function RenderLayers(layerIndices As Integer(), frame As Integer) As Texture2D
        parameters:
        - id: layerIndices
          type: System.Int32[]
          description: The layer indices in the order you want them to be rendered, from highest layer (so lowest index) to lowest.
        - id: frame
          type: System.Int32
        return:
          type: Global.Texture2D
      overload: Global.File.RenderLayers*
    - id: Global.File.RenderLayersAbove(System.Int32,System.Int32,System.Boolean)
      commentId: M:Global.File.RenderLayersAbove(System.Int32,System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: RenderLayersAbove(int, int, bool)
        VB: RenderLayersAbove(Integer, Integer, Boolean)
      nameWithType:
        CSharp: File.RenderLayersAbove(int, int, bool)
        VB: File.RenderLayersAbove(Integer, Integer, Boolean)
      qualifiedName:
        CSharp: File.RenderLayersAbove(int, int, bool)
        VB: File.RenderLayersAbove(Integer, Integer, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RenderLayersAbove
        path: ''
        startLine: 8054
      summary: "\nRenders all layers that appear above the given layer (includes the layer iff inclusive == true) down to a Texture2D. Returns a blank texture if there are none.\nDoes not apply the texture.\n"
      example: []
      syntax:
        content:
          CSharp: public Texture2D RenderLayersAbove(int layer, int frame, bool inclusive = false)
          VB: Public Function RenderLayersAbove(layer As Integer, frame As Integer, inclusive As Boolean = False) As Texture2D
        parameters:
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: inclusive
          type: System.Boolean
        return:
          type: Global.Texture2D
      overload: Global.File.RenderLayersAbove*
    - id: Global.File.RenderLayersBelow(System.Int32,System.Int32,System.Boolean)
      commentId: M:Global.File.RenderLayersBelow(System.Int32,System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: RenderLayersBelow(int, int, bool)
        VB: RenderLayersBelow(Integer, Integer, Boolean)
      nameWithType:
        CSharp: File.RenderLayersBelow(int, int, bool)
        VB: File.RenderLayersBelow(Integer, Integer, Boolean)
      qualifiedName:
        CSharp: File.RenderLayersBelow(int, int, bool)
        VB: File.RenderLayersBelow(Integer, Integer, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RenderLayersBelow
        path: ''
        startLine: 8067
      summary: "\nRenders all layers that appear strictly beneath the given layer (includes the layer iff inclusive == true) down to a Texture2D. Returns a blank texture if there are none.\nDoes not apply the texture.\n"
      example: []
      syntax:
        content:
          CSharp: public Texture2D RenderLayersBelow(int layer, int frame, bool inclusive = false)
          VB: Public Function RenderLayersBelow(layer As Integer, frame As Integer, inclusive As Boolean = False) As Texture2D
        parameters:
        - id: layer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: inclusive
          type: System.Boolean
        return:
          type: Global.Texture2D
      overload: Global.File.RenderLayersBelow*
    - id: Global.File.RenderPixel(IntVector2,System.Int32)
      commentId: M:Global.File.RenderPixel(IntVector2,System.Int32)
      language: CSharp
      name:
        CSharp: RenderPixel(IntVector2, int)
        VB: RenderPixel(IntVector2, Integer)
      nameWithType:
        CSharp: File.RenderPixel(IntVector2, int)
        VB: File.RenderPixel(IntVector2, Integer)
      qualifiedName:
        CSharp: File.RenderPixel(IntVector2, int)
        VB: File.RenderPixel(IntVector2, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RenderPixel
        path: ''
        startLine: 8079
      summary: "\nRenders the colour of the given pixel.\n"
      example: []
      syntax:
        content:
          CSharp: public Color RenderPixel(IntVector2 pixel, int frame)
          VB: Public Function RenderPixel(pixel As IntVector2, frame As Integer) As Color
        parameters:
        - id: pixel
          type: Global.IntVector2
        - id: frame
          type: System.Int32
        return:
          type: Global.Color
      overload: Global.File.RenderPixel*
    - id: Global.File.RenderPixel(System.Int32,System.Int32,System.Int32)
      commentId: M:Global.File.RenderPixel(System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: RenderPixel(int, int, int)
        VB: RenderPixel(Integer, Integer, Integer)
      nameWithType:
        CSharp: File.RenderPixel(int, int, int)
        VB: File.RenderPixel(Integer, Integer, Integer)
      qualifiedName:
        CSharp: File.RenderPixel(int, int, int)
        VB: File.RenderPixel(Integer, Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RenderPixel
        path: ''
        startLine: 8083
      summary: "\nRenders the colour of the given pixel.\n"
      example: []
      syntax:
        content:
          CSharp: public Color RenderPixel(int x, int y, int frame)
          VB: Public Function RenderPixel(x As Integer, y As Integer, frame As Integer) As Color
        parameters:
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
        - id: frame
          type: System.Int32
        return:
          type: Global.Color
      overload: Global.File.RenderPixel*
    - id: Global.File.RenderPixel(IntVector2,System.Int32,System.Int32,System.Int32,System.Boolean)
      commentId: M:Global.File.RenderPixel(IntVector2,System.Int32,System.Int32,System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: RenderPixel(IntVector2, int, int, int, bool)
        VB: RenderPixel(IntVector2, Integer, Integer, Integer, Boolean)
      nameWithType:
        CSharp: File.RenderPixel(IntVector2, int, int, int, bool)
        VB: File.RenderPixel(IntVector2, Integer, Integer, Integer, Boolean)
      qualifiedName:
        CSharp: File.RenderPixel(IntVector2, int, int, int, bool)
        VB: File.RenderPixel(IntVector2, Integer, Integer, Integer, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RenderPixel
        path: ''
        startLine: 8091
      syntax:
        content:
          CSharp: public Color RenderPixel(IntVector2 pixel, int highestLayer, int lowestLayer, int frame, bool inclusive = true)
          VB: Public Function RenderPixel(pixel As IntVector2, highestLayer As Integer, lowestLayer As Integer, frame As Integer, inclusive As Boolean = True) As Color
        parameters:
        - id: pixel
          type: Global.IntVector2
        - id: highestLayer
          type: System.Int32
        - id: lowestLayer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: inclusive
          type: System.Boolean
        return:
          type: Global.Color
      overload: Global.File.RenderPixel*
    - id: Global.File.RenderPixel(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)
      commentId: M:Global.File.RenderPixel(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: RenderPixel(int, int, int, int, int, bool)
        VB: RenderPixel(Integer, Integer, Integer, Integer, Integer, Boolean)
      nameWithType:
        CSharp: File.RenderPixel(int, int, int, int, int, bool)
        VB: File.RenderPixel(Integer, Integer, Integer, Integer, Integer, Boolean)
      qualifiedName:
        CSharp: File.RenderPixel(int, int, int, int, int, bool)
        VB: File.RenderPixel(Integer, Integer, Integer, Integer, Integer, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RenderPixel
        path: ''
        startLine: 8099
      syntax:
        content:
          CSharp: public Color RenderPixel(int x, int y, int highestLayer, int lowestLayer, int frame, bool inclusive = true)
          VB: Public Function RenderPixel(x As Integer, y As Integer, highestLayer As Integer, lowestLayer As Integer, frame As Integer, inclusive As Boolean = True) As Color
        parameters:
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
        - id: highestLayer
          type: System.Int32
        - id: lowestLayer
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: inclusive
          type: System.Boolean
        return:
          type: Global.Color
      overload: Global.File.RenderPixel*
    - id: Global.File.RenderPixel(IntVector2,System.Int32[],System.Int32)
      commentId: M:Global.File.RenderPixel(IntVector2,System.Int32[],System.Int32)
      language: CSharp
      name:
        CSharp: RenderPixel(IntVector2, int[], int)
        VB: RenderPixel(IntVector2, Integer(), Integer)
      nameWithType:
        CSharp: File.RenderPixel(IntVector2, int[], int)
        VB: File.RenderPixel(IntVector2, Integer(), Integer)
      qualifiedName:
        CSharp: File.RenderPixel(IntVector2, int[], int)
        VB: File.RenderPixel(IntVector2, Integer(), Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RenderPixel
        path: ''
        startLine: 8119
      summary: "\nRenders the colour of the pixel on the layers at the given layer indices. Throws an error if there are no layer indices.\n"
      example: []
      syntax:
        content:
          CSharp: public Color RenderPixel(IntVector2 pixel, int[] layerIndices, int frame)
          VB: Public Function RenderPixel(pixel As IntVector2, layerIndices As Integer(), frame As Integer) As Color
        parameters:
        - id: pixel
          type: Global.IntVector2
        - id: layerIndices
          type: System.Int32[]
        - id: frame
          type: System.Int32
        return:
          type: Global.Color
      overload: Global.File.RenderPixel*
    - id: Global.File.RenderPixel(System.Int32,System.Int32,System.Int32[],System.Int32)
      commentId: M:Global.File.RenderPixel(System.Int32,System.Int32,System.Int32[],System.Int32)
      language: CSharp
      name:
        CSharp: RenderPixel(int, int, int[], int)
        VB: RenderPixel(Integer, Integer, Integer(), Integer)
      nameWithType:
        CSharp: File.RenderPixel(int, int, int[], int)
        VB: File.RenderPixel(Integer, Integer, Integer(), Integer)
      qualifiedName:
        CSharp: File.RenderPixel(int, int, int[], int)
        VB: File.RenderPixel(Integer, Integer, Integer(), Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RenderPixel
        path: ''
        startLine: 8123
      summary: "\nRenders the colour of pixel (x, y) on the layers at the given layer indices. Throws an error if there are no layer indices.\n"
      example: []
      syntax:
        content:
          CSharp: public Color RenderPixel(int x, int y, int[] layerIndices, int frame)
          VB: Public Function RenderPixel(x As Integer, y As Integer, layerIndices As Integer(), frame As Integer) As Color
        parameters:
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
        - id: layerIndices
          type: System.Int32[]
        - id: frame
          type: System.Int32
        return:
          type: Global.Color
      overload: Global.File.RenderPixel*
    - id: Global.File.SetLiveRenderFrame(System.Int32)
      commentId: M:Global.File.SetLiveRenderFrame(System.Int32)
      language: CSharp
      name:
        CSharp: SetLiveRenderFrame(int)
        VB: SetLiveRenderFrame(Integer)
      nameWithType:
        CSharp: File.SetLiveRenderFrame(int)
        VB: File.SetLiveRenderFrame(Integer)
      qualifiedName:
        CSharp: File.SetLiveRenderFrame(int)
        VB: File.SetLiveRenderFrame(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetLiveRenderFrame
        path: ''
        startLine: 8174
      summary: "\nSets the frame that the live render will be for.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetLiveRenderFrame(int frame)
          VB: Public Sub SetLiveRenderFrame(frame As Integer)
        parameters:
        - id: frame
          type: System.Int32
      overload: Global.File.SetLiveRenderFrame*
    - id: Global.File.Flip(FlipDirection)
      commentId: M:Global.File.Flip(FlipDirection)
      language: CSharp
      name:
        CSharp: Flip(FlipDirection)
        VB: Flip(FlipDirection)
      nameWithType:
        CSharp: File.Flip(FlipDirection)
        VB: File.Flip(FlipDirection)
      qualifiedName:
        CSharp: File.Flip(FlipDirection)
        VB: File.Flip(FlipDirection)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Flip
        path: ''
        startLine: 8191
      summary: "\nFlips the file.\n"
      example: []
      syntax:
        content:
          CSharp: public void Flip(FlipDirection direction)
          VB: Public Sub Flip(direction As FlipDirection)
        parameters:
        - id: direction
          type: Global.FlipDirection
      overload: Global.File.Flip*
    - id: Global.File.Rotate(RotationAngle)
      commentId: M:Global.File.Rotate(RotationAngle)
      language: CSharp
      name:
        CSharp: Rotate(RotationAngle)
        VB: Rotate(RotationAngle)
      nameWithType:
        CSharp: File.Rotate(RotationAngle)
        VB: File.Rotate(RotationAngle)
      qualifiedName:
        CSharp: File.Rotate(RotationAngle)
        VB: File.Rotate(RotationAngle)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Rotate
        path: ''
        startLine: 8209
      summary: "\nRotates the file. Rotation is clockwise.\n"
      example: []
      syntax:
        content:
          CSharp: public void Rotate(RotationAngle angle)
          VB: Public Sub Rotate(angle As RotationAngle)
        parameters:
        - id: angle
          type: Global.RotationAngle
      overload: Global.File.Rotate*
    - id: Global.File.Extend(System.Int32,System.Int32,System.Int32,System.Int32)
      commentId: M:Global.File.Extend(System.Int32,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Extend(int, int, int, int)
        VB: Extend(Integer, Integer, Integer, Integer)
      nameWithType:
        CSharp: File.Extend(int, int, int, int)
        VB: File.Extend(Integer, Integer, Integer, Integer)
      qualifiedName:
        CSharp: File.Extend(int, int, int, int)
        VB: File.Extend(Integer, Integer, Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Extend
        path: ''
        startLine: 8239
      summary: "\nExtends the dimensions of the file in each direction by the given amounts.\n"
      example: []
      syntax:
        content:
          CSharp: public void Extend(int left, int right, int up, int down)
          VB: Public Sub Extend(left As Integer, right As Integer, up As Integer, down As Integer)
        parameters:
        - id: left
          type: System.Int32
        - id: right
          type: System.Int32
        - id: up
          type: System.Int32
        - id: down
          type: System.Int32
      overload: Global.File.Extend*
    - id: Global.File.Scale(System.Single)
      commentId: M:Global.File.Scale(System.Single)
      language: CSharp
      name:
        CSharp: Scale(float)
        VB: Scale(Single)
      nameWithType:
        CSharp: File.Scale(float)
        VB: File.Scale(Single)
      qualifiedName:
        CSharp: File.Scale(float)
        VB: File.Scale(Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Scale
        path: ''
        startLine: 8261
      summary: "\nResizes the dimensions of the file by the scale factor.\n"
      example: []
      syntax:
        content:
          CSharp: public void Scale(float scaleFactor)
          VB: Public Sub Scale(scaleFactor As Single)
        parameters:
        - id: scaleFactor
          type: System.Single
      overload: Global.File.Scale*
    - id: Global.File.Scale(System.Single,System.Single)
      commentId: M:Global.File.Scale(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: Scale(float, float)
        VB: Scale(Single, Single)
      nameWithType:
        CSharp: File.Scale(float, float)
        VB: File.Scale(Single, Single)
      qualifiedName:
        CSharp: File.Scale(float, float)
        VB: File.Scale(Single, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Scale
        path: ''
        startLine: 8265
      summary: "\nResizes the dimensions of the file by the scale factors.\n"
      example: []
      syntax:
        content:
          CSharp: public void Scale(float xScaleFactor, float yScaleFactor)
          VB: Public Sub Scale(xScaleFactor As Single, yScaleFactor As Single)
        parameters:
        - id: xScaleFactor
          type: System.Single
        - id: yScaleFactor
          type: System.Single
      overload: Global.File.Scale*
    - id: Global.File.Scale(System.Int32,System.Int32)
      commentId: M:Global.File.Scale(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Scale(int, int)
        VB: Scale(Integer, Integer)
      nameWithType:
        CSharp: File.Scale(int, int)
        VB: File.Scale(Integer, Integer)
      qualifiedName:
        CSharp: File.Scale(int, int)
        VB: File.Scale(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Scale
        path: ''
        startLine: 8289
      summary: "\nResizes the file to the new width and height.\n"
      example: []
      syntax:
        content:
          CSharp: public void Scale(int newWidth, int newHeight)
          VB: Public Sub Scale(newWidth As Integer, newHeight As Integer)
        parameters:
        - id: newWidth
          type: System.Int32
        - id: newHeight
          type: System.Int32
      overload: Global.File.Scale*
    - id: Global.File.AddTile(File,IntVector2,System.Int32)
      commentId: M:Global.File.AddTile(File,IntVector2,System.Int32)
      language: CSharp
      name:
        CSharp: AddTile(File, IntVector2, int)
        VB: AddTile(File, IntVector2, Integer)
      nameWithType:
        CSharp: File.AddTile(File, IntVector2, int)
        VB: File.AddTile(File, IntVector2, Integer)
      qualifiedName:
        CSharp: File.AddTile(File, IntVector2, int)
        VB: File.AddTile(File, IntVector2, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddTile
        path: ''
        startLine: 8359
      summary: "\nAdds the given file as a tile.\n"
      example: []
      syntax:
        content:
          CSharp: public void AddTile(File file, IntVector2 bottomLeft, int lowestLayer)
          VB: Public Sub AddTile(file As File, bottomLeft As IntVector2, lowestLayer As Integer)
        parameters:
        - id: file
          type: Global.File
        - id: bottomLeft
          type: Global.IntVector2
        - id: lowestLayer
          type: System.Int32
      overload: Global.File.AddTile*
    - id: Global.File.AddTile(Tile)
      commentId: M:Global.File.AddTile(Tile)
      language: CSharp
      name:
        CSharp: AddTile(Tile)
        VB: AddTile(Tile)
      nameWithType:
        CSharp: File.AddTile(Tile)
        VB: File.AddTile(Tile)
      qualifiedName:
        CSharp: File.AddTile(Tile)
        VB: File.AddTile(Tile)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddTile
        path: ''
        startLine: 8390
      summary: "\nAdds the tile to the file.\n"
      example: []
      syntax:
        content:
          CSharp: public void AddTile(Tile tile)
          VB: Public Sub AddTile(tile As Tile)
        parameters:
        - id: tile
          type: Global.Tile
      overload: Global.File.AddTile*
    - id: Global.File.RemoveTile(Tile)
      commentId: M:Global.File.RemoveTile(Tile)
      language: CSharp
      name:
        CSharp: RemoveTile(Tile)
        VB: RemoveTile(Tile)
      nameWithType:
        CSharp: File.RemoveTile(Tile)
        VB: File.RemoveTile(Tile)
      qualifiedName:
        CSharp: File.RemoveTile(Tile)
        VB: File.RemoveTile(Tile)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RemoveTile
        path: ''
        startLine: 8418
      summary: "\nRemoves the tile. Throws an error if the tile is not in the file.\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveTile(Tile tile)
          VB: Public Sub RemoveTile(tile As Tile)
        parameters:
        - id: tile
          type: Global.Tile
      overload: Global.File.RemoveTile*
    - id: Global.File.ContainsTile(Tile)
      commentId: M:Global.File.ContainsTile(Tile)
      language: CSharp
      name:
        CSharp: ContainsTile(Tile)
        VB: ContainsTile(Tile)
      nameWithType:
        CSharp: File.ContainsTile(Tile)
        VB: File.ContainsTile(Tile)
      qualifiedName:
        CSharp: File.ContainsTile(Tile)
        VB: File.ContainsTile(Tile)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ContainsTile
        path: ''
        startLine: 8436
      syntax:
        content:
          CSharp: public bool ContainsTile(Tile tile)
          VB: Public Function ContainsTile(tile As Tile) As Boolean
        parameters:
        - id: tile
          type: Global.Tile
        return:
          type: System.Boolean
      overload: Global.File.ContainsTile*
    - id: Global.File.SubscribeToOnPixelsChanged(UnityAction{IntVector2[],Layer[],System.Int32[]})
      commentId: M:Global.File.SubscribeToOnPixelsChanged(UnityAction{IntVector2[],Layer[],System.Int32[]})
      language: CSharp
      name:
        CSharp: SubscribeToOnPixelsChanged(UnityAction<IntVector2[], Layer[], int[]>)
        VB: SubscribeToOnPixelsChanged(UnityAction(Of IntVector2(), Layer(), Integer()))
      nameWithType:
        CSharp: File.SubscribeToOnPixelsChanged(UnityAction<IntVector2[], Layer[], int[]>)
        VB: File.SubscribeToOnPixelsChanged(UnityAction(Of IntVector2(), Layer(), Integer()))
      qualifiedName:
        CSharp: File.SubscribeToOnPixelsChanged(UnityAction<IntVector2[], Layer[], int[]>)
        VB: File.SubscribeToOnPixelsChanged(UnityAction(Of IntVector2(), Layer(), Integer()))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnPixelsChanged
        path: ''
        startLine: 8462
      summary: "\nEvent invoked when some pixels have been changed on a layer.\nPasses the pixels, layers and frames that were affected.\n"
      example: []
      syntax:
        content:
          CSharp: public void SubscribeToOnPixelsChanged(UnityAction<IntVector2[], Layer[], int[]> call)
          VB: Public Sub SubscribeToOnPixelsChanged([call] As UnityAction(Of IntVector2(), Layer(), Integer()))
        parameters:
        - id: call
          type: Global.UnityAction{IntVector2[],Layer[],System.Int32[]}
      overload: Global.File.SubscribeToOnPixelsChanged*
    - id: Global.File.SubscribeToOnTileAdded(UnityAction)
      commentId: M:Global.File.SubscribeToOnTileAdded(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnTileAdded(UnityAction)
        VB: SubscribeToOnTileAdded(UnityAction)
      nameWithType:
        CSharp: File.SubscribeToOnTileAdded(UnityAction)
        VB: File.SubscribeToOnTileAdded(UnityAction)
      qualifiedName:
        CSharp: File.SubscribeToOnTileAdded(UnityAction)
        VB: File.SubscribeToOnTileAdded(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnTileAdded
        path: ''
        startLine: 8469
      summary: "\nEvent invoked when a tile is added to the file.\n"
      example: []
      syntax:
        content:
          CSharp: public void SubscribeToOnTileAdded(UnityAction call)
          VB: Public Sub SubscribeToOnTileAdded([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.File.SubscribeToOnTileAdded*
    - id: Global.File.SubscribeToOnTileRemoved(UnityAction)
      commentId: M:Global.File.SubscribeToOnTileRemoved(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnTileRemoved(UnityAction)
        VB: SubscribeToOnTileRemoved(UnityAction)
      nameWithType:
        CSharp: File.SubscribeToOnTileRemoved(UnityAction)
        VB: File.SubscribeToOnTileRemoved(UnityAction)
      qualifiedName:
        CSharp: File.SubscribeToOnTileRemoved(UnityAction)
        VB: File.SubscribeToOnTileRemoved(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnTileRemoved
        path: ''
        startLine: 8476
      summary: "\nEvent invoked when a tile is removed from the file.\n"
      example: []
      syntax:
        content:
          CSharp: public void SubscribeToOnTileRemoved(UnityAction call)
          VB: Public Sub SubscribeToOnTileRemoved([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.File.SubscribeToOnTileRemoved*
    - id: Global.File.SubscribeToOnSavedSinceEditChanged(UnityAction)
      commentId: M:Global.File.SubscribeToOnSavedSinceEditChanged(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnSavedSinceEditChanged(UnityAction)
        VB: SubscribeToOnSavedSinceEditChanged(UnityAction)
      nameWithType:
        CSharp: File.SubscribeToOnSavedSinceEditChanged(UnityAction)
        VB: File.SubscribeToOnSavedSinceEditChanged(UnityAction)
      qualifiedName:
        CSharp: File.SubscribeToOnSavedSinceEditChanged(UnityAction)
        VB: File.SubscribeToOnSavedSinceEditChanged(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnSavedSinceEditChanged
        path: ''
        startLine: 8483
      summary: "\nEvent invoked when the a change to file is made or when the file is saved.\n"
      example: []
      syntax:
        content:
          CSharp: public void SubscribeToOnSavedSinceEditChanged(UnityAction call)
          VB: Public Sub SubscribeToOnSavedSinceEditChanged([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.File.SubscribeToOnSavedSinceEditChanged*
  - id: Global.FileManager
    commentId: T:Global.FileManager
    language: CSharp
    name:
      CSharp: FileManager
      VB: FileManager
    nameWithType:
      CSharp: FileManager
      VB: FileManager
    qualifiedName:
      CSharp: FileManager
      VB: FileManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: FileManager
      path: ''
      startLine: 8496
    syntax:
      content:
        CSharp: 'public class FileManager : MonoBehaviour'
        VB: Public Class FileManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.FileManager.defaultFileName
      commentId: F:Global.FileManager.defaultFileName
      language: CSharp
      name:
        CSharp: defaultFileName
        VB: defaultFileName
      nameWithType:
        CSharp: FileManager.defaultFileName
        VB: FileManager.defaultFileName
      qualifiedName:
        CSharp: FileManager.defaultFileName
        VB: FileManager.defaultFileName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: defaultFileName
        path: ''
        startLine: 8506
      syntax:
        content:
          CSharp: public const string defaultFileName = "Untitled Image"
          VB: Public Const defaultFileName As String = "Untitled Image"
        return:
          type: System.String
    - id: Global.FileManager.files
      commentId: P:Global.FileManager.files
      language: CSharp
      name:
        CSharp: files
        VB: files
      nameWithType:
        CSharp: FileManager.files
        VB: FileManager.files
      qualifiedName:
        CSharp: FileManager.files
        VB: FileManager.files
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: files
        path: ''
        startLine: 8508
      syntax:
        content:
          CSharp: public List<File> files { get; }
          VB: Public Property files As List(Of File)
        parameters: []
        return:
          type: System.Collections.Generic.List{File}
      overload: Global.FileManager.files*
    - id: Global.FileManager.currentFileIndex
      commentId: P:Global.FileManager.currentFileIndex
      language: CSharp
      name:
        CSharp: currentFileIndex
        VB: currentFileIndex
      nameWithType:
        CSharp: FileManager.currentFileIndex
        VB: FileManager.currentFileIndex
      qualifiedName:
        CSharp: FileManager.currentFileIndex
        VB: FileManager.currentFileIndex
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: currentFileIndex
        path: ''
        startLine: 8509
      syntax:
        content:
          CSharp: public int currentFileIndex { get; }
          VB: Public Property currentFileIndex As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.FileManager.currentFileIndex*
    - id: Global.FileManager.currentFile
      commentId: P:Global.FileManager.currentFile
      language: CSharp
      name:
        CSharp: currentFile
        VB: currentFile
      nameWithType:
        CSharp: FileManager.currentFile
        VB: FileManager.currentFile
      qualifiedName:
        CSharp: FileManager.currentFile
        VB: FileManager.currentFile
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: currentFile
        path: ''
        startLine: 8510
      syntax:
        content:
          CSharp: public File currentFile { get; }
          VB: Public ReadOnly Property currentFile As File
        parameters: []
        return:
          type: Global.File
      overload: Global.FileManager.currentFile*
    - id: Global.FileManager.previousFile
      commentId: F:Global.FileManager.previousFile
      language: CSharp
      name:
        CSharp: previousFile
        VB: previousFile
      nameWithType:
        CSharp: FileManager.previousFile
        VB: FileManager.previousFile
      qualifiedName:
        CSharp: FileManager.previousFile
        VB: FileManager.previousFile
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: previousFile
        path: ''
        startLine: 8512
      syntax:
        content:
          CSharp: public File previousFile
          VB: Public previousFile As File
        return:
          type: Global.File
    - id: Global.FileManager.AddFile(File)
      commentId: M:Global.FileManager.AddFile(File)
      language: CSharp
      name:
        CSharp: AddFile(File)
        VB: AddFile(File)
      nameWithType:
        CSharp: FileManager.AddFile(File)
        VB: FileManager.AddFile(File)
      qualifiedName:
        CSharp: FileManager.AddFile(File)
        VB: FileManager.AddFile(File)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddFile
        path: ''
        startLine: 8565
      syntax:
        content:
          CSharp: public bool AddFile(File file)
          VB: Public Function AddFile(file As File) As Boolean
        parameters:
        - id: file
          type: Global.File
        return:
          type: System.Boolean
      overload: Global.FileManager.AddFile*
    - id: Global.FileManager.TryCloseFile(File)
      commentId: M:Global.FileManager.TryCloseFile(File)
      language: CSharp
      name:
        CSharp: TryCloseFile(File)
        VB: TryCloseFile(File)
      nameWithType:
        CSharp: FileManager.TryCloseFile(File)
        VB: FileManager.TryCloseFile(File)
      qualifiedName:
        CSharp: FileManager.TryCloseFile(File)
        VB: FileManager.TryCloseFile(File)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: TryCloseFile
        path: ''
        startLine: 8586
      summary: "\nWill close the file if there are no unsaved changes. Otherwise it will open a dialog box asking if you want to save.\n"
      example: []
      syntax:
        content:
          CSharp: public bool TryCloseFile(File file)
          VB: Public Function TryCloseFile(file As File) As Boolean
        parameters:
        - id: file
          type: Global.File
        return:
          type: System.Boolean
      overload: Global.FileManager.TryCloseFile*
    - id: Global.FileManager.TryCloseFile(System.Int32)
      commentId: M:Global.FileManager.TryCloseFile(System.Int32)
      language: CSharp
      name:
        CSharp: TryCloseFile(int)
        VB: TryCloseFile(Integer)
      nameWithType:
        CSharp: FileManager.TryCloseFile(int)
        VB: FileManager.TryCloseFile(Integer)
      qualifiedName:
        CSharp: FileManager.TryCloseFile(int)
        VB: FileManager.TryCloseFile(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: TryCloseFile
        path: ''
        startLine: 8600
      summary: "\nWill close the file if there are no unsaved changes. Otherwise it will open a dialog box asking if you want to save.\n"
      example: []
      syntax:
        content:
          CSharp: public bool TryCloseFile(int fileIndex)
          VB: Public Function TryCloseFile(fileIndex As Integer) As Boolean
        parameters:
        - id: fileIndex
          type: System.Int32
        return:
          type: System.Boolean
      overload: Global.FileManager.TryCloseFile*
    - id: Global.FileManager.CloseFile(File)
      commentId: M:Global.FileManager.CloseFile(File)
      language: CSharp
      name:
        CSharp: CloseFile(File)
        VB: CloseFile(File)
      nameWithType:
        CSharp: FileManager.CloseFile(File)
        VB: FileManager.CloseFile(File)
      qualifiedName:
        CSharp: FileManager.CloseFile(File)
        VB: FileManager.CloseFile(File)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CloseFile
        path: ''
        startLine: 8614
      summary: "\nCloses the file, with no checks for unsaved changes.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CloseFile(File file)
          VB: Public Function CloseFile(file As File) As Boolean
        parameters:
        - id: file
          type: Global.File
        return:
          type: System.Boolean
      overload: Global.FileManager.CloseFile*
    - id: Global.FileManager.CloseFile(System.Int32)
      commentId: M:Global.FileManager.CloseFile(System.Int32)
      language: CSharp
      name:
        CSharp: CloseFile(int)
        VB: CloseFile(Integer)
      nameWithType:
        CSharp: FileManager.CloseFile(int)
        VB: FileManager.CloseFile(Integer)
      qualifiedName:
        CSharp: FileManager.CloseFile(int)
        VB: FileManager.CloseFile(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CloseFile
        path: ''
        startLine: 8628
      summary: "\nCloses the file, with no checks for unsaved changes.\n"
      example: []
      syntax:
        content:
          CSharp: public File CloseFile(int fileIndex)
          VB: Public Function CloseFile(fileIndex As Integer) As File
        parameters:
        - id: fileIndex
          type: System.Int32
        return:
          type: Global.File
      overload: Global.FileManager.CloseFile*
    - id: Global.FileManager.NewFile(System.Int32,System.Int32)
      commentId: M:Global.FileManager.NewFile(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: NewFile(int, int)
        VB: NewFile(Integer, Integer)
      nameWithType:
        CSharp: FileManager.NewFile(int, int)
        VB: FileManager.NewFile(Integer, Integer)
      qualifiedName:
        CSharp: FileManager.NewFile(int, int)
        VB: FileManager.NewFile(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: NewFile
        path: ''
        startLine: 8653
      syntax:
        content:
          CSharp: public void NewFile(int width, int height)
          VB: Public Sub NewFile(width As Integer, height As Integer)
        parameters:
        - id: width
          type: System.Int32
        - id: height
          type: System.Int32
      overload: Global.FileManager.NewFile*
    - id: Global.FileManager.OpenFileDialog
      commentId: M:Global.FileManager.OpenFileDialog
      language: CSharp
      name:
        CSharp: OpenFileDialog()
        VB: OpenFileDialog()
      nameWithType:
        CSharp: FileManager.OpenFileDialog()
        VB: FileManager.OpenFileDialog()
      qualifiedName:
        CSharp: FileManager.OpenFileDialog()
        VB: FileManager.OpenFileDialog()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenFileDialog
        path: ''
        startLine: 8659
      syntax:
        content:
          CSharp: public void OpenFileDialog()
          VB: Public Sub OpenFileDialog()
      overload: Global.FileManager.OpenFileDialog*
    - id: Global.FileManager.OpenFile(File)
      commentId: M:Global.FileManager.OpenFile(File)
      language: CSharp
      name:
        CSharp: OpenFile(File)
        VB: OpenFile(File)
      nameWithType:
        CSharp: FileManager.OpenFile(File)
        VB: FileManager.OpenFile(File)
      qualifiedName:
        CSharp: FileManager.OpenFile(File)
        VB: FileManager.OpenFile(File)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenFile
        path: ''
        startLine: 8669
      syntax:
        content:
          CSharp: public bool OpenFile(File file)
          VB: Public Function OpenFile(file As File) As Boolean
        parameters:
        - id: file
          type: Global.File
        return:
          type: System.Boolean
      overload: Global.FileManager.OpenFile*
    - id: Global.FileManager.OpenFile(System.String)
      commentId: M:Global.FileManager.OpenFile(System.String)
      language: CSharp
      name:
        CSharp: OpenFile(string)
        VB: OpenFile(String)
      nameWithType:
        CSharp: FileManager.OpenFile(string)
        VB: FileManager.OpenFile(String)
      qualifiedName:
        CSharp: FileManager.OpenFile(string)
        VB: FileManager.OpenFile(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenFile
        path: ''
        startLine: 8690
      syntax:
        content:
          CSharp: public bool OpenFile(string filePath)
          VB: Public Function OpenFile(filePath As String) As Boolean
        parameters:
        - id: filePath
          type: System.String
        return:
          type: System.Boolean
      overload: Global.FileManager.OpenFile*
    - id: Global.FileManager.ImportDialog
      commentId: M:Global.FileManager.ImportDialog
      language: CSharp
      name:
        CSharp: ImportDialog()
        VB: ImportDialog()
      nameWithType:
        CSharp: FileManager.ImportDialog()
        VB: FileManager.ImportDialog()
      qualifiedName:
        CSharp: FileManager.ImportDialog()
        VB: FileManager.ImportDialog()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ImportDialog
        path: ''
        startLine: 8700
      syntax:
        content:
          CSharp: public void ImportDialog()
          VB: Public Sub ImportDialog()
      overload: Global.FileManager.ImportDialog*
    - id: Global.FileManager.ExportCurrentFrameDialog
      commentId: M:Global.FileManager.ExportCurrentFrameDialog
      language: CSharp
      name:
        CSharp: ExportCurrentFrameDialog()
        VB: ExportCurrentFrameDialog()
      nameWithType:
        CSharp: FileManager.ExportCurrentFrameDialog()
        VB: FileManager.ExportCurrentFrameDialog()
      qualifiedName:
        CSharp: FileManager.ExportCurrentFrameDialog()
        VB: FileManager.ExportCurrentFrameDialog()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ExportCurrentFrameDialog
        path: ''
        startLine: 8735
      syntax:
        content:
          CSharp: public void ExportCurrentFrameDialog()
          VB: Public Sub ExportCurrentFrameDialog()
      overload: Global.FileManager.ExportCurrentFrameDialog*
    - id: Global.FileManager.ExportCurrentFrame(System.Int32,System.String)
      commentId: M:Global.FileManager.ExportCurrentFrame(System.Int32,System.String)
      language: CSharp
      name:
        CSharp: ExportCurrentFrame(int, string)
        VB: ExportCurrentFrame(Integer, String)
      nameWithType:
        CSharp: FileManager.ExportCurrentFrame(int, string)
        VB: FileManager.ExportCurrentFrame(Integer, String)
      qualifiedName:
        CSharp: FileManager.ExportCurrentFrame(int, string)
        VB: FileManager.ExportCurrentFrame(Integer, String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ExportCurrentFrame
        path: ''
        startLine: 8747
      syntax:
        content:
          CSharp: public bool ExportCurrentFrame(int frameIndex, string filePath)
          VB: Public Function ExportCurrentFrame(frameIndex As Integer, filePath As String) As Boolean
        parameters:
        - id: frameIndex
          type: System.Int32
        - id: filePath
          type: System.String
        return:
          type: System.Boolean
      overload: Global.FileManager.ExportCurrentFrame*
    - id: Global.FileManager.ExportFrame(System.Int32,System.Int32,System.String)
      commentId: M:Global.FileManager.ExportFrame(System.Int32,System.Int32,System.String)
      language: CSharp
      name:
        CSharp: ExportFrame(int, int, string)
        VB: ExportFrame(Integer, Integer, String)
      nameWithType:
        CSharp: FileManager.ExportFrame(int, int, string)
        VB: FileManager.ExportFrame(Integer, Integer, String)
      qualifiedName:
        CSharp: FileManager.ExportFrame(int, int, string)
        VB: FileManager.ExportFrame(Integer, Integer, String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ExportFrame
        path: ''
        startLine: 8751
      syntax:
        content:
          CSharp: public bool ExportFrame(int frameIndex, int fileIndex, string filePath)
          VB: Public Function ExportFrame(frameIndex As Integer, fileIndex As Integer, filePath As String) As Boolean
        parameters:
        - id: frameIndex
          type: System.Int32
        - id: fileIndex
          type: System.Int32
        - id: filePath
          type: System.String
        return:
          type: System.Boolean
      overload: Global.FileManager.ExportFrame*
    - id: Global.FileManager.ExportCurrentAnimationDialog
      commentId: M:Global.FileManager.ExportCurrentAnimationDialog
      language: CSharp
      name:
        CSharp: ExportCurrentAnimationDialog()
        VB: ExportCurrentAnimationDialog()
      nameWithType:
        CSharp: FileManager.ExportCurrentAnimationDialog()
        VB: FileManager.ExportCurrentAnimationDialog()
      qualifiedName:
        CSharp: FileManager.ExportCurrentAnimationDialog()
        VB: FileManager.ExportCurrentAnimationDialog()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ExportCurrentAnimationDialog
        path: ''
        startLine: 8760
      syntax:
        content:
          CSharp: public void ExportCurrentAnimationDialog()
          VB: Public Sub ExportCurrentAnimationDialog()
      overload: Global.FileManager.ExportCurrentAnimationDialog*
    - id: Global.FileManager.ExportCurrentAnimation(System.String)
      commentId: M:Global.FileManager.ExportCurrentAnimation(System.String)
      language: CSharp
      name:
        CSharp: ExportCurrentAnimation(string)
        VB: ExportCurrentAnimation(String)
      nameWithType:
        CSharp: FileManager.ExportCurrentAnimation(string)
        VB: FileManager.ExportCurrentAnimation(String)
      qualifiedName:
        CSharp: FileManager.ExportCurrentAnimation(string)
        VB: FileManager.ExportCurrentAnimation(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ExportCurrentAnimation
        path: ''
        startLine: 8772
      syntax:
        content:
          CSharp: public bool ExportCurrentAnimation(string filePath)
          VB: Public Function ExportCurrentAnimation(filePath As String) As Boolean
        parameters:
        - id: filePath
          type: System.String
        return:
          type: System.Boolean
      overload: Global.FileManager.ExportCurrentAnimation*
    - id: Global.FileManager.ExportAnimation(System.Int32,System.String)
      commentId: M:Global.FileManager.ExportAnimation(System.Int32,System.String)
      language: CSharp
      name:
        CSharp: ExportAnimation(int, string)
        VB: ExportAnimation(Integer, String)
      nameWithType:
        CSharp: FileManager.ExportAnimation(int, string)
        VB: FileManager.ExportAnimation(Integer, String)
      qualifiedName:
        CSharp: FileManager.ExportAnimation(int, string)
        VB: FileManager.ExportAnimation(Integer, String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ExportAnimation
        path: ''
        startLine: 8776
      syntax:
        content:
          CSharp: public bool ExportAnimation(int fileIndex, string filePath)
          VB: Public Function ExportAnimation(fileIndex As Integer, filePath As String) As Boolean
        parameters:
        - id: fileIndex
          type: System.Int32
        - id: filePath
          type: System.String
        return:
          type: System.Boolean
      overload: Global.FileManager.ExportAnimation*
    - id: Global.FileManager.SaveCurrentFileDialog
      commentId: M:Global.FileManager.SaveCurrentFileDialog
      language: CSharp
      name:
        CSharp: SaveCurrentFileDialog()
        VB: SaveCurrentFileDialog()
      nameWithType:
        CSharp: FileManager.SaveCurrentFileDialog()
        VB: FileManager.SaveCurrentFileDialog()
      qualifiedName:
        CSharp: FileManager.SaveCurrentFileDialog()
        VB: FileManager.SaveCurrentFileDialog()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SaveCurrentFileDialog
        path: ''
        startLine: 8785
      syntax:
        content:
          CSharp: public void SaveCurrentFileDialog()
          VB: Public Sub SaveCurrentFileDialog()
      overload: Global.FileManager.SaveCurrentFileDialog*
    - id: Global.FileManager.SaveFileDialog(File)
      commentId: M:Global.FileManager.SaveFileDialog(File)
      language: CSharp
      name:
        CSharp: SaveFileDialog(File)
        VB: SaveFileDialog(File)
      nameWithType:
        CSharp: FileManager.SaveFileDialog(File)
        VB: FileManager.SaveFileDialog(File)
      qualifiedName:
        CSharp: FileManager.SaveFileDialog(File)
        VB: FileManager.SaveFileDialog(File)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SaveFileDialog
        path: ''
        startLine: 8789
      syntax:
        content:
          CSharp: public void SaveFileDialog(File file)
          VB: Public Sub SaveFileDialog(file As File)
        parameters:
        - id: file
          type: Global.File
      overload: Global.FileManager.SaveFileDialog*
    - id: Global.FileManager.SaveAsCurrentFileDialog
      commentId: M:Global.FileManager.SaveAsCurrentFileDialog
      language: CSharp
      name:
        CSharp: SaveAsCurrentFileDialog()
        VB: SaveAsCurrentFileDialog()
      nameWithType:
        CSharp: FileManager.SaveAsCurrentFileDialog()
        VB: FileManager.SaveAsCurrentFileDialog()
      qualifiedName:
        CSharp: FileManager.SaveAsCurrentFileDialog()
        VB: FileManager.SaveAsCurrentFileDialog()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SaveAsCurrentFileDialog
        path: ''
        startLine: 8809
      syntax:
        content:
          CSharp: public void SaveAsCurrentFileDialog()
          VB: Public Sub SaveAsCurrentFileDialog()
      overload: Global.FileManager.SaveAsCurrentFileDialog*
    - id: Global.FileManager.SaveAsFileDialog(File)
      commentId: M:Global.FileManager.SaveAsFileDialog(File)
      language: CSharp
      name:
        CSharp: SaveAsFileDialog(File)
        VB: SaveAsFileDialog(File)
      nameWithType:
        CSharp: FileManager.SaveAsFileDialog(File)
        VB: FileManager.SaveAsFileDialog(File)
      qualifiedName:
        CSharp: FileManager.SaveAsFileDialog(File)
        VB: FileManager.SaveAsFileDialog(File)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SaveAsFileDialog
        path: ''
        startLine: 8813
      syntax:
        content:
          CSharp: public void SaveAsFileDialog(File file)
          VB: Public Sub SaveAsFileDialog(file As File)
        parameters:
        - id: file
          type: Global.File
      overload: Global.FileManager.SaveAsFileDialog*
    - id: Global.FileManager.SaveAsCurrentFile(System.String)
      commentId: M:Global.FileManager.SaveAsCurrentFile(System.String)
      language: CSharp
      name:
        CSharp: SaveAsCurrentFile(string)
        VB: SaveAsCurrentFile(String)
      nameWithType:
        CSharp: FileManager.SaveAsCurrentFile(string)
        VB: FileManager.SaveAsCurrentFile(String)
      qualifiedName:
        CSharp: FileManager.SaveAsCurrentFile(string)
        VB: FileManager.SaveAsCurrentFile(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SaveAsCurrentFile
        path: ''
        startLine: 8826
      syntax:
        content:
          CSharp: public void SaveAsCurrentFile(string filePath)
          VB: Public Sub SaveAsCurrentFile(filePath As String)
        parameters:
        - id: filePath
          type: System.String
      overload: Global.FileManager.SaveAsCurrentFile*
    - id: Global.FileManager.SaveAsFile(File,System.String)
      commentId: M:Global.FileManager.SaveAsFile(File,System.String)
      language: CSharp
      name:
        CSharp: SaveAsFile(File, string)
        VB: SaveAsFile(File, String)
      nameWithType:
        CSharp: FileManager.SaveAsFile(File, string)
        VB: FileManager.SaveAsFile(File, String)
      qualifiedName:
        CSharp: FileManager.SaveAsFile(File, string)
        VB: FileManager.SaveAsFile(File, String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SaveAsFile
        path: ''
        startLine: 8830
      syntax:
        content:
          CSharp: public void SaveAsFile(File file, string filePath)
          VB: Public Sub SaveAsFile(file As File, filePath As String)
        parameters:
        - id: file
          type: Global.File
        - id: filePath
          type: System.String
      overload: Global.FileManager.SaveAsFile*
    - id: Global.FileManager.SaveAsFile(System.Int32,System.String)
      commentId: M:Global.FileManager.SaveAsFile(System.Int32,System.String)
      language: CSharp
      name:
        CSharp: SaveAsFile(int, string)
        VB: SaveAsFile(Integer, String)
      nameWithType:
        CSharp: FileManager.SaveAsFile(int, string)
        VB: FileManager.SaveAsFile(Integer, String)
      qualifiedName:
        CSharp: FileManager.SaveAsFile(int, string)
        VB: FileManager.SaveAsFile(Integer, String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SaveAsFile
        path: ''
        startLine: 8834
      syntax:
        content:
          CSharp: public void SaveAsFile(int fileIndex, string filePath)
          VB: Public Sub SaveAsFile(fileIndex As Integer, filePath As String)
        parameters:
        - id: fileIndex
          type: System.Int32
        - id: filePath
          type: System.String
      overload: Global.FileManager.SaveAsFile*
    - id: Global.FileManager.ReloadFile
      commentId: M:Global.FileManager.ReloadFile
      language: CSharp
      name:
        CSharp: ReloadFile()
        VB: ReloadFile()
      nameWithType:
        CSharp: FileManager.ReloadFile()
        VB: FileManager.ReloadFile()
      qualifiedName:
        CSharp: FileManager.ReloadFile()
        VB: FileManager.ReloadFile()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ReloadFile
        path: ''
        startLine: 8843
      syntax:
        content:
          CSharp: public void ReloadFile()
          VB: Public Sub ReloadFile()
      overload: Global.FileManager.ReloadFile*
    - id: Global.FileManager.SwitchToFile(System.Int32)
      commentId: M:Global.FileManager.SwitchToFile(System.Int32)
      language: CSharp
      name:
        CSharp: SwitchToFile(int)
        VB: SwitchToFile(Integer)
      nameWithType:
        CSharp: FileManager.SwitchToFile(int)
        VB: FileManager.SwitchToFile(Integer)
      qualifiedName:
        CSharp: FileManager.SwitchToFile(int)
        VB: FileManager.SwitchToFile(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SwitchToFile
        path: ''
        startLine: 8847
      syntax:
        content:
          CSharp: public void SwitchToFile(int fileIndex)
          VB: Public Sub SwitchToFile(fileIndex As Integer)
        parameters:
        - id: fileIndex
          type: System.Int32
      overload: Global.FileManager.SwitchToFile*
    - id: Global.FileManager.SubscribeToFileSwitched(UnityAction)
      commentId: M:Global.FileManager.SubscribeToFileSwitched(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToFileSwitched(UnityAction)
        VB: SubscribeToFileSwitched(UnityAction)
      nameWithType:
        CSharp: FileManager.SubscribeToFileSwitched(UnityAction)
        VB: FileManager.SubscribeToFileSwitched(UnityAction)
      qualifiedName:
        CSharp: FileManager.SubscribeToFileSwitched(UnityAction)
        VB: FileManager.SubscribeToFileSwitched(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToFileSwitched
        path: ''
        startLine: 8890
      syntax:
        content:
          CSharp: public void SubscribeToFileSwitched(UnityAction call)
          VB: Public Sub SubscribeToFileSwitched([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.FileManager.SubscribeToFileSwitched*
    - id: Global.FileManager.SubscribeToFilesChanged(UnityAction)
      commentId: M:Global.FileManager.SubscribeToFilesChanged(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToFilesChanged(UnityAction)
        VB: SubscribeToFilesChanged(UnityAction)
      nameWithType:
        CSharp: FileManager.SubscribeToFilesChanged(UnityAction)
        VB: FileManager.SubscribeToFilesChanged(UnityAction)
      qualifiedName:
        CSharp: FileManager.SubscribeToFilesChanged(UnityAction)
        VB: FileManager.SubscribeToFilesChanged(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToFilesChanged
        path: ''
        startLine: 8894
      syntax:
        content:
          CSharp: public void SubscribeToFilesChanged(UnityAction call)
          VB: Public Sub SubscribeToFilesChanged([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.FileManager.SubscribeToFilesChanged*
  - id: Global.FileTab
    commentId: T:Global.FileTab
    language: CSharp
    name:
      CSharp: FileTab
      VB: FileTab
    nameWithType:
      CSharp: FileTab
      VB: FileTab
    qualifiedName:
      CSharp: FileTab
      VB: FileTab
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: FileTab
      path: ''
      startLine: 8905
    syntax:
      content:
        CSharp: 'public class FileTab : MonoBehaviour'
        VB: Public Class FileTab Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.FileTab.file
      commentId: P:Global.FileTab.file
      language: CSharp
      name:
        CSharp: file
        VB: file
      nameWithType:
        CSharp: FileTab.file
        VB: FileTab.file
      qualifiedName:
        CSharp: FileTab.file
        VB: FileTab.file
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: file
        path: ''
        startLine: 8907
      syntax:
        content:
          CSharp: public File file { get; }
          VB: Public Property file As File
        parameters: []
        return:
          type: Global.File
      overload: Global.FileTab.file*
    - id: Global.FileTab.selected
      commentId: P:Global.FileTab.selected
      language: CSharp
      name:
        CSharp: selected
        VB: selected
      nameWithType:
        CSharp: FileTab.selected
        VB: FileTab.selected
      qualifiedName:
        CSharp: FileTab.selected
        VB: FileTab.selected
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: selected
        path: ''
        startLine: 8908
      syntax:
        content:
          CSharp: public bool selected { get; }
          VB: Public ReadOnly Property selected As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.FileTab.selected*
    - id: Global.FileTab.tileToggle
      commentId: P:Global.FileTab.tileToggle
      language: CSharp
      name:
        CSharp: tileToggle
        VB: tileToggle
      nameWithType:
        CSharp: FileTab.tileToggle
        VB: FileTab.tileToggle
      qualifiedName:
        CSharp: FileTab.tileToggle
        VB: FileTab.tileToggle
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: tileToggle
        path: ''
        startLine: 8910
      syntax:
        content:
          CSharp: public UIToggleButton tileToggle { get; }
          VB: Public Property tileToggle As UIToggleButton
        parameters: []
        return:
          type: Global.UIToggleButton
      overload: Global.FileTab.tileToggle*
    - id: Global.FileTab.closed
      commentId: P:Global.FileTab.closed
      language: CSharp
      name:
        CSharp: closed
        VB: closed
      nameWithType:
        CSharp: FileTab.closed
        VB: FileTab.closed
      qualifiedName:
        CSharp: FileTab.closed
        VB: FileTab.closed
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: closed
        path: ''
        startLine: 8914
      syntax:
        content:
          CSharp: public bool closed { get; set; }
          VB: Public Property closed As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.FileTab.closed*
    - id: Global.FileTab.SetFile(File)
      commentId: M:Global.FileTab.SetFile(File)
      language: CSharp
      name:
        CSharp: SetFile(File)
        VB: SetFile(File)
      nameWithType:
        CSharp: FileTab.SetFile(File)
        VB: FileTab.SetFile(File)
      qualifiedName:
        CSharp: FileTab.SetFile(File)
        VB: FileTab.SetFile(File)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetFile
        path: ''
        startLine: 8935
      syntax:
        content:
          CSharp: public void SetFile(File file)
          VB: Public Sub SetFile(file As File)
        parameters:
        - id: file
          type: Global.File
      overload: Global.FileTab.SetFile*
    - id: Global.FileTab.SubscribeToSelect(UnityAction)
      commentId: M:Global.FileTab.SubscribeToSelect(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToSelect(UnityAction)
        VB: SubscribeToSelect(UnityAction)
      nameWithType:
        CSharp: FileTab.SubscribeToSelect(UnityAction)
        VB: FileTab.SubscribeToSelect(UnityAction)
      qualifiedName:
        CSharp: FileTab.SubscribeToSelect(UnityAction)
        VB: FileTab.SubscribeToSelect(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToSelect
        path: ''
        startLine: 8967
      syntax:
        content:
          CSharp: public void SubscribeToSelect(UnityAction call)
          VB: Public Sub SubscribeToSelect([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.FileTab.SubscribeToSelect*
    - id: Global.FileTab.SubscribeToClose(UnityAction)
      commentId: M:Global.FileTab.SubscribeToClose(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToClose(UnityAction)
        VB: SubscribeToClose(UnityAction)
      nameWithType:
        CSharp: FileTab.SubscribeToClose(UnityAction)
        VB: FileTab.SubscribeToClose(UnityAction)
      qualifiedName:
        CSharp: FileTab.SubscribeToClose(UnityAction)
        VB: FileTab.SubscribeToClose(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToClose
        path: ''
        startLine: 8971
      syntax:
        content:
          CSharp: public void SubscribeToClose(UnityAction call)
          VB: Public Sub SubscribeToClose([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.FileTab.SubscribeToClose*
    - id: Global.FileTab.SubscribeToNameChange(UnityAction)
      commentId: M:Global.FileTab.SubscribeToNameChange(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToNameChange(UnityAction)
        VB: SubscribeToNameChange(UnityAction)
      nameWithType:
        CSharp: FileTab.SubscribeToNameChange(UnityAction)
        VB: FileTab.SubscribeToNameChange(UnityAction)
      qualifiedName:
        CSharp: FileTab.SubscribeToNameChange(UnityAction)
        VB: FileTab.SubscribeToNameChange(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToNameChange
        path: ''
        startLine: 8975
      syntax:
        content:
          CSharp: public void SubscribeToNameChange(UnityAction call)
          VB: Public Sub SubscribeToNameChange([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.FileTab.SubscribeToNameChange*
  - id: Global.FileTabsManager
    commentId: T:Global.FileTabsManager
    language: CSharp
    name:
      CSharp: FileTabsManager
      VB: FileTabsManager
    nameWithType:
      CSharp: FileTabsManager
      VB: FileTabsManager
    qualifiedName:
      CSharp: FileTabsManager
      VB: FileTabsManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: FileTabsManager
      path: ''
      startLine: 8986
    syntax:
      content:
        CSharp: 'public class FileTabsManager : MonoBehaviour'
        VB: Public Class FileTabsManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.FileTabsManager.selectedFileIndex
      commentId: P:Global.FileTabsManager.selectedFileIndex
      language: CSharp
      name:
        CSharp: selectedFileIndex
        VB: selectedFileIndex
      nameWithType:
        CSharp: FileTabsManager.selectedFileIndex
        VB: FileTabsManager.selectedFileIndex
      qualifiedName:
        CSharp: FileTabsManager.selectedFileIndex
        VB: FileTabsManager.selectedFileIndex
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: selectedFileIndex
        path: ''
        startLine: 9010
      syntax:
        content:
          CSharp: public int selectedFileIndex { get; }
          VB: Public ReadOnly Property selectedFileIndex As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.FileTabsManager.selectedFileIndex*
    - id: Global.FileTabsManager.selectedFile
      commentId: P:Global.FileTabsManager.selectedFile
      language: CSharp
      name:
        CSharp: selectedFile
        VB: selectedFile
      nameWithType:
        CSharp: FileTabsManager.selectedFile
        VB: FileTabsManager.selectedFile
      qualifiedName:
        CSharp: FileTabsManager.selectedFile
        VB: FileTabsManager.selectedFile
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: selectedFile
        path: ''
        startLine: 9017
      syntax:
        content:
          CSharp: public File selectedFile { get; }
          VB: Public ReadOnly Property selectedFile As File
        parameters: []
        return:
          type: Global.File
      overload: Global.FileTabsManager.selectedFile*
    - id: Global.FileTabsManager.OnFilesChanged
      commentId: M:Global.FileTabsManager.OnFilesChanged
      language: CSharp
      name:
        CSharp: OnFilesChanged()
        VB: OnFilesChanged()
      nameWithType:
        CSharp: FileTabsManager.OnFilesChanged()
        VB: FileTabsManager.OnFilesChanged()
      qualifiedName:
        CSharp: FileTabsManager.OnFilesChanged()
        VB: FileTabsManager.OnFilesChanged()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnFilesChanged
        path: ''
        startLine: 9057
      syntax:
        content:
          CSharp: public void OnFilesChanged()
          VB: Public Sub OnFilesChanged()
      overload: Global.FileTabsManager.OnFilesChanged*
    - id: Global.FileTabsManager.SelectFile
      commentId: M:Global.FileTabsManager.SelectFile
      language: CSharp
      name:
        CSharp: SelectFile()
        VB: SelectFile()
      nameWithType:
        CSharp: FileTabsManager.SelectFile()
        VB: FileTabsManager.SelectFile()
      qualifiedName:
        CSharp: FileTabsManager.SelectFile()
        VB: FileTabsManager.SelectFile()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SelectFile
        path: ''
        startLine: 9107
      syntax:
        content:
          CSharp: public void SelectFile()
          VB: Public Sub SelectFile()
      overload: Global.FileTabsManager.SelectFile*
    - id: Global.FileTabsManager.CloseFile
      commentId: M:Global.FileTabsManager.CloseFile
      language: CSharp
      name:
        CSharp: CloseFile()
        VB: CloseFile()
      nameWithType:
        CSharp: FileTabsManager.CloseFile()
        VB: FileTabsManager.CloseFile()
      qualifiedName:
        CSharp: FileTabsManager.CloseFile()
        VB: FileTabsManager.CloseFile()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CloseFile
        path: ''
        startLine: 9112
      syntax:
        content:
          CSharp: public void CloseFile()
          VB: Public Sub CloseFile()
      overload: Global.FileTabsManager.CloseFile*
    - id: Global.FileTabsManager.SubscribeToOnFilesChanged(UnityAction)
      commentId: M:Global.FileTabsManager.SubscribeToOnFilesChanged(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnFilesChanged(UnityAction)
        VB: SubscribeToOnFilesChanged(UnityAction)
      nameWithType:
        CSharp: FileTabsManager.SubscribeToOnFilesChanged(UnityAction)
        VB: FileTabsManager.SubscribeToOnFilesChanged(UnityAction)
      qualifiedName:
        CSharp: FileTabsManager.SubscribeToOnFilesChanged(UnityAction)
        VB: FileTabsManager.SubscribeToOnFilesChanged(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnFilesChanged
        path: ''
        startLine: 9127
      syntax:
        content:
          CSharp: public void SubscribeToOnFilesChanged(UnityAction call)
          VB: Public Sub SubscribeToOnFilesChanged([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.FileTabsManager.SubscribeToOnFilesChanged*
  - id: Global.ImageEditManager
    commentId: T:Global.ImageEditManager
    language: CSharp
    name:
      CSharp: ImageEditManager
      VB: ImageEditManager
    nameWithType:
      CSharp: ImageEditManager
      VB: ImageEditManager
    qualifiedName:
      CSharp: ImageEditManager
      VB: ImageEditManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ImageEditManager
      path: ''
      startLine: 9138
    syntax:
      content:
        CSharp: 'public class ImageEditManager : MonoBehaviour'
        VB: Public Class ImageEditManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.ImageEditManager.FlipSelectedLayers(FlipDirection)
      commentId: M:Global.ImageEditManager.FlipSelectedLayers(FlipDirection)
      language: CSharp
      name:
        CSharp: FlipSelectedLayers(FlipDirection)
        VB: FlipSelectedLayers(FlipDirection)
      nameWithType:
        CSharp: ImageEditManager.FlipSelectedLayers(FlipDirection)
        VB: ImageEditManager.FlipSelectedLayers(FlipDirection)
      qualifiedName:
        CSharp: ImageEditManager.FlipSelectedLayers(FlipDirection)
        VB: ImageEditManager.FlipSelectedLayers(FlipDirection)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FlipSelectedLayers
        path: ''
        startLine: 9157
      syntax:
        content:
          CSharp: public void FlipSelectedLayers(FlipDirection direction)
          VB: Public Sub FlipSelectedLayers(direction As FlipDirection)
        parameters:
        - id: direction
          type: Global.FlipDirection
      overload: Global.ImageEditManager.FlipSelectedLayers*
    - id: Global.ImageEditManager.FlipSelectedLayersX
      commentId: M:Global.ImageEditManager.FlipSelectedLayersX
      language: CSharp
      name:
        CSharp: FlipSelectedLayersX()
        VB: FlipSelectedLayersX()
      nameWithType:
        CSharp: ImageEditManager.FlipSelectedLayersX()
        VB: ImageEditManager.FlipSelectedLayersX()
      qualifiedName:
        CSharp: ImageEditManager.FlipSelectedLayersX()
        VB: ImageEditManager.FlipSelectedLayersX()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FlipSelectedLayersX
        path: ''
        startLine: 9165
      syntax:
        content:
          CSharp: public void FlipSelectedLayersX()
          VB: Public Sub FlipSelectedLayersX()
      overload: Global.ImageEditManager.FlipSelectedLayersX*
    - id: Global.ImageEditManager.FlipSelectedLayersY
      commentId: M:Global.ImageEditManager.FlipSelectedLayersY
      language: CSharp
      name:
        CSharp: FlipSelectedLayersY()
        VB: FlipSelectedLayersY()
      nameWithType:
        CSharp: ImageEditManager.FlipSelectedLayersY()
        VB: ImageEditManager.FlipSelectedLayersY()
      qualifiedName:
        CSharp: ImageEditManager.FlipSelectedLayersY()
        VB: ImageEditManager.FlipSelectedLayersY()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FlipSelectedLayersY
        path: ''
        startLine: 9166
      syntax:
        content:
          CSharp: public void FlipSelectedLayersY()
          VB: Public Sub FlipSelectedLayersY()
      overload: Global.ImageEditManager.FlipSelectedLayersY*
    - id: Global.ImageEditManager.FlipFile(FlipDirection)
      commentId: M:Global.ImageEditManager.FlipFile(FlipDirection)
      language: CSharp
      name:
        CSharp: FlipFile(FlipDirection)
        VB: FlipFile(FlipDirection)
      nameWithType:
        CSharp: ImageEditManager.FlipFile(FlipDirection)
        VB: ImageEditManager.FlipFile(FlipDirection)
      qualifiedName:
        CSharp: ImageEditManager.FlipFile(FlipDirection)
        VB: ImageEditManager.FlipFile(FlipDirection)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FlipFile
        path: ''
        startLine: 9168
      syntax:
        content:
          CSharp: public void FlipFile(FlipDirection direction)
          VB: Public Sub FlipFile(direction As FlipDirection)
        parameters:
        - id: direction
          type: Global.FlipDirection
      overload: Global.ImageEditManager.FlipFile*
    - id: Global.ImageEditManager.FlipFileX
      commentId: M:Global.ImageEditManager.FlipFileX
      language: CSharp
      name:
        CSharp: FlipFileX()
        VB: FlipFileX()
      nameWithType:
        CSharp: ImageEditManager.FlipFileX()
        VB: ImageEditManager.FlipFileX()
      qualifiedName:
        CSharp: ImageEditManager.FlipFileX()
        VB: ImageEditManager.FlipFileX()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FlipFileX
        path: ''
        startLine: 9173
      syntax:
        content:
          CSharp: public void FlipFileX()
          VB: Public Sub FlipFileX()
      overload: Global.ImageEditManager.FlipFileX*
    - id: Global.ImageEditManager.FlipFileY
      commentId: M:Global.ImageEditManager.FlipFileY
      language: CSharp
      name:
        CSharp: FlipFileY()
        VB: FlipFileY()
      nameWithType:
        CSharp: ImageEditManager.FlipFileY()
        VB: ImageEditManager.FlipFileY()
      qualifiedName:
        CSharp: ImageEditManager.FlipFileY()
        VB: ImageEditManager.FlipFileY()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FlipFileY
        path: ''
        startLine: 9174
      syntax:
        content:
          CSharp: public void FlipFileY()
          VB: Public Sub FlipFileY()
      overload: Global.ImageEditManager.FlipFileY*
    - id: Global.ImageEditManager.RotateFile(RotationAngle)
      commentId: M:Global.ImageEditManager.RotateFile(RotationAngle)
      language: CSharp
      name:
        CSharp: RotateFile(RotationAngle)
        VB: RotateFile(RotationAngle)
      nameWithType:
        CSharp: ImageEditManager.RotateFile(RotationAngle)
        VB: ImageEditManager.RotateFile(RotationAngle)
      qualifiedName:
        CSharp: ImageEditManager.RotateFile(RotationAngle)
        VB: ImageEditManager.RotateFile(RotationAngle)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RotateFile
        path: ''
        startLine: 9176
      syntax:
        content:
          CSharp: public void RotateFile(RotationAngle angle)
          VB: Public Sub RotateFile(angle As RotationAngle)
        parameters:
        - id: angle
          type: Global.RotationAngle
      overload: Global.ImageEditManager.RotateFile*
    - id: Global.ImageEditManager.RotateSelectedLayers(RotationAngle)
      commentId: M:Global.ImageEditManager.RotateSelectedLayers(RotationAngle)
      language: CSharp
      name:
        CSharp: RotateSelectedLayers(RotationAngle)
        VB: RotateSelectedLayers(RotationAngle)
      nameWithType:
        CSharp: ImageEditManager.RotateSelectedLayers(RotationAngle)
        VB: ImageEditManager.RotateSelectedLayers(RotationAngle)
      qualifiedName:
        CSharp: ImageEditManager.RotateSelectedLayers(RotationAngle)
        VB: ImageEditManager.RotateSelectedLayers(RotationAngle)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RotateSelectedLayers
        path: ''
        startLine: 9186
      syntax:
        content:
          CSharp: public void RotateSelectedLayers(RotationAngle angle)
          VB: Public Sub RotateSelectedLayers(angle As RotationAngle)
        parameters:
        - id: angle
          type: Global.RotationAngle
      overload: Global.ImageEditManager.RotateSelectedLayers*
    - id: Global.ImageEditManager.RotateSelectedLayers90
      commentId: M:Global.ImageEditManager.RotateSelectedLayers90
      language: CSharp
      name:
        CSharp: RotateSelectedLayers90()
        VB: RotateSelectedLayers90()
      nameWithType:
        CSharp: ImageEditManager.RotateSelectedLayers90()
        VB: ImageEditManager.RotateSelectedLayers90()
      qualifiedName:
        CSharp: ImageEditManager.RotateSelectedLayers90()
        VB: ImageEditManager.RotateSelectedLayers90()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RotateSelectedLayers90
        path: ''
        startLine: 9215
      syntax:
        content:
          CSharp: public void RotateSelectedLayers90()
          VB: Public Sub RotateSelectedLayers90()
      overload: Global.ImageEditManager.RotateSelectedLayers90*
    - id: Global.ImageEditManager.RotateSelectedLayersMinus90
      commentId: M:Global.ImageEditManager.RotateSelectedLayersMinus90
      language: CSharp
      name:
        CSharp: RotateSelectedLayersMinus90()
        VB: RotateSelectedLayersMinus90()
      nameWithType:
        CSharp: ImageEditManager.RotateSelectedLayersMinus90()
        VB: ImageEditManager.RotateSelectedLayersMinus90()
      qualifiedName:
        CSharp: ImageEditManager.RotateSelectedLayersMinus90()
        VB: ImageEditManager.RotateSelectedLayersMinus90()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RotateSelectedLayersMinus90
        path: ''
        startLine: 9216
      syntax:
        content:
          CSharp: public void RotateSelectedLayersMinus90()
          VB: Public Sub RotateSelectedLayersMinus90()
      overload: Global.ImageEditManager.RotateSelectedLayersMinus90*
    - id: Global.ImageEditManager.RotateSelectedLayers180
      commentId: M:Global.ImageEditManager.RotateSelectedLayers180
      language: CSharp
      name:
        CSharp: RotateSelectedLayers180()
        VB: RotateSelectedLayers180()
      nameWithType:
        CSharp: ImageEditManager.RotateSelectedLayers180()
        VB: ImageEditManager.RotateSelectedLayers180()
      qualifiedName:
        CSharp: ImageEditManager.RotateSelectedLayers180()
        VB: ImageEditManager.RotateSelectedLayers180()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RotateSelectedLayers180
        path: ''
        startLine: 9217
      syntax:
        content:
          CSharp: public void RotateSelectedLayers180()
          VB: Public Sub RotateSelectedLayers180()
      overload: Global.ImageEditManager.RotateSelectedLayers180*
    - id: Global.ImageEditManager.ExtendFile(System.Int32,System.Int32,System.Int32,System.Int32)
      commentId: M:Global.ImageEditManager.ExtendFile(System.Int32,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: ExtendFile(int, int, int, int)
        VB: ExtendFile(Integer, Integer, Integer, Integer)
      nameWithType:
        CSharp: ImageEditManager.ExtendFile(int, int, int, int)
        VB: ImageEditManager.ExtendFile(Integer, Integer, Integer, Integer)
      qualifiedName:
        CSharp: ImageEditManager.ExtendFile(int, int, int, int)
        VB: ImageEditManager.ExtendFile(Integer, Integer, Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ExtendFile
        path: ''
        startLine: 9219
      syntax:
        content:
          CSharp: public void ExtendFile(int left, int right, int up, int down)
          VB: Public Sub ExtendFile(left As Integer, right As Integer, up As Integer, down As Integer)
        parameters:
        - id: left
          type: System.Int32
        - id: right
          type: System.Int32
        - id: up
          type: System.Int32
        - id: down
          type: System.Int32
      overload: Global.ImageEditManager.ExtendFile*
    - id: Global.ImageEditManager.ExtendFileLeft(System.Int32)
      commentId: M:Global.ImageEditManager.ExtendFileLeft(System.Int32)
      language: CSharp
      name:
        CSharp: ExtendFileLeft(int)
        VB: ExtendFileLeft(Integer)
      nameWithType:
        CSharp: ImageEditManager.ExtendFileLeft(int)
        VB: ImageEditManager.ExtendFileLeft(Integer)
      qualifiedName:
        CSharp: ImageEditManager.ExtendFileLeft(int)
        VB: ImageEditManager.ExtendFileLeft(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ExtendFileLeft
        path: ''
        startLine: 9229
      syntax:
        content:
          CSharp: public void ExtendFileLeft(int amount)
          VB: Public Sub ExtendFileLeft(amount As Integer)
        parameters:
        - id: amount
          type: System.Int32
      overload: Global.ImageEditManager.ExtendFileLeft*
    - id: Global.ImageEditManager.ExtendFileRight(System.Int32)
      commentId: M:Global.ImageEditManager.ExtendFileRight(System.Int32)
      language: CSharp
      name:
        CSharp: ExtendFileRight(int)
        VB: ExtendFileRight(Integer)
      nameWithType:
        CSharp: ImageEditManager.ExtendFileRight(int)
        VB: ImageEditManager.ExtendFileRight(Integer)
      qualifiedName:
        CSharp: ImageEditManager.ExtendFileRight(int)
        VB: ImageEditManager.ExtendFileRight(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ExtendFileRight
        path: ''
        startLine: 9230
      syntax:
        content:
          CSharp: public void ExtendFileRight(int amount)
          VB: Public Sub ExtendFileRight(amount As Integer)
        parameters:
        - id: amount
          type: System.Int32
      overload: Global.ImageEditManager.ExtendFileRight*
    - id: Global.ImageEditManager.ExtendFileUp(System.Int32)
      commentId: M:Global.ImageEditManager.ExtendFileUp(System.Int32)
      language: CSharp
      name:
        CSharp: ExtendFileUp(int)
        VB: ExtendFileUp(Integer)
      nameWithType:
        CSharp: ImageEditManager.ExtendFileUp(int)
        VB: ImageEditManager.ExtendFileUp(Integer)
      qualifiedName:
        CSharp: ImageEditManager.ExtendFileUp(int)
        VB: ImageEditManager.ExtendFileUp(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ExtendFileUp
        path: ''
        startLine: 9231
      syntax:
        content:
          CSharp: public void ExtendFileUp(int amount)
          VB: Public Sub ExtendFileUp(amount As Integer)
        parameters:
        - id: amount
          type: System.Int32
      overload: Global.ImageEditManager.ExtendFileUp*
    - id: Global.ImageEditManager.ExtendFileDown(System.Int32)
      commentId: M:Global.ImageEditManager.ExtendFileDown(System.Int32)
      language: CSharp
      name:
        CSharp: ExtendFileDown(int)
        VB: ExtendFileDown(Integer)
      nameWithType:
        CSharp: ImageEditManager.ExtendFileDown(int)
        VB: ImageEditManager.ExtendFileDown(Integer)
      qualifiedName:
        CSharp: ImageEditManager.ExtendFileDown(int)
        VB: ImageEditManager.ExtendFileDown(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ExtendFileDown
        path: ''
        startLine: 9232
      syntax:
        content:
          CSharp: public void ExtendFileDown(int amount)
          VB: Public Sub ExtendFileDown(amount As Integer)
        parameters:
        - id: amount
          type: System.Int32
      overload: Global.ImageEditManager.ExtendFileDown*
    - id: Global.ImageEditManager.ScaleFile(System.Single)
      commentId: M:Global.ImageEditManager.ScaleFile(System.Single)
      language: CSharp
      name:
        CSharp: ScaleFile(float)
        VB: ScaleFile(Single)
      nameWithType:
        CSharp: ImageEditManager.ScaleFile(float)
        VB: ImageEditManager.ScaleFile(Single)
      qualifiedName:
        CSharp: ImageEditManager.ScaleFile(float)
        VB: ImageEditManager.ScaleFile(Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ScaleFile
        path: ''
        startLine: 9234
      syntax:
        content:
          CSharp: public void ScaleFile(float scaleFactor)
          VB: Public Sub ScaleFile(scaleFactor As Single)
        parameters:
        - id: scaleFactor
          type: System.Single
      overload: Global.ImageEditManager.ScaleFile*
    - id: Global.ImageEditManager.ScaleFile(System.Single,System.Single)
      commentId: M:Global.ImageEditManager.ScaleFile(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: ScaleFile(float, float)
        VB: ScaleFile(Single, Single)
      nameWithType:
        CSharp: ImageEditManager.ScaleFile(float, float)
        VB: ImageEditManager.ScaleFile(Single, Single)
      qualifiedName:
        CSharp: ImageEditManager.ScaleFile(float, float)
        VB: ImageEditManager.ScaleFile(Single, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ScaleFile
        path: ''
        startLine: 9244
      syntax:
        content:
          CSharp: public void ScaleFile(float xScaleFactor, float yScaleFactor)
          VB: Public Sub ScaleFile(xScaleFactor As Single, yScaleFactor As Single)
        parameters:
        - id: xScaleFactor
          type: System.Single
        - id: yScaleFactor
          type: System.Single
      overload: Global.ImageEditManager.ScaleFile*
    - id: Global.ImageEditManager.ScaleFile(System.Int32,System.Int32)
      commentId: M:Global.ImageEditManager.ScaleFile(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: ScaleFile(int, int)
        VB: ScaleFile(Integer, Integer)
      nameWithType:
        CSharp: ImageEditManager.ScaleFile(int, int)
        VB: ImageEditManager.ScaleFile(Integer, Integer)
      qualifiedName:
        CSharp: ImageEditManager.ScaleFile(int, int)
        VB: ImageEditManager.ScaleFile(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ScaleFile
        path: ''
        startLine: 9254
      syntax:
        content:
          CSharp: public void ScaleFile(int newWidth, int newHeight)
          VB: Public Sub ScaleFile(newWidth As Integer, newHeight As Integer)
        parameters:
        - id: newWidth
          type: System.Int32
        - id: newHeight
          type: System.Int32
      overload: Global.ImageEditManager.ScaleFile*
    - id: Global.ImageEditManager.SubscribeToEdit(UnityAction)
      commentId: M:Global.ImageEditManager.SubscribeToEdit(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToEdit(UnityAction)
        VB: SubscribeToEdit(UnityAction)
      nameWithType:
        CSharp: ImageEditManager.SubscribeToEdit(UnityAction)
        VB: ImageEditManager.SubscribeToEdit(UnityAction)
      qualifiedName:
        CSharp: ImageEditManager.SubscribeToEdit(UnityAction)
        VB: ImageEditManager.SubscribeToEdit(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToEdit
        path: ''
        startLine: 9268
      syntax:
        content:
          CSharp: public void SubscribeToEdit(UnityAction call)
          VB: Public Sub SubscribeToEdit([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.ImageEditManager.SubscribeToEdit*
    - id: Global.ImageEditManager.SubscribeToImageSizeChanged(UnityAction)
      commentId: M:Global.ImageEditManager.SubscribeToImageSizeChanged(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToImageSizeChanged(UnityAction)
        VB: SubscribeToImageSizeChanged(UnityAction)
      nameWithType:
        CSharp: ImageEditManager.SubscribeToImageSizeChanged(UnityAction)
        VB: ImageEditManager.SubscribeToImageSizeChanged(UnityAction)
      qualifiedName:
        CSharp: ImageEditManager.SubscribeToImageSizeChanged(UnityAction)
        VB: ImageEditManager.SubscribeToImageSizeChanged(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToImageSizeChanged
        path: ''
        startLine: 9272
      syntax:
        content:
          CSharp: public void SubscribeToImageSizeChanged(UnityAction call)
          VB: Public Sub SubscribeToImageSizeChanged([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.ImageEditManager.SubscribeToImageSizeChanged*
  - id: Global.InputSystem
    commentId: T:Global.InputSystem
    language: CSharp
    name:
      CSharp: InputSystem
      VB: InputSystem
    nameWithType:
      CSharp: InputSystem
      VB: InputSystem
    qualifiedName:
      CSharp: InputSystem
      VB: InputSystem
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: InputSystem
      path: ''
      startLine: 9283
    syntax:
      content:
        CSharp: 'public class InputSystem : MonoBehaviour'
        VB: Public Class InputSystem Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.InputSystem.timeUntilKeySpam
      commentId: F:Global.InputSystem.timeUntilKeySpam
      language: CSharp
      name:
        CSharp: timeUntilKeySpam
        VB: timeUntilKeySpam
      nameWithType:
        CSharp: InputSystem.timeUntilKeySpam
        VB: InputSystem.timeUntilKeySpam
      qualifiedName:
        CSharp: InputSystem.timeUntilKeySpam
        VB: InputSystem.timeUntilKeySpam
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: timeUntilKeySpam
        path: ''
        startLine: 9287
      syntax:
        content:
          CSharp: public float timeUntilKeySpam
          VB: Public timeUntilKeySpam As Single
        return:
          type: System.Single
    - id: Global.InputSystem.timeBetweenKeySpam
      commentId: F:Global.InputSystem.timeBetweenKeySpam
      language: CSharp
      name:
        CSharp: timeBetweenKeySpam
        VB: timeBetweenKeySpam
      nameWithType:
        CSharp: InputSystem.timeBetweenKeySpam
        VB: InputSystem.timeBetweenKeySpam
      qualifiedName:
        CSharp: InputSystem.timeBetweenKeySpam
        VB: InputSystem.timeBetweenKeySpam
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: timeBetweenKeySpam
        path: ''
        startLine: 9289
      syntax:
        content:
          CSharp: public float timeBetweenKeySpam
          VB: Public timeBetweenKeySpam As Single
        return:
          type: System.Single
    - id: Global.InputSystem.mouse
      commentId: P:Global.InputSystem.mouse
      language: CSharp
      name:
        CSharp: mouse
        VB: mouse
      nameWithType:
        CSharp: InputSystem.mouse
        VB: InputSystem.mouse
      qualifiedName:
        CSharp: InputSystem.mouse
        VB: InputSystem.mouse
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: mouse
        path: ''
        startLine: 9294
      syntax:
        content:
          CSharp: public Mouse mouse { get; }
          VB: Public ReadOnly Property mouse As Mouse
        parameters: []
        return:
          type: Global.Mouse
      overload: Global.InputSystem.mouse*
    - id: Global.InputSystem.keyboard
      commentId: P:Global.InputSystem.keyboard
      language: CSharp
      name:
        CSharp: keyboard
        VB: keyboard
      nameWithType:
        CSharp: InputSystem.keyboard
        VB: InputSystem.keyboard
      qualifiedName:
        CSharp: InputSystem.keyboard
        VB: InputSystem.keyboard
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: keyboard
        path: ''
        startLine: 9303
      syntax:
        content:
          CSharp: public Keyboard keyboard { get; }
          VB: Public ReadOnly Property keyboard As Keyboard
        parameters: []
        return:
          type: Global.Keyboard
      overload: Global.InputSystem.keyboard*
    - id: Global.InputSystem.inputTarget
      commentId: P:Global.InputSystem.inputTarget
      language: CSharp
      name:
        CSharp: inputTarget
        VB: inputTarget
      nameWithType:
        CSharp: InputSystem.inputTarget
        VB: InputSystem.inputTarget
      qualifiedName:
        CSharp: InputSystem.inputTarget
        VB: InputSystem.inputTarget
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: inputTarget
        path: ''
        startLine: 9311
      syntax:
        content:
          CSharp: public InputTarget inputTarget { get; }
          VB: Public Property inputTarget As InputTarget
        parameters: []
        return:
          type: Global.InputTarget
      overload: Global.InputSystem.inputTarget*
    - id: Global.InputSystem.hasInputTarget
      commentId: P:Global.InputSystem.hasInputTarget
      language: CSharp
      name:
        CSharp: hasInputTarget
        VB: hasInputTarget
      nameWithType:
        CSharp: InputSystem.hasInputTarget
        VB: InputSystem.hasInputTarget
      qualifiedName:
        CSharp: InputSystem.hasInputTarget
        VB: InputSystem.hasInputTarget
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hasInputTarget
        path: ''
        startLine: 9312
      syntax:
        content:
          CSharp: public bool hasInputTarget { get; }
          VB: Public ReadOnly Property hasInputTarget As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.InputSystem.hasInputTarget*
    - id: Global.InputSystem.globalInputTarget
      commentId: P:Global.InputSystem.globalInputTarget
      language: CSharp
      name:
        CSharp: globalInputTarget
        VB: globalInputTarget
      nameWithType:
        CSharp: InputSystem.globalInputTarget
        VB: InputSystem.globalInputTarget
      qualifiedName:
        CSharp: InputSystem.globalInputTarget
        VB: InputSystem.globalInputTarget
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: globalInputTarget
        path: ''
        startLine: 9322
      syntax:
        content:
          CSharp: public InputTarget globalInputTarget { get; }
          VB: Public Property globalInputTarget As InputTarget
        parameters: []
        return:
          type: Global.InputTarget
      overload: Global.InputSystem.globalInputTarget*
    - id: Global.InputSystem.globalMouseTarget
      commentId: P:Global.InputSystem.globalMouseTarget
      language: CSharp
      name:
        CSharp: globalMouseTarget
        VB: globalMouseTarget
      nameWithType:
        CSharp: InputSystem.globalMouseTarget
        VB: InputSystem.globalMouseTarget
      qualifiedName:
        CSharp: InputSystem.globalMouseTarget
        VB: InputSystem.globalMouseTarget
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: globalMouseTarget
        path: ''
        startLine: 9323
      syntax:
        content:
          CSharp: public MouseTarget globalMouseTarget { get; }
          VB: Public ReadOnly Property globalMouseTarget As MouseTarget
        parameters: []
        return:
          type: Global.MouseTarget
      overload: Global.InputSystem.globalMouseTarget*
    - id: Global.InputSystem.globalKeyboardTarget
      commentId: P:Global.InputSystem.globalKeyboardTarget
      language: CSharp
      name:
        CSharp: globalKeyboardTarget
        VB: globalKeyboardTarget
      nameWithType:
        CSharp: InputSystem.globalKeyboardTarget
        VB: InputSystem.globalKeyboardTarget
      qualifiedName:
        CSharp: InputSystem.globalKeyboardTarget
        VB: InputSystem.globalKeyboardTarget
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: globalKeyboardTarget
        path: ''
        startLine: 9330
      syntax:
        content:
          CSharp: public KeyboardTarget globalKeyboardTarget { get; }
          VB: Public ReadOnly Property globalKeyboardTarget As KeyboardTarget
        parameters: []
        return:
          type: Global.KeyboardTarget
      overload: Global.InputSystem.globalKeyboardTarget*
    - id: Global.InputSystem.Target(InputTarget)
      commentId: M:Global.InputSystem.Target(InputTarget)
      language: CSharp
      name:
        CSharp: Target(InputTarget)
        VB: Target(InputTarget)
      nameWithType:
        CSharp: InputSystem.Target(InputTarget)
        VB: InputSystem.Target(InputTarget)
      qualifiedName:
        CSharp: InputSystem.Target(InputTarget)
        VB: InputSystem.Target(InputTarget)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Target
        path: ''
        startLine: 9378
      syntax:
        content:
          CSharp: public bool Target(InputTarget newTarget)
          VB: Public Function Target(newTarget As InputTarget) As Boolean
        parameters:
        - id: newTarget
          type: Global.InputTarget
        return:
          type: System.Boolean
      overload: Global.InputSystem.Target*
    - id: Global.InputSystem.Untarget
      commentId: M:Global.InputSystem.Untarget
      language: CSharp
      name:
        CSharp: Untarget()
        VB: Untarget()
      nameWithType:
        CSharp: InputSystem.Untarget()
        VB: InputSystem.Untarget()
      qualifiedName:
        CSharp: InputSystem.Untarget()
        VB: InputSystem.Untarget()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Untarget
        path: ''
        startLine: 9396
      syntax:
        content:
          CSharp: public InputTarget Untarget()
          VB: Public Function Untarget() As InputTarget
        return:
          type: Global.InputTarget
      overload: Global.InputSystem.Untarget*
    - id: Global.InputSystem.LockForAFrame
      commentId: M:Global.InputSystem.LockForAFrame
      language: CSharp
      name:
        CSharp: LockForAFrame()
        VB: LockForAFrame()
      nameWithType:
        CSharp: InputSystem.LockForAFrame()
        VB: InputSystem.LockForAFrame()
      qualifiedName:
        CSharp: InputSystem.LockForAFrame()
        VB: InputSystem.LockForAFrame()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LockForAFrame
        path: ''
        startLine: 9416
      syntax:
        content:
          CSharp: public void LockForAFrame()
          VB: Public Sub LockForAFrame()
      overload: Global.InputSystem.LockForAFrame*
    - id: Global.InputSystem.SubscribeToGlobalKeyboard(UnityAction)
      commentId: M:Global.InputSystem.SubscribeToGlobalKeyboard(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToGlobalKeyboard(UnityAction)
        VB: SubscribeToGlobalKeyboard(UnityAction)
      nameWithType:
        CSharp: InputSystem.SubscribeToGlobalKeyboard(UnityAction)
        VB: InputSystem.SubscribeToGlobalKeyboard(UnityAction)
      qualifiedName:
        CSharp: InputSystem.SubscribeToGlobalKeyboard(UnityAction)
        VB: InputSystem.SubscribeToGlobalKeyboard(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToGlobalKeyboard
        path: ''
        startLine: 9423
      syntax:
        content:
          CSharp: public void SubscribeToGlobalKeyboard(UnityAction call)
          VB: Public Sub SubscribeToGlobalKeyboard([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.InputSystem.SubscribeToGlobalKeyboard*
    - id: Global.InputSystem.SubscribeToGlobalMouseScroll(UnityAction)
      commentId: M:Global.InputSystem.SubscribeToGlobalMouseScroll(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToGlobalMouseScroll(UnityAction)
        VB: SubscribeToGlobalMouseScroll(UnityAction)
      nameWithType:
        CSharp: InputSystem.SubscribeToGlobalMouseScroll(UnityAction)
        VB: InputSystem.SubscribeToGlobalMouseScroll(UnityAction)
      qualifiedName:
        CSharp: InputSystem.SubscribeToGlobalMouseScroll(UnityAction)
        VB: InputSystem.SubscribeToGlobalMouseScroll(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToGlobalMouseScroll
        path: ''
        startLine: 9433
      syntax:
        content:
          CSharp: public void SubscribeToGlobalMouseScroll(UnityAction call)
          VB: Public Sub SubscribeToGlobalMouseScroll([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.InputSystem.SubscribeToGlobalMouseScroll*
    - id: Global.InputSystem.SubscribeToGlobalLeftClick(UnityAction)
      commentId: M:Global.InputSystem.SubscribeToGlobalLeftClick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToGlobalLeftClick(UnityAction)
        VB: SubscribeToGlobalLeftClick(UnityAction)
      nameWithType:
        CSharp: InputSystem.SubscribeToGlobalLeftClick(UnityAction)
        VB: InputSystem.SubscribeToGlobalLeftClick(UnityAction)
      qualifiedName:
        CSharp: InputSystem.SubscribeToGlobalLeftClick(UnityAction)
        VB: InputSystem.SubscribeToGlobalLeftClick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToGlobalLeftClick
        path: ''
        startLine: 9443
      syntax:
        content:
          CSharp: public void SubscribeToGlobalLeftClick(UnityAction call)
          VB: Public Sub SubscribeToGlobalLeftClick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.InputSystem.SubscribeToGlobalLeftClick*
  - id: Global.InputTarget
    commentId: T:Global.InputTarget
    language: CSharp
    name:
      CSharp: InputTarget
      VB: InputTarget
    nameWithType:
      CSharp: InputTarget
      VB: InputTarget
    qualifiedName:
      CSharp: InputTarget
      VB: InputTarget
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: InputTarget
      path: ''
      startLine: 9454
    syntax:
      content:
        CSharp: 'public class InputTarget : MonoBehaviour'
        VB: Public Class InputTarget Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.InputTarget.uiElement
      commentId: F:Global.InputTarget.uiElement
      language: CSharp
      name:
        CSharp: uiElement
        VB: uiElement
      nameWithType:
        CSharp: InputTarget.uiElement
        VB: InputTarget.uiElement
      qualifiedName:
        CSharp: InputTarget.uiElement
        VB: InputTarget.uiElement
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: uiElement
        path: ''
        startLine: 9458
      syntax:
        content:
          CSharp: public UIElement uiElement
          VB: Public uiElement As UIElement
        return:
          type: Global.UIElement
    - id: Global.InputTarget.targetName
      commentId: P:Global.InputTarget.targetName
      language: CSharp
      name:
        CSharp: targetName
        VB: targetName
      nameWithType:
        CSharp: InputTarget.targetName
        VB: InputTarget.targetName
      qualifiedName:
        CSharp: InputTarget.targetName
        VB: InputTarget.targetName
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: targetName
        path: ''
        startLine: 9463
      syntax:
        content:
          CSharp: public string targetName { get; }
          VB: Public ReadOnly Property targetName As String
        parameters: []
        return:
          type: System.String
      overload: Global.InputTarget.targetName*
    - id: Global.InputTarget.targetTag
      commentId: P:Global.InputTarget.targetTag
      language: CSharp
      name:
        CSharp: targetTag
        VB: targetTag
      nameWithType:
        CSharp: InputTarget.targetTag
        VB: InputTarget.targetTag
      qualifiedName:
        CSharp: InputTarget.targetTag
        VB: InputTarget.targetTag
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: targetTag
        path: ''
        startLine: 9472
      syntax:
        content:
          CSharp: public int targetTag { get; }
          VB: Public ReadOnly Property targetTag As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.InputTarget.targetTag*
    - id: Global.InputTarget.mouseInputEnabled
      commentId: F:Global.InputTarget.mouseInputEnabled
      language: CSharp
      name:
        CSharp: mouseInputEnabled
        VB: mouseInputEnabled
      nameWithType:
        CSharp: InputTarget.mouseInputEnabled
        VB: InputTarget.mouseInputEnabled
      qualifiedName:
        CSharp: InputTarget.mouseInputEnabled
        VB: InputTarget.mouseInputEnabled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: mouseInputEnabled
        path: ''
        startLine: 9481
      syntax:
        content:
          CSharp: public bool mouseInputEnabled
          VB: Public mouseInputEnabled As Boolean
        return:
          type: System.Boolean
    - id: Global.InputTarget.isHoverTrigger
      commentId: F:Global.InputTarget.isHoverTrigger
      language: CSharp
      name:
        CSharp: isHoverTrigger
        VB: isHoverTrigger
      nameWithType:
        CSharp: InputTarget.isHoverTrigger
        VB: InputTarget.isHoverTrigger
      qualifiedName:
        CSharp: InputTarget.isHoverTrigger
        VB: InputTarget.isHoverTrigger
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: isHoverTrigger
        path: ''
        startLine: 9482
      syntax:
        content:
          CSharp: public bool isHoverTrigger
          VB: Public isHoverTrigger As Boolean
        return:
          type: System.Boolean
    - id: Global.InputTarget.allowLeftClick
      commentId: F:Global.InputTarget.allowLeftClick
      language: CSharp
      name:
        CSharp: allowLeftClick
        VB: allowLeftClick
      nameWithType:
        CSharp: InputTarget.allowLeftClick
        VB: InputTarget.allowLeftClick
      qualifiedName:
        CSharp: InputTarget.allowLeftClick
        VB: InputTarget.allowLeftClick
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: allowLeftClick
        path: ''
        startLine: 9483
      syntax:
        content:
          CSharp: public bool allowLeftClick
          VB: Public allowLeftClick As Boolean
        return:
          type: System.Boolean
    - id: Global.InputTarget.allowRightClick
      commentId: F:Global.InputTarget.allowRightClick
      language: CSharp
      name:
        CSharp: allowRightClick
        VB: allowRightClick
      nameWithType:
        CSharp: InputTarget.allowRightClick
        VB: InputTarget.allowRightClick
      qualifiedName:
        CSharp: InputTarget.allowRightClick
        VB: InputTarget.allowRightClick
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: allowRightClick
        path: ''
        startLine: 9484
      syntax:
        content:
          CSharp: public bool allowRightClick
          VB: Public allowRightClick As Boolean
        return:
          type: System.Boolean
    - id: Global.InputTarget.allowMiddleClick
      commentId: F:Global.InputTarget.allowMiddleClick
      language: CSharp
      name:
        CSharp: allowMiddleClick
        VB: allowMiddleClick
      nameWithType:
        CSharp: InputTarget.allowMiddleClick
        VB: InputTarget.allowMiddleClick
      qualifiedName:
        CSharp: InputTarget.allowMiddleClick
        VB: InputTarget.allowMiddleClick
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: allowMiddleClick
        path: ''
        startLine: 9485
      syntax:
        content:
          CSharp: public bool allowMiddleClick
          VB: Public allowMiddleClick As Boolean
        return:
          type: System.Boolean
    - id: Global.InputTarget.allowScroll
      commentId: F:Global.InputTarget.allowScroll
      language: CSharp
      name:
        CSharp: allowScroll
        VB: allowScroll
      nameWithType:
        CSharp: InputTarget.allowScroll
        VB: InputTarget.allowScroll
      qualifiedName:
        CSharp: InputTarget.allowScroll
        VB: InputTarget.allowScroll
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: allowScroll
        path: ''
        startLine: 9486
      syntax:
        content:
          CSharp: public bool allowScroll
          VB: Public allowScroll As Boolean
        return:
          type: System.Boolean
    - id: Global.InputTarget.cursorHover
      commentId: F:Global.InputTarget.cursorHover
      language: CSharp
      name:
        CSharp: cursorHover
        VB: cursorHover
      nameWithType:
        CSharp: InputTarget.cursorHover
        VB: InputTarget.cursorHover
      qualifiedName:
        CSharp: InputTarget.cursorHover
        VB: InputTarget.cursorHover
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: cursorHover
        path: ''
        startLine: 9487
      syntax:
        content:
          CSharp: public CursorState cursorHover
          VB: Public cursorHover As CursorState
        return:
          type: Global.CursorState
    - id: Global.InputTarget.cursorPress
      commentId: F:Global.InputTarget.cursorPress
      language: CSharp
      name:
        CSharp: cursorPress
        VB: cursorPress
      nameWithType:
        CSharp: InputTarget.cursorPress
        VB: InputTarget.cursorPress
      qualifiedName:
        CSharp: InputTarget.cursorPress
        VB: InputTarget.cursorPress
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: cursorPress
        path: ''
        startLine: 9488
      syntax:
        content:
          CSharp: public CursorState cursorPress
          VB: Public cursorPress As CursorState
        return:
          type: Global.CursorState
    - id: Global.InputTarget.cursorSelected
      commentId: F:Global.InputTarget.cursorSelected
      language: CSharp
      name:
        CSharp: cursorSelected
        VB: cursorSelected
      nameWithType:
        CSharp: InputTarget.cursorSelected
        VB: InputTarget.cursorSelected
      qualifiedName:
        CSharp: InputTarget.cursorSelected
        VB: InputTarget.cursorSelected
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: cursorSelected
        path: ''
        startLine: 9489
      syntax:
        content:
          CSharp: public CursorState cursorSelected
          VB: Public cursorSelected As CursorState
        return:
          type: Global.CursorState
    - id: Global.InputTarget.cursorScroll
      commentId: P:Global.InputTarget.cursorScroll
      language: CSharp
      name:
        CSharp: cursorScroll
        VB: cursorScroll
      nameWithType:
        CSharp: InputTarget.cursorScroll
        VB: InputTarget.cursorScroll
      qualifiedName:
        CSharp: InputTarget.cursorScroll
        VB: InputTarget.cursorScroll
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: cursorScroll
        path: ''
        startLine: 9492
      syntax:
        content:
          CSharp: public CursorState cursorScroll { get; set; }
          VB: Public Property cursorScroll As CursorState
        parameters: []
        return:
          type: Global.CursorState
      overload: Global.InputTarget.cursorScroll*
    - id: Global.InputTarget.mouseDeselectMode
      commentId: F:Global.InputTarget.mouseDeselectMode
      language: CSharp
      name:
        CSharp: mouseDeselectMode
        VB: mouseDeselectMode
      nameWithType:
        CSharp: InputTarget.mouseDeselectMode
        VB: InputTarget.mouseDeselectMode
      qualifiedName:
        CSharp: InputTarget.mouseDeselectMode
        VB: InputTarget.mouseDeselectMode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: mouseDeselectMode
        path: ''
        startLine: 9501
      syntax:
        content:
          CSharp: public MouseTargetDeselectMode mouseDeselectMode
          VB: Public mouseDeselectMode As MouseTargetDeselectMode
        return:
          type: Global.MouseTargetDeselectMode
    - id: Global.InputTarget.disableMouseWhenSelected
      commentId: F:Global.InputTarget.disableMouseWhenSelected
      language: CSharp
      name:
        CSharp: disableMouseWhenSelected
        VB: disableMouseWhenSelected
      nameWithType:
        CSharp: InputTarget.disableMouseWhenSelected
        VB: InputTarget.disableMouseWhenSelected
      qualifiedName:
        CSharp: InputTarget.disableMouseWhenSelected
        VB: InputTarget.disableMouseWhenSelected
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: disableMouseWhenSelected
        path: ''
        startLine: 9502
      syntax:
        content:
          CSharp: public bool disableMouseWhenSelected
          VB: Public disableMouseWhenSelected As Boolean
        return:
          type: System.Boolean
    - id: Global.InputTarget.mouseTarget
      commentId: P:Global.InputTarget.mouseTarget
      language: CSharp
      name:
        CSharp: mouseTarget
        VB: mouseTarget
      nameWithType:
        CSharp: InputTarget.mouseTarget
        VB: InputTarget.mouseTarget
      qualifiedName:
        CSharp: InputTarget.mouseTarget
        VB: InputTarget.mouseTarget
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: mouseTarget
        path: ''
        startLine: 9504
      syntax:
        content:
          CSharp: public MouseTarget mouseTarget { get; }
          VB: Public Property mouseTarget As MouseTarget
        parameters: []
        return:
          type: Global.MouseTarget
      overload: Global.InputTarget.mouseTarget*
    - id: Global.InputTarget.keyboardInputEnabled
      commentId: F:Global.InputTarget.keyboardInputEnabled
      language: CSharp
      name:
        CSharp: keyboardInputEnabled
        VB: keyboardInputEnabled
      nameWithType:
        CSharp: InputTarget.keyboardInputEnabled
        VB: InputTarget.keyboardInputEnabled
      qualifiedName:
        CSharp: InputTarget.keyboardInputEnabled
        VB: InputTarget.keyboardInputEnabled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: keyboardInputEnabled
        path: ''
        startLine: 9507
      syntax:
        content:
          CSharp: public bool keyboardInputEnabled
          VB: Public keyboardInputEnabled As Boolean
        return:
          type: System.Boolean
    - id: Global.InputTarget.receiveAlreadyHeldKeys
      commentId: F:Global.InputTarget.receiveAlreadyHeldKeys
      language: CSharp
      name:
        CSharp: receiveAlreadyHeldKeys
        VB: receiveAlreadyHeldKeys
      nameWithType:
        CSharp: InputTarget.receiveAlreadyHeldKeys
        VB: InputTarget.receiveAlreadyHeldKeys
      qualifiedName:
        CSharp: InputTarget.receiveAlreadyHeldKeys
        VB: InputTarget.receiveAlreadyHeldKeys
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: receiveAlreadyHeldKeys
        path: ''
        startLine: 9509
      syntax:
        content:
          CSharp: public bool receiveAlreadyHeldKeys
          VB: Public receiveAlreadyHeldKeys As Boolean
        return:
          type: System.Boolean
    - id: Global.InputTarget.allowHoldingKeySpam
      commentId: F:Global.InputTarget.allowHoldingKeySpam
      language: CSharp
      name:
        CSharp: allowHoldingKeySpam
        VB: allowHoldingKeySpam
      nameWithType:
        CSharp: InputTarget.allowHoldingKeySpam
        VB: InputTarget.allowHoldingKeySpam
      qualifiedName:
        CSharp: InputTarget.allowHoldingKeySpam
        VB: InputTarget.allowHoldingKeySpam
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: allowHoldingKeySpam
        path: ''
        startLine: 9511
      syntax:
        content:
          CSharp: public bool allowHoldingKeySpam
          VB: Public allowHoldingKeySpam As Boolean
        return:
          type: System.Boolean
    - id: Global.InputTarget.keyboardTarget
      commentId: P:Global.InputTarget.keyboardTarget
      language: CSharp
      name:
        CSharp: keyboardTarget
        VB: keyboardTarget
      nameWithType:
        CSharp: InputTarget.keyboardTarget
        VB: InputTarget.keyboardTarget
      qualifiedName:
        CSharp: InputTarget.keyboardTarget
        VB: InputTarget.keyboardTarget
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: keyboardTarget
        path: ''
        startLine: 9513
      syntax:
        content:
          CSharp: public KeyboardTarget keyboardTarget { get; }
          VB: Public Property keyboardTarget As KeyboardTarget
        parameters: []
        return:
          type: Global.KeyboardTarget
      overload: Global.InputTarget.keyboardTarget*
    - id: Global.InputTarget.viewport
      commentId: F:Global.InputTarget.viewport
      language: CSharp
      name:
        CSharp: viewport
        VB: viewport
      nameWithType:
        CSharp: InputTarget.viewport
        VB: InputTarget.viewport
      qualifiedName:
        CSharp: InputTarget.viewport
        VB: InputTarget.viewport
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: viewport
        path: ''
        startLine: 9516
      syntax:
        content:
          CSharp: public UIViewport viewport
          VB: Public viewport As UIViewport
        return:
          type: Global.UIViewport
    - id: Global.InputTarget.collider
      commentId: P:Global.InputTarget.collider
      language: CSharp
      name:
        CSharp: collider
        VB: collider
      nameWithType:
        CSharp: InputTarget.collider
        VB: InputTarget.collider
      qualifiedName:
        CSharp: InputTarget.collider
        VB: InputTarget.collider
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: collider
        path: ''
        startLine: 9523
      syntax:
        content:
          CSharp: public Collider2D collider { get; }
          VB: Public Property collider As Collider2D
        parameters: []
        return:
          type: Global.Collider2D
      overload: Global.InputTarget.collider*
    - id: Global.InputTarget.Target
      commentId: M:Global.InputTarget.Target
      language: CSharp
      name:
        CSharp: Target()
        VB: Target()
      nameWithType:
        CSharp: InputTarget.Target()
        VB: InputTarget.Target()
      qualifiedName:
        CSharp: InputTarget.Target()
        VB: InputTarget.Target()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Target
        path: ''
        startLine: 9561
      syntax:
        content:
          CSharp: public void Target()
          VB: Public Sub Target()
      overload: Global.InputTarget.Target*
    - id: Global.InputTarget.Untarget
      commentId: M:Global.InputTarget.Untarget
      language: CSharp
      name:
        CSharp: Untarget()
        VB: Untarget()
      nameWithType:
        CSharp: InputTarget.Untarget()
        VB: InputTarget.Untarget()
      qualifiedName:
        CSharp: InputTarget.Untarget()
        VB: InputTarget.Untarget()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Untarget
        path: ''
        startLine: 9566
      syntax:
        content:
          CSharp: public void Untarget()
          VB: Public Sub Untarget()
      overload: Global.InputTarget.Untarget*
    - id: Global.InputTarget.GetUntargeted
      commentId: M:Global.InputTarget.GetUntargeted
      language: CSharp
      name:
        CSharp: GetUntargeted()
        VB: GetUntargeted()
      nameWithType:
        CSharp: InputTarget.GetUntargeted()
        VB: InputTarget.GetUntargeted()
      qualifiedName:
        CSharp: InputTarget.GetUntargeted()
        VB: InputTarget.GetUntargeted()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetUntargeted
        path: ''
        startLine: 9573
      syntax:
        content:
          CSharp: public void GetUntargeted()
          VB: Public Sub GetUntargeted()
      overload: Global.InputTarget.GetUntargeted*
    - id: Global.InputTarget.SubscribeToTarget(UnityAction)
      commentId: M:Global.InputTarget.SubscribeToTarget(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToTarget(UnityAction)
        VB: SubscribeToTarget(UnityAction)
      nameWithType:
        CSharp: InputTarget.SubscribeToTarget(UnityAction)
        VB: InputTarget.SubscribeToTarget(UnityAction)
      qualifiedName:
        CSharp: InputTarget.SubscribeToTarget(UnityAction)
        VB: InputTarget.SubscribeToTarget(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToTarget
        path: ''
        startLine: 9581
      syntax:
        content:
          CSharp: public void SubscribeToTarget(UnityAction call)
          VB: Public Sub SubscribeToTarget([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.InputTarget.SubscribeToTarget*
    - id: Global.InputTarget.SubscribeToUntarget(UnityAction)
      commentId: M:Global.InputTarget.SubscribeToUntarget(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToUntarget(UnityAction)
        VB: SubscribeToUntarget(UnityAction)
      nameWithType:
        CSharp: InputTarget.SubscribeToUntarget(UnityAction)
        VB: InputTarget.SubscribeToUntarget(UnityAction)
      qualifiedName:
        CSharp: InputTarget.SubscribeToUntarget(UnityAction)
        VB: InputTarget.SubscribeToUntarget(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToUntarget
        path: ''
        startLine: 9585
      syntax:
        content:
          CSharp: public void SubscribeToUntarget(UnityAction call)
          VB: Public Sub SubscribeToUntarget([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.InputTarget.SubscribeToUntarget*
  - id: Global.Keyboard
    commentId: T:Global.Keyboard
    language: CSharp
    name:
      CSharp: Keyboard
      VB: Keyboard
    nameWithType:
      CSharp: Keyboard
      VB: Keyboard
    qualifiedName:
      CSharp: Keyboard
      VB: Keyboard
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Keyboard
      path: ''
      startLine: 9595
    syntax:
      content:
        CSharp: 'public class Keyboard : MonoBehaviour'
        VB: Public Class Keyboard Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.Keyboard.canInteract
      commentId: F:Global.Keyboard.canInteract
      language: CSharp
      name:
        CSharp: canInteract
        VB: canInteract
      nameWithType:
        CSharp: Keyboard.canInteract
        VB: Keyboard.canInteract
      qualifiedName:
        CSharp: Keyboard.canInteract
        VB: Keyboard.canInteract
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: canInteract
        path: ''
        startLine: 9597
      syntax:
        content:
          CSharp: public bool canInteract
          VB: Public canInteract As Boolean
        return:
          type: System.Boolean
  - id: Global.KeyboardTarget
    commentId: T:Global.KeyboardTarget
    language: CSharp
    name:
      CSharp: KeyboardTarget
      VB: KeyboardTarget
    nameWithType:
      CSharp: KeyboardTarget
      VB: KeyboardTarget
    qualifiedName:
      CSharp: KeyboardTarget
      VB: KeyboardTarget
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: KeyboardTarget
      path: ''
      startLine: 9647
    syntax:
      content:
        CSharp: public class KeyboardTarget
        VB: Public Class KeyboardTarget
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.KeyboardTarget.keysHeld
      commentId: P:Global.KeyboardTarget.keysHeld
      language: CSharp
      name:
        CSharp: keysHeld
        VB: keysHeld
      nameWithType:
        CSharp: KeyboardTarget.keysHeld
        VB: KeyboardTarget.keysHeld
      qualifiedName:
        CSharp: KeyboardTarget.keysHeld
        VB: KeyboardTarget.keysHeld
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: keysHeld
        path: ''
        startLine: 9654
      summary: The keys that are currently held down, in order of when they were pressed (most recent first).
      example: []
      syntax:
        content:
          CSharp: public CustomKeyCode[] keysHeld { get; }
          VB: Public ReadOnly Property keysHeld As CustomKeyCode()
        parameters: []
        return:
          type: Global.CustomKeyCode[]
      overload: Global.KeyboardTarget.keysHeld*
    - id: Global.KeyboardTarget.keysPressed
      commentId: P:Global.KeyboardTarget.keysPressed
      language: CSharp
      name:
        CSharp: keysPressed
        VB: keysPressed
      nameWithType:
        CSharp: KeyboardTarget.keysPressed
        VB: KeyboardTarget.keysPressed
      qualifiedName:
        CSharp: KeyboardTarget.keysPressed
        VB: KeyboardTarget.keysPressed
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: keysPressed
        path: ''
        startLine: 9660
      syntax:
        content:
          CSharp: public CustomKeyCode[] keysPressed { get; }
          VB: Public ReadOnly Property keysPressed As CustomKeyCode()
        parameters: []
        return:
          type: Global.CustomKeyCode[]
      overload: Global.KeyboardTarget.keysPressed*
    - id: Global.KeyboardTarget.receiveAlreadyHeldKeys
      commentId: F:Global.KeyboardTarget.receiveAlreadyHeldKeys
      language: CSharp
      name:
        CSharp: receiveAlreadyHeldKeys
        VB: receiveAlreadyHeldKeys
      nameWithType:
        CSharp: KeyboardTarget.receiveAlreadyHeldKeys
        VB: KeyboardTarget.receiveAlreadyHeldKeys
      qualifiedName:
        CSharp: KeyboardTarget.receiveAlreadyHeldKeys
        VB: KeyboardTarget.receiveAlreadyHeldKeys
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: receiveAlreadyHeldKeys
        path: ''
        startLine: 9662
      syntax:
        content:
          CSharp: public bool receiveAlreadyHeldKeys
          VB: Public receiveAlreadyHeldKeys As Boolean
        return:
          type: System.Boolean
    - id: Global.KeyboardTarget.allowHoldingKeySpam
      commentId: F:Global.KeyboardTarget.allowHoldingKeySpam
      language: CSharp
      name:
        CSharp: allowHoldingKeySpam
        VB: allowHoldingKeySpam
      nameWithType:
        CSharp: KeyboardTarget.allowHoldingKeySpam
        VB: KeyboardTarget.allowHoldingKeySpam
      qualifiedName:
        CSharp: KeyboardTarget.allowHoldingKeySpam
        VB: KeyboardTarget.allowHoldingKeySpam
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: allowHoldingKeySpam
        path: ''
        startLine: 9664
      syntax:
        content:
          CSharp: public bool allowHoldingKeySpam
          VB: Public allowHoldingKeySpam As Boolean
        return:
          type: System.Boolean
    - id: Global.KeyboardTarget.inputThisFrame
      commentId: P:Global.KeyboardTarget.inputThisFrame
      language: CSharp
      name:
        CSharp: inputThisFrame
        VB: inputThisFrame
      nameWithType:
        CSharp: KeyboardTarget.inputThisFrame
        VB: KeyboardTarget.inputThisFrame
      qualifiedName:
        CSharp: KeyboardTarget.inputThisFrame
        VB: KeyboardTarget.inputThisFrame
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: inputThisFrame
        path: ''
        startLine: 9668
      syntax:
        content:
          CSharp: public bool inputThisFrame { get; }
          VB: Public Property inputThisFrame As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.KeyboardTarget.inputThisFrame*
    - id: Global.KeyboardTarget.#ctor
      commentId: M:Global.KeyboardTarget.#ctor
      language: CSharp
      name:
        CSharp: KeyboardTarget()
        VB: New()
      nameWithType:
        CSharp: KeyboardTarget.KeyboardTarget()
        VB: KeyboardTarget.New()
      qualifiedName:
        CSharp: KeyboardTarget.KeyboardTarget()
        VB: KeyboardTarget.New()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 9678
      syntax:
        content:
          CSharp: public KeyboardTarget()
          VB: Public Sub New()
      overload: Global.KeyboardTarget.#ctor*
    - id: Global.KeyboardTarget.ManualUpdate
      commentId: M:Global.KeyboardTarget.ManualUpdate
      language: CSharp
      name:
        CSharp: ManualUpdate()
        VB: ManualUpdate()
      nameWithType:
        CSharp: KeyboardTarget.ManualUpdate()
        VB: KeyboardTarget.ManualUpdate()
      qualifiedName:
        CSharp: KeyboardTarget.ManualUpdate()
        VB: KeyboardTarget.ManualUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ManualUpdate
        path: ''
        startLine: 9716
      summary: "\nOnly to be called in InputTarget&apos;s Update() method.\n"
      example: []
      syntax:
        content:
          CSharp: public void ManualUpdate()
          VB: Public Sub ManualUpdate()
      overload: Global.KeyboardTarget.ManualUpdate*
    - id: Global.KeyboardTarget.KeyDownNoSpamReset(CustomKeyCode)
      commentId: M:Global.KeyboardTarget.KeyDownNoSpamReset(CustomKeyCode)
      language: CSharp
      name:
        CSharp: KeyDownNoSpamReset(CustomKeyCode)
        VB: KeyDownNoSpamReset(CustomKeyCode)
      nameWithType:
        CSharp: KeyboardTarget.KeyDownNoSpamReset(CustomKeyCode)
        VB: KeyboardTarget.KeyDownNoSpamReset(CustomKeyCode)
      qualifiedName:
        CSharp: KeyboardTarget.KeyDownNoSpamReset(CustomKeyCode)
        VB: KeyboardTarget.KeyDownNoSpamReset(CustomKeyCode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: KeyDownNoSpamReset
        path: ''
        startLine: 9742
      summary: "\nSimulates the key being pressed, if it is a key detectable by KeyboardTarget, without restting the timer until key spamming occurs.\n"
      example: []
      syntax:
        content:
          CSharp: public void KeyDownNoSpamReset(CustomKeyCode key)
          VB: Public Sub KeyDownNoSpamReset(key As CustomKeyCode)
        parameters:
        - id: key
          type: Global.CustomKeyCode
      overload: Global.KeyboardTarget.KeyDownNoSpamReset*
    - id: Global.KeyboardTarget.KeysDownNoSpamReset(CustomKeyCode[])
      commentId: M:Global.KeyboardTarget.KeysDownNoSpamReset(CustomKeyCode[])
      language: CSharp
      name:
        CSharp: KeysDownNoSpamReset(params CustomKeyCode[])
        VB: KeysDownNoSpamReset(ParamArray CustomKeyCode())
      nameWithType:
        CSharp: KeyboardTarget.KeysDownNoSpamReset(params CustomKeyCode[])
        VB: KeyboardTarget.KeysDownNoSpamReset(ParamArray CustomKeyCode())
      qualifiedName:
        CSharp: KeyboardTarget.KeysDownNoSpamReset(params CustomKeyCode[])
        VB: KeyboardTarget.KeysDownNoSpamReset(ParamArray CustomKeyCode())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: KeysDownNoSpamReset
        path: ''
        startLine: 9755
      summary: "\nSimulates the keys being pressed, if they are keys detectable by KeyboardTarget, without restting the timer until key spamming occurs.\n"
      example: []
      syntax:
        content:
          CSharp: public void KeysDownNoSpamReset(params CustomKeyCode[] keys)
          VB: Public Sub KeysDownNoSpamReset(ParamArray keys As CustomKeyCode())
        parameters:
        - id: keys
          type: Global.CustomKeyCode[]
      overload: Global.KeyboardTarget.KeysDownNoSpamReset*
    - id: Global.KeyboardTarget.KeyDown(CustomKeyCode)
      commentId: M:Global.KeyboardTarget.KeyDown(CustomKeyCode)
      language: CSharp
      name:
        CSharp: KeyDown(CustomKeyCode)
        VB: KeyDown(CustomKeyCode)
      nameWithType:
        CSharp: KeyboardTarget.KeyDown(CustomKeyCode)
        VB: KeyboardTarget.KeyDown(CustomKeyCode)
      qualifiedName:
        CSharp: KeyboardTarget.KeyDown(CustomKeyCode)
        VB: KeyboardTarget.KeyDown(CustomKeyCode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: KeyDown
        path: ''
        startLine: 9765
      summary: "\nSimulates the key being pressed, if it is a key detectable by KeyboardTarget.\n"
      example: []
      syntax:
        content:
          CSharp: public void KeyDown(CustomKeyCode key)
          VB: Public Sub KeyDown(key As CustomKeyCode)
        parameters:
        - id: key
          type: Global.CustomKeyCode
      overload: Global.KeyboardTarget.KeyDown*
    - id: Global.KeyboardTarget.KeysDown(CustomKeyCode[])
      commentId: M:Global.KeyboardTarget.KeysDown(CustomKeyCode[])
      language: CSharp
      name:
        CSharp: KeysDown(params CustomKeyCode[])
        VB: KeysDown(ParamArray CustomKeyCode())
      nameWithType:
        CSharp: KeyboardTarget.KeysDown(params CustomKeyCode[])
        VB: KeyboardTarget.KeysDown(ParamArray CustomKeyCode())
      qualifiedName:
        CSharp: KeyboardTarget.KeysDown(params CustomKeyCode[])
        VB: KeyboardTarget.KeysDown(ParamArray CustomKeyCode())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: KeysDown
        path: ''
        startLine: 9780
      summary: "\nSimulates the keys being pressed, if they are keys detectable by KeyboardTarget.\n"
      example: []
      syntax:
        content:
          CSharp: public void KeysDown(params CustomKeyCode[] keys)
          VB: Public Sub KeysDown(ParamArray keys As CustomKeyCode())
        parameters:
        - id: keys
          type: Global.CustomKeyCode[]
      overload: Global.KeyboardTarget.KeysDown*
    - id: Global.KeyboardTarget.KeyUp(CustomKeyCode)
      commentId: M:Global.KeyboardTarget.KeyUp(CustomKeyCode)
      language: CSharp
      name:
        CSharp: KeyUp(CustomKeyCode)
        VB: KeyUp(CustomKeyCode)
      nameWithType:
        CSharp: KeyboardTarget.KeyUp(CustomKeyCode)
        VB: KeyboardTarget.KeyUp(CustomKeyCode)
      qualifiedName:
        CSharp: KeyboardTarget.KeyUp(CustomKeyCode)
        VB: KeyboardTarget.KeyUp(CustomKeyCode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: KeyUp
        path: ''
        startLine: 9790
      summary: "\nSimulates the key being unpressed.\n"
      example: []
      syntax:
        content:
          CSharp: public void KeyUp(CustomKeyCode key)
          VB: Public Sub KeyUp(key As CustomKeyCode)
        parameters:
        - id: key
          type: Global.CustomKeyCode
      overload: Global.KeyboardTarget.KeyUp*
    - id: Global.KeyboardTarget.KeysUp(CustomKeyCode[])
      commentId: M:Global.KeyboardTarget.KeysUp(CustomKeyCode[])
      language: CSharp
      name:
        CSharp: KeysUp(params CustomKeyCode[])
        VB: KeysUp(ParamArray CustomKeyCode())
      nameWithType:
        CSharp: KeyboardTarget.KeysUp(params CustomKeyCode[])
        VB: KeyboardTarget.KeysUp(ParamArray CustomKeyCode())
      qualifiedName:
        CSharp: KeyboardTarget.KeysUp(params CustomKeyCode[])
        VB: KeyboardTarget.KeysUp(ParamArray CustomKeyCode())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: KeysUp
        path: ''
        startLine: 9806
      summary: "\nSimulates the keys being unpressed.\n"
      example: []
      syntax:
        content:
          CSharp: public void KeysUp(params CustomKeyCode[] keys)
          VB: Public Sub KeysUp(ParamArray keys As CustomKeyCode())
        parameters:
        - id: keys
          type: Global.CustomKeyCode[]
      overload: Global.KeyboardTarget.KeysUp*
    - id: Global.KeyboardTarget.IsPressed(CustomKeyCode)
      commentId: M:Global.KeyboardTarget.IsPressed(CustomKeyCode)
      language: CSharp
      name:
        CSharp: IsPressed(CustomKeyCode)
        VB: IsPressed(CustomKeyCode)
      nameWithType:
        CSharp: KeyboardTarget.IsPressed(CustomKeyCode)
        VB: KeyboardTarget.IsPressed(CustomKeyCode)
      qualifiedName:
        CSharp: KeyboardTarget.IsPressed(CustomKeyCode)
        VB: KeyboardTarget.IsPressed(CustomKeyCode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsPressed
        path: ''
        startLine: 9823
      summary: "\nReturns true if all the given key (and potentially some other keys) has been pressed this frame (and is a key detectable by KeyboardTarget).\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsPressed(CustomKeyCode key)
          VB: Public Function IsPressed(key As CustomKeyCode) As Boolean
        parameters:
        - id: key
          type: Global.CustomKeyCode
        return:
          type: System.Boolean
      overload: Global.KeyboardTarget.IsPressed*
    - id: Global.KeyboardTarget.IsPressed(KeyboardShortcut)
      commentId: M:Global.KeyboardTarget.IsPressed(KeyboardShortcut)
      language: CSharp
      name:
        CSharp: IsPressed(KeyboardShortcut)
        VB: IsPressed(KeyboardShortcut)
      nameWithType:
        CSharp: KeyboardTarget.IsPressed(KeyboardShortcut)
        VB: KeyboardTarget.IsPressed(KeyboardShortcut)
      qualifiedName:
        CSharp: KeyboardTarget.IsPressed(KeyboardShortcut)
        VB: KeyboardTarget.IsPressed(KeyboardShortcut)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsPressed
        path: ''
        startLine: 9830
      summary: "\nReturns true if all the given keys (and potentially some other keys) have been pressed this frame (and are keys detectable by KeyboardTarget).\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsPressed(KeyboardShortcut shortcut)
          VB: Public Function IsPressed(shortcut As KeyboardShortcut) As Boolean
        parameters:
        - id: shortcut
          type: Global.KeyboardShortcut
        return:
          type: System.Boolean
      overload: Global.KeyboardTarget.IsPressed*
    - id: Global.KeyboardTarget.IsPressed(CustomKeyCode[])
      commentId: M:Global.KeyboardTarget.IsPressed(CustomKeyCode[])
      language: CSharp
      name:
        CSharp: IsPressed(params CustomKeyCode[])
        VB: IsPressed(ParamArray CustomKeyCode())
      nameWithType:
        CSharp: KeyboardTarget.IsPressed(params CustomKeyCode[])
        VB: KeyboardTarget.IsPressed(ParamArray CustomKeyCode())
      qualifiedName:
        CSharp: KeyboardTarget.IsPressed(params CustomKeyCode[])
        VB: KeyboardTarget.IsPressed(ParamArray CustomKeyCode())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsPressed
        path: ''
        startLine: 9834
      summary: "\nReturns true if all the given keys (and potentially some other keys) have been pressed this frame (and are keys detectable by KeyboardTarget).\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsPressed(params CustomKeyCode[] keys)
          VB: Public Function IsPressed(ParamArray keys As CustomKeyCode()) As Boolean
        parameters:
        - id: keys
          type: Global.CustomKeyCode[]
        return:
          type: System.Boolean
      overload: Global.KeyboardTarget.IsPressed*
    - id: Global.KeyboardTarget.OneIsPressed(System.Collections.Generic.IEnumerable{KeyboardShortcut})
      commentId: M:Global.KeyboardTarget.OneIsPressed(System.Collections.Generic.IEnumerable{KeyboardShortcut})
      language: CSharp
      name:
        CSharp: OneIsPressed(IEnumerable<KeyboardShortcut>)
        VB: OneIsPressed(IEnumerable(Of KeyboardShortcut))
      nameWithType:
        CSharp: KeyboardTarget.OneIsPressed(IEnumerable<KeyboardShortcut>)
        VB: KeyboardTarget.OneIsPressed(IEnumerable(Of KeyboardShortcut))
      qualifiedName:
        CSharp: KeyboardTarget.OneIsPressed(System.Collections.Generic.IEnumerable<KeyboardShortcut>)
        VB: KeyboardTarget.OneIsPressed(System.Collections.Generic.IEnumerable(Of KeyboardShortcut))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OneIsPressed
        path: ''
        startLine: 9848
      summary: "\nReturns true if all the given keys (and potentially some other keys) have been pressed this frame (and are keys detectable by KeyboardTarget) for one of the given keyboard shortcuts.\n"
      example: []
      syntax:
        content:
          CSharp: public bool OneIsPressed(IEnumerable<KeyboardShortcut> shortcuts)
          VB: Public Function OneIsPressed(shortcuts As IEnumerable(Of KeyboardShortcut)) As Boolean
        parameters:
        - id: shortcuts
          type: System.Collections.Generic.IEnumerable{KeyboardShortcut}
        return:
          type: System.Boolean
      overload: Global.KeyboardTarget.OneIsPressed*
    - id: Global.KeyboardTarget.IsHeld(KeyboardShortcut)
      commentId: M:Global.KeyboardTarget.IsHeld(KeyboardShortcut)
      language: CSharp
      name:
        CSharp: IsHeld(KeyboardShortcut)
        VB: IsHeld(KeyboardShortcut)
      nameWithType:
        CSharp: KeyboardTarget.IsHeld(KeyboardShortcut)
        VB: KeyboardTarget.IsHeld(KeyboardShortcut)
      qualifiedName:
        CSharp: KeyboardTarget.IsHeld(KeyboardShortcut)
        VB: KeyboardTarget.IsHeld(KeyboardShortcut)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsHeld
        path: ''
        startLine: 9863
      summary: "\nReturns true if all the given key (and potentially some other keys) is held (and is a key detectable by KeyboardTarget).\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsHeld(KeyboardShortcut shortcut)
          VB: Public Function IsHeld(shortcut As KeyboardShortcut) As Boolean
        parameters:
        - id: shortcut
          type: Global.KeyboardShortcut
        return:
          type: System.Boolean
      overload: Global.KeyboardTarget.IsHeld*
    - id: Global.KeyboardTarget.IsHeld(CustomKeyCode)
      commentId: M:Global.KeyboardTarget.IsHeld(CustomKeyCode)
      language: CSharp
      name:
        CSharp: IsHeld(CustomKeyCode)
        VB: IsHeld(CustomKeyCode)
      nameWithType:
        CSharp: KeyboardTarget.IsHeld(CustomKeyCode)
        VB: KeyboardTarget.IsHeld(CustomKeyCode)
      qualifiedName:
        CSharp: KeyboardTarget.IsHeld(CustomKeyCode)
        VB: KeyboardTarget.IsHeld(CustomKeyCode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsHeld
        path: ''
        startLine: 9867
      summary: "\nReturns true if all the given key (and potentially some other keys) is held (and is a key detectable by KeyboardTarget).\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsHeld(CustomKeyCode key)
          VB: Public Function IsHeld(key As CustomKeyCode) As Boolean
        parameters:
        - id: key
          type: Global.CustomKeyCode
        return:
          type: System.Boolean
      overload: Global.KeyboardTarget.IsHeld*
    - id: Global.KeyboardTarget.IsHeld(CustomKeyCode[])
      commentId: M:Global.KeyboardTarget.IsHeld(CustomKeyCode[])
      language: CSharp
      name:
        CSharp: IsHeld(params CustomKeyCode[])
        VB: IsHeld(ParamArray CustomKeyCode())
      nameWithType:
        CSharp: KeyboardTarget.IsHeld(params CustomKeyCode[])
        VB: KeyboardTarget.IsHeld(ParamArray CustomKeyCode())
      qualifiedName:
        CSharp: KeyboardTarget.IsHeld(params CustomKeyCode[])
        VB: KeyboardTarget.IsHeld(ParamArray CustomKeyCode())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsHeld
        path: ''
        startLine: 9874
      summary: "\nReturns true if all the given keys (and potentially some other keys) are held (and are keys detectable by KeyboardTarget).\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsHeld(params CustomKeyCode[] keys)
          VB: Public Function IsHeld(ParamArray keys As CustomKeyCode()) As Boolean
        parameters:
        - id: keys
          type: Global.CustomKeyCode[]
        return:
          type: System.Boolean
      overload: Global.KeyboardTarget.IsHeld*
    - id: Global.KeyboardTarget.OneIsHeld(System.Collections.Generic.IEnumerable{KeyboardShortcut})
      commentId: M:Global.KeyboardTarget.OneIsHeld(System.Collections.Generic.IEnumerable{KeyboardShortcut})
      language: CSharp
      name:
        CSharp: OneIsHeld(IEnumerable<KeyboardShortcut>)
        VB: OneIsHeld(IEnumerable(Of KeyboardShortcut))
      nameWithType:
        CSharp: KeyboardTarget.OneIsHeld(IEnumerable<KeyboardShortcut>)
        VB: KeyboardTarget.OneIsHeld(IEnumerable(Of KeyboardShortcut))
      qualifiedName:
        CSharp: KeyboardTarget.OneIsHeld(System.Collections.Generic.IEnumerable<KeyboardShortcut>)
        VB: KeyboardTarget.OneIsHeld(System.Collections.Generic.IEnumerable(Of KeyboardShortcut))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OneIsHeld
        path: ''
        startLine: 9888
      summary: "\nReturns true if all the given keys (and potentially some other keys) are held (and are keys detectable by KeyboardTarget) for one of the given keyboard shortcuts.\n"
      example: []
      syntax:
        content:
          CSharp: public bool OneIsHeld(IEnumerable<KeyboardShortcut> shortcuts)
          VB: Public Function OneIsHeld(shortcuts As IEnumerable(Of KeyboardShortcut)) As Boolean
        parameters:
        - id: shortcuts
          type: System.Collections.Generic.IEnumerable{KeyboardShortcut}
        return:
          type: System.Boolean
      overload: Global.KeyboardTarget.OneIsHeld*
    - id: Global.KeyboardTarget.IsHeldExactly(KeyboardShortcut)
      commentId: M:Global.KeyboardTarget.IsHeldExactly(KeyboardShortcut)
      language: CSharp
      name:
        CSharp: IsHeldExactly(KeyboardShortcut)
        VB: IsHeldExactly(KeyboardShortcut)
      nameWithType:
        CSharp: KeyboardTarget.IsHeldExactly(KeyboardShortcut)
        VB: KeyboardTarget.IsHeldExactly(KeyboardShortcut)
      qualifiedName:
        CSharp: KeyboardTarget.IsHeldExactly(KeyboardShortcut)
        VB: KeyboardTarget.IsHeldExactly(KeyboardShortcut)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsHeldExactly
        path: ''
        startLine: 9903
      summary: "\nReturns true if all and only the given keys are held (and are keys detectable by KeyboardTarget).\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsHeldExactly(KeyboardShortcut shortcut)
          VB: Public Function IsHeldExactly(shortcut As KeyboardShortcut) As Boolean
        parameters:
        - id: shortcut
          type: Global.KeyboardShortcut
        return:
          type: System.Boolean
      overload: Global.KeyboardTarget.IsHeldExactly*
    - id: Global.KeyboardTarget.IsHeldExactly(CustomKeyCode[])
      commentId: M:Global.KeyboardTarget.IsHeldExactly(CustomKeyCode[])
      language: CSharp
      name:
        CSharp: IsHeldExactly(params CustomKeyCode[])
        VB: IsHeldExactly(ParamArray CustomKeyCode())
      nameWithType:
        CSharp: KeyboardTarget.IsHeldExactly(params CustomKeyCode[])
        VB: KeyboardTarget.IsHeldExactly(ParamArray CustomKeyCode())
      qualifiedName:
        CSharp: KeyboardTarget.IsHeldExactly(params CustomKeyCode[])
        VB: KeyboardTarget.IsHeldExactly(ParamArray CustomKeyCode())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsHeldExactly
        path: ''
        startLine: 9907
      summary: "\nReturns true if all and only the given keys are held (and are keys detectable by KeyboardTarget).\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsHeldExactly(params CustomKeyCode[] keys)
          VB: Public Function IsHeldExactly(ParamArray keys As CustomKeyCode()) As Boolean
        parameters:
        - id: keys
          type: Global.CustomKeyCode[]
        return:
          type: System.Boolean
      overload: Global.KeyboardTarget.IsHeldExactly*
    - id: Global.KeyboardTarget.OneIsHeldExactly(System.Collections.Generic.IEnumerable{KeyboardShortcut})
      commentId: M:Global.KeyboardTarget.OneIsHeldExactly(System.Collections.Generic.IEnumerable{KeyboardShortcut})
      language: CSharp
      name:
        CSharp: OneIsHeldExactly(IEnumerable<KeyboardShortcut>)
        VB: OneIsHeldExactly(IEnumerable(Of KeyboardShortcut))
      nameWithType:
        CSharp: KeyboardTarget.OneIsHeldExactly(IEnumerable<KeyboardShortcut>)
        VB: KeyboardTarget.OneIsHeldExactly(IEnumerable(Of KeyboardShortcut))
      qualifiedName:
        CSharp: KeyboardTarget.OneIsHeldExactly(System.Collections.Generic.IEnumerable<KeyboardShortcut>)
        VB: KeyboardTarget.OneIsHeldExactly(System.Collections.Generic.IEnumerable(Of KeyboardShortcut))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OneIsHeldExactly
        path: ''
        startLine: 9929
      summary: "\nReturns true if all and only the given keys are held (and are keys detectable by KeyboardTarget) for one of the given keyboard shortcuts.\n"
      example: []
      syntax:
        content:
          CSharp: public bool OneIsHeldExactly(IEnumerable<KeyboardShortcut> shortcuts)
          VB: Public Function OneIsHeldExactly(shortcuts As IEnumerable(Of KeyboardShortcut)) As Boolean
        parameters:
        - id: shortcuts
          type: System.Collections.Generic.IEnumerable{KeyboardShortcut}
        return:
          type: System.Boolean
      overload: Global.KeyboardTarget.OneIsHeldExactly*
    - id: Global.KeyboardTarget.Untarget
      commentId: M:Global.KeyboardTarget.Untarget
      language: CSharp
      name:
        CSharp: Untarget()
        VB: Untarget()
      nameWithType:
        CSharp: KeyboardTarget.Untarget()
        VB: KeyboardTarget.Untarget()
      qualifiedName:
        CSharp: KeyboardTarget.Untarget()
        VB: KeyboardTarget.Untarget()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Untarget
        path: ''
        startLine: 9941
      syntax:
        content:
          CSharp: public void Untarget()
          VB: Public Sub Untarget()
      overload: Global.KeyboardTarget.Untarget*
    - id: Global.KeyboardTarget.SubscribeToOnInput(UnityAction)
      commentId: M:Global.KeyboardTarget.SubscribeToOnInput(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnInput(UnityAction)
        VB: SubscribeToOnInput(UnityAction)
      nameWithType:
        CSharp: KeyboardTarget.SubscribeToOnInput(UnityAction)
        VB: KeyboardTarget.SubscribeToOnInput(UnityAction)
      qualifiedName:
        CSharp: KeyboardTarget.SubscribeToOnInput(UnityAction)
        VB: KeyboardTarget.SubscribeToOnInput(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnInput
        path: ''
        startLine: 9954
      syntax:
        content:
          CSharp: public void SubscribeToOnInput(UnityAction call)
          VB: Public Sub SubscribeToOnInput([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.KeyboardTarget.SubscribeToOnInput*
    - id: Global.KeyboardTarget.SubscribeToOnKeyDown(UnityAction{CustomKeyCode})
      commentId: M:Global.KeyboardTarget.SubscribeToOnKeyDown(UnityAction{CustomKeyCode})
      language: CSharp
      name:
        CSharp: SubscribeToOnKeyDown(UnityAction<CustomKeyCode>)
        VB: SubscribeToOnKeyDown(UnityAction(Of CustomKeyCode))
      nameWithType:
        CSharp: KeyboardTarget.SubscribeToOnKeyDown(UnityAction<CustomKeyCode>)
        VB: KeyboardTarget.SubscribeToOnKeyDown(UnityAction(Of CustomKeyCode))
      qualifiedName:
        CSharp: KeyboardTarget.SubscribeToOnKeyDown(UnityAction<CustomKeyCode>)
        VB: KeyboardTarget.SubscribeToOnKeyDown(UnityAction(Of CustomKeyCode))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnKeyDown
        path: ''
        startLine: 9958
      syntax:
        content:
          CSharp: public void SubscribeToOnKeyDown(UnityAction<CustomKeyCode> call)
          VB: Public Sub SubscribeToOnKeyDown([call] As UnityAction(Of CustomKeyCode))
        parameters:
        - id: call
          type: Global.UnityAction{CustomKeyCode}
      overload: Global.KeyboardTarget.SubscribeToOnKeyDown*
    - id: Global.KeyboardTarget.SubscribeToOnKeyUp(UnityAction{CustomKeyCode})
      commentId: M:Global.KeyboardTarget.SubscribeToOnKeyUp(UnityAction{CustomKeyCode})
      language: CSharp
      name:
        CSharp: SubscribeToOnKeyUp(UnityAction<CustomKeyCode>)
        VB: SubscribeToOnKeyUp(UnityAction(Of CustomKeyCode))
      nameWithType:
        CSharp: KeyboardTarget.SubscribeToOnKeyUp(UnityAction<CustomKeyCode>)
        VB: KeyboardTarget.SubscribeToOnKeyUp(UnityAction(Of CustomKeyCode))
      qualifiedName:
        CSharp: KeyboardTarget.SubscribeToOnKeyUp(UnityAction<CustomKeyCode>)
        VB: KeyboardTarget.SubscribeToOnKeyUp(UnityAction(Of CustomKeyCode))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnKeyUp
        path: ''
        startLine: 9962
      syntax:
        content:
          CSharp: public void SubscribeToOnKeyUp(UnityAction<CustomKeyCode> call)
          VB: Public Sub SubscribeToOnKeyUp([call] As UnityAction(Of CustomKeyCode))
        parameters:
        - id: call
          type: Global.UnityAction{CustomKeyCode}
      overload: Global.KeyboardTarget.SubscribeToOnKeyUp*
    - id: Global.KeyboardTarget.SubscribeToUntarget(UnityAction)
      commentId: M:Global.KeyboardTarget.SubscribeToUntarget(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToUntarget(UnityAction)
        VB: SubscribeToUntarget(UnityAction)
      nameWithType:
        CSharp: KeyboardTarget.SubscribeToUntarget(UnityAction)
        VB: KeyboardTarget.SubscribeToUntarget(UnityAction)
      qualifiedName:
        CSharp: KeyboardTarget.SubscribeToUntarget(UnityAction)
        VB: KeyboardTarget.SubscribeToUntarget(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToUntarget
        path: ''
        startLine: 9967
      syntax:
        content:
          CSharp: public void SubscribeToUntarget(UnityAction call)
          VB: Public Sub SubscribeToUntarget([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.KeyboardTarget.SubscribeToUntarget*
  - id: Global.CursorState
    commentId: T:Global.CursorState
    language: CSharp
    name:
      CSharp: CursorState
      VB: CursorState
    nameWithType:
      CSharp: CursorState
      VB: CursorState
    qualifiedName:
      CSharp: CursorState
      VB: CursorState
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: CursorState
      path: ''
      startLine: 9979
    syntax:
      content:
        CSharp: public enum CursorState
        VB: Public Enum CursorState
    items:
    - id: Global.CursorState.CurrentTool
      commentId: F:Global.CursorState.CurrentTool
      language: CSharp
      name:
        CSharp: CurrentTool
        VB: CurrentTool
      nameWithType:
        CSharp: CursorState.CurrentTool
        VB: CursorState.CurrentTool
      qualifiedName:
        CSharp: CursorState.CurrentTool
        VB: CursorState.CurrentTool
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CurrentTool
        path: ''
        startLine: 9981
      syntax:
        content:
          CSharp: CurrentTool = -1
          VB: CurrentTool = -1
        return:
          type: Global.CursorState
    - id: Global.CursorState.Unspecified
      commentId: F:Global.CursorState.Unspecified
      language: CSharp
      name:
        CSharp: Unspecified
        VB: Unspecified
      nameWithType:
        CSharp: CursorState.Unspecified
        VB: CursorState.Unspecified
      qualifiedName:
        CSharp: CursorState.Unspecified
        VB: CursorState.Unspecified
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Unspecified
        path: ''
        startLine: 9982
      syntax:
        content:
          CSharp: Unspecified = 0
          VB: Unspecified = 0
        return:
          type: Global.CursorState
    - id: Global.CursorState.Normal
      commentId: F:Global.CursorState.Normal
      language: CSharp
      name:
        CSharp: Normal
        VB: Normal
      nameWithType:
        CSharp: CursorState.Normal
        VB: CursorState.Normal
      qualifiedName:
        CSharp: CursorState.Normal
        VB: CursorState.Normal
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Normal
        path: ''
        startLine: 9983
      syntax:
        content:
          CSharp: Normal = 1
          VB: Normal = 1
        return:
          type: Global.CursorState
    - id: Global.CursorState.Hover
      commentId: F:Global.CursorState.Hover
      language: CSharp
      name:
        CSharp: Hover
        VB: Hover
      nameWithType:
        CSharp: CursorState.Hover
        VB: CursorState.Hover
      qualifiedName:
        CSharp: CursorState.Hover
        VB: CursorState.Hover
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Hover
        path: ''
        startLine: 9984
      syntax:
        content:
          CSharp: Hover = 2
          VB: Hover = 2
        return:
          type: Global.CursorState
    - id: Global.CursorState.Press
      commentId: F:Global.CursorState.Press
      language: CSharp
      name:
        CSharp: Press
        VB: Press
      nameWithType:
        CSharp: CursorState.Press
        VB: CursorState.Press
      qualifiedName:
        CSharp: CursorState.Press
        VB: CursorState.Press
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Press
        path: ''
        startLine: 9985
      syntax:
        content:
          CSharp: Press = 3
          VB: Press = 3
        return:
          type: Global.CursorState
    - id: Global.CursorState.Grab
      commentId: F:Global.CursorState.Grab
      language: CSharp
      name:
        CSharp: Grab
        VB: Grab
      nameWithType:
        CSharp: CursorState.Grab
        VB: CursorState.Grab
      qualifiedName:
        CSharp: CursorState.Grab
        VB: CursorState.Grab
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Grab
        path: ''
        startLine: 9986
      syntax:
        content:
          CSharp: Grab = 12
          VB: Grab = 12
        return:
          type: Global.CursorState
    - id: Global.CursorState.Invisible
      commentId: F:Global.CursorState.Invisible
      language: CSharp
      name:
        CSharp: Invisible
        VB: Invisible
      nameWithType:
        CSharp: CursorState.Invisible
        VB: CursorState.Invisible
      qualifiedName:
        CSharp: CursorState.Invisible
        VB: CursorState.Invisible
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Invisible
        path: ''
        startLine: 9987
      syntax:
        content:
          CSharp: Invisible = 4
          VB: Invisible = 4
        return:
          type: Global.CursorState
    - id: Global.CursorState.EyeDropper
      commentId: F:Global.CursorState.EyeDropper
      language: CSharp
      name:
        CSharp: EyeDropper
        VB: EyeDropper
      nameWithType:
        CSharp: CursorState.EyeDropper
        VB: CursorState.EyeDropper
      qualifiedName:
        CSharp: CursorState.EyeDropper
        VB: CursorState.EyeDropper
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: EyeDropper
        path: ''
        startLine: 9988
      syntax:
        content:
          CSharp: EyeDropper = 5
          VB: EyeDropper = 5
        return:
          type: Global.CursorState
    - id: Global.CursorState.Text
      commentId: F:Global.CursorState.Text
      language: CSharp
      name:
        CSharp: Text
        VB: Text
      nameWithType:
        CSharp: CursorState.Text
        VB: CursorState.Text
      qualifiedName:
        CSharp: CursorState.Text
        VB: CursorState.Text
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Text
        path: ''
        startLine: 9989
      syntax:
        content:
          CSharp: Text = 6
          VB: Text = 6
        return:
          type: Global.CursorState
    - id: Global.CursorState.CrossArrows
      commentId: F:Global.CursorState.CrossArrows
      language: CSharp
      name:
        CSharp: CrossArrows
        VB: CrossArrows
      nameWithType:
        CSharp: CursorState.CrossArrows
        VB: CursorState.CrossArrows
      qualifiedName:
        CSharp: CursorState.CrossArrows
        VB: CursorState.CrossArrows
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CrossArrows
        path: ''
        startLine: 9990
      syntax:
        content:
          CSharp: CrossArrows = 7
          VB: CrossArrows = 7
        return:
          type: Global.CursorState
    - id: Global.CursorState.UpDownArrow
      commentId: F:Global.CursorState.UpDownArrow
      language: CSharp
      name:
        CSharp: UpDownArrow
        VB: UpDownArrow
      nameWithType:
        CSharp: CursorState.UpDownArrow
        VB: CursorState.UpDownArrow
      qualifiedName:
        CSharp: CursorState.UpDownArrow
        VB: CursorState.UpDownArrow
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UpDownArrow
        path: ''
        startLine: 9991
      syntax:
        content:
          CSharp: UpDownArrow = 8
          VB: UpDownArrow = 8
        return:
          type: Global.CursorState
    - id: Global.CursorState.LeftRightArrow
      commentId: F:Global.CursorState.LeftRightArrow
      language: CSharp
      name:
        CSharp: LeftRightArrow
        VB: LeftRightArrow
      nameWithType:
        CSharp: CursorState.LeftRightArrow
        VB: CursorState.LeftRightArrow
      qualifiedName:
        CSharp: CursorState.LeftRightArrow
        VB: CursorState.LeftRightArrow
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LeftRightArrow
        path: ''
        startLine: 9992
      syntax:
        content:
          CSharp: LeftRightArrow = 9
          VB: LeftRightArrow = 9
        return:
          type: Global.CursorState
    - id: Global.CursorState.MagnifyingGlass
      commentId: F:Global.CursorState.MagnifyingGlass
      language: CSharp
      name:
        CSharp: MagnifyingGlass
        VB: MagnifyingGlass
      nameWithType:
        CSharp: CursorState.MagnifyingGlass
        VB: CursorState.MagnifyingGlass
      qualifiedName:
        CSharp: CursorState.MagnifyingGlass
        VB: CursorState.MagnifyingGlass
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MagnifyingGlass
        path: ''
        startLine: 9993
      syntax:
        content:
          CSharp: MagnifyingGlass = 10
          VB: MagnifyingGlass = 10
        return:
          type: Global.CursorState
    - id: Global.CursorState.MagicWand
      commentId: F:Global.CursorState.MagicWand
      language: CSharp
      name:
        CSharp: MagicWand
        VB: MagicWand
      nameWithType:
        CSharp: CursorState.MagicWand
        VB: CursorState.MagicWand
      qualifiedName:
        CSharp: CursorState.MagicWand
        VB: CursorState.MagicWand
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MagicWand
        path: ''
        startLine: 9994
      syntax:
        content:
          CSharp: MagicWand = 11
          VB: MagicWand = 11
        return:
          type: Global.CursorState
    - id: Global.CursorState.LinearGradient
      commentId: F:Global.CursorState.LinearGradient
      language: CSharp
      name:
        CSharp: LinearGradient
        VB: LinearGradient
      nameWithType:
        CSharp: CursorState.LinearGradient
        VB: CursorState.LinearGradient
      qualifiedName:
        CSharp: CursorState.LinearGradient
        VB: CursorState.LinearGradient
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LinearGradient
        path: ''
        startLine: 9995
      syntax:
        content:
          CSharp: LinearGradient = 30
          VB: LinearGradient = 30
        return:
          type: Global.CursorState
    - id: Global.CursorState.RadialGradient
      commentId: F:Global.CursorState.RadialGradient
      language: CSharp
      name:
        CSharp: RadialGradient
        VB: RadialGradient
      nameWithType:
        CSharp: CursorState.RadialGradient
        VB: CursorState.RadialGradient
      qualifiedName:
        CSharp: CursorState.RadialGradient
        VB: CursorState.RadialGradient
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RadialGradient
        path: ''
        startLine: 9996
      syntax:
        content:
          CSharp: RadialGradient = 31
          VB: RadialGradient = 31
        return:
          type: Global.CursorState
    - id: Global.CursorState.SelectionRectangle
      commentId: F:Global.CursorState.SelectionRectangle
      language: CSharp
      name:
        CSharp: SelectionRectangle
        VB: SelectionRectangle
      nameWithType:
        CSharp: CursorState.SelectionRectangle
        VB: CursorState.SelectionRectangle
      qualifiedName:
        CSharp: CursorState.SelectionRectangle
        VB: CursorState.SelectionRectangle
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SelectionRectangle
        path: ''
        startLine: 9997
      syntax:
        content:
          CSharp: SelectionRectangle = 100
          VB: SelectionRectangle = 100
        return:
          type: Global.CursorState
    - id: Global.CursorState.SelectionEllipse
      commentId: F:Global.CursorState.SelectionEllipse
      language: CSharp
      name:
        CSharp: SelectionEllipse
        VB: SelectionEllipse
      nameWithType:
        CSharp: CursorState.SelectionEllipse
        VB: CursorState.SelectionEllipse
      qualifiedName:
        CSharp: CursorState.SelectionEllipse
        VB: CursorState.SelectionEllipse
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SelectionEllipse
        path: ''
        startLine: 9998
      syntax:
        content:
          CSharp: SelectionEllipse = 101
          VB: SelectionEllipse = 101
        return:
          type: Global.CursorState
  - id: Global.MouseButton
    commentId: T:Global.MouseButton
    language: CSharp
    name:
      CSharp: MouseButton
      VB: MouseButton
    nameWithType:
      CSharp: MouseButton
      VB: MouseButton
    qualifiedName:
      CSharp: MouseButton
      VB: MouseButton
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: MouseButton
      path: ''
      startLine: 10001
    syntax:
      content:
        CSharp: public enum MouseButton
        VB: Public Enum MouseButton
    items:
    - id: Global.MouseButton.Left
      commentId: F:Global.MouseButton.Left
      language: CSharp
      name:
        CSharp: Left
        VB: Left
      nameWithType:
        CSharp: MouseButton.Left
        VB: MouseButton.Left
      qualifiedName:
        CSharp: MouseButton.Left
        VB: MouseButton.Left
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Left
        path: ''
        startLine: 10003
      syntax:
        content:
          CSharp: Left = 0
          VB: Left = 0
        return:
          type: Global.MouseButton
    - id: Global.MouseButton.Right
      commentId: F:Global.MouseButton.Right
      language: CSharp
      name:
        CSharp: Right
        VB: Right
      nameWithType:
        CSharp: MouseButton.Right
        VB: MouseButton.Right
      qualifiedName:
        CSharp: MouseButton.Right
        VB: MouseButton.Right
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Right
        path: ''
        startLine: 10004
      syntax:
        content:
          CSharp: Right = 1
          VB: Right = 1
        return:
          type: Global.MouseButton
    - id: Global.MouseButton.Middle
      commentId: F:Global.MouseButton.Middle
      language: CSharp
      name:
        CSharp: Middle
        VB: Middle
      nameWithType:
        CSharp: MouseButton.Middle
        VB: MouseButton.Middle
      qualifiedName:
        CSharp: MouseButton.Middle
        VB: MouseButton.Middle
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Middle
        path: ''
        startLine: 10005
      syntax:
        content:
          CSharp: Middle = 2
          VB: Middle = 2
        return:
          type: Global.MouseButton
  - id: Global.Mouse
    commentId: T:Global.Mouse
    language: CSharp
    name:
      CSharp: Mouse
      VB: Mouse
    nameWithType:
      CSharp: Mouse
      VB: Mouse
    qualifiedName:
      CSharp: Mouse
      VB: Mouse
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Mouse
      path: ''
      startLine: 10008
    syntax:
      content:
        CSharp: 'public class Mouse : MonoBehaviour'
        VB: Public Class Mouse Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.Mouse.scrollCursorDisplayTime
      commentId: P:Global.Mouse.scrollCursorDisplayTime
      language: CSharp
      name:
        CSharp: scrollCursorDisplayTime
        VB: scrollCursorDisplayTime
      nameWithType:
        CSharp: Mouse.scrollCursorDisplayTime
        VB: Mouse.scrollCursorDisplayTime
      qualifiedName:
        CSharp: Mouse.scrollCursorDisplayTime
        VB: Mouse.scrollCursorDisplayTime
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: scrollCursorDisplayTime
        path: ''
        startLine: 10014
      syntax:
        content:
          CSharp: public float scrollCursorDisplayTime { get; }
          VB: Public ReadOnly Property scrollCursorDisplayTime As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.Mouse.scrollCursorDisplayTime*
    - id: Global.Mouse.leftClick
      commentId: P:Global.Mouse.leftClick
      language: CSharp
      name:
        CSharp: leftClick
        VB: leftClick
      nameWithType:
        CSharp: Mouse.leftClick
        VB: Mouse.leftClick
      qualifiedName:
        CSharp: Mouse.leftClick
        VB: Mouse.leftClick
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: leftClick
        path: ''
        startLine: 10120
      syntax:
        content:
          CSharp: public bool leftClick { get; }
          VB: Public ReadOnly Property leftClick As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Mouse.leftClick*
    - id: Global.Mouse.leftUnclick
      commentId: P:Global.Mouse.leftUnclick
      language: CSharp
      name:
        CSharp: leftUnclick
        VB: leftUnclick
      nameWithType:
        CSharp: Mouse.leftUnclick
        VB: Mouse.leftUnclick
      qualifiedName:
        CSharp: Mouse.leftUnclick
        VB: Mouse.leftUnclick
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: leftUnclick
        path: ''
        startLine: 10127
      syntax:
        content:
          CSharp: public bool leftUnclick { get; }
          VB: Public ReadOnly Property leftUnclick As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Mouse.leftUnclick*
    - id: Global.Mouse.leftHold
      commentId: P:Global.Mouse.leftHold
      language: CSharp
      name:
        CSharp: leftHold
        VB: leftHold
      nameWithType:
        CSharp: Mouse.leftHold
        VB: Mouse.leftHold
      qualifiedName:
        CSharp: Mouse.leftHold
        VB: Mouse.leftHold
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: leftHold
        path: ''
        startLine: 10134
      syntax:
        content:
          CSharp: public bool leftHold { get; }
          VB: Public ReadOnly Property leftHold As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Mouse.leftHold*
    - id: Global.Mouse.rightClick
      commentId: P:Global.Mouse.rightClick
      language: CSharp
      name:
        CSharp: rightClick
        VB: rightClick
      nameWithType:
        CSharp: Mouse.rightClick
        VB: Mouse.rightClick
      qualifiedName:
        CSharp: Mouse.rightClick
        VB: Mouse.rightClick
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: rightClick
        path: ''
        startLine: 10142
      syntax:
        content:
          CSharp: public bool rightClick { get; }
          VB: Public ReadOnly Property rightClick As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Mouse.rightClick*
    - id: Global.Mouse.rightUnclick
      commentId: P:Global.Mouse.rightUnclick
      language: CSharp
      name:
        CSharp: rightUnclick
        VB: rightUnclick
      nameWithType:
        CSharp: Mouse.rightUnclick
        VB: Mouse.rightUnclick
      qualifiedName:
        CSharp: Mouse.rightUnclick
        VB: Mouse.rightUnclick
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: rightUnclick
        path: ''
        startLine: 10149
      syntax:
        content:
          CSharp: public bool rightUnclick { get; }
          VB: Public ReadOnly Property rightUnclick As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Mouse.rightUnclick*
    - id: Global.Mouse.rightHold
      commentId: P:Global.Mouse.rightHold
      language: CSharp
      name:
        CSharp: rightHold
        VB: rightHold
      nameWithType:
        CSharp: Mouse.rightHold
        VB: Mouse.rightHold
      qualifiedName:
        CSharp: Mouse.rightHold
        VB: Mouse.rightHold
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: rightHold
        path: ''
        startLine: 10156
      syntax:
        content:
          CSharp: public bool rightHold { get; }
          VB: Public ReadOnly Property rightHold As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Mouse.rightHold*
    - id: Global.Mouse.middleClick
      commentId: P:Global.Mouse.middleClick
      language: CSharp
      name:
        CSharp: middleClick
        VB: middleClick
      nameWithType:
        CSharp: Mouse.middleClick
        VB: Mouse.middleClick
      qualifiedName:
        CSharp: Mouse.middleClick
        VB: Mouse.middleClick
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: middleClick
        path: ''
        startLine: 10164
      syntax:
        content:
          CSharp: public bool middleClick { get; }
          VB: Public ReadOnly Property middleClick As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Mouse.middleClick*
    - id: Global.Mouse.middleUnclick
      commentId: P:Global.Mouse.middleUnclick
      language: CSharp
      name:
        CSharp: middleUnclick
        VB: middleUnclick
      nameWithType:
        CSharp: Mouse.middleUnclick
        VB: Mouse.middleUnclick
      qualifiedName:
        CSharp: Mouse.middleUnclick
        VB: Mouse.middleUnclick
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: middleUnclick
        path: ''
        startLine: 10171
      syntax:
        content:
          CSharp: public bool middleUnclick { get; }
          VB: Public ReadOnly Property middleUnclick As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Mouse.middleUnclick*
    - id: Global.Mouse.middleHold
      commentId: P:Global.Mouse.middleHold
      language: CSharp
      name:
        CSharp: middleHold
        VB: middleHold
      nameWithType:
        CSharp: Mouse.middleHold
        VB: Mouse.middleHold
      qualifiedName:
        CSharp: Mouse.middleHold
        VB: Mouse.middleHold
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: middleHold
        path: ''
        startLine: 10178
      syntax:
        content:
          CSharp: public bool middleHold { get; }
          VB: Public ReadOnly Property middleHold As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Mouse.middleHold*
    - id: Global.Mouse.click
      commentId: P:Global.Mouse.click
      language: CSharp
      name:
        CSharp: click
        VB: click
      nameWithType:
        CSharp: Mouse.click
        VB: Mouse.click
      qualifiedName:
        CSharp: Mouse.click
        VB: Mouse.click
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: click
        path: ''
        startLine: 10186
      syntax:
        content:
          CSharp: public bool click { get; }
          VB: Public ReadOnly Property click As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Mouse.click*
    - id: Global.Mouse.unclick
      commentId: P:Global.Mouse.unclick
      language: CSharp
      name:
        CSharp: unclick
        VB: unclick
      nameWithType:
        CSharp: Mouse.unclick
        VB: Mouse.unclick
      qualifiedName:
        CSharp: Mouse.unclick
        VB: Mouse.unclick
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: unclick
        path: ''
        startLine: 10193
      syntax:
        content:
          CSharp: public bool unclick { get; }
          VB: Public ReadOnly Property unclick As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Mouse.unclick*
    - id: Global.Mouse.held
      commentId: P:Global.Mouse.held
      language: CSharp
      name:
        CSharp: held
        VB: held
      nameWithType:
        CSharp: Mouse.held
        VB: Mouse.held
      qualifiedName:
        CSharp: Mouse.held
        VB: Mouse.held
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: held
        path: ''
        startLine: 10200
      syntax:
        content:
          CSharp: public bool held { get; }
          VB: Public ReadOnly Property held As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Mouse.held*
    - id: Global.Mouse.nothingClick
      commentId: P:Global.Mouse.nothingClick
      language: CSharp
      name:
        CSharp: nothingClick
        VB: nothingClick
      nameWithType:
        CSharp: Mouse.nothingClick
        VB: Mouse.nothingClick
      qualifiedName:
        CSharp: Mouse.nothingClick
        VB: Mouse.nothingClick
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: nothingClick
        path: ''
        startLine: 10208
      syntax:
        content:
          CSharp: public bool nothingClick { get; }
          VB: Public ReadOnly Property nothingClick As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Mouse.nothingClick*
    - id: Global.Mouse.nothingHeld
      commentId: P:Global.Mouse.nothingHeld
      language: CSharp
      name:
        CSharp: nothingHeld
        VB: nothingHeld
      nameWithType:
        CSharp: Mouse.nothingHeld
        VB: Mouse.nothingHeld
      qualifiedName:
        CSharp: Mouse.nothingHeld
        VB: Mouse.nothingHeld
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: nothingHeld
        path: ''
        startLine: 10215
      syntax:
        content:
          CSharp: public bool nothingHeld { get; }
          VB: Public ReadOnly Property nothingHeld As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Mouse.nothingHeld*
    - id: Global.Mouse.numButtonsHeld
      commentId: P:Global.Mouse.numButtonsHeld
      language: CSharp
      name:
        CSharp: numButtonsHeld
        VB: numButtonsHeld
      nameWithType:
        CSharp: Mouse.numButtonsHeld
        VB: Mouse.numButtonsHeld
      qualifiedName:
        CSharp: Mouse.numButtonsHeld
        VB: Mouse.numButtonsHeld
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: numButtonsHeld
        path: ''
        startLine: 10223
      syntax:
        content:
          CSharp: public int numButtonsHeld { get; }
          VB: Public ReadOnly Property numButtonsHeld As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.Mouse.numButtonsHeld*
    - id: Global.Mouse.worldPos
      commentId: P:Global.Mouse.worldPos
      language: CSharp
      name:
        CSharp: worldPos
        VB: worldPos
      nameWithType:
        CSharp: Mouse.worldPos
        VB: Mouse.worldPos
      qualifiedName:
        CSharp: Mouse.worldPos
        VB: Mouse.worldPos
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: worldPos
        path: ''
        startLine: 10244
      syntax:
        content:
          CSharp: public Vector2 worldPos { get; }
          VB: Public ReadOnly Property worldPos As Vector2
        parameters: []
        return:
          type: Global.Vector2
      overload: Global.Mouse.worldPos*
    - id: Global.Mouse.scrollDelta
      commentId: P:Global.Mouse.scrollDelta
      language: CSharp
      name:
        CSharp: scrollDelta
        VB: scrollDelta
      nameWithType:
        CSharp: Mouse.scrollDelta
        VB: Mouse.scrollDelta
      qualifiedName:
        CSharp: Mouse.scrollDelta
        VB: Mouse.scrollDelta
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: scrollDelta
        path: ''
        startLine: 10252
      syntax:
        content:
          CSharp: public float scrollDelta { get; }
          VB: Public ReadOnly Property scrollDelta As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.Mouse.scrollDelta*
    - id: Global.Mouse.hoverTarget
      commentId: P:Global.Mouse.hoverTarget
      language: CSharp
      name:
        CSharp: hoverTarget
        VB: hoverTarget
      nameWithType:
        CSharp: Mouse.hoverTarget
        VB: Mouse.hoverTarget
      qualifiedName:
        CSharp: Mouse.hoverTarget
        VB: Mouse.hoverTarget
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hoverTarget
        path: ''
        startLine: 10260
      syntax:
        content:
          CSharp: public InputTarget hoverTarget { get; }
          VB: Public Property hoverTarget As InputTarget
        parameters: []
        return:
          type: Global.InputTarget
      overload: Global.Mouse.hoverTarget*
    - id: Global.Mouse.hasHoverTrigger
      commentId: P:Global.Mouse.hasHoverTrigger
      language: CSharp
      name:
        CSharp: hasHoverTrigger
        VB: hasHoverTrigger
      nameWithType:
        CSharp: Mouse.hasHoverTrigger
        VB: Mouse.hasHoverTrigger
      qualifiedName:
        CSharp: Mouse.hasHoverTrigger
        VB: Mouse.hasHoverTrigger
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hasHoverTrigger
        path: ''
        startLine: 10264
      syntax:
        content:
          CSharp: public bool hasHoverTrigger { get; }
          VB: Public ReadOnly Property hasHoverTrigger As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Mouse.hasHoverTrigger*
    - id: Global.Mouse.canInteract
      commentId: F:Global.Mouse.canInteract
      language: CSharp
      name:
        CSharp: canInteract
        VB: canInteract
      nameWithType:
        CSharp: Mouse.canInteract
        VB: Mouse.canInteract
      qualifiedName:
        CSharp: Mouse.canInteract
        VB: Mouse.canInteract
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: canInteract
        path: ''
        startLine: 10273
      syntax:
        content:
          CSharp: public bool canInteract
          VB: Public canInteract As Boolean
        return:
          type: System.Boolean
    - id: Global.Mouse.lockAllUIInteractions
      commentId: F:Global.Mouse.lockAllUIInteractions
      language: CSharp
      name:
        CSharp: lockAllUIInteractions
        VB: lockAllUIInteractions
      nameWithType:
        CSharp: Mouse.lockAllUIInteractions
        VB: Mouse.lockAllUIInteractions
      qualifiedName:
        CSharp: Mouse.lockAllUIInteractions
        VB: Mouse.lockAllUIInteractions
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: lockAllUIInteractions
        path: ''
        startLine: 10275
      syntax:
        content:
          CSharp: public bool lockAllUIInteractions
          VB: Public lockAllUIInteractions As Boolean
        return:
          type: System.Boolean
    - id: Global.Mouse.cursorState
      commentId: P:Global.Mouse.cursorState
      language: CSharp
      name:
        CSharp: cursorState
        VB: cursorState
      nameWithType:
        CSharp: Mouse.cursorState
        VB: Mouse.cursorState
      qualifiedName:
        CSharp: Mouse.cursorState
        VB: Mouse.cursorState
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: cursorState
        path: ''
        startLine: 10282
      syntax:
        content:
          CSharp: public CursorState cursorState { get; }
          VB: Public Property cursorState As CursorState
        parameters: []
        return:
          type: Global.CursorState
      overload: Global.Mouse.cursorState*
    - id: Global.Mouse.SetCursorState(CursorState)
      commentId: M:Global.Mouse.SetCursorState(CursorState)
      language: CSharp
      name:
        CSharp: SetCursorState(CursorState)
        VB: SetCursorState(CursorState)
      nameWithType:
        CSharp: Mouse.SetCursorState(CursorState)
        VB: Mouse.SetCursorState(CursorState)
      qualifiedName:
        CSharp: Mouse.SetCursorState(CursorState)
        VB: Mouse.SetCursorState(CursorState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetCursorState
        path: ''
        startLine: 10499
      syntax:
        content:
          CSharp: public void SetCursorState(CursorState cursorState)
          VB: Public Sub SetCursorState(cursorState As CursorState)
        parameters:
        - id: cursorState
          type: Global.CursorState
      overload: Global.Mouse.SetCursorState*
    - id: Global.Mouse.SetCursorSprite(CursorState)
      commentId: M:Global.Mouse.SetCursorSprite(CursorState)
      language: CSharp
      name:
        CSharp: SetCursorSprite(CursorState)
        VB: SetCursorSprite(CursorState)
      nameWithType:
        CSharp: Mouse.SetCursorSprite(CursorState)
        VB: Mouse.SetCursorSprite(CursorState)
      qualifiedName:
        CSharp: Mouse.SetCursorSprite(CursorState)
        VB: Mouse.SetCursorSprite(CursorState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetCursorSprite
        path: ''
        startLine: 10504
      syntax:
        content:
          CSharp: public void SetCursorSprite(CursorState cursorState)
          VB: Public Sub SetCursorSprite(cursorState As CursorState)
        parameters:
        - id: cursorState
          type: Global.CursorState
      overload: Global.Mouse.SetCursorSprite*
    - id: Global.Mouse.IsClicked(MouseButton)
      commentId: M:Global.Mouse.IsClicked(MouseButton)
      language: CSharp
      name:
        CSharp: IsClicked(MouseButton)
        VB: IsClicked(MouseButton)
      nameWithType:
        CSharp: Mouse.IsClicked(MouseButton)
        VB: Mouse.IsClicked(MouseButton)
      qualifiedName:
        CSharp: Mouse.IsClicked(MouseButton)
        VB: Mouse.IsClicked(MouseButton)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsClicked
        path: ''
        startLine: 10635
      syntax:
        content:
          CSharp: public bool IsClicked(MouseButton mouseButton)
          VB: Public Function IsClicked(mouseButton As MouseButton) As Boolean
        parameters:
        - id: mouseButton
          type: Global.MouseButton
        return:
          type: System.Boolean
      overload: Global.Mouse.IsClicked*
    - id: Global.Mouse.IsUnclicked(MouseButton)
      commentId: M:Global.Mouse.IsUnclicked(MouseButton)
      language: CSharp
      name:
        CSharp: IsUnclicked(MouseButton)
        VB: IsUnclicked(MouseButton)
      nameWithType:
        CSharp: Mouse.IsUnclicked(MouseButton)
        VB: Mouse.IsUnclicked(MouseButton)
      qualifiedName:
        CSharp: Mouse.IsUnclicked(MouseButton)
        VB: Mouse.IsUnclicked(MouseButton)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsUnclicked
        path: ''
        startLine: 10645
      syntax:
        content:
          CSharp: public bool IsUnclicked(MouseButton mouseButton)
          VB: Public Function IsUnclicked(mouseButton As MouseButton) As Boolean
        parameters:
        - id: mouseButton
          type: Global.MouseButton
        return:
          type: System.Boolean
      overload: Global.Mouse.IsUnclicked*
    - id: Global.Mouse.IsHeld(MouseButton)
      commentId: M:Global.Mouse.IsHeld(MouseButton)
      language: CSharp
      name:
        CSharp: IsHeld(MouseButton)
        VB: IsHeld(MouseButton)
      nameWithType:
        CSharp: Mouse.IsHeld(MouseButton)
        VB: Mouse.IsHeld(MouseButton)
      qualifiedName:
        CSharp: Mouse.IsHeld(MouseButton)
        VB: Mouse.IsHeld(MouseButton)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsHeld
        path: ''
        startLine: 10655
      syntax:
        content:
          CSharp: public bool IsHeld(MouseButton mouseButton)
          VB: Public Function IsHeld(mouseButton As MouseButton) As Boolean
        parameters:
        - id: mouseButton
          type: Global.MouseButton
        return:
          type: System.Boolean
      overload: Global.Mouse.IsHeld*
    - id: Global.Mouse.SubscribeToScroll(UnityAction)
      commentId: M:Global.Mouse.SubscribeToScroll(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToScroll(UnityAction)
        VB: SubscribeToScroll(UnityAction)
      nameWithType:
        CSharp: Mouse.SubscribeToScroll(UnityAction)
        VB: Mouse.SubscribeToScroll(UnityAction)
      qualifiedName:
        CSharp: Mouse.SubscribeToScroll(UnityAction)
        VB: Mouse.SubscribeToScroll(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToScroll
        path: ''
        startLine: 10666
      syntax:
        content:
          CSharp: public void SubscribeToScroll(UnityAction call)
          VB: Public Sub SubscribeToScroll([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.Mouse.SubscribeToScroll*
    - id: Global.Mouse.SubscribeToClick(UnityAction)
      commentId: M:Global.Mouse.SubscribeToClick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToClick(UnityAction)
        VB: SubscribeToClick(UnityAction)
      nameWithType:
        CSharp: Mouse.SubscribeToClick(UnityAction)
        VB: Mouse.SubscribeToClick(UnityAction)
      qualifiedName:
        CSharp: Mouse.SubscribeToClick(UnityAction)
        VB: Mouse.SubscribeToClick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToClick
        path: ''
        startLine: 10671
      syntax:
        content:
          CSharp: public void SubscribeToClick(UnityAction call)
          VB: Public Sub SubscribeToClick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.Mouse.SubscribeToClick*
    - id: Global.Mouse.SubscribeToLeftClick(UnityAction)
      commentId: M:Global.Mouse.SubscribeToLeftClick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToLeftClick(UnityAction)
        VB: SubscribeToLeftClick(UnityAction)
      nameWithType:
        CSharp: Mouse.SubscribeToLeftClick(UnityAction)
        VB: Mouse.SubscribeToLeftClick(UnityAction)
      qualifiedName:
        CSharp: Mouse.SubscribeToLeftClick(UnityAction)
        VB: Mouse.SubscribeToLeftClick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToLeftClick
        path: ''
        startLine: 10675
      syntax:
        content:
          CSharp: public void SubscribeToLeftClick(UnityAction call)
          VB: Public Sub SubscribeToLeftClick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.Mouse.SubscribeToLeftClick*
    - id: Global.Mouse.SubscribeToRightClick(UnityAction)
      commentId: M:Global.Mouse.SubscribeToRightClick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToRightClick(UnityAction)
        VB: SubscribeToRightClick(UnityAction)
      nameWithType:
        CSharp: Mouse.SubscribeToRightClick(UnityAction)
        VB: Mouse.SubscribeToRightClick(UnityAction)
      qualifiedName:
        CSharp: Mouse.SubscribeToRightClick(UnityAction)
        VB: Mouse.SubscribeToRightClick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToRightClick
        path: ''
        startLine: 10679
      syntax:
        content:
          CSharp: public void SubscribeToRightClick(UnityAction call)
          VB: Public Sub SubscribeToRightClick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.Mouse.SubscribeToRightClick*
    - id: Global.Mouse.SubscribeToMiddleClick(UnityAction)
      commentId: M:Global.Mouse.SubscribeToMiddleClick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToMiddleClick(UnityAction)
        VB: SubscribeToMiddleClick(UnityAction)
      nameWithType:
        CSharp: Mouse.SubscribeToMiddleClick(UnityAction)
        VB: Mouse.SubscribeToMiddleClick(UnityAction)
      qualifiedName:
        CSharp: Mouse.SubscribeToMiddleClick(UnityAction)
        VB: Mouse.SubscribeToMiddleClick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToMiddleClick
        path: ''
        startLine: 10683
      syntax:
        content:
          CSharp: public void SubscribeToMiddleClick(UnityAction call)
          VB: Public Sub SubscribeToMiddleClick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.Mouse.SubscribeToMiddleClick*
    - id: Global.Mouse.SubscribeToUnclick(UnityAction)
      commentId: M:Global.Mouse.SubscribeToUnclick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToUnclick(UnityAction)
        VB: SubscribeToUnclick(UnityAction)
      nameWithType:
        CSharp: Mouse.SubscribeToUnclick(UnityAction)
        VB: Mouse.SubscribeToUnclick(UnityAction)
      qualifiedName:
        CSharp: Mouse.SubscribeToUnclick(UnityAction)
        VB: Mouse.SubscribeToUnclick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToUnclick
        path: ''
        startLine: 10687
      syntax:
        content:
          CSharp: public void SubscribeToUnclick(UnityAction call)
          VB: Public Sub SubscribeToUnclick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.Mouse.SubscribeToUnclick*
    - id: Global.Mouse.SubscribeToLeftUnclick(UnityAction)
      commentId: M:Global.Mouse.SubscribeToLeftUnclick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToLeftUnclick(UnityAction)
        VB: SubscribeToLeftUnclick(UnityAction)
      nameWithType:
        CSharp: Mouse.SubscribeToLeftUnclick(UnityAction)
        VB: Mouse.SubscribeToLeftUnclick(UnityAction)
      qualifiedName:
        CSharp: Mouse.SubscribeToLeftUnclick(UnityAction)
        VB: Mouse.SubscribeToLeftUnclick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToLeftUnclick
        path: ''
        startLine: 10691
      syntax:
        content:
          CSharp: public void SubscribeToLeftUnclick(UnityAction call)
          VB: Public Sub SubscribeToLeftUnclick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.Mouse.SubscribeToLeftUnclick*
    - id: Global.Mouse.SubscribeToRightUnclick(UnityAction)
      commentId: M:Global.Mouse.SubscribeToRightUnclick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToRightUnclick(UnityAction)
        VB: SubscribeToRightUnclick(UnityAction)
      nameWithType:
        CSharp: Mouse.SubscribeToRightUnclick(UnityAction)
        VB: Mouse.SubscribeToRightUnclick(UnityAction)
      qualifiedName:
        CSharp: Mouse.SubscribeToRightUnclick(UnityAction)
        VB: Mouse.SubscribeToRightUnclick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToRightUnclick
        path: ''
        startLine: 10695
      syntax:
        content:
          CSharp: public void SubscribeToRightUnclick(UnityAction call)
          VB: Public Sub SubscribeToRightUnclick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.Mouse.SubscribeToRightUnclick*
    - id: Global.Mouse.SubscribeToMiddleUnclick(UnityAction)
      commentId: M:Global.Mouse.SubscribeToMiddleUnclick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToMiddleUnclick(UnityAction)
        VB: SubscribeToMiddleUnclick(UnityAction)
      nameWithType:
        CSharp: Mouse.SubscribeToMiddleUnclick(UnityAction)
        VB: Mouse.SubscribeToMiddleUnclick(UnityAction)
      qualifiedName:
        CSharp: Mouse.SubscribeToMiddleUnclick(UnityAction)
        VB: Mouse.SubscribeToMiddleUnclick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToMiddleUnclick
        path: ''
        startLine: 10699
      syntax:
        content:
          CSharp: public void SubscribeToMiddleUnclick(UnityAction call)
          VB: Public Sub SubscribeToMiddleUnclick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.Mouse.SubscribeToMiddleUnclick*
  - id: Global.MouseTargetState
    commentId: T:Global.MouseTargetState
    language: CSharp
    name:
      CSharp: MouseTargetState
      VB: MouseTargetState
    nameWithType:
      CSharp: MouseTargetState
      VB: MouseTargetState
    qualifiedName:
      CSharp: MouseTargetState
      VB: MouseTargetState
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: MouseTargetState
      path: ''
      startLine: 10710
    syntax:
      content:
        CSharp: public enum MouseTargetState
        VB: Public Enum MouseTargetState
    items:
    - id: Global.MouseTargetState.Idle
      commentId: F:Global.MouseTargetState.Idle
      language: CSharp
      name:
        CSharp: Idle
        VB: Idle
      nameWithType:
        CSharp: MouseTargetState.Idle
        VB: MouseTargetState.Idle
      qualifiedName:
        CSharp: MouseTargetState.Idle
        VB: MouseTargetState.Idle
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Idle
        path: ''
        startLine: 10712
      syntax:
        content:
          CSharp: Idle = 0
          VB: Idle = 0
        return:
          type: Global.MouseTargetState
    - id: Global.MouseTargetState.Hover
      commentId: F:Global.MouseTargetState.Hover
      language: CSharp
      name:
        CSharp: Hover
        VB: Hover
      nameWithType:
        CSharp: MouseTargetState.Hover
        VB: MouseTargetState.Hover
      qualifiedName:
        CSharp: MouseTargetState.Hover
        VB: MouseTargetState.Hover
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Hover
        path: ''
        startLine: 10713
      syntax:
        content:
          CSharp: Hover = 1
          VB: Hover = 1
        return:
          type: Global.MouseTargetState
    - id: Global.MouseTargetState.Pressed
      commentId: F:Global.MouseTargetState.Pressed
      language: CSharp
      name:
        CSharp: Pressed
        VB: Pressed
      nameWithType:
        CSharp: MouseTargetState.Pressed
        VB: MouseTargetState.Pressed
      qualifiedName:
        CSharp: MouseTargetState.Pressed
        VB: MouseTargetState.Pressed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Pressed
        path: ''
        startLine: 10714
      syntax:
        content:
          CSharp: Pressed = 2
          VB: Pressed = 2
        return:
          type: Global.MouseTargetState
  - id: Global.MouseTargetDeselectMode
    commentId: T:Global.MouseTargetDeselectMode
    language: CSharp
    name:
      CSharp: MouseTargetDeselectMode
      VB: MouseTargetDeselectMode
    nameWithType:
      CSharp: MouseTargetDeselectMode
      VB: MouseTargetDeselectMode
    qualifiedName:
      CSharp: MouseTargetDeselectMode
      VB: MouseTargetDeselectMode
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: MouseTargetDeselectMode
      path: ''
      startLine: 10717
    syntax:
      content:
        CSharp: public enum MouseTargetDeselectMode
        VB: Public Enum MouseTargetDeselectMode
    items:
    - id: Global.MouseTargetDeselectMode.Unclick
      commentId: F:Global.MouseTargetDeselectMode.Unclick
      language: CSharp
      name:
        CSharp: Unclick
        VB: Unclick
      nameWithType:
        CSharp: MouseTargetDeselectMode.Unclick
        VB: MouseTargetDeselectMode.Unclick
      qualifiedName:
        CSharp: MouseTargetDeselectMode.Unclick
        VB: MouseTargetDeselectMode.Unclick
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Unclick
        path: ''
        startLine: 10719
      syntax:
        content:
          CSharp: Unclick = 0
          VB: Unclick = 0
        return:
          type: Global.MouseTargetDeselectMode
    - id: Global.MouseTargetDeselectMode.ClickAgain
      commentId: F:Global.MouseTargetDeselectMode.ClickAgain
      language: CSharp
      name:
        CSharp: ClickAgain
        VB: ClickAgain
      nameWithType:
        CSharp: MouseTargetDeselectMode.ClickAgain
        VB: MouseTargetDeselectMode.ClickAgain
      qualifiedName:
        CSharp: MouseTargetDeselectMode.ClickAgain
        VB: MouseTargetDeselectMode.ClickAgain
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ClickAgain
        path: ''
        startLine: 10720
      syntax:
        content:
          CSharp: ClickAgain = 1
          VB: ClickAgain = 1
        return:
          type: Global.MouseTargetDeselectMode
    - id: Global.MouseTargetDeselectMode.Manual
      commentId: F:Global.MouseTargetDeselectMode.Manual
      language: CSharp
      name:
        CSharp: Manual
        VB: Manual
      nameWithType:
        CSharp: MouseTargetDeselectMode.Manual
        VB: MouseTargetDeselectMode.Manual
      qualifiedName:
        CSharp: MouseTargetDeselectMode.Manual
        VB: MouseTargetDeselectMode.Manual
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Manual
        path: ''
        startLine: 10721
      syntax:
        content:
          CSharp: Manual = 100
          VB: Manual = 100
        return:
          type: Global.MouseTargetDeselectMode
  - id: Global.MouseTarget
    commentId: T:Global.MouseTarget
    language: CSharp
    name:
      CSharp: MouseTarget
      VB: MouseTarget
    nameWithType:
      CSharp: MouseTarget
      VB: MouseTarget
    qualifiedName:
      CSharp: MouseTarget
      VB: MouseTarget
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: MouseTarget
      path: ''
      startLine: 10724
    syntax:
      content:
        CSharp: public class MouseTarget
        VB: Public Class MouseTarget
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.MouseTarget.isHoverTrigger
      commentId: F:Global.MouseTarget.isHoverTrigger
      language: CSharp
      name:
        CSharp: isHoverTrigger
        VB: isHoverTrigger
      nameWithType:
        CSharp: MouseTarget.isHoverTrigger
        VB: MouseTarget.isHoverTrigger
      qualifiedName:
        CSharp: MouseTarget.isHoverTrigger
        VB: MouseTarget.isHoverTrigger
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: isHoverTrigger
        path: ''
        startLine: 10726
      syntax:
        content:
          CSharp: public bool isHoverTrigger
          VB: Public isHoverTrigger As Boolean
        return:
          type: System.Boolean
    - id: Global.MouseTarget.allowLeftClick
      commentId: F:Global.MouseTarget.allowLeftClick
      language: CSharp
      name:
        CSharp: allowLeftClick
        VB: allowLeftClick
      nameWithType:
        CSharp: MouseTarget.allowLeftClick
        VB: MouseTarget.allowLeftClick
      qualifiedName:
        CSharp: MouseTarget.allowLeftClick
        VB: MouseTarget.allowLeftClick
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: allowLeftClick
        path: ''
        startLine: 10727
      syntax:
        content:
          CSharp: public bool allowLeftClick
          VB: Public allowLeftClick As Boolean
        return:
          type: System.Boolean
    - id: Global.MouseTarget.allowRightClick
      commentId: F:Global.MouseTarget.allowRightClick
      language: CSharp
      name:
        CSharp: allowRightClick
        VB: allowRightClick
      nameWithType:
        CSharp: MouseTarget.allowRightClick
        VB: MouseTarget.allowRightClick
      qualifiedName:
        CSharp: MouseTarget.allowRightClick
        VB: MouseTarget.allowRightClick
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: allowRightClick
        path: ''
        startLine: 10728
      syntax:
        content:
          CSharp: public bool allowRightClick
          VB: Public allowRightClick As Boolean
        return:
          type: System.Boolean
    - id: Global.MouseTarget.allowMiddleClick
      commentId: F:Global.MouseTarget.allowMiddleClick
      language: CSharp
      name:
        CSharp: allowMiddleClick
        VB: allowMiddleClick
      nameWithType:
        CSharp: MouseTarget.allowMiddleClick
        VB: MouseTarget.allowMiddleClick
      qualifiedName:
        CSharp: MouseTarget.allowMiddleClick
        VB: MouseTarget.allowMiddleClick
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: allowMiddleClick
        path: ''
        startLine: 10729
      syntax:
        content:
          CSharp: public bool allowMiddleClick
          VB: Public allowMiddleClick As Boolean
        return:
          type: System.Boolean
    - id: Global.MouseTarget.allowScroll
      commentId: F:Global.MouseTarget.allowScroll
      language: CSharp
      name:
        CSharp: allowScroll
        VB: allowScroll
      nameWithType:
        CSharp: MouseTarget.allowScroll
        VB: MouseTarget.allowScroll
      qualifiedName:
        CSharp: MouseTarget.allowScroll
        VB: MouseTarget.allowScroll
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: allowScroll
        path: ''
        startLine: 10730
      syntax:
        content:
          CSharp: public bool allowScroll
          VB: Public allowScroll As Boolean
        return:
          type: System.Boolean
    - id: Global.MouseTarget.cursorHover
      commentId: F:Global.MouseTarget.cursorHover
      language: CSharp
      name:
        CSharp: cursorHover
        VB: cursorHover
      nameWithType:
        CSharp: MouseTarget.cursorHover
        VB: MouseTarget.cursorHover
      qualifiedName:
        CSharp: MouseTarget.cursorHover
        VB: MouseTarget.cursorHover
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: cursorHover
        path: ''
        startLine: 10732
      syntax:
        content:
          CSharp: public CursorState cursorHover
          VB: Public cursorHover As CursorState
        return:
          type: Global.CursorState
    - id: Global.MouseTarget.cursorPress
      commentId: F:Global.MouseTarget.cursorPress
      language: CSharp
      name:
        CSharp: cursorPress
        VB: cursorPress
      nameWithType:
        CSharp: MouseTarget.cursorPress
        VB: MouseTarget.cursorPress
      qualifiedName:
        CSharp: MouseTarget.cursorPress
        VB: MouseTarget.cursorPress
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: cursorPress
        path: ''
        startLine: 10733
      syntax:
        content:
          CSharp: public CursorState cursorPress
          VB: Public cursorPress As CursorState
        return:
          type: Global.CursorState
    - id: Global.MouseTarget.cursorSelected
      commentId: F:Global.MouseTarget.cursorSelected
      language: CSharp
      name:
        CSharp: cursorSelected
        VB: cursorSelected
      nameWithType:
        CSharp: MouseTarget.cursorSelected
        VB: MouseTarget.cursorSelected
      qualifiedName:
        CSharp: MouseTarget.cursorSelected
        VB: MouseTarget.cursorSelected
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: cursorSelected
        path: ''
        startLine: 10734
      syntax:
        content:
          CSharp: public CursorState cursorSelected
          VB: Public cursorSelected As CursorState
        return:
          type: Global.CursorState
    - id: Global.MouseTarget.cursorScroll
      commentId: F:Global.MouseTarget.cursorScroll
      language: CSharp
      name:
        CSharp: cursorScroll
        VB: cursorScroll
      nameWithType:
        CSharp: MouseTarget.cursorScroll
        VB: MouseTarget.cursorScroll
      qualifiedName:
        CSharp: MouseTarget.cursorScroll
        VB: MouseTarget.cursorScroll
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: cursorScroll
        path: ''
        startLine: 10735
      syntax:
        content:
          CSharp: public CursorState cursorScroll
          VB: Public cursorScroll As CursorState
        return:
          type: Global.CursorState
    - id: Global.MouseTarget.deselectMode
      commentId: F:Global.MouseTarget.deselectMode
      language: CSharp
      name:
        CSharp: deselectMode
        VB: deselectMode
      nameWithType:
        CSharp: MouseTarget.deselectMode
        VB: MouseTarget.deselectMode
      qualifiedName:
        CSharp: MouseTarget.deselectMode
        VB: MouseTarget.deselectMode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: deselectMode
        path: ''
        startLine: 10737
      syntax:
        content:
          CSharp: public MouseTargetDeselectMode deselectMode
          VB: Public deselectMode As MouseTargetDeselectMode
        return:
          type: Global.MouseTargetDeselectMode
    - id: Global.MouseTarget.state
      commentId: P:Global.MouseTarget.state
      language: CSharp
      name:
        CSharp: state
        VB: state
      nameWithType:
        CSharp: MouseTarget.state
        VB: MouseTarget.state
      qualifiedName:
        CSharp: MouseTarget.state
        VB: MouseTarget.state
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: state
        path: ''
        startLine: 10740
      syntax:
        content:
          CSharp: public MouseTargetState state { get; }
          VB: Public ReadOnly Property state As MouseTargetState
        parameters: []
        return:
          type: Global.MouseTargetState
      overload: Global.MouseTarget.state*
    - id: Global.MouseTarget.selected
      commentId: P:Global.MouseTarget.selected
      language: CSharp
      name:
        CSharp: selected
        VB: selected
      nameWithType:
        CSharp: MouseTarget.selected
        VB: MouseTarget.selected
      qualifiedName:
        CSharp: MouseTarget.selected
        VB: MouseTarget.selected
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: selected
        path: ''
        startLine: 10767
      syntax:
        content:
          CSharp: public bool selected { get; }
          VB: Public Property selected As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.MouseTarget.selected*
    - id: Global.MouseTarget.timeHovered
      commentId: P:Global.MouseTarget.timeHovered
      language: CSharp
      name:
        CSharp: timeHovered
        VB: timeHovered
      nameWithType:
        CSharp: MouseTarget.timeHovered
        VB: MouseTarget.timeHovered
      qualifiedName:
        CSharp: MouseTarget.timeHovered
        VB: MouseTarget.timeHovered
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: timeHovered
        path: ''
        startLine: 10769
      syntax:
        content:
          CSharp: public float timeHovered { get; }
          VB: Public ReadOnly Property timeHovered As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.MouseTarget.timeHovered*
    - id: Global.MouseTarget.buttonTargetedWith
      commentId: F:Global.MouseTarget.buttonTargetedWith
      language: CSharp
      name:
        CSharp: buttonTargetedWith
        VB: buttonTargetedWith
      nameWithType:
        CSharp: MouseTarget.buttonTargetedWith
        VB: MouseTarget.buttonTargetedWith
      qualifiedName:
        CSharp: MouseTarget.buttonTargetedWith
        VB: MouseTarget.buttonTargetedWith
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: buttonTargetedWith
        path: ''
        startLine: 10778
      syntax:
        content:
          CSharp: public MouseButton buttonTargetedWith
          VB: Public buttonTargetedWith As MouseButton
        return:
          type: Global.MouseButton
    - id: Global.MouseTarget.Idle
      commentId: M:Global.MouseTarget.Idle
      language: CSharp
      name:
        CSharp: Idle()
        VB: Idle()
      nameWithType:
        CSharp: MouseTarget.Idle()
        VB: MouseTarget.Idle()
      qualifiedName:
        CSharp: MouseTarget.Idle()
        VB: MouseTarget.Idle()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Idle
        path: ''
        startLine: 10780
      syntax:
        content:
          CSharp: public void Idle()
          VB: Public Sub Idle()
      overload: Global.MouseTarget.Idle*
    - id: Global.MouseTarget.Hover
      commentId: M:Global.MouseTarget.Hover
      language: CSharp
      name:
        CSharp: Hover()
        VB: Hover()
      nameWithType:
        CSharp: MouseTarget.Hover()
        VB: MouseTarget.Hover()
      qualifiedName:
        CSharp: MouseTarget.Hover()
        VB: MouseTarget.Hover()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Hover
        path: ''
        startLine: 10790
      syntax:
        content:
          CSharp: public void Hover()
          VB: Public Sub Hover()
      overload: Global.MouseTarget.Hover*
    - id: Global.MouseTarget.Press
      commentId: M:Global.MouseTarget.Press
      language: CSharp
      name:
        CSharp: Press()
        VB: Press()
      nameWithType:
        CSharp: MouseTarget.Press()
        VB: MouseTarget.Press()
      qualifiedName:
        CSharp: MouseTarget.Press()
        VB: MouseTarget.Press()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Press
        path: ''
        startLine: 10802
      syntax:
        content:
          CSharp: public void Press()
          VB: Public Sub Press()
      overload: Global.MouseTarget.Press*
    - id: Global.MouseTarget.Select
      commentId: M:Global.MouseTarget.Select
      language: CSharp
      name:
        CSharp: Select()
        VB: Select()
      nameWithType:
        CSharp: MouseTarget.Select()
        VB: MouseTarget.Select()
      qualifiedName:
        CSharp: MouseTarget.Select()
        VB: MouseTarget.Select()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Select
        path: ''
        startLine: 10826
      syntax:
        content:
          CSharp: public void Select()
          VB: Public Sub [Select]()
      overload: Global.MouseTarget.Select*
    - id: Global.MouseTarget.Deselect
      commentId: M:Global.MouseTarget.Deselect
      language: CSharp
      name:
        CSharp: Deselect()
        VB: Deselect()
      nameWithType:
        CSharp: MouseTarget.Deselect()
        VB: MouseTarget.Deselect()
      qualifiedName:
        CSharp: MouseTarget.Deselect()
        VB: MouseTarget.Deselect()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Deselect
        path: ''
        startLine: 10834
      syntax:
        content:
          CSharp: public void Deselect()
          VB: Public Sub Deselect()
      overload: Global.MouseTarget.Deselect*
    - id: Global.MouseTarget.Scroll
      commentId: M:Global.MouseTarget.Scroll
      language: CSharp
      name:
        CSharp: Scroll()
        VB: Scroll()
      nameWithType:
        CSharp: MouseTarget.Scroll()
        VB: MouseTarget.Scroll()
      qualifiedName:
        CSharp: MouseTarget.Scroll()
        VB: MouseTarget.Scroll()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Scroll
        path: ''
        startLine: 10843
      syntax:
        content:
          CSharp: public void Scroll()
          VB: Public Sub Scroll()
      overload: Global.MouseTarget.Scroll*
    - id: Global.MouseTarget.Untarget
      commentId: M:Global.MouseTarget.Untarget
      language: CSharp
      name:
        CSharp: Untarget()
        VB: Untarget()
      nameWithType:
        CSharp: MouseTarget.Untarget()
        VB: MouseTarget.Untarget()
      qualifiedName:
        CSharp: MouseTarget.Untarget()
        VB: MouseTarget.Untarget()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Untarget
        path: ''
        startLine: 10848
      syntax:
        content:
          CSharp: public void Untarget()
          VB: Public Sub Untarget()
      overload: Global.MouseTarget.Untarget*
    - id: Global.MouseTarget.SubscribeToIdle(UnityAction)
      commentId: M:Global.MouseTarget.SubscribeToIdle(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToIdle(UnityAction)
        VB: SubscribeToIdle(UnityAction)
      nameWithType:
        CSharp: MouseTarget.SubscribeToIdle(UnityAction)
        VB: MouseTarget.SubscribeToIdle(UnityAction)
      qualifiedName:
        CSharp: MouseTarget.SubscribeToIdle(UnityAction)
        VB: MouseTarget.SubscribeToIdle(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToIdle
        path: ''
        startLine: 10855
      syntax:
        content:
          CSharp: public void SubscribeToIdle(UnityAction call)
          VB: Public Sub SubscribeToIdle([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.MouseTarget.SubscribeToIdle*
    - id: Global.MouseTarget.SubscribeToHover(UnityAction)
      commentId: M:Global.MouseTarget.SubscribeToHover(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToHover(UnityAction)
        VB: SubscribeToHover(UnityAction)
      nameWithType:
        CSharp: MouseTarget.SubscribeToHover(UnityAction)
        VB: MouseTarget.SubscribeToHover(UnityAction)
      qualifiedName:
        CSharp: MouseTarget.SubscribeToHover(UnityAction)
        VB: MouseTarget.SubscribeToHover(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToHover
        path: ''
        startLine: 10860
      syntax:
        content:
          CSharp: public void SubscribeToHover(UnityAction call)
          VB: Public Sub SubscribeToHover([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.MouseTarget.SubscribeToHover*
    - id: Global.MouseTarget.SubscribeToPress(UnityAction)
      commentId: M:Global.MouseTarget.SubscribeToPress(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToPress(UnityAction)
        VB: SubscribeToPress(UnityAction)
      nameWithType:
        CSharp: MouseTarget.SubscribeToPress(UnityAction)
        VB: MouseTarget.SubscribeToPress(UnityAction)
      qualifiedName:
        CSharp: MouseTarget.SubscribeToPress(UnityAction)
        VB: MouseTarget.SubscribeToPress(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToPress
        path: ''
        startLine: 10865
      syntax:
        content:
          CSharp: public void SubscribeToPress(UnityAction call)
          VB: Public Sub SubscribeToPress([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.MouseTarget.SubscribeToPress*
    - id: Global.MouseTarget.SubscribeToSelect(UnityAction)
      commentId: M:Global.MouseTarget.SubscribeToSelect(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToSelect(UnityAction)
        VB: SubscribeToSelect(UnityAction)
      nameWithType:
        CSharp: MouseTarget.SubscribeToSelect(UnityAction)
        VB: MouseTarget.SubscribeToSelect(UnityAction)
      qualifiedName:
        CSharp: MouseTarget.SubscribeToSelect(UnityAction)
        VB: MouseTarget.SubscribeToSelect(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToSelect
        path: ''
        startLine: 10870
      syntax:
        content:
          CSharp: public void SubscribeToSelect(UnityAction call)
          VB: Public Sub SubscribeToSelect([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.MouseTarget.SubscribeToSelect*
    - id: Global.MouseTarget.SubscribeToDeselect(UnityAction)
      commentId: M:Global.MouseTarget.SubscribeToDeselect(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToDeselect(UnityAction)
        VB: SubscribeToDeselect(UnityAction)
      nameWithType:
        CSharp: MouseTarget.SubscribeToDeselect(UnityAction)
        VB: MouseTarget.SubscribeToDeselect(UnityAction)
      qualifiedName:
        CSharp: MouseTarget.SubscribeToDeselect(UnityAction)
        VB: MouseTarget.SubscribeToDeselect(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToDeselect
        path: ''
        startLine: 10874
      syntax:
        content:
          CSharp: public void SubscribeToDeselect(UnityAction call)
          VB: Public Sub SubscribeToDeselect([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.MouseTarget.SubscribeToDeselect*
    - id: Global.MouseTarget.SubscribeToStateChange(UnityAction)
      commentId: M:Global.MouseTarget.SubscribeToStateChange(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToStateChange(UnityAction)
        VB: SubscribeToStateChange(UnityAction)
      nameWithType:
        CSharp: MouseTarget.SubscribeToStateChange(UnityAction)
        VB: MouseTarget.SubscribeToStateChange(UnityAction)
      qualifiedName:
        CSharp: MouseTarget.SubscribeToStateChange(UnityAction)
        VB: MouseTarget.SubscribeToStateChange(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToStateChange
        path: ''
        startLine: 10879
      syntax:
        content:
          CSharp: public void SubscribeToStateChange(UnityAction call)
          VB: Public Sub SubscribeToStateChange([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.MouseTarget.SubscribeToStateChange*
    - id: Global.MouseTarget.SubscribeToScroll(UnityAction)
      commentId: M:Global.MouseTarget.SubscribeToScroll(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToScroll(UnityAction)
        VB: SubscribeToScroll(UnityAction)
      nameWithType:
        CSharp: MouseTarget.SubscribeToScroll(UnityAction)
        VB: MouseTarget.SubscribeToScroll(UnityAction)
      qualifiedName:
        CSharp: MouseTarget.SubscribeToScroll(UnityAction)
        VB: MouseTarget.SubscribeToScroll(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToScroll
        path: ''
        startLine: 10884
      syntax:
        content:
          CSharp: public void SubscribeToScroll(UnityAction call)
          VB: Public Sub SubscribeToScroll([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.MouseTarget.SubscribeToScroll*
    - id: Global.MouseTarget.SubscribeToClick(UnityAction)
      commentId: M:Global.MouseTarget.SubscribeToClick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToClick(UnityAction)
        VB: SubscribeToClick(UnityAction)
      nameWithType:
        CSharp: MouseTarget.SubscribeToClick(UnityAction)
        VB: MouseTarget.SubscribeToClick(UnityAction)
      qualifiedName:
        CSharp: MouseTarget.SubscribeToClick(UnityAction)
        VB: MouseTarget.SubscribeToClick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToClick
        path: ''
        startLine: 10889
      syntax:
        content:
          CSharp: public void SubscribeToClick(UnityAction call)
          VB: Public Sub SubscribeToClick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.MouseTarget.SubscribeToClick*
    - id: Global.MouseTarget.SubscribeToLeftClick(UnityAction)
      commentId: M:Global.MouseTarget.SubscribeToLeftClick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToLeftClick(UnityAction)
        VB: SubscribeToLeftClick(UnityAction)
      nameWithType:
        CSharp: MouseTarget.SubscribeToLeftClick(UnityAction)
        VB: MouseTarget.SubscribeToLeftClick(UnityAction)
      qualifiedName:
        CSharp: MouseTarget.SubscribeToLeftClick(UnityAction)
        VB: MouseTarget.SubscribeToLeftClick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToLeftClick
        path: ''
        startLine: 10893
      syntax:
        content:
          CSharp: public void SubscribeToLeftClick(UnityAction call)
          VB: Public Sub SubscribeToLeftClick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.MouseTarget.SubscribeToLeftClick*
    - id: Global.MouseTarget.SubscribeToRightClick(UnityAction)
      commentId: M:Global.MouseTarget.SubscribeToRightClick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToRightClick(UnityAction)
        VB: SubscribeToRightClick(UnityAction)
      nameWithType:
        CSharp: MouseTarget.SubscribeToRightClick(UnityAction)
        VB: MouseTarget.SubscribeToRightClick(UnityAction)
      qualifiedName:
        CSharp: MouseTarget.SubscribeToRightClick(UnityAction)
        VB: MouseTarget.SubscribeToRightClick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToRightClick
        path: ''
        startLine: 10897
      syntax:
        content:
          CSharp: public void SubscribeToRightClick(UnityAction call)
          VB: Public Sub SubscribeToRightClick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.MouseTarget.SubscribeToRightClick*
    - id: Global.MouseTarget.SubscribeToMiddleClick(UnityAction)
      commentId: M:Global.MouseTarget.SubscribeToMiddleClick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToMiddleClick(UnityAction)
        VB: SubscribeToMiddleClick(UnityAction)
      nameWithType:
        CSharp: MouseTarget.SubscribeToMiddleClick(UnityAction)
        VB: MouseTarget.SubscribeToMiddleClick(UnityAction)
      qualifiedName:
        CSharp: MouseTarget.SubscribeToMiddleClick(UnityAction)
        VB: MouseTarget.SubscribeToMiddleClick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToMiddleClick
        path: ''
        startLine: 10901
      syntax:
        content:
          CSharp: public void SubscribeToMiddleClick(UnityAction call)
          VB: Public Sub SubscribeToMiddleClick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.MouseTarget.SubscribeToMiddleClick*
    - id: Global.MouseTarget.SubscribeToUnclick(UnityAction)
      commentId: M:Global.MouseTarget.SubscribeToUnclick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToUnclick(UnityAction)
        VB: SubscribeToUnclick(UnityAction)
      nameWithType:
        CSharp: MouseTarget.SubscribeToUnclick(UnityAction)
        VB: MouseTarget.SubscribeToUnclick(UnityAction)
      qualifiedName:
        CSharp: MouseTarget.SubscribeToUnclick(UnityAction)
        VB: MouseTarget.SubscribeToUnclick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToUnclick
        path: ''
        startLine: 10905
      syntax:
        content:
          CSharp: public void SubscribeToUnclick(UnityAction call)
          VB: Public Sub SubscribeToUnclick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.MouseTarget.SubscribeToUnclick*
    - id: Global.MouseTarget.SubscribeToLeftUnclick(UnityAction)
      commentId: M:Global.MouseTarget.SubscribeToLeftUnclick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToLeftUnclick(UnityAction)
        VB: SubscribeToLeftUnclick(UnityAction)
      nameWithType:
        CSharp: MouseTarget.SubscribeToLeftUnclick(UnityAction)
        VB: MouseTarget.SubscribeToLeftUnclick(UnityAction)
      qualifiedName:
        CSharp: MouseTarget.SubscribeToLeftUnclick(UnityAction)
        VB: MouseTarget.SubscribeToLeftUnclick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToLeftUnclick
        path: ''
        startLine: 10909
      syntax:
        content:
          CSharp: public void SubscribeToLeftUnclick(UnityAction call)
          VB: Public Sub SubscribeToLeftUnclick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.MouseTarget.SubscribeToLeftUnclick*
    - id: Global.MouseTarget.SubscribeToRightUnclick(UnityAction)
      commentId: M:Global.MouseTarget.SubscribeToRightUnclick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToRightUnclick(UnityAction)
        VB: SubscribeToRightUnclick(UnityAction)
      nameWithType:
        CSharp: MouseTarget.SubscribeToRightUnclick(UnityAction)
        VB: MouseTarget.SubscribeToRightUnclick(UnityAction)
      qualifiedName:
        CSharp: MouseTarget.SubscribeToRightUnclick(UnityAction)
        VB: MouseTarget.SubscribeToRightUnclick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToRightUnclick
        path: ''
        startLine: 10913
      syntax:
        content:
          CSharp: public void SubscribeToRightUnclick(UnityAction call)
          VB: Public Sub SubscribeToRightUnclick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.MouseTarget.SubscribeToRightUnclick*
    - id: Global.MouseTarget.SubscribeToMiddleUnclick(UnityAction)
      commentId: M:Global.MouseTarget.SubscribeToMiddleUnclick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToMiddleUnclick(UnityAction)
        VB: SubscribeToMiddleUnclick(UnityAction)
      nameWithType:
        CSharp: MouseTarget.SubscribeToMiddleUnclick(UnityAction)
        VB: MouseTarget.SubscribeToMiddleUnclick(UnityAction)
      qualifiedName:
        CSharp: MouseTarget.SubscribeToMiddleUnclick(UnityAction)
        VB: MouseTarget.SubscribeToMiddleUnclick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToMiddleUnclick
        path: ''
        startLine: 10917
      syntax:
        content:
          CSharp: public void SubscribeToMiddleUnclick(UnityAction call)
          VB: Public Sub SubscribeToMiddleUnclick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.MouseTarget.SubscribeToMiddleUnclick*
    - id: Global.MouseTarget.SubscribeToUntarget(UnityAction)
      commentId: M:Global.MouseTarget.SubscribeToUntarget(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToUntarget(UnityAction)
        VB: SubscribeToUntarget(UnityAction)
      nameWithType:
        CSharp: MouseTarget.SubscribeToUntarget(UnityAction)
        VB: MouseTarget.SubscribeToUntarget(UnityAction)
      qualifiedName:
        CSharp: MouseTarget.SubscribeToUntarget(UnityAction)
        VB: MouseTarget.SubscribeToUntarget(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToUntarget
        path: ''
        startLine: 10922
      syntax:
        content:
          CSharp: public void SubscribeToUntarget(UnityAction call)
          VB: Public Sub SubscribeToUntarget([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.MouseTarget.SubscribeToUntarget*
  - id: Global.Tooltip
    commentId: T:Global.Tooltip
    language: CSharp
    name:
      CSharp: Tooltip
      VB: Tooltip
    nameWithType:
      CSharp: Tooltip
      VB: Tooltip
    qualifiedName:
      CSharp: Tooltip
      VB: Tooltip
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Tooltip
      path: ''
      startLine: 10932
    syntax:
      content:
        CSharp: 'public class Tooltip : MonoBehaviour'
        VB: Public Class Tooltip Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.Tooltip.text
      commentId: P:Global.Tooltip.text
      language: CSharp
      name:
        CSharp: text
        VB: text
      nameWithType:
        CSharp: Tooltip.text
        VB: Tooltip.text
      qualifiedName:
        CSharp: Tooltip.text
        VB: Tooltip.text
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: text
        path: ''
        startLine: 10938
      syntax:
        content:
          CSharp: public string text { get; set; }
          VB: Public Property text As String
        parameters: []
        return:
          type: System.String
      overload: Global.Tooltip.text*
    - id: Global.Tooltip.hoverTimeUntilTooltip
      commentId: F:Global.Tooltip.hoverTimeUntilTooltip
      language: CSharp
      name:
        CSharp: hoverTimeUntilTooltip
        VB: hoverTimeUntilTooltip
      nameWithType:
        CSharp: Tooltip.hoverTimeUntilTooltip
        VB: Tooltip.hoverTimeUntilTooltip
      qualifiedName:
        CSharp: Tooltip.hoverTimeUntilTooltip
        VB: Tooltip.hoverTimeUntilTooltip
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hoverTimeUntilTooltip
        path: ''
        startLine: 10950
      syntax:
        content:
          CSharp: public float hoverTimeUntilTooltip
          VB: Public hoverTimeUntilTooltip As Single
        return:
          type: System.Single
    - id: Global.Tooltip.padding
      commentId: F:Global.Tooltip.padding
      language: CSharp
      name:
        CSharp: padding
        VB: padding
      nameWithType:
        CSharp: Tooltip.padding
        VB: Tooltip.padding
      qualifiedName:
        CSharp: Tooltip.padding
        VB: Tooltip.padding
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: padding
        path: ''
        startLine: 10951
      syntax:
        content:
          CSharp: public Vector2 padding
          VB: Public padding As Vector2
        return:
          type: Global.Vector2
    - id: Global.Tooltip.tooltipVisible
      commentId: P:Global.Tooltip.tooltipVisible
      language: CSharp
      name:
        CSharp: tooltipVisible
        VB: tooltipVisible
      nameWithType:
        CSharp: Tooltip.tooltipVisible
        VB: Tooltip.tooltipVisible
      qualifiedName:
        CSharp: Tooltip.tooltipVisible
        VB: Tooltip.tooltipVisible
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: tooltipVisible
        path: ''
        startLine: 10957
      syntax:
        content:
          CSharp: public bool tooltipVisible { get; }
          VB: Public Property tooltipVisible As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Tooltip.tooltipVisible*
    - id: Global.Tooltip.ShowTooltip(Vector2)
      commentId: M:Global.Tooltip.ShowTooltip(Vector2)
      language: CSharp
      name:
        CSharp: ShowTooltip(Vector2)
        VB: ShowTooltip(Vector2)
      nameWithType:
        CSharp: Tooltip.ShowTooltip(Vector2)
        VB: Tooltip.ShowTooltip(Vector2)
      qualifiedName:
        CSharp: Tooltip.ShowTooltip(Vector2)
        VB: Tooltip.ShowTooltip(Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ShowTooltip
        path: ''
        startLine: 10997
      syntax:
        content:
          CSharp: public void ShowTooltip(Vector2 worldCoords)
          VB: Public Sub ShowTooltip(worldCoords As Vector2)
        parameters:
        - id: worldCoords
          type: Global.Vector2
      overload: Global.Tooltip.ShowTooltip*
    - id: Global.Tooltip.HideTooltip
      commentId: M:Global.Tooltip.HideTooltip
      language: CSharp
      name:
        CSharp: HideTooltip()
        VB: HideTooltip()
      nameWithType:
        CSharp: Tooltip.HideTooltip()
        VB: Tooltip.HideTooltip()
      qualifiedName:
        CSharp: Tooltip.HideTooltip()
        VB: Tooltip.HideTooltip()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: HideTooltip
        path: ''
        startLine: 11032
      syntax:
        content:
          CSharp: public void HideTooltip()
          VB: Public Sub HideTooltip()
      overload: Global.Tooltip.HideTooltip*
  - id: Global.IJSONable
    commentId: T:Global.IJSONable
    language: CSharp
    name:
      CSharp: IJSONable
      VB: IJSONable
    nameWithType:
      CSharp: IJSONable
      VB: IJSONable
    qualifiedName:
      CSharp: IJSONable
      VB: IJSONable
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: IJSONable
      path: ''
      startLine: 11046
    summary: "\nAn interface for objects that can be converted to JSON.\n"
    example: []
    syntax:
      content:
        CSharp: public interface IJSONable
        VB: Public Interface IJSONable
    items:
    - id: Global.IJSONable.ToJSON
      commentId: M:Global.IJSONable.ToJSON
      language: CSharp
      name:
        CSharp: ToJSON()
        VB: ToJSON()
      nameWithType:
        CSharp: IJSONable.ToJSON()
        VB: IJSONable.ToJSON()
      qualifiedName:
        CSharp: IJSONable.ToJSON()
        VB: IJSONable.ToJSON()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToJSON
        path: ''
        startLine: 11048
      syntax:
        content:
          CSharp: JSON ToJSON()
          VB: Function ToJSON() As JSON
        return:
          type: Global.JSON
      overload: Global.IJSONable.ToJSON*
  - id: Global.JSON
    commentId: T:Global.JSON
    language: CSharp
    name:
      CSharp: JSON
      VB: JSON
    nameWithType:
      CSharp: JSON
      VB: JSON
    qualifiedName:
      CSharp: JSON
      VB: JSON
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: JSON
      path: ''
      startLine: 11059
    summary: "\nA class to represent data in a JSON format.\n"
    example: []
    syntax:
      content:
        CSharp: public class JSON
        VB: Public Class JSON
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    items:
    - id: Global.JSON.#ctor
      commentId: M:Global.JSON.#ctor
      language: CSharp
      name:
        CSharp: JSON()
        VB: New()
      nameWithType:
        CSharp: JSON.JSON()
        VB: JSON.New()
      qualifiedName:
        CSharp: JSON.JSON()
        VB: JSON.New()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 11069
      summary: "\nCreate an empty JSON object.\n"
      example: []
      syntax:
        content:
          CSharp: public JSON()
          VB: Public Sub New()
      overload: Global.JSON.#ctor*
    - id: Global.JSON.#ctor(System.String)
      commentId: M:Global.JSON.#ctor(System.String)
      language: CSharp
      name:
        CSharp: JSON(string)
        VB: New(String)
      nameWithType:
        CSharp: JSON.JSON(string)
        VB: JSON.New(String)
      qualifiedName:
        CSharp: JSON.JSON(string)
        VB: JSON.New(String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 11073
      summary: "\nParse the JSON-format string into a JSON object.\n"
      example: []
      syntax:
        content:
          CSharp: public JSON(string jsonToParse)
          VB: Public Sub New(jsonToParse As String)
        parameters:
        - id: jsonToParse
          type: System.String
      overload: Global.JSON.#ctor*
    - id: Global.JSON.Keys
      commentId: P:Global.JSON.Keys
      language: CSharp
      name:
        CSharp: Keys
        VB: Keys
      nameWithType:
        CSharp: JSON.Keys
        VB: JSON.Keys
      qualifiedName:
        CSharp: JSON.Keys
        VB: JSON.Keys
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Keys
        path: ''
        startLine: 11079
      summary: The keys appearing in the outermost scope of the JSON data.
      example: []
      syntax:
        content:
          CSharp: public string[] Keys { get; }
          VB: Public ReadOnly Property Keys As String()
        parameters: []
        return:
          type: System.String[]
      overload: Global.JSON.Keys*
    - id: Global.JSON.Item(System.String)
      commentId: P:Global.JSON.Item(System.String)
      language: CSharp
      name:
        CSharp: this[string]
        VB: this[](String)
      nameWithType:
        CSharp: JSON.this[string]
        VB: JSON.this[](String)
      qualifiedName:
        CSharp: JSON.this[string]
        VB: JSON.this[](String)
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: this[]
        path: ''
        startLine: 11113
      summary: "\nAccesses the string form of the data for the given key - the same as Get(key) and Add(key, value). To access the JSONProperty for the key, use GetJSONProperty(key).\n"
      example: []
      syntax:
        content:
          CSharp: public string this[string key] { get; set; }
          VB: Public Default Property this[](key As String) As String
        parameters:
        - id: key
          type: System.String
        return:
          type: System.String
      overload: Global.JSON.Item*
    - id: Global.JSON.ContainsKey(System.String)
      commentId: M:Global.JSON.ContainsKey(System.String)
      language: CSharp
      name:
        CSharp: ContainsKey(string)
        VB: ContainsKey(String)
      nameWithType:
        CSharp: JSON.ContainsKey(string)
        VB: JSON.ContainsKey(String)
      qualifiedName:
        CSharp: JSON.ContainsKey(string)
        VB: JSON.ContainsKey(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ContainsKey
        path: ''
        startLine: 11128
      summary: "\nReturns true if this JSON object has the given key.\n"
      example: []
      syntax:
        content:
          CSharp: public bool ContainsKey(string key)
          VB: Public Function ContainsKey(key As String) As Boolean
        parameters:
        - id: key
          type: System.String
        return:
          type: System.Boolean
      overload: Global.JSON.ContainsKey*
    - id: Global.JSON.Get(System.String)
      commentId: M:Global.JSON.Get(System.String)
      language: CSharp
      name:
        CSharp: Get(string)
        VB: Get(String)
      nameWithType:
        CSharp: JSON.Get(string)
        VB: JSON.Get(String)
      qualifiedName:
        CSharp: JSON.Get(string)
        VB: JSON.Get(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Get
        path: ''
        startLine: 11136
      summary: "\nReturns the string form of the data at the given key.\n"
      example: []
      syntax:
        content:
          CSharp: public string Get(string key)
          VB: Public Function [Get](key As String) As String
        parameters:
        - id: key
          type: System.String
        return:
          type: System.String
      overload: Global.JSON.Get*
    - id: Global.JSON.GetJSONProperty(System.String)
      commentId: M:Global.JSON.GetJSONProperty(System.String)
      language: CSharp
      name:
        CSharp: GetJSONProperty(string)
        VB: GetJSONProperty(String)
      nameWithType:
        CSharp: JSON.GetJSONProperty(string)
        VB: JSON.GetJSONProperty(String)
      qualifiedName:
        CSharp: JSON.GetJSONProperty(string)
        VB: JSON.GetJSONProperty(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetJSONProperty
        path: ''
        startLine: 11148
      summary: "\nReturns the JSONProperty at the given key.\n"
      example: []
      syntax:
        content:
          CSharp: public JSON.JSONProperty GetJSONProperty(string key)
          VB: Public Function GetJSONProperty(key As String) As JSON.JSONProperty
        parameters:
        - id: key
          type: System.String
        return:
          type: Global.JSON.JSONProperty
      overload: Global.JSON.GetJSONProperty*
    - id: Global.JSON.Add(System.String,JSON.JSONProperty)
      commentId: M:Global.JSON.Add(System.String,JSON.JSONProperty)
      language: CSharp
      name:
        CSharp: Add(string, JSONProperty)
        VB: Add(String, JSONProperty)
      nameWithType:
        CSharp: JSON.Add(string, JSON.JSONProperty)
        VB: JSON.Add(String, JSON.JSONProperty)
      qualifiedName:
        CSharp: JSON.Add(string, JSON.JSONProperty)
        VB: JSON.Add(String, JSON.JSONProperty)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Add
        path: ''
        startLine: 11160
      summary: "\nAdds the given data at the given key, overriding any existing data.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(string key, JSON.JSONProperty data)
          VB: Public Sub Add(key As String, data As JSON.JSONProperty)
        parameters:
        - id: key
          type: System.String
        - id: data
          type: Global.JSON.JSONProperty
      overload: Global.JSON.Add*
    - id: Global.JSON.Add(System.String,System.String)
      commentId: M:Global.JSON.Add(System.String,System.String)
      language: CSharp
      name:
        CSharp: Add(string, string)
        VB: Add(String, String)
      nameWithType:
        CSharp: JSON.Add(string, string)
        VB: JSON.Add(String, String)
      qualifiedName:
        CSharp: JSON.Add(string, string)
        VB: JSON.Add(String, String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Add
        path: ''
        startLine: 11168
      summary: "\nAdds the given string to the JSON, adding quotation marks around the string.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(string key, string str)
          VB: Public Sub Add(key As String, str As String)
        parameters:
        - id: key
          type: System.String
        - id: str
          type: System.String
      overload: Global.JSON.Add*
    - id: Global.JSON.Add(System.String,System.String,System.Boolean)
      commentId: M:Global.JSON.Add(System.String,System.String,System.Boolean)
      language: CSharp
      name:
        CSharp: Add(string, string, bool)
        VB: Add(String, String, Boolean)
      nameWithType:
        CSharp: JSON.Add(string, string, bool)
        VB: JSON.Add(String, String, Boolean)
      qualifiedName:
        CSharp: JSON.Add(string, string, bool)
        VB: JSON.Add(String, String, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Add
        path: ''
        startLine: 11172
      summary: "\nAdds the given data (given in string form) to the JSON.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(string key, string str, bool addQuotationMarks)
          VB: Public Sub Add(key As String, str As String, addQuotationMarks As Boolean)
        parameters:
        - id: key
          type: System.String
        - id: str
          type: System.String
        - id: addQuotationMarks
          type: System.Boolean
      overload: Global.JSON.Add*
    - id: Global.JSON.Add(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)
      commentId: M:Global.JSON.Add(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)
      language: CSharp
      name:
        CSharp: Add(string, IEnumerable<string>, bool)
        VB: Add(String, IEnumerable(Of String), Boolean)
      nameWithType:
        CSharp: JSON.Add(string, IEnumerable<string>, bool)
        VB: JSON.Add(String, IEnumerable(Of String), Boolean)
      qualifiedName:
        CSharp: JSON.Add(string, System.Collections.Generic.IEnumerable<string>, bool)
        VB: JSON.Add(String, System.Collections.Generic.IEnumerable(Of String), Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Add
        path: ''
        startLine: 11177
      summary: "\nAdds the given strings to the JSON in the format of a JSON array, adding quotation marks around each string.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(string key, IEnumerable<string> strings, bool separateLines)
          VB: Public Sub Add(key As String, strings As IEnumerable(Of String), separateLines As Boolean)
        parameters:
        - id: key
          type: System.String
        - id: strings
          type: System.Collections.Generic.IEnumerable{System.String}
        - id: separateLines
          type: System.Boolean
          description: Whether to start a new line for each element of the array.
      overload: Global.JSON.Add*
    - id: Global.JSON.Add(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)
      commentId: M:Global.JSON.Add(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: Add(string, IEnumerable<string>, bool, bool)
        VB: Add(String, IEnumerable(Of String), Boolean, Boolean)
      nameWithType:
        CSharp: JSON.Add(string, IEnumerable<string>, bool, bool)
        VB: JSON.Add(String, IEnumerable(Of String), Boolean, Boolean)
      qualifiedName:
        CSharp: JSON.Add(string, System.Collections.Generic.IEnumerable<string>, bool, bool)
        VB: JSON.Add(String, System.Collections.Generic.IEnumerable(Of String), Boolean, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Add
        path: ''
        startLine: 11183
      summary: "\nAdds the given data (given in string form) to the JSON in the format of a JSON array.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(string key, IEnumerable<string> strings, bool separateLines, bool addQuotationMarks)
          VB: Public Sub Add(key As String, strings As IEnumerable(Of String), separateLines As Boolean, addQuotationMarks As Boolean)
        parameters:
        - id: key
          type: System.String
        - id: strings
          type: System.Collections.Generic.IEnumerable{System.String}
        - id: separateLines
          type: System.Boolean
          description: Whether to start a new line for each element of the array.
        - id: addQuotationMarks
          type: System.Boolean
          description: Whether to add quotation marks around each element of the array.
      overload: Global.JSON.Add*
    - id: Global.JSON.Add(System.String,System.Boolean)
      commentId: M:Global.JSON.Add(System.String,System.Boolean)
      language: CSharp
      name:
        CSharp: Add(string, bool)
        VB: Add(String, Boolean)
      nameWithType:
        CSharp: JSON.Add(string, bool)
        VB: JSON.Add(String, Boolean)
      qualifiedName:
        CSharp: JSON.Add(string, bool)
        VB: JSON.Add(String, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Add
        path: ''
        startLine: 11188
      summary: "\nAdds the given bool to the JSON.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(string key, bool boolean)
          VB: Public Sub Add(key As String, [boolean] As Boolean)
        parameters:
        - id: key
          type: System.String
        - id: boolean
          type: System.Boolean
      overload: Global.JSON.Add*
    - id: Global.JSON.Add(System.String,JSON)
      commentId: M:Global.JSON.Add(System.String,JSON)
      language: CSharp
      name:
        CSharp: Add(string, JSON)
        VB: Add(String, JSON)
      nameWithType:
        CSharp: JSON.Add(string, JSON)
        VB: JSON.Add(String, JSON)
      qualifiedName:
        CSharp: JSON.Add(string, JSON)
        VB: JSON.Add(String, JSON)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Add
        path: ''
        startLine: 11193
      summary: "\nAdds the string form of the given JSON to this JSON object.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(string key, JSON json)
          VB: Public Sub Add(key As String, json As JSON)
        parameters:
        - id: key
          type: System.String
        - id: json
          type: Global.JSON
      overload: Global.JSON.Add*
    - id: Global.JSON.Add(System.String,IJSONable)
      commentId: M:Global.JSON.Add(System.String,IJSONable)
      language: CSharp
      name:
        CSharp: Add(string, IJSONable)
        VB: Add(String, IJSONable)
      nameWithType:
        CSharp: JSON.Add(string, IJSONable)
        VB: JSON.Add(String, IJSONable)
      qualifiedName:
        CSharp: JSON.Add(string, IJSONable)
        VB: JSON.Add(String, IJSONable)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Add
        path: ''
        startLine: 11197
      summary: "\nAdds the string form of the JSON of the given object to this JSON object.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(string key, IJSONable jsonableObject)
          VB: Public Sub Add(key As String, jsonableObject As IJSONable)
        parameters:
        - id: key
          type: System.String
        - id: jsonableObject
          type: Global.IJSONable
      overload: Global.JSON.Add*
    - id: Global.JSON.Add(System.String,System.Collections.Generic.IEnumerable{IJSONable})
      commentId: M:Global.JSON.Add(System.String,System.Collections.Generic.IEnumerable{IJSONable})
      language: CSharp
      name:
        CSharp: Add(string, IEnumerable<IJSONable>)
        VB: Add(String, IEnumerable(Of IJSONable))
      nameWithType:
        CSharp: JSON.Add(string, IEnumerable<IJSONable>)
        VB: JSON.Add(String, IEnumerable(Of IJSONable))
      qualifiedName:
        CSharp: JSON.Add(string, System.Collections.Generic.IEnumerable<IJSONable>)
        VB: JSON.Add(String, System.Collections.Generic.IEnumerable(Of IJSONable))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Add
        path: ''
        startLine: 11201
      summary: "\nAdds the string forms of the JSON of the given objects to this JSON object in the format of a JSON array.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(string key, IEnumerable<IJSONable> jsonableObjects)
          VB: Public Sub Add(key As String, jsonableObjects As IEnumerable(Of IJSONable))
        parameters:
        - id: key
          type: System.String
        - id: jsonableObjects
          type: System.Collections.Generic.IEnumerable{IJSONable}
      overload: Global.JSON.Add*
    - id: Global.JSON.Add(System.String,System.Object)
      commentId: M:Global.JSON.Add(System.String,System.Object)
      language: CSharp
      name:
        CSharp: Add(string, object)
        VB: Add(String, Object)
      nameWithType:
        CSharp: JSON.Add(string, object)
        VB: JSON.Add(String, Object)
      qualifiedName:
        CSharp: JSON.Add(string, object)
        VB: JSON.Add(String, Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Add
        path: ''
        startLine: 11206
      summary: "\nAdds the string form of the given object to the JSON, adding no quotation marks.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(string key, object obj)
          VB: Public Sub Add(key As String, obj As Object)
        parameters:
        - id: key
          type: System.String
        - id: obj
          type: System.Object
      overload: Global.JSON.Add*
    - id: Global.JSON.Add(System.String,System.Object,System.Boolean)
      commentId: M:Global.JSON.Add(System.String,System.Object,System.Boolean)
      language: CSharp
      name:
        CSharp: Add(string, object, bool)
        VB: Add(String, Object, Boolean)
      nameWithType:
        CSharp: JSON.Add(string, object, bool)
        VB: JSON.Add(String, Object, Boolean)
      qualifiedName:
        CSharp: JSON.Add(string, object, bool)
        VB: JSON.Add(String, Object, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Add
        path: ''
        startLine: 11210
      summary: "\nAdds the string form of the given object to the JSON.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(string key, object obj, bool addQuotationMarks)
          VB: Public Sub Add(key As String, obj As Object, addQuotationMarks As Boolean)
        parameters:
        - id: key
          type: System.String
        - id: obj
          type: System.Object
        - id: addQuotationMarks
          type: System.Boolean
      overload: Global.JSON.Add*
    - id: Global.JSON.Add(System.String,System.Collections.IEnumerable,System.Boolean)
      commentId: M:Global.JSON.Add(System.String,System.Collections.IEnumerable,System.Boolean)
      language: CSharp
      name:
        CSharp: Add(string, IEnumerable, bool)
        VB: Add(String, IEnumerable, Boolean)
      nameWithType:
        CSharp: JSON.Add(string, IEnumerable, bool)
        VB: JSON.Add(String, IEnumerable, Boolean)
      qualifiedName:
        CSharp: JSON.Add(string, System.Collections.IEnumerable, bool)
        VB: JSON.Add(String, System.Collections.IEnumerable, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Add
        path: ''
        startLine: 11215
      summary: "\nAdds the string form of the given objects to the JSON in the format of a JSON array, adding no quotation marks.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(string key, IEnumerable objects, bool separateLines)
          VB: Public Sub Add(key As String, objects As IEnumerable, separateLines As Boolean)
        parameters:
        - id: key
          type: System.String
        - id: objects
          type: System.Collections.IEnumerable
        - id: separateLines
          type: System.Boolean
          description: Whether to start a new line for each element of the array.
      overload: Global.JSON.Add*
    - id: Global.JSON.Add(System.String,System.Collections.IEnumerable,System.Boolean,System.Boolean)
      commentId: M:Global.JSON.Add(System.String,System.Collections.IEnumerable,System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: Add(string, IEnumerable, bool, bool)
        VB: Add(String, IEnumerable, Boolean, Boolean)
      nameWithType:
        CSharp: JSON.Add(string, IEnumerable, bool, bool)
        VB: JSON.Add(String, IEnumerable, Boolean, Boolean)
      qualifiedName:
        CSharp: JSON.Add(string, System.Collections.IEnumerable, bool, bool)
        VB: JSON.Add(String, System.Collections.IEnumerable, Boolean, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Add
        path: ''
        startLine: 11221
      summary: "\nAdds the string form of the given objects to the JSON in the format of a JSON array.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(string key, IEnumerable objects, bool separateLines, bool addQuotationMarks)
          VB: Public Sub Add(key As String, objects As IEnumerable, separateLines As Boolean, addQuotationMarks As Boolean)
        parameters:
        - id: key
          type: System.String
        - id: objects
          type: System.Collections.IEnumerable
        - id: separateLines
          type: System.Boolean
          description: Whether to start a new line for each element of the array.
        - id: addQuotationMarks
          type: System.Boolean
          description: Whether to add quotation marks around each element of the array.
      overload: Global.JSON.Add*
    - id: Global.JSON.Append(JSON)
      commentId: M:Global.JSON.Append(JSON)
      language: CSharp
      name:
        CSharp: Append(JSON)
        VB: Append(JSON)
      nameWithType:
        CSharp: JSON.Append(JSON)
        VB: JSON.Append(JSON)
      qualifiedName:
        CSharp: JSON.Append(JSON)
        VB: JSON.Append(JSON)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Append
        path: ''
        startLine: 11226
      summary: "\nAdds the data of the given JSON object to the end of this JSON object. Throws error if they have a key in common.\n"
      example: []
      syntax:
        content:
          CSharp: public void Append(JSON json)
          VB: Public Sub Append(json As JSON)
        parameters:
        - id: json
          type: Global.JSON
      overload: Global.JSON.Append*
    - id: Global.JSON.Parse(System.String)
      commentId: M:Global.JSON.Parse(System.String)
      language: CSharp
      name:
        CSharp: Parse(string)
        VB: Parse(String)
      nameWithType:
        CSharp: JSON.Parse(string)
        VB: JSON.Parse(String)
      qualifiedName:
        CSharp: JSON.Parse(string)
        VB: JSON.Parse(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Parse
        path: ''
        startLine: 11242
      summary: "\nParses the JSON string into a new JSON object.\n"
      example: []
      syntax:
        content:
          CSharp: public static JSON Parse(string jsonToParse)
          VB: Public Shared Function Parse(jsonToParse As String) As JSON
        parameters:
        - id: jsonToParse
          type: System.String
        return:
          type: Global.JSON
      overload: Global.JSON.Parse*
    - id: Global.JSON.AddParse(System.String)
      commentId: M:Global.JSON.AddParse(System.String)
      language: CSharp
      name:
        CSharp: AddParse(string)
        VB: AddParse(String)
      nameWithType:
        CSharp: JSON.AddParse(string)
        VB: JSON.AddParse(String)
      qualifiedName:
        CSharp: JSON.AddParse(string)
        VB: JSON.AddParse(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddParse
        path: ''
        startLine: 11249
      summary: "\nParses the JSON string and adds all data to this JSON object. Does not delete any existing data in this object, except when keys collide, in which case new data will override old data.\n"
      example: []
      syntax:
        content:
          CSharp: public void AddParse(string jsonToParse)
          VB: Public Sub AddParse(jsonToParse As String)
        parameters:
        - id: jsonToParse
          type: System.String
      overload: Global.JSON.AddParse*
    - id: Global.JSON.StripQuotationMarks(System.String)
      commentId: M:Global.JSON.StripQuotationMarks(System.String)
      language: CSharp
      name:
        CSharp: StripQuotationMarks(string)
        VB: StripQuotationMarks(String)
      nameWithType:
        CSharp: JSON.StripQuotationMarks(string)
        VB: JSON.StripQuotationMarks(String)
      qualifiedName:
        CSharp: JSON.StripQuotationMarks(string)
        VB: JSON.StripQuotationMarks(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: StripQuotationMarks
        path: ''
        startLine: 11359
      summary: "\nRemoves the &quot; &quot; pair enclosing a string, if there is one; otherwise throws an error.\n"
      example: []
      syntax:
        content:
          CSharp: public static string StripQuotationMarks(string str)
          VB: Public Shared Function StripQuotationMarks(str As String) As String
        parameters:
        - id: str
          type: System.String
          description: ''
        return:
          type: System.String
          description: ''
      overload: Global.JSON.StripQuotationMarks*
    - id: Global.JSON.ToString
      commentId: M:Global.JSON.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: JSON.ToString()
        VB: JSON.ToString()
      qualifiedName:
        CSharp: JSON.ToString()
        VB: JSON.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToString
        path: ''
        startLine: 11373
      summary: "\nReturns the data as a string in JSON format.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString() As String
        return:
          type: System.String
      overload: Global.JSON.ToString*
      overridden: System.Object.ToString
    - id: Global.JSON.ToJSONString(System.Collections.Generic.IEnumerable{IJSONable})
      commentId: M:Global.JSON.ToJSONString(System.Collections.Generic.IEnumerable{IJSONable})
      language: CSharp
      name:
        CSharp: ToJSONString(IEnumerable<IJSONable>)
        VB: ToJSONString(IEnumerable(Of IJSONable))
      nameWithType:
        CSharp: JSON.ToJSONString(IEnumerable<IJSONable>)
        VB: JSON.ToJSONString(IEnumerable(Of IJSONable))
      qualifiedName:
        CSharp: JSON.ToJSONString(System.Collections.Generic.IEnumerable<IJSONable>)
        VB: JSON.ToJSONString(System.Collections.Generic.IEnumerable(Of IJSONable))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToJSONString
        path: ''
        startLine: 11420
      summary: "\nReturns the JSON of the given objects in a JSON-format array in string form.\n"
      example: []
      syntax:
        content:
          CSharp: public static string ToJSONString(IEnumerable<IJSONable> jsonableObjects)
          VB: Public Shared Function ToJSONString(jsonableObjects As IEnumerable(Of IJSONable)) As String
        parameters:
        - id: jsonableObjects
          type: System.Collections.Generic.IEnumerable{IJSONable}
        return:
          type: System.String
      overload: Global.JSON.ToJSONString*
    - id: Global.JSON.ToJSONString(System.Collections.IEnumerable,System.Boolean)
      commentId: M:Global.JSON.ToJSONString(System.Collections.IEnumerable,System.Boolean)
      language: CSharp
      name:
        CSharp: ToJSONString(IEnumerable, bool)
        VB: ToJSONString(IEnumerable, Boolean)
      nameWithType:
        CSharp: JSON.ToJSONString(IEnumerable, bool)
        VB: JSON.ToJSONString(IEnumerable, Boolean)
      qualifiedName:
        CSharp: JSON.ToJSONString(System.Collections.IEnumerable, bool)
        VB: JSON.ToJSONString(System.Collections.IEnumerable, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToJSONString
        path: ''
        startLine: 11427
      summary: "\nReturns the JSON of the given objects in a JSON-format array in string form, adding no quotation marks.\n"
      example: []
      syntax:
        content:
          CSharp: public static string ToJSONString(IEnumerable objects, bool separateLines)
          VB: Public Shared Function ToJSONString(objects As IEnumerable, separateLines As Boolean) As String
        parameters:
        - id: objects
          type: System.Collections.IEnumerable
        - id: separateLines
          type: System.Boolean
        return:
          type: System.String
      overload: Global.JSON.ToJSONString*
    - id: Global.JSON.ToJSONString(System.Collections.IEnumerable,System.Boolean,System.Boolean)
      commentId: M:Global.JSON.ToJSONString(System.Collections.IEnumerable,System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: ToJSONString(IEnumerable, bool, bool)
        VB: ToJSONString(IEnumerable, Boolean, Boolean)
      nameWithType:
        CSharp: JSON.ToJSONString(IEnumerable, bool, bool)
        VB: JSON.ToJSONString(IEnumerable, Boolean, Boolean)
      qualifiedName:
        CSharp: JSON.ToJSONString(System.Collections.IEnumerable, bool, bool)
        VB: JSON.ToJSONString(System.Collections.IEnumerable, Boolean, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToJSONString
        path: ''
        startLine: 11432
      summary: "\nReturns the JSON of the given objects in a JSON-format array in string form.\n"
      example: []
      syntax:
        content:
          CSharp: public static string ToJSONString(IEnumerable objects, bool separateLines, bool addQuotationMarks)
          VB: Public Shared Function ToJSONString(objects As IEnumerable, separateLines As Boolean, addQuotationMarks As Boolean) As String
        parameters:
        - id: objects
          type: System.Collections.IEnumerable
        - id: separateLines
          type: System.Boolean
        - id: addQuotationMarks
          type: System.Boolean
          description: Whether to add quotation marks around each element of the array.
        return:
          type: System.String
      overload: Global.JSON.ToJSONString*
    - id: Global.JSON.ToJSONString(System.Collections.Generic.IEnumerable{System.String},System.Boolean)
      commentId: M:Global.JSON.ToJSONString(System.Collections.Generic.IEnumerable{System.String},System.Boolean)
      language: CSharp
      name:
        CSharp: ToJSONString(IEnumerable<string>, bool)
        VB: ToJSONString(IEnumerable(Of String), Boolean)
      nameWithType:
        CSharp: JSON.ToJSONString(IEnumerable<string>, bool)
        VB: JSON.ToJSONString(IEnumerable(Of String), Boolean)
      qualifiedName:
        CSharp: JSON.ToJSONString(System.Collections.Generic.IEnumerable<string>, bool)
        VB: JSON.ToJSONString(System.Collections.Generic.IEnumerable(Of String), Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToJSONString
        path: ''
        startLine: 11444
      summary: "\nReturns the given strings in a JSON-format array in string form, adding quotation marks around each element.\n"
      example: []
      syntax:
        content:
          CSharp: public static string ToJSONString(IEnumerable<string> strings, bool separateLines)
          VB: Public Shared Function ToJSONString(strings As IEnumerable(Of String), separateLines As Boolean) As String
        parameters:
        - id: strings
          type: System.Collections.Generic.IEnumerable{System.String}
        - id: separateLines
          type: System.Boolean
        return:
          type: System.String
      overload: Global.JSON.ToJSONString*
    - id: Global.JSON.ToJSONString(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)
      commentId: M:Global.JSON.ToJSONString(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: ToJSONString(IEnumerable<string>, bool, bool)
        VB: ToJSONString(IEnumerable(Of String), Boolean, Boolean)
      nameWithType:
        CSharp: JSON.ToJSONString(IEnumerable<string>, bool, bool)
        VB: JSON.ToJSONString(IEnumerable(Of String), Boolean, Boolean)
      qualifiedName:
        CSharp: JSON.ToJSONString(System.Collections.Generic.IEnumerable<string>, bool, bool)
        VB: JSON.ToJSONString(System.Collections.Generic.IEnumerable(Of String), Boolean, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToJSONString
        path: ''
        startLine: 11449
      summary: "\nReturns the given strings in a JSON-format array in string form.\n"
      example: []
      syntax:
        content:
          CSharp: public static string ToJSONString(IEnumerable<string> strings, bool separateLines, bool addQuotationMarks)
          VB: Public Shared Function ToJSONString(strings As IEnumerable(Of String), separateLines As Boolean, addQuotationMarks As Boolean) As String
        parameters:
        - id: strings
          type: System.Collections.Generic.IEnumerable{System.String}
        - id: separateLines
          type: System.Boolean
        - id: addQuotationMarks
          type: System.Boolean
          description: Whether to add quotation marks around each element of the array.
        return:
          type: System.String
      overload: Global.JSON.ToJSONString*
    - id: Global.JSON.SplitArray(System.String)
      commentId: M:Global.JSON.SplitArray(System.String)
      language: CSharp
      name:
        CSharp: SplitArray(string)
        VB: SplitArray(String)
      nameWithType:
        CSharp: JSON.SplitArray(string)
        VB: JSON.SplitArray(String)
      qualifiedName:
        CSharp: JSON.SplitArray(string)
        VB: JSON.SplitArray(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SplitArray
        path: ''
        startLine: 11499
      summary: "\nSplits a JSON string representing an array into a string[] of the data.\n"
      example: []
      syntax:
        content:
          CSharp: public static string[] SplitArray(string jsonString)
          VB: Public Shared Function SplitArray(jsonString As String) As String()
        parameters:
        - id: jsonString
          type: System.String
          description: Include the start/end square brackets in the string.
        return:
          type: System.String[]
      overload: Global.JSON.SplitArray*
  - id: Global.JSON.JSONProperty
    commentId: T:Global.JSON.JSONProperty
    language: CSharp
    name:
      CSharp: JSON.JSONProperty
      VB: JSON.JSONProperty
    nameWithType:
      CSharp: JSON.JSONProperty
      VB: JSON.JSONProperty
    qualifiedName:
      CSharp: JSON.JSONProperty
      VB: JSON.JSONProperty
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: JSONProperty
      path: ''
      startLine: 11095
    summary: "\nA class to store an individual piece of JSON data.\n"
    example: []
    syntax:
      content:
        CSharp: public class JSON.JSONProperty
        VB: Public Class JSON.JSONProperty
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.JSON.JSONProperty.data
      commentId: F:Global.JSON.JSONProperty.data
      language: CSharp
      name:
        CSharp: data
        VB: data
      nameWithType:
        CSharp: JSON.JSONProperty.data
        VB: JSON.JSONProperty.data
      qualifiedName:
        CSharp: JSON.JSONProperty.data
        VB: JSON.JSONProperty.data
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: data
        path: ''
        startLine: 11098
      summary: The data.
      example: []
      syntax:
        content:
          CSharp: public string data
          VB: Public data As String
        return:
          type: System.String
    - id: Global.JSON.JSONProperty.addQuotationMarks
      commentId: F:Global.JSON.JSONProperty.addQuotationMarks
      language: CSharp
      name:
        CSharp: addQuotationMarks
        VB: addQuotationMarks
      nameWithType:
        CSharp: JSON.JSONProperty.addQuotationMarks
        VB: JSON.JSONProperty.addQuotationMarks
      qualifiedName:
        CSharp: JSON.JSONProperty.addQuotationMarks
        VB: JSON.JSONProperty.addQuotationMarks
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: addQuotationMarks
        path: ''
        startLine: 11100
      summary: Whether quotation marks should be added around the data - e.g. if the data represents a string.
      example: []
      syntax:
        content:
          CSharp: public bool addQuotationMarks
          VB: Public addQuotationMarks As Boolean
        return:
          type: System.Boolean
    - id: Global.JSON.JSONProperty.#ctor(System.String,System.Boolean)
      commentId: M:Global.JSON.JSONProperty.#ctor(System.String,System.Boolean)
      language: CSharp
      name:
        CSharp: JSONProperty(string, bool)
        VB: New(String, Boolean)
      nameWithType:
        CSharp: JSON.JSONProperty.JSONProperty(string, bool)
        VB: JSON.JSONProperty.New(String, Boolean)
      qualifiedName:
        CSharp: JSON.JSONProperty.JSONProperty(string, bool)
        VB: JSON.JSONProperty.New(String, Boolean)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 11103
      example: []
      syntax:
        content:
          CSharp: public JSONProperty(string data, bool addQuotationMarks)
          VB: Public Sub New(data As String, addQuotationMarks As Boolean)
        parameters:
        - id: data
          type: System.String
        - id: addQuotationMarks
          type: System.Boolean
          description: Whether quotation marks should be added around the data - e.g. if the data represents a string.
      overload: Global.JSON.JSONProperty.#ctor*
  - id: Global.CustomKeyCode
    commentId: T:Global.CustomKeyCode
    language: CSharp
    name:
      CSharp: CustomKeyCode
      VB: CustomKeyCode
    nameWithType:
      CSharp: CustomKeyCode
      VB: CustomKeyCode
    qualifiedName:
      CSharp: CustomKeyCode
      VB: CustomKeyCode
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: CustomKeyCode
      path: ''
      startLine: 11595
    summary: "\nA class to supersede Unity&apos;s KeyCode enum to allow keycodes to refer to multiple keys - e.g. Shift instead of separated into LeftShift and RightShift.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class CustomKeyCode : IEnumerable'
        VB: Public Class CustomKeyCode Implements IEnumerable
    inheritance:
    - System.Object
    implements:
    - System.Collections.IEnumerable
    inheritedMembers:
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    items:
    - id: Global.CustomKeyCode.displayName
      commentId: P:Global.CustomKeyCode.displayName
      language: CSharp
      name:
        CSharp: displayName
        VB: displayName
      nameWithType:
        CSharp: CustomKeyCode.displayName
        VB: CustomKeyCode.displayName
      qualifiedName:
        CSharp: CustomKeyCode.displayName
        VB: CustomKeyCode.displayName
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: displayName
        path: ''
        startLine: 11598
      summary: What will be returned from ToString().
      example: []
      syntax:
        content:
          CSharp: public string displayName { get; }
          VB: Public Property displayName As String
        parameters: []
        return:
          type: System.String
      overload: Global.CustomKeyCode.displayName*
    - id: Global.CustomKeyCode.keyCodes
      commentId: P:Global.CustomKeyCode.keyCodes
      language: CSharp
      name:
        CSharp: keyCodes
        VB: keyCodes
      nameWithType:
        CSharp: CustomKeyCode.keyCodes
        VB: CustomKeyCode.keyCodes
      qualifiedName:
        CSharp: CustomKeyCode.keyCodes
        VB: CustomKeyCode.keyCodes
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: keyCodes
        path: ''
        startLine: 11601
      summary: The Unity KeyCodes comprising this keycode.
      example: []
      syntax:
        content:
          CSharp: public List<KeyCode> keyCodes { get; }
          VB: Public Property keyCodes As List(Of KeyCode)
        parameters: []
        return:
          type: System.Collections.Generic.List{KeyCode}
      overload: Global.CustomKeyCode.keyCodes*
    - id: Global.CustomKeyCode.Shift
      commentId: F:Global.CustomKeyCode.Shift
      language: CSharp
      name:
        CSharp: Shift
        VB: Shift
      nameWithType:
        CSharp: CustomKeyCode.Shift
        VB: CustomKeyCode.Shift
      qualifiedName:
        CSharp: CustomKeyCode.Shift
        VB: CustomKeyCode.Shift
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Shift
        path: ''
        startLine: 11604
      example: []
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode Shift
          VB: Public Shared ReadOnly Shift As CustomKeyCode
        return:
          type: Global.CustomKeyCode
    - id: Global.CustomKeyCode.Alt
      commentId: F:Global.CustomKeyCode.Alt
      language: CSharp
      name:
        CSharp: Alt
        VB: Alt
      nameWithType:
        CSharp: CustomKeyCode.Alt
        VB: CustomKeyCode.Alt
      qualifiedName:
        CSharp: CustomKeyCode.Alt
        VB: CustomKeyCode.Alt
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Alt
        path: ''
        startLine: 11605
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode Alt
          VB: Public Shared ReadOnly Alt As CustomKeyCode
        return:
          type: Global.CustomKeyCode
    - id: Global.CustomKeyCode.Ctrl
      commentId: F:Global.CustomKeyCode.Ctrl
      language: CSharp
      name:
        CSharp: Ctrl
        VB: Ctrl
      nameWithType:
        CSharp: CustomKeyCode.Ctrl
        VB: CustomKeyCode.Ctrl
      qualifiedName:
        CSharp: CustomKeyCode.Ctrl
        VB: CustomKeyCode.Ctrl
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Ctrl
        path: ''
        startLine: 11606
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode Ctrl
          VB: Public Shared ReadOnly Ctrl As CustomKeyCode
        return:
          type: Global.CustomKeyCode
    - id: Global.CustomKeyCode.Plus
      commentId: F:Global.CustomKeyCode.Plus
      language: CSharp
      name:
        CSharp: Plus
        VB: Plus
      nameWithType:
        CSharp: CustomKeyCode.Plus
        VB: CustomKeyCode.Plus
      qualifiedName:
        CSharp: CustomKeyCode.Plus
        VB: CustomKeyCode.Plus
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Plus
        path: ''
        startLine: 11608
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode Plus
          VB: Public Shared ReadOnly Plus As CustomKeyCode
        return:
          type: Global.CustomKeyCode
    - id: Global.CustomKeyCode.Minus
      commentId: F:Global.CustomKeyCode.Minus
      language: CSharp
      name:
        CSharp: Minus
        VB: Minus
      nameWithType:
        CSharp: CustomKeyCode.Minus
        VB: CustomKeyCode.Minus
      qualifiedName:
        CSharp: CustomKeyCode.Minus
        VB: CustomKeyCode.Minus
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Minus
        path: ''
        startLine: 11609
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode Minus
          VB: Public Shared ReadOnly Minus As CustomKeyCode
        return:
          type: Global.CustomKeyCode
    - id: Global.CustomKeyCode._0
      commentId: F:Global.CustomKeyCode._0
      language: CSharp
      name:
        CSharp: _0
        VB: _0
      nameWithType:
        CSharp: CustomKeyCode._0
        VB: CustomKeyCode._0
      qualifiedName:
        CSharp: CustomKeyCode._0
        VB: CustomKeyCode._0
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: _0
        path: ''
        startLine: 11612
      summary: The keycode for 0.
      example: []
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode _0
          VB: Public Shared ReadOnly _0 As CustomKeyCode
        return:
          type: Global.CustomKeyCode
    - id: Global.CustomKeyCode._1
      commentId: F:Global.CustomKeyCode._1
      language: CSharp
      name:
        CSharp: _1
        VB: _1
      nameWithType:
        CSharp: CustomKeyCode._1
        VB: CustomKeyCode._1
      qualifiedName:
        CSharp: CustomKeyCode._1
        VB: CustomKeyCode._1
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: _1
        path: ''
        startLine: 11614
      summary: The keycode for 1.
      example: []
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode _1
          VB: Public Shared ReadOnly _1 As CustomKeyCode
        return:
          type: Global.CustomKeyCode
    - id: Global.CustomKeyCode._2
      commentId: F:Global.CustomKeyCode._2
      language: CSharp
      name:
        CSharp: _2
        VB: _2
      nameWithType:
        CSharp: CustomKeyCode._2
        VB: CustomKeyCode._2
      qualifiedName:
        CSharp: CustomKeyCode._2
        VB: CustomKeyCode._2
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: _2
        path: ''
        startLine: 11616
      summary: The keycode for 2.
      example: []
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode _2
          VB: Public Shared ReadOnly _2 As CustomKeyCode
        return:
          type: Global.CustomKeyCode
    - id: Global.CustomKeyCode._3
      commentId: F:Global.CustomKeyCode._3
      language: CSharp
      name:
        CSharp: _3
        VB: _3
      nameWithType:
        CSharp: CustomKeyCode._3
        VB: CustomKeyCode._3
      qualifiedName:
        CSharp: CustomKeyCode._3
        VB: CustomKeyCode._3
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: _3
        path: ''
        startLine: 11618
      summary: The keycode for 3.
      example: []
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode _3
          VB: Public Shared ReadOnly _3 As CustomKeyCode
        return:
          type: Global.CustomKeyCode
    - id: Global.CustomKeyCode._4
      commentId: F:Global.CustomKeyCode._4
      language: CSharp
      name:
        CSharp: _4
        VB: _4
      nameWithType:
        CSharp: CustomKeyCode._4
        VB: CustomKeyCode._4
      qualifiedName:
        CSharp: CustomKeyCode._4
        VB: CustomKeyCode._4
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: _4
        path: ''
        startLine: 11620
      summary: The keycode for 4.
      example: []
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode _4
          VB: Public Shared ReadOnly _4 As CustomKeyCode
        return:
          type: Global.CustomKeyCode
    - id: Global.CustomKeyCode._5
      commentId: F:Global.CustomKeyCode._5
      language: CSharp
      name:
        CSharp: _5
        VB: _5
      nameWithType:
        CSharp: CustomKeyCode._5
        VB: CustomKeyCode._5
      qualifiedName:
        CSharp: CustomKeyCode._5
        VB: CustomKeyCode._5
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: _5
        path: ''
        startLine: 11622
      summary: The keycode for 5.
      example: []
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode _5
          VB: Public Shared ReadOnly _5 As CustomKeyCode
        return:
          type: Global.CustomKeyCode
    - id: Global.CustomKeyCode._6
      commentId: F:Global.CustomKeyCode._6
      language: CSharp
      name:
        CSharp: _6
        VB: _6
      nameWithType:
        CSharp: CustomKeyCode._6
        VB: CustomKeyCode._6
      qualifiedName:
        CSharp: CustomKeyCode._6
        VB: CustomKeyCode._6
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: _6
        path: ''
        startLine: 11624
      summary: The keycode for 6.
      example: []
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode _6
          VB: Public Shared ReadOnly _6 As CustomKeyCode
        return:
          type: Global.CustomKeyCode
    - id: Global.CustomKeyCode._7
      commentId: F:Global.CustomKeyCode._7
      language: CSharp
      name:
        CSharp: _7
        VB: _7
      nameWithType:
        CSharp: CustomKeyCode._7
        VB: CustomKeyCode._7
      qualifiedName:
        CSharp: CustomKeyCode._7
        VB: CustomKeyCode._7
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: _7
        path: ''
        startLine: 11626
      summary: The keycode for 7.
      example: []
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode _7
          VB: Public Shared ReadOnly _7 As CustomKeyCode
        return:
          type: Global.CustomKeyCode
    - id: Global.CustomKeyCode._8
      commentId: F:Global.CustomKeyCode._8
      language: CSharp
      name:
        CSharp: _8
        VB: _8
      nameWithType:
        CSharp: CustomKeyCode._8
        VB: CustomKeyCode._8
      qualifiedName:
        CSharp: CustomKeyCode._8
        VB: CustomKeyCode._8
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: _8
        path: ''
        startLine: 11628
      summary: The keycode for 8.
      example: []
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode _8
          VB: Public Shared ReadOnly _8 As CustomKeyCode
        return:
          type: Global.CustomKeyCode
    - id: Global.CustomKeyCode._9
      commentId: F:Global.CustomKeyCode._9
      language: CSharp
      name:
        CSharp: _9
        VB: _9
      nameWithType:
        CSharp: CustomKeyCode._9
        VB: CustomKeyCode._9
      qualifiedName:
        CSharp: CustomKeyCode._9
        VB: CustomKeyCode._9
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: _9
        path: ''
        startLine: 11630
      summary: The keycode for 9.
      example: []
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode _9
          VB: Public Shared ReadOnly _9 As CustomKeyCode
        return:
          type: Global.CustomKeyCode
    - id: Global.CustomKeyCode.GreaterThan
      commentId: F:Global.CustomKeyCode.GreaterThan
      language: CSharp
      name:
        CSharp: GreaterThan
        VB: GreaterThan
      nameWithType:
        CSharp: CustomKeyCode.GreaterThan
        VB: CustomKeyCode.GreaterThan
      qualifiedName:
        CSharp: CustomKeyCode.GreaterThan
        VB: CustomKeyCode.GreaterThan
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GreaterThan
        path: ''
        startLine: 11632
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode GreaterThan
          VB: Public Shared ReadOnly GreaterThan As CustomKeyCode
        return:
          type: Global.CustomKeyCode
    - id: Global.CustomKeyCode.LessThan
      commentId: F:Global.CustomKeyCode.LessThan
      language: CSharp
      name:
        CSharp: LessThan
        VB: LessThan
      nameWithType:
        CSharp: CustomKeyCode.LessThan
        VB: CustomKeyCode.LessThan
      qualifiedName:
        CSharp: CustomKeyCode.LessThan
        VB: CustomKeyCode.LessThan
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LessThan
        path: ''
        startLine: 11633
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode LessThan
          VB: Public Shared ReadOnly LessThan As CustomKeyCode
        return:
          type: Global.CustomKeyCode
    - id: Global.CustomKeyCode.combinedKeyCodes
      commentId: F:Global.CustomKeyCode.combinedKeyCodes
      language: CSharp
      name:
        CSharp: combinedKeyCodes
        VB: combinedKeyCodes
      nameWithType:
        CSharp: CustomKeyCode.combinedKeyCodes
        VB: CustomKeyCode.combinedKeyCodes
      qualifiedName:
        CSharp: CustomKeyCode.combinedKeyCodes
        VB: CustomKeyCode.combinedKeyCodes
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: combinedKeyCodes
        path: ''
        startLine: 11636
      summary: All the defined keycodes that combine multiple Unity KeyCodes.
      example: []
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode[] combinedKeyCodes
          VB: Public Shared ReadOnly combinedKeyCodes As CustomKeyCode()
        return:
          type: Global.CustomKeyCode[]
    - id: Global.CustomKeyCode.allKeyCodes
      commentId: F:Global.CustomKeyCode.allKeyCodes
      language: CSharp
      name:
        CSharp: allKeyCodes
        VB: allKeyCodes
      nameWithType:
        CSharp: CustomKeyCode.allKeyCodes
        VB: CustomKeyCode.allKeyCodes
      qualifiedName:
        CSharp: CustomKeyCode.allKeyCodes
        VB: CustomKeyCode.allKeyCodes
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: allKeyCodes
        path: ''
        startLine: 11638
      summary: All Unity KeyCodes and all combined keycodes.
      example: []
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode[] allKeyCodes
          VB: Public Shared ReadOnly allKeyCodes As CustomKeyCode()
        return:
          type: Global.CustomKeyCode[]
    - id: Global.CustomKeyCode.alphabet
      commentId: F:Global.CustomKeyCode.alphabet
      language: CSharp
      name:
        CSharp: alphabet
        VB: alphabet
      nameWithType:
        CSharp: CustomKeyCode.alphabet
        VB: CustomKeyCode.alphabet
      qualifiedName:
        CSharp: CustomKeyCode.alphabet
        VB: CustomKeyCode.alphabet
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: alphabet
        path: ''
        startLine: 11641
      summary: The keycodes A-Z.
      example: []
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode[] alphabet
          VB: Public Shared ReadOnly alphabet As CustomKeyCode()
        return:
          type: Global.CustomKeyCode[]
    - id: Global.CustomKeyCode.digits
      commentId: F:Global.CustomKeyCode.digits
      language: CSharp
      name:
        CSharp: digits
        VB: digits
      nameWithType:
        CSharp: CustomKeyCode.digits
        VB: CustomKeyCode.digits
      qualifiedName:
        CSharp: CustomKeyCode.digits
        VB: CustomKeyCode.digits
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: digits
        path: ''
        startLine: 11644
      summary: The keycodes 0-9.
      example: []
      syntax:
        content:
          CSharp: public static readonly CustomKeyCode[] digits
          VB: Public Shared ReadOnly digits As CustomKeyCode()
        return:
          type: Global.CustomKeyCode[]
    - id: Global.CustomKeyCode.op_Implicit(KeyCode)~CustomKeyCode
      commentId: M:Global.CustomKeyCode.op_Implicit(KeyCode)~CustomKeyCode
      language: CSharp
      name:
        CSharp: implicit operator CustomKeyCode(KeyCode)
        VB: CType(KeyCode)
      nameWithType:
        CSharp: CustomKeyCode.implicit operator CustomKeyCode(KeyCode)
        VB: CustomKeyCode.CType(KeyCode)
      qualifiedName:
        CSharp: CustomKeyCode.implicit operator CustomKeyCode(KeyCode)
        VB: CustomKeyCode.CType(KeyCode)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Implicit
        path: ''
        startLine: 11663
      syntax:
        content:
          CSharp: public static implicit operator CustomKeyCode(KeyCode keyCode)
          VB: Public Shared Widening Operator CType(keyCode As KeyCode) As CustomKeyCode
        parameters:
        - id: keyCode
          type: Global.KeyCode
        return:
          type: Global.CustomKeyCode
      overload: Global.CustomKeyCode.op_Implicit*
    - id: Global.CustomKeyCode.op_Equality(CustomKeyCode,CustomKeyCode)
      commentId: M:Global.CustomKeyCode.op_Equality(CustomKeyCode,CustomKeyCode)
      language: CSharp
      name:
        CSharp: operator ==(CustomKeyCode, CustomKeyCode)
        VB: =(CustomKeyCode, CustomKeyCode)
      nameWithType:
        CSharp: CustomKeyCode.operator ==(CustomKeyCode, CustomKeyCode)
        VB: CustomKeyCode.=(CustomKeyCode, CustomKeyCode)
      qualifiedName:
        CSharp: CustomKeyCode.operator ==(CustomKeyCode, CustomKeyCode)
        VB: CustomKeyCode.=(CustomKeyCode, CustomKeyCode)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Equality
        path: ''
        startLine: 11675
      syntax:
        content:
          CSharp: public static bool operator ==(CustomKeyCode keyCode1, CustomKeyCode keyCode2)
          VB: Public Shared Operator =(keyCode1 As CustomKeyCode, keyCode2 As CustomKeyCode) As Boolean
        parameters:
        - id: keyCode1
          type: Global.CustomKeyCode
        - id: keyCode2
          type: Global.CustomKeyCode
        return:
          type: System.Boolean
      overload: Global.CustomKeyCode.op_Equality*
    - id: Global.CustomKeyCode.op_Inequality(CustomKeyCode,CustomKeyCode)
      commentId: M:Global.CustomKeyCode.op_Inequality(CustomKeyCode,CustomKeyCode)
      language: CSharp
      name:
        CSharp: operator !=(CustomKeyCode, CustomKeyCode)
        VB: <>(CustomKeyCode, CustomKeyCode)
      nameWithType:
        CSharp: CustomKeyCode.operator !=(CustomKeyCode, CustomKeyCode)
        VB: CustomKeyCode.<>(CustomKeyCode, CustomKeyCode)
      qualifiedName:
        CSharp: CustomKeyCode.operator !=(CustomKeyCode, CustomKeyCode)
        VB: CustomKeyCode.<>(CustomKeyCode, CustomKeyCode)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Inequality
        path: ''
        startLine: 11679
      syntax:
        content:
          CSharp: public static bool operator !=(CustomKeyCode keyCode1, CustomKeyCode keyCode2)
          VB: Public Shared Operator <>(keyCode1 As CustomKeyCode, keyCode2 As CustomKeyCode) As Boolean
        parameters:
        - id: keyCode1
          type: Global.CustomKeyCode
        - id: keyCode2
          type: Global.CustomKeyCode
        return:
          type: System.Boolean
      overload: Global.CustomKeyCode.op_Inequality*
    - id: Global.CustomKeyCode.Equals(System.Object)
      commentId: M:Global.CustomKeyCode.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(object)
        VB: Equals(Object)
      nameWithType:
        CSharp: CustomKeyCode.Equals(object)
        VB: CustomKeyCode.Equals(Object)
      qualifiedName:
        CSharp: CustomKeyCode.Equals(object)
        VB: CustomKeyCode.Equals(Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Equals
        path: ''
        startLine: 11684
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Global.CustomKeyCode.Equals*
      overridden: System.Object.Equals(System.Object)
    - id: Global.CustomKeyCode.GetHashCode
      commentId: M:Global.CustomKeyCode.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: CustomKeyCode.GetHashCode()
        VB: CustomKeyCode.GetHashCode()
      qualifiedName:
        CSharp: CustomKeyCode.GetHashCode()
        VB: CustomKeyCode.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetHashCode
        path: ''
        startLine: 11700
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode() As Integer
        return:
          type: System.Int32
      overload: Global.CustomKeyCode.GetHashCode*
      overridden: System.Object.GetHashCode
    - id: Global.CustomKeyCode.ToString
      commentId: M:Global.CustomKeyCode.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: CustomKeyCode.ToString()
        VB: CustomKeyCode.ToString()
      qualifiedName:
        CSharp: CustomKeyCode.ToString()
        VB: CustomKeyCode.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToString
        path: ''
        startLine: 11729
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString() As String
        return:
          type: System.String
      overload: Global.CustomKeyCode.ToString*
      overridden: System.Object.ToString
    - id: Global.CustomKeyCode.FromString(System.String)
      commentId: M:Global.CustomKeyCode.FromString(System.String)
      language: CSharp
      name:
        CSharp: FromString(string)
        VB: FromString(String)
      nameWithType:
        CSharp: CustomKeyCode.FromString(string)
        VB: CustomKeyCode.FromString(String)
      qualifiedName:
        CSharp: CustomKeyCode.FromString(string)
        VB: CustomKeyCode.FromString(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FromString
        path: ''
        startLine: 11737
      summary: "\nConverts a string into the keycode with that display name. Returns null if there isn&apos;t one.\n"
      example: []
      syntax:
        content:
          CSharp: public static CustomKeyCode FromString(string displayName)
          VB: Public Shared Function FromString(displayName As String) As CustomKeyCode
        parameters:
        - id: displayName
          type: System.String
        return:
          type: Global.CustomKeyCode
      overload: Global.CustomKeyCode.FromString*
    - id: Global.CustomKeyCode.GetKey
      commentId: M:Global.CustomKeyCode.GetKey
      language: CSharp
      name:
        CSharp: GetKey()
        VB: GetKey()
      nameWithType:
        CSharp: CustomKeyCode.GetKey()
        VB: CustomKeyCode.GetKey()
      qualifiedName:
        CSharp: CustomKeyCode.GetKey()
        VB: CustomKeyCode.GetKey()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetKey
        path: ''
        startLine: 11752
      summary: "\nReturns true while this key is being held down.\n"
      example: []
      syntax:
        content:
          CSharp: public bool GetKey()
          VB: Public Function GetKey() As Boolean
        return:
          type: System.Boolean
      overload: Global.CustomKeyCode.GetKey*
    - id: Global.CustomKeyCode.GetKeyDown
      commentId: M:Global.CustomKeyCode.GetKeyDown
      language: CSharp
      name:
        CSharp: GetKeyDown()
        VB: GetKeyDown()
      nameWithType:
        CSharp: CustomKeyCode.GetKeyDown()
        VB: CustomKeyCode.GetKeyDown()
      qualifiedName:
        CSharp: CustomKeyCode.GetKeyDown()
        VB: CustomKeyCode.GetKeyDown()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetKeyDown
        path: ''
        startLine: 11767
      summary: "\nReturns true the frame this key is pressed.\n"
      example: []
      syntax:
        content:
          CSharp: public bool GetKeyDown()
          VB: Public Function GetKeyDown() As Boolean
        return:
          type: System.Boolean
      overload: Global.CustomKeyCode.GetKeyDown*
    - id: Global.CustomKeyCode.GetKeyUp
      commentId: M:Global.CustomKeyCode.GetKeyUp
      language: CSharp
      name:
        CSharp: GetKeyUp()
        VB: GetKeyUp()
      nameWithType:
        CSharp: CustomKeyCode.GetKeyUp()
        VB: CustomKeyCode.GetKeyUp()
      qualifiedName:
        CSharp: CustomKeyCode.GetKeyUp()
        VB: CustomKeyCode.GetKeyUp()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetKeyUp
        path: ''
        startLine: 11782
      summary: "\nReturns true the frame this key is released.\n"
      example: []
      syntax:
        content:
          CSharp: public bool GetKeyUp()
          VB: Public Function GetKeyUp() As Boolean
        return:
          type: System.Boolean
      overload: Global.CustomKeyCode.GetKeyUp*
    - id: Global.CustomKeyCode.Contains(KeyCode)
      commentId: M:Global.CustomKeyCode.Contains(KeyCode)
      language: CSharp
      name:
        CSharp: Contains(KeyCode)
        VB: Contains(KeyCode)
      nameWithType:
        CSharp: CustomKeyCode.Contains(KeyCode)
        VB: CustomKeyCode.Contains(KeyCode)
      qualifiedName:
        CSharp: CustomKeyCode.Contains(KeyCode)
        VB: CustomKeyCode.Contains(KeyCode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Contains
        path: ''
        startLine: 11797
      summary: "\nReturns true if the Unity KeyCode forms part of this CustomKeyCode.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Contains(KeyCode keyCode)
          VB: Public Function Contains(keyCode As KeyCode) As Boolean
        parameters:
        - id: keyCode
          type: Global.KeyCode
        return:
          type: System.Boolean
      overload: Global.CustomKeyCode.Contains*
    - id: Global.CustomKeyCode.GetEnumerator
      commentId: M:Global.CustomKeyCode.GetEnumerator
      language: CSharp
      name:
        CSharp: GetEnumerator()
        VB: GetEnumerator()
      nameWithType:
        CSharp: CustomKeyCode.GetEnumerator()
        VB: CustomKeyCode.GetEnumerator()
      qualifiedName:
        CSharp: CustomKeyCode.GetEnumerator()
        VB: CustomKeyCode.GetEnumerator()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetEnumerator
        path: ''
        startLine: 11802
      syntax:
        content:
          CSharp: public IEnumerator GetEnumerator()
          VB: Public Function GetEnumerator() As IEnumerator
        return:
          type: System.Collections.IEnumerator
      overload: Global.CustomKeyCode.GetEnumerator*
      implements:
      - System.Collections.IEnumerable.GetEnumerator
  - id: Global.KeyboardShortcut
    commentId: T:Global.KeyboardShortcut
    language: CSharp
    name:
      CSharp: KeyboardShortcut
      VB: KeyboardShortcut
    nameWithType:
      CSharp: KeyboardShortcut
      VB: KeyboardShortcut
    qualifiedName:
      CSharp: KeyboardShortcut
      VB: KeyboardShortcut
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: KeyboardShortcut
      path: ''
      startLine: 11817
    summary: "\nA class to represent a single keyboard shortcut.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class KeyboardShortcut : IJSONable'
        VB: Public Class KeyboardShortcut Implements IJSONable
    inheritance:
    - System.Object
    implements:
    - Global.IJSONable
    inheritedMembers:
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    items:
    - id: Global.KeyboardShortcut.keyCodes
      commentId: P:Global.KeyboardShortcut.keyCodes
      language: CSharp
      name:
        CSharp: keyCodes
        VB: keyCodes
      nameWithType:
        CSharp: KeyboardShortcut.keyCodes
        VB: KeyboardShortcut.keyCodes
      qualifiedName:
        CSharp: KeyboardShortcut.keyCodes
        VB: KeyboardShortcut.keyCodes
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: keyCodes
        path: ''
        startLine: 11820
      summary: The keycodes in this shortcut, kept in the order they would be read.
      example: []
      syntax:
        content:
          CSharp: public List<CustomKeyCode> keyCodes { get; }
          VB: Public Property keyCodes As List(Of CustomKeyCode)
        parameters: []
        return:
          type: System.Collections.Generic.List{CustomKeyCode}
      overload: Global.KeyboardShortcut.keyCodes*
    - id: Global.KeyboardShortcut.None
      commentId: P:Global.KeyboardShortcut.None
      language: CSharp
      name:
        CSharp: None
        VB: None
      nameWithType:
        CSharp: KeyboardShortcut.None
        VB: KeyboardShortcut.None
      qualifiedName:
        CSharp: KeyboardShortcut.None
        VB: KeyboardShortcut.None
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: None
        path: ''
        startLine: 11823
      summary: The empty keyboard shortcut - i.e. no keycodes.
      example: []
      syntax:
        content:
          CSharp: public static KeyboardShortcut None { get; }
          VB: Public Shared ReadOnly Property None As KeyboardShortcut
        parameters: []
        return:
          type: Global.KeyboardShortcut
      overload: Global.KeyboardShortcut.None*
    - id: Global.KeyboardShortcut.#ctor(CustomKeyCode[])
      commentId: M:Global.KeyboardShortcut.#ctor(CustomKeyCode[])
      language: CSharp
      name:
        CSharp: KeyboardShortcut(params CustomKeyCode[])
        VB: New(ParamArray CustomKeyCode())
      nameWithType:
        CSharp: KeyboardShortcut.KeyboardShortcut(params CustomKeyCode[])
        VB: KeyboardShortcut.New(ParamArray CustomKeyCode())
      qualifiedName:
        CSharp: KeyboardShortcut.KeyboardShortcut(params CustomKeyCode[])
        VB: KeyboardShortcut.New(ParamArray CustomKeyCode())
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 11828
      summary: "\nCreates a shortcut from the given keycodes. Sorts the keycodes into the order they would be read.\n"
      example: []
      syntax:
        content:
          CSharp: public KeyboardShortcut(params CustomKeyCode[] keyCodes)
          VB: Public Sub New(ParamArray keyCodes As CustomKeyCode())
        parameters:
        - id: keyCodes
          type: Global.CustomKeyCode[]
      overload: Global.KeyboardShortcut.#ctor*
    - id: Global.KeyboardShortcut.op_Equality(KeyboardShortcut,KeyboardShortcut)
      commentId: M:Global.KeyboardShortcut.op_Equality(KeyboardShortcut,KeyboardShortcut)
      language: CSharp
      name:
        CSharp: operator ==(KeyboardShortcut, KeyboardShortcut)
        VB: =(KeyboardShortcut, KeyboardShortcut)
      nameWithType:
        CSharp: KeyboardShortcut.operator ==(KeyboardShortcut, KeyboardShortcut)
        VB: KeyboardShortcut.=(KeyboardShortcut, KeyboardShortcut)
      qualifiedName:
        CSharp: KeyboardShortcut.operator ==(KeyboardShortcut, KeyboardShortcut)
        VB: KeyboardShortcut.=(KeyboardShortcut, KeyboardShortcut)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Equality
        path: ''
        startLine: 11841
      summary: "\nChecks if the shortcuts have the same set of keycodes.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(KeyboardShortcut shortcut1, KeyboardShortcut shortcut2)
          VB: Public Shared Operator =(shortcut1 As KeyboardShortcut, shortcut2 As KeyboardShortcut) As Boolean
        parameters:
        - id: shortcut1
          type: Global.KeyboardShortcut
        - id: shortcut2
          type: Global.KeyboardShortcut
        return:
          type: System.Boolean
      overload: Global.KeyboardShortcut.op_Equality*
    - id: Global.KeyboardShortcut.op_Inequality(KeyboardShortcut,KeyboardShortcut)
      commentId: M:Global.KeyboardShortcut.op_Inequality(KeyboardShortcut,KeyboardShortcut)
      language: CSharp
      name:
        CSharp: operator !=(KeyboardShortcut, KeyboardShortcut)
        VB: <>(KeyboardShortcut, KeyboardShortcut)
      nameWithType:
        CSharp: KeyboardShortcut.operator !=(KeyboardShortcut, KeyboardShortcut)
        VB: KeyboardShortcut.<>(KeyboardShortcut, KeyboardShortcut)
      qualifiedName:
        CSharp: KeyboardShortcut.operator !=(KeyboardShortcut, KeyboardShortcut)
        VB: KeyboardShortcut.<>(KeyboardShortcut, KeyboardShortcut)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Inequality
        path: ''
        startLine: 11848
      summary: "\nChecks if the shortcuts do not have the same set of keycodes.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(KeyboardShortcut shortcut1, KeyboardShortcut shortcut2)
          VB: Public Shared Operator <>(shortcut1 As KeyboardShortcut, shortcut2 As KeyboardShortcut) As Boolean
        parameters:
        - id: shortcut1
          type: Global.KeyboardShortcut
        - id: shortcut2
          type: Global.KeyboardShortcut
        return:
          type: System.Boolean
      overload: Global.KeyboardShortcut.op_Inequality*
    - id: Global.KeyboardShortcut.Equals(System.Object)
      commentId: M:Global.KeyboardShortcut.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(object)
        VB: Equals(Object)
      nameWithType:
        CSharp: KeyboardShortcut.Equals(object)
        VB: KeyboardShortcut.Equals(Object)
      qualifiedName:
        CSharp: KeyboardShortcut.Equals(object)
        VB: KeyboardShortcut.Equals(Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Equals
        path: ''
        startLine: 11853
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Global.KeyboardShortcut.Equals*
      overridden: System.Object.Equals(System.Object)
    - id: Global.KeyboardShortcut.GetHashCode
      commentId: M:Global.KeyboardShortcut.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: KeyboardShortcut.GetHashCode()
        VB: KeyboardShortcut.GetHashCode()
      qualifiedName:
        CSharp: KeyboardShortcut.GetHashCode()
        VB: KeyboardShortcut.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetHashCode
        path: ''
        startLine: 11869
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode() As Integer
        return:
          type: System.Int32
      overload: Global.KeyboardShortcut.GetHashCode*
      overridden: System.Object.GetHashCode
    - id: Global.KeyboardShortcut.Add(CustomKeyCode)
      commentId: M:Global.KeyboardShortcut.Add(CustomKeyCode)
      language: CSharp
      name:
        CSharp: Add(CustomKeyCode)
        VB: Add(CustomKeyCode)
      nameWithType:
        CSharp: KeyboardShortcut.Add(CustomKeyCode)
        VB: KeyboardShortcut.Add(CustomKeyCode)
      qualifiedName:
        CSharp: KeyboardShortcut.Add(CustomKeyCode)
        VB: KeyboardShortcut.Add(CustomKeyCode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Add
        path: ''
        startLine: 11901
      summary: "\nAdds the keycode to the shortcut. Returns false if it was already in the shortcut; otherwise returns true.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Add(CustomKeyCode keyCode)
          VB: Public Function Add(keyCode As CustomKeyCode) As Boolean
        parameters:
        - id: keyCode
          type: Global.CustomKeyCode
        return:
          type: System.Boolean
      overload: Global.KeyboardShortcut.Add*
    - id: Global.KeyboardShortcut.Remove(CustomKeyCode)
      commentId: M:Global.KeyboardShortcut.Remove(CustomKeyCode)
      language: CSharp
      name:
        CSharp: Remove(CustomKeyCode)
        VB: Remove(CustomKeyCode)
      nameWithType:
        CSharp: KeyboardShortcut.Remove(CustomKeyCode)
        VB: KeyboardShortcut.Remove(CustomKeyCode)
      qualifiedName:
        CSharp: KeyboardShortcut.Remove(CustomKeyCode)
        VB: KeyboardShortcut.Remove(CustomKeyCode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Remove
        path: ''
        startLine: 11915
      summary: "\nRemoves the keycode from the shortcut. Returns false if the keycode already wasn&apos;t in the shortcut; otherwise returns true.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Remove(CustomKeyCode keyCode)
          VB: Public Function Remove(keyCode As CustomKeyCode) As Boolean
        parameters:
        - id: keyCode
          type: Global.CustomKeyCode
        return:
          type: System.Boolean
      overload: Global.KeyboardShortcut.Remove*
    - id: Global.KeyboardShortcut.Contains(CustomKeyCode)
      commentId: M:Global.KeyboardShortcut.Contains(CustomKeyCode)
      language: CSharp
      name:
        CSharp: Contains(CustomKeyCode)
        VB: Contains(CustomKeyCode)
      nameWithType:
        CSharp: KeyboardShortcut.Contains(CustomKeyCode)
        VB: KeyboardShortcut.Contains(CustomKeyCode)
      qualifiedName:
        CSharp: KeyboardShortcut.Contains(CustomKeyCode)
        VB: KeyboardShortcut.Contains(CustomKeyCode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Contains
        path: ''
        startLine: 11923
      summary: "\nReturns true if the keycode is in the shortcut.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Contains(CustomKeyCode keyCode)
          VB: Public Function Contains(keyCode As CustomKeyCode) As Boolean
        parameters:
        - id: keyCode
          type: Global.CustomKeyCode
        return:
          type: System.Boolean
      overload: Global.KeyboardShortcut.Contains*
    - id: Global.KeyboardShortcut.GetKeys
      commentId: M:Global.KeyboardShortcut.GetKeys
      language: CSharp
      name:
        CSharp: GetKeys()
        VB: GetKeys()
      nameWithType:
        CSharp: KeyboardShortcut.GetKeys()
        VB: KeyboardShortcut.GetKeys()
      qualifiedName:
        CSharp: KeyboardShortcut.GetKeys()
        VB: KeyboardShortcut.GetKeys()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetKeys
        path: ''
        startLine: 11931
      summary: "\nReturns true while all keys are being held down.\n"
      example: []
      syntax:
        content:
          CSharp: public bool GetKeys()
          VB: Public Function GetKeys() As Boolean
        return:
          type: System.Boolean
      overload: Global.KeyboardShortcut.GetKeys*
    - id: Global.KeyboardShortcut.GetKeysDown
      commentId: M:Global.KeyboardShortcut.GetKeysDown
      language: CSharp
      name:
        CSharp: GetKeysDown()
        VB: GetKeysDown()
      nameWithType:
        CSharp: KeyboardShortcut.GetKeysDown()
        VB: KeyboardShortcut.GetKeysDown()
      qualifiedName:
        CSharp: KeyboardShortcut.GetKeysDown()
        VB: KeyboardShortcut.GetKeysDown()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetKeysDown
        path: ''
        startLine: 11946
      summary: "\nReturns true the frame the final key is pressed.\n"
      example: []
      syntax:
        content:
          CSharp: public bool GetKeysDown()
          VB: Public Function GetKeysDown() As Boolean
        return:
          type: System.Boolean
      overload: Global.KeyboardShortcut.GetKeysDown*
    - id: Global.KeyboardShortcut.GetKeysUp
      commentId: M:Global.KeyboardShortcut.GetKeysUp
      language: CSharp
      name:
        CSharp: GetKeysUp()
        VB: GetKeysUp()
      nameWithType:
        CSharp: KeyboardShortcut.GetKeysUp()
        VB: KeyboardShortcut.GetKeysUp()
      qualifiedName:
        CSharp: KeyboardShortcut.GetKeysUp()
        VB: KeyboardShortcut.GetKeysUp()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetKeysUp
        path: ''
        startLine: 11966
      summary: "\nReturns true the frame (any key of) this shortcut is released.\n"
      example: []
      syntax:
        content:
          CSharp: public bool GetKeysUp()
          VB: Public Function GetKeysUp() As Boolean
        return:
          type: System.Boolean
      overload: Global.KeyboardShortcut.GetKeysUp*
    - id: Global.KeyboardShortcut.ToString
      commentId: M:Global.KeyboardShortcut.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: KeyboardShortcut.ToString()
        VB: KeyboardShortcut.ToString()
      qualifiedName:
        CSharp: KeyboardShortcut.ToString()
        VB: KeyboardShortcut.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToString
        path: ''
        startLine: 12052
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString() As String
        return:
          type: System.String
      overload: Global.KeyboardShortcut.ToString*
      overridden: System.Object.ToString
    - id: Global.KeyboardShortcut.ToArray
      commentId: M:Global.KeyboardShortcut.ToArray
      language: CSharp
      name:
        CSharp: ToArray()
        VB: ToArray()
      nameWithType:
        CSharp: KeyboardShortcut.ToArray()
        VB: KeyboardShortcut.ToArray()
      qualifiedName:
        CSharp: KeyboardShortcut.ToArray()
        VB: KeyboardShortcut.ToArray()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToArray
        path: ''
        startLine: 12060
      summary: "\nReturns an array of the keycodes in this shortcut, in the order they would be read.\n"
      example: []
      syntax:
        content:
          CSharp: public CustomKeyCode[] ToArray()
          VB: Public Function ToArray() As CustomKeyCode()
        return:
          type: Global.CustomKeyCode[]
      overload: Global.KeyboardShortcut.ToArray*
    - id: Global.KeyboardShortcut.ToJSON
      commentId: M:Global.KeyboardShortcut.ToJSON
      language: CSharp
      name:
        CSharp: ToJSON()
        VB: ToJSON()
      nameWithType:
        CSharp: KeyboardShortcut.ToJSON()
        VB: KeyboardShortcut.ToJSON()
      qualifiedName:
        CSharp: KeyboardShortcut.ToJSON()
        VB: KeyboardShortcut.ToJSON()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToJSON
        path: ''
        startLine: 12065
      syntax:
        content:
          CSharp: public JSON ToJSON()
          VB: Public Function ToJSON() As JSON
        return:
          type: Global.JSON
      overload: Global.KeyboardShortcut.ToJSON*
      implements:
      - Global.IJSONable.ToJSON
  - id: Global.KeyboardShortcutOptionsManager
    commentId: T:Global.KeyboardShortcutOptionsManager
    language: CSharp
    name:
      CSharp: KeyboardShortcutOptionsManager
      VB: KeyboardShortcutOptionsManager
    nameWithType:
      CSharp: KeyboardShortcutOptionsManager
      VB: KeyboardShortcutOptionsManager
    qualifiedName:
      CSharp: KeyboardShortcutOptionsManager
      VB: KeyboardShortcutOptionsManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: KeyboardShortcutOptionsManager
      path: ''
      startLine: 12084
    summary: "\nHandles the window where you can view / change keyboard shortcuts.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class KeyboardShortcutOptionsManager : MonoBehaviour'
        VB: Public Class KeyboardShortcutOptionsManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items: []
  - id: Global.KeyboardShortcuts
    commentId: T:Global.KeyboardShortcuts
    language: CSharp
    name:
      CSharp: KeyboardShortcuts
      VB: KeyboardShortcuts
    nameWithType:
      CSharp: KeyboardShortcuts
      VB: KeyboardShortcuts
    qualifiedName:
      CSharp: KeyboardShortcuts
      VB: KeyboardShortcuts
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: KeyboardShortcuts
      path: ''
      startLine: 12239
    summary: "\nA class for storing, loading and accessing keyboard shortcuts for defined actions.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class KeyboardShortcuts : MonoBehaviour'
        VB: Public Class KeyboardShortcuts Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.KeyboardShortcuts.shortcuts
      commentId: P:Global.KeyboardShortcuts.shortcuts
      language: CSharp
      name:
        CSharp: shortcuts
        VB: shortcuts
      nameWithType:
        CSharp: KeyboardShortcuts.shortcuts
        VB: KeyboardShortcuts.shortcuts
      qualifiedName:
        CSharp: KeyboardShortcuts.shortcuts
        VB: KeyboardShortcuts.shortcuts
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: shortcuts
        path: ''
        startLine: 12247
      summary: A key is an action name. A value is a list of the keyboard shortcuts for that action.
      example: []
      syntax:
        content:
          CSharp: public static Dictionary<string, List<KeyboardShortcut>> shortcuts { get; }
          VB: Public Shared Property shortcuts As Dictionary(Of String, List(Of KeyboardShortcut))
        parameters: []
        return:
          type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{KeyboardShortcut}}
      overload: Global.KeyboardShortcuts.shortcuts*
    - id: Global.KeyboardShortcuts.LoadShortcuts
      commentId: M:Global.KeyboardShortcuts.LoadShortcuts
      language: CSharp
      name:
        CSharp: LoadShortcuts()
        VB: LoadShortcuts()
      nameWithType:
        CSharp: KeyboardShortcuts.LoadShortcuts()
        VB: KeyboardShortcuts.LoadShortcuts()
      qualifiedName:
        CSharp: KeyboardShortcuts.LoadShortcuts()
        VB: KeyboardShortcuts.LoadShortcuts()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LoadShortcuts
        path: ''
        startLine: 12269
      summary: "\nLoads saved shortcuts from the disk.\n"
      example: []
      syntax:
        content:
          CSharp: public static void LoadShortcuts()
          VB: Public Shared Sub LoadShortcuts()
      overload: Global.KeyboardShortcuts.LoadShortcuts*
    - id: Global.KeyboardShortcuts.SaveShortcuts
      commentId: M:Global.KeyboardShortcuts.SaveShortcuts
      language: CSharp
      name:
        CSharp: SaveShortcuts()
        VB: SaveShortcuts()
      nameWithType:
        CSharp: KeyboardShortcuts.SaveShortcuts()
        VB: KeyboardShortcuts.SaveShortcuts()
      qualifiedName:
        CSharp: KeyboardShortcuts.SaveShortcuts()
        VB: KeyboardShortcuts.SaveShortcuts()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SaveShortcuts
        path: ''
        startLine: 12293
      summary: "\nSaves the current assignment of each shortcut to the disk.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SaveShortcuts()
          VB: Public Shared Sub SaveShortcuts()
      overload: Global.KeyboardShortcuts.SaveShortcuts*
    - id: Global.KeyboardShortcuts.ToJSON
      commentId: M:Global.KeyboardShortcuts.ToJSON
      language: CSharp
      name:
        CSharp: ToJSON()
        VB: ToJSON()
      nameWithType:
        CSharp: KeyboardShortcuts.ToJSON()
        VB: KeyboardShortcuts.ToJSON()
      qualifiedName:
        CSharp: KeyboardShortcuts.ToJSON()
        VB: KeyboardShortcuts.ToJSON()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToJSON
        path: ''
        startLine: 12304
      summary: "\nReturns the list of keyboard shortcuts as a JSON object.\n"
      example: []
      syntax:
        content:
          CSharp: public static JSON ToJSON()
          VB: Public Shared Function ToJSON() As JSON
        return:
          type: Global.JSON
      overload: Global.KeyboardShortcuts.ToJSON*
    - id: Global.KeyboardShortcuts.AddShortcut(System.String,CustomKeyCode[])
      commentId: M:Global.KeyboardShortcuts.AddShortcut(System.String,CustomKeyCode[])
      language: CSharp
      name:
        CSharp: AddShortcut(string, params CustomKeyCode[])
        VB: AddShortcut(String, ParamArray CustomKeyCode())
      nameWithType:
        CSharp: KeyboardShortcuts.AddShortcut(string, params CustomKeyCode[])
        VB: KeyboardShortcuts.AddShortcut(String, ParamArray CustomKeyCode())
      qualifiedName:
        CSharp: KeyboardShortcuts.AddShortcut(string, params CustomKeyCode[])
        VB: KeyboardShortcuts.AddShortcut(String, ParamArray CustomKeyCode())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddShortcut
        path: ''
        startLine: 12348
      summary: "\nCombines the given keycodes into a single shortcut and adds it for the given action.\n"
      example: []
      syntax:
        content:
          CSharp: public static void AddShortcut(string actionName, params CustomKeyCode[] keyCodes)
          VB: Public Shared Sub AddShortcut(actionName As String, ParamArray keyCodes As CustomKeyCode())
        parameters:
        - id: actionName
          type: System.String
        - id: keyCodes
          type: Global.CustomKeyCode[]
      overload: Global.KeyboardShortcuts.AddShortcut*
    - id: Global.KeyboardShortcuts.AddShortcut(System.String,KeyboardShortcut)
      commentId: M:Global.KeyboardShortcuts.AddShortcut(System.String,KeyboardShortcut)
      language: CSharp
      name:
        CSharp: AddShortcut(string, KeyboardShortcut)
        VB: AddShortcut(String, KeyboardShortcut)
      nameWithType:
        CSharp: KeyboardShortcuts.AddShortcut(string, KeyboardShortcut)
        VB: KeyboardShortcuts.AddShortcut(String, KeyboardShortcut)
      qualifiedName:
        CSharp: KeyboardShortcuts.AddShortcut(string, KeyboardShortcut)
        VB: KeyboardShortcuts.AddShortcut(String, KeyboardShortcut)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddShortcut
        path: ''
        startLine: 12352
      summary: "\nAdds the given shortcut for the given action.\n"
      example: []
      syntax:
        content:
          CSharp: public static void AddShortcut(string actionName, KeyboardShortcut shortcut)
          VB: Public Shared Sub AddShortcut(actionName As String, shortcut As KeyboardShortcut)
        parameters:
        - id: actionName
          type: System.String
        - id: shortcut
          type: Global.KeyboardShortcut
      overload: Global.KeyboardShortcuts.AddShortcut*
    - id: Global.KeyboardShortcuts.SetShortcut(System.String,KeyboardShortcut)
      commentId: M:Global.KeyboardShortcuts.SetShortcut(System.String,KeyboardShortcut)
      language: CSharp
      name:
        CSharp: SetShortcut(string, KeyboardShortcut)
        VB: SetShortcut(String, KeyboardShortcut)
      nameWithType:
        CSharp: KeyboardShortcuts.SetShortcut(string, KeyboardShortcut)
        VB: KeyboardShortcuts.SetShortcut(String, KeyboardShortcut)
      qualifiedName:
        CSharp: KeyboardShortcuts.SetShortcut(string, KeyboardShortcut)
        VB: KeyboardShortcuts.SetShortcut(String, KeyboardShortcut)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetShortcut
        path: ''
        startLine: 12364
      summary: "\nRemoves any existing shortcuts for the action then adds the given shortcut.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetShortcut(string actionName, KeyboardShortcut shortcut)
          VB: Public Shared Sub SetShortcut(actionName As String, shortcut As KeyboardShortcut)
        parameters:
        - id: actionName
          type: System.String
        - id: shortcut
          type: Global.KeyboardShortcut
      overload: Global.KeyboardShortcuts.SetShortcut*
    - id: Global.KeyboardShortcuts.ClearShortcutsFor(System.String)
      commentId: M:Global.KeyboardShortcuts.ClearShortcutsFor(System.String)
      language: CSharp
      name:
        CSharp: ClearShortcutsFor(string)
        VB: ClearShortcutsFor(String)
      nameWithType:
        CSharp: KeyboardShortcuts.ClearShortcutsFor(string)
        VB: KeyboardShortcuts.ClearShortcutsFor(String)
      qualifiedName:
        CSharp: KeyboardShortcuts.ClearShortcutsFor(string)
        VB: KeyboardShortcuts.ClearShortcutsFor(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ClearShortcutsFor
        path: ''
        startLine: 12373
      summary: "\nRemoves all shortcuts for the action.\n"
      example: []
      syntax:
        content:
          CSharp: public static void ClearShortcutsFor(string actionName)
          VB: Public Shared Sub ClearShortcutsFor(actionName As String)
        parameters:
        - id: actionName
          type: System.String
      overload: Global.KeyboardShortcuts.ClearShortcutsFor*
    - id: Global.KeyboardShortcuts.GetShortcutsFor(System.String)
      commentId: M:Global.KeyboardShortcuts.GetShortcutsFor(System.String)
      language: CSharp
      name:
        CSharp: GetShortcutsFor(string)
        VB: GetShortcutsFor(String)
      nameWithType:
        CSharp: KeyboardShortcuts.GetShortcutsFor(string)
        VB: KeyboardShortcuts.GetShortcutsFor(String)
      qualifiedName:
        CSharp: KeyboardShortcuts.GetShortcutsFor(string)
        VB: KeyboardShortcuts.GetShortcutsFor(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetShortcutsFor
        path: ''
        startLine: 12385
      summary: "\nReturns all shortcuts for the action.\n"
      example: []
      syntax:
        content:
          CSharp: public static List<KeyboardShortcut> GetShortcutsFor(string actionName)
          VB: Public Shared Function GetShortcutsFor(actionName As String) As List(Of KeyboardShortcut)
        parameters:
        - id: actionName
          type: System.String
        return:
          type: System.Collections.Generic.List{KeyboardShortcut}
      overload: Global.KeyboardShortcuts.GetShortcutsFor*
    - id: Global.KeyboardShortcuts.ContainsShortcutFor(System.String)
      commentId: M:Global.KeyboardShortcuts.ContainsShortcutFor(System.String)
      language: CSharp
      name:
        CSharp: ContainsShortcutFor(string)
        VB: ContainsShortcutFor(String)
      nameWithType:
        CSharp: KeyboardShortcuts.ContainsShortcutFor(string)
        VB: KeyboardShortcuts.ContainsShortcutFor(String)
      qualifiedName:
        CSharp: KeyboardShortcuts.ContainsShortcutFor(string)
        VB: KeyboardShortcuts.ContainsShortcutFor(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ContainsShortcutFor
        path: ''
        startLine: 12397
      summary: "\nReturns true if the action has a shortcut.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool ContainsShortcutFor(string actionName)
          VB: Public Shared Function ContainsShortcutFor(actionName As String) As Boolean
        parameters:
        - id: actionName
          type: System.String
        return:
          type: System.Boolean
      overload: Global.KeyboardShortcuts.ContainsShortcutFor*
    - id: Global.KeyboardShortcuts.ContainsKey(System.String)
      commentId: M:Global.KeyboardShortcuts.ContainsKey(System.String)
      language: CSharp
      name:
        CSharp: ContainsKey(string)
        VB: ContainsKey(String)
      nameWithType:
        CSharp: KeyboardShortcuts.ContainsKey(string)
        VB: KeyboardShortcuts.ContainsKey(String)
      qualifiedName:
        CSharp: KeyboardShortcuts.ContainsKey(string)
        VB: KeyboardShortcuts.ContainsKey(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ContainsKey
        path: ''
        startLine: 12405
      summary: "\nReturns true if the action is defined for having keyboard shortcuts.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool ContainsKey(string actionName)
          VB: Public Shared Function ContainsKey(actionName As String) As Boolean
        parameters:
        - id: actionName
          type: System.String
        return:
          type: System.Boolean
      overload: Global.KeyboardShortcuts.ContainsKey*
  - id: Global.AnimFrameRefMode
    commentId: T:Global.AnimFrameRefMode
    language: CSharp
    name:
      CSharp: AnimFrameRefMode
      VB: AnimFrameRefMode
    nameWithType:
      CSharp: AnimFrameRefMode
      VB: AnimFrameRefMode
    qualifiedName:
      CSharp: AnimFrameRefMode
      VB: AnimFrameRefMode
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: AnimFrameRefMode
      path: ''
      startLine: 12416
    syntax:
      content:
        CSharp: public enum AnimFrameRefMode
        VB: Public Enum AnimFrameRefMode
    items:
    - id: Global.AnimFrameRefMode.NewKeyFrame
      commentId: F:Global.AnimFrameRefMode.NewKeyFrame
      language: CSharp
      name:
        CSharp: NewKeyFrame
        VB: NewKeyFrame
      nameWithType:
        CSharp: AnimFrameRefMode.NewKeyFrame
        VB: AnimFrameRefMode.NewKeyFrame
      qualifiedName:
        CSharp: AnimFrameRefMode.NewKeyFrame
        VB: AnimFrameRefMode.NewKeyFrame
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: NewKeyFrame
        path: ''
        startLine: 12418
      syntax:
        content:
          CSharp: NewKeyFrame = 0
          VB: NewKeyFrame = 0
        return:
          type: Global.AnimFrameRefMode
    - id: Global.AnimFrameRefMode.MostRecentKeyFrame
      commentId: F:Global.AnimFrameRefMode.MostRecentKeyFrame
      language: CSharp
      name:
        CSharp: MostRecentKeyFrame
        VB: MostRecentKeyFrame
      nameWithType:
        CSharp: AnimFrameRefMode.MostRecentKeyFrame
        VB: AnimFrameRefMode.MostRecentKeyFrame
      qualifiedName:
        CSharp: AnimFrameRefMode.MostRecentKeyFrame
        VB: AnimFrameRefMode.MostRecentKeyFrame
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MostRecentKeyFrame
        path: ''
        startLine: 12419
      syntax:
        content:
          CSharp: MostRecentKeyFrame = 1
          VB: MostRecentKeyFrame = 1
        return:
          type: Global.AnimFrameRefMode
  - id: Global.LayerType
    commentId: T:Global.LayerType
    language: CSharp
    name:
      CSharp: LayerType
      VB: LayerType
    nameWithType:
      CSharp: LayerType
      VB: LayerType
    qualifiedName:
      CSharp: LayerType
      VB: LayerType
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: LayerType
      path: ''
      startLine: 12422
    syntax:
      content:
        CSharp: public enum LayerType
        VB: Public Enum LayerType
    items:
    - id: Global.LayerType.Normal
      commentId: F:Global.LayerType.Normal
      language: CSharp
      name:
        CSharp: Normal
        VB: Normal
      nameWithType:
        CSharp: LayerType.Normal
        VB: LayerType.Normal
      qualifiedName:
        CSharp: LayerType.Normal
        VB: LayerType.Normal
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Normal
        path: ''
        startLine: 12424
      syntax:
        content:
          CSharp: Normal = 0
          VB: Normal = 0
        return:
          type: Global.LayerType
    - id: Global.LayerType.Tile
      commentId: F:Global.LayerType.Tile
      language: CSharp
      name:
        CSharp: Tile
        VB: Tile
      nameWithType:
        CSharp: LayerType.Tile
        VB: LayerType.Tile
      qualifiedName:
        CSharp: LayerType.Tile
        VB: LayerType.Tile
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Tile
        path: ''
        startLine: 12425
      syntax:
        content:
          CSharp: Tile = 1
          VB: Tile = 1
        return:
          type: Global.LayerType
  - id: Global.Layer
    commentId: T:Global.Layer
    language: CSharp
    name:
      CSharp: Layer
      VB: Layer
    nameWithType:
      CSharp: Layer
      VB: Layer
    qualifiedName:
      CSharp: Layer
      VB: Layer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Layer
      path: ''
      startLine: 12431
    summary: "\nAn abstract class to define what each type of layer must have.\n"
    example: []
    syntax:
      content:
        CSharp: 'public abstract class Layer : IJSONable'
        VB: Public MustInherit Class Layer Implements IJSONable
    inheritance:
    - System.Object
    implements:
    - Global.IJSONable
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.Layer.layerType
      commentId: P:Global.Layer.layerType
      language: CSharp
      name:
        CSharp: layerType
        VB: layerType
      nameWithType:
        CSharp: Layer.layerType
        VB: Layer.layerType
      qualifiedName:
        CSharp: Layer.layerType
        VB: Layer.layerType
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: layerType
        path: ''
        startLine: 12433
      syntax:
        content:
          CSharp: public abstract LayerType layerType { get; }
          VB: Public MustOverride ReadOnly Property layerType As LayerType
        parameters: []
        return:
          type: Global.LayerType
      overload: Global.Layer.layerType*
    - id: Global.Layer.name
      commentId: P:Global.Layer.name
      language: CSharp
      name:
        CSharp: name
        VB: name
      nameWithType:
        CSharp: Layer.name
        VB: Layer.name
      qualifiedName:
        CSharp: Layer.name
        VB: Layer.name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: name
        path: ''
        startLine: 12435
      syntax:
        content:
          CSharp: public string name { get; set; }
          VB: Public Property name As String
        parameters: []
        return:
          type: System.String
      overload: Global.Layer.name*
    - id: Global.Layer.width
      commentId: P:Global.Layer.width
      language: CSharp
      name:
        CSharp: width
        VB: width
      nameWithType:
        CSharp: Layer.width
        VB: Layer.width
      qualifiedName:
        CSharp: Layer.width
        VB: Layer.width
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: width
        path: ''
        startLine: 12437
      syntax:
        content:
          CSharp: public int width { get; protected set; }
          VB: Public Property width As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.Layer.width*
    - id: Global.Layer.height
      commentId: P:Global.Layer.height
      language: CSharp
      name:
        CSharp: height
        VB: height
      nameWithType:
        CSharp: Layer.height
        VB: Layer.height
      qualifiedName:
        CSharp: Layer.height
        VB: Layer.height
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: height
        path: ''
        startLine: 12438
      syntax:
        content:
          CSharp: public int height { get; protected set; }
          VB: Public Property height As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.Layer.height*
    - id: Global.Layer.rect
      commentId: P:Global.Layer.rect
      language: CSharp
      name:
        CSharp: rect
        VB: rect
      nameWithType:
        CSharp: Layer.rect
        VB: Layer.rect
      qualifiedName:
        CSharp: Layer.rect
        VB: Layer.rect
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: rect
        path: ''
        startLine: 12439
      syntax:
        content:
          CSharp: public IntRect rect { get; }
          VB: Public ReadOnly Property rect As IntRect
        parameters: []
        return:
          type: Global.IntRect
      overload: Global.Layer.rect*
    - id: Global.Layer._visible
      commentId: F:Global.Layer._visible
      language: CSharp
      name:
        CSharp: _visible
        VB: _visible
      nameWithType:
        CSharp: Layer._visible
        VB: Layer._visible
      qualifiedName:
        CSharp: Layer._visible
        VB: Layer._visible
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: _visible
        path: ''
        startLine: 12441
      syntax:
        content:
          CSharp: protected bool _visible
          VB: Protected _visible As Boolean
        return:
          type: System.Boolean
    - id: Global.Layer.visible
      commentId: P:Global.Layer.visible
      language: CSharp
      name:
        CSharp: visible
        VB: visible
      nameWithType:
        CSharp: Layer.visible
        VB: Layer.visible
      qualifiedName:
        CSharp: Layer.visible
        VB: Layer.visible
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: visible
        path: ''
        startLine: 12442
      syntax:
        content:
          CSharp: public bool visible { get; set; }
          VB: Public Property visible As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Layer.visible*
    - id: Global.Layer.locked
      commentId: P:Global.Layer.locked
      language: CSharp
      name:
        CSharp: locked
        VB: locked
      nameWithType:
        CSharp: Layer.locked
        VB: Layer.locked
      qualifiedName:
        CSharp: Layer.locked
        VB: Layer.locked
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: locked
        path: ''
        startLine: 12451
      syntax:
        content:
          CSharp: public bool locked { get; set; }
          VB: Public Property locked As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Layer.locked*
    - id: Global.Layer.opacity
      commentId: P:Global.Layer.opacity
      language: CSharp
      name:
        CSharp: opacity
        VB: opacity
      nameWithType:
        CSharp: Layer.opacity
        VB: Layer.opacity
      qualifiedName:
        CSharp: Layer.opacity
        VB: Layer.opacity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: opacity
        path: ''
        startLine: 12452
      syntax:
        content:
          CSharp: public float opacity { get; set; }
          VB: Public Property opacity As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.Layer.opacity*
    - id: Global.Layer._blendMode
      commentId: F:Global.Layer._blendMode
      language: CSharp
      name:
        CSharp: _blendMode
        VB: _blendMode
      nameWithType:
        CSharp: Layer._blendMode
        VB: Layer._blendMode
      qualifiedName:
        CSharp: Layer._blendMode
        VB: Layer._blendMode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: _blendMode
        path: ''
        startLine: 12453
      syntax:
        content:
          CSharp: protected BlendMode _blendMode
          VB: Protected _blendMode As BlendMode
        return:
          type: Global.BlendMode
    - id: Global.Layer.blendMode
      commentId: P:Global.Layer.blendMode
      language: CSharp
      name:
        CSharp: blendMode
        VB: blendMode
      nameWithType:
        CSharp: Layer.blendMode
        VB: Layer.blendMode
      qualifiedName:
        CSharp: Layer.blendMode
        VB: Layer.blendMode
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: blendMode
        path: ''
        startLine: 12454
      syntax:
        content:
          CSharp: public BlendMode blendMode { get; set; }
          VB: Public Property blendMode As BlendMode
        parameters: []
        return:
          type: Global.BlendMode
      overload: Global.Layer.blendMode*
    - id: Global.Layer.keyFrames
      commentId: P:Global.Layer.keyFrames
      language: CSharp
      name:
        CSharp: keyFrames
        VB: keyFrames
      nameWithType:
        CSharp: Layer.keyFrames
        VB: Layer.keyFrames
      qualifiedName:
        CSharp: Layer.keyFrames
        VB: Layer.keyFrames
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: keyFrames
        path: ''
        startLine: 12467
      summary: "\nThe key frames of the animation, in order.\n"
      example: []
      syntax:
        content:
          CSharp: public List<AnimationKeyFrame> keyFrames { get; protected set; }
          VB: Public Property keyFrames As List(Of AnimationKeyFrame)
        parameters: []
        return:
          type: System.Collections.Generic.List{AnimationKeyFrame}
      overload: Global.Layer.keyFrames*
    - id: Global.Layer.keyFrameIndices
      commentId: P:Global.Layer.keyFrameIndices
      language: CSharp
      name:
        CSharp: keyFrameIndices
        VB: keyFrameIndices
      nameWithType:
        CSharp: Layer.keyFrameIndices
        VB: Layer.keyFrameIndices
      qualifiedName:
        CSharp: Layer.keyFrameIndices
        VB: Layer.keyFrameIndices
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: keyFrameIndices
        path: ''
        startLine: 12471
      summary: "\nThe frame indices of the key frames in the animation, in order.\n"
      example: []
      syntax:
        content:
          CSharp: public int[] keyFrameIndices { get; }
          VB: Public ReadOnly Property keyFrameIndices As Integer()
        parameters: []
        return:
          type: System.Int32[]
      overload: Global.Layer.keyFrameIndices*
    - id: Global.Layer.keyFrameTextures
      commentId: P:Global.Layer.keyFrameTextures
      language: CSharp
      name:
        CSharp: keyFrameTextures
        VB: keyFrameTextures
      nameWithType:
        CSharp: Layer.keyFrameTextures
        VB: Layer.keyFrameTextures
      qualifiedName:
        CSharp: Layer.keyFrameTextures
        VB: Layer.keyFrameTextures
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: keyFrameTextures
        path: ''
        startLine: 12486
      summary: "\nThe textures of the key frames in the animation, in order.\n"
      example: []
      syntax:
        content:
          CSharp: public Texture2D[] keyFrameTextures { get; }
          VB: Public ReadOnly Property keyFrameTextures As Texture2D()
        parameters: []
        return:
          type: Global.Texture2D[]
      overload: Global.Layer.keyFrameTextures*
    - id: Global.Layer.onPixelsChanged
      commentId: F:Global.Layer.onPixelsChanged
      language: CSharp
      name:
        CSharp: onPixelsChanged
        VB: onPixelsChanged
      nameWithType:
        CSharp: Layer.onPixelsChanged
        VB: Layer.onPixelsChanged
      qualifiedName:
        CSharp: Layer.onPixelsChanged
        VB: Layer.onPixelsChanged
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: onPixelsChanged
        path: ''
        startLine: 12505
      summary: "\nCalled when the SetPixel() or SetPixels() has been called.\nPasses the array of pixels changed and the frames it was called on.\n"
      example: []
      syntax:
        content:
          CSharp: protected UnityEvent<IntVector2[], int[]> onPixelsChanged
          VB: Protected onPixelsChanged As UnityEvent(Of IntVector2(), Integer())
        return:
          type: Global.UnityEvent{IntVector2[],System.Int32[]}
    - id: Global.Layer.#ctor(System.String,Texture2D)
      commentId: M:Global.Layer.#ctor(System.String,Texture2D)
      language: CSharp
      name:
        CSharp: Layer(string, Texture2D)
        VB: New(String, Texture2D)
      nameWithType:
        CSharp: Layer.Layer(string, Texture2D)
        VB: Layer.New(String, Texture2D)
      qualifiedName:
        CSharp: Layer.Layer(string, Texture2D)
        VB: Layer.New(String, Texture2D)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 12521
      syntax:
        content:
          CSharp: public Layer(string name, Texture2D texture)
          VB: Public Sub New(name As String, texture As Texture2D)
        parameters:
        - id: name
          type: System.String
        - id: texture
          type: Global.Texture2D
      overload: Global.Layer.#ctor*
    - id: Global.Layer.#ctor(Layer)
      commentId: M:Global.Layer.#ctor(Layer)
      language: CSharp
      name:
        CSharp: Layer(Layer)
        VB: New(Layer)
      nameWithType:
        CSharp: Layer.Layer(Layer)
        VB: Layer.New(Layer)
      qualifiedName:
        CSharp: Layer.Layer(Layer)
        VB: Layer.New(Layer)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 12530
      syntax:
        content:
          CSharp: public Layer(Layer layer)
          VB: Public Sub New(layer As Layer)
        parameters:
        - id: layer
          type: Global.Layer
      overload: Global.Layer.#ctor*
    - id: Global.Layer.DeepCopy
      commentId: M:Global.Layer.DeepCopy
      language: CSharp
      name:
        CSharp: DeepCopy()
        VB: DeepCopy()
      nameWithType:
        CSharp: Layer.DeepCopy()
        VB: Layer.DeepCopy()
      qualifiedName:
        CSharp: Layer.DeepCopy()
        VB: Layer.DeepCopy()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeepCopy
        path: ''
        startLine: 12546
      summary: "\nCreates a deep copy of the Layer.\n"
      example: []
      syntax:
        content:
          CSharp: public abstract Layer DeepCopy()
          VB: Public MustOverride Function DeepCopy() As Layer
        return:
          type: Global.Layer
      overload: Global.Layer.DeepCopy*
    - id: Global.Layer.SetPixel(System.Int32,System.Int32,System.Int32,Color,AnimFrameRefMode)
      commentId: M:Global.Layer.SetPixel(System.Int32,System.Int32,System.Int32,Color,AnimFrameRefMode)
      language: CSharp
      name:
        CSharp: SetPixel(int, int, int, Color, AnimFrameRefMode)
        VB: SetPixel(Integer, Integer, Integer, Color, AnimFrameRefMode)
      nameWithType:
        CSharp: Layer.SetPixel(int, int, int, Color, AnimFrameRefMode)
        VB: Layer.SetPixel(Integer, Integer, Integer, Color, AnimFrameRefMode)
      qualifiedName:
        CSharp: Layer.SetPixel(int, int, int, Color, AnimFrameRefMode)
        VB: Layer.SetPixel(Integer, Integer, Integer, Color, AnimFrameRefMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetPixel
        path: ''
        startLine: 12551
      summary: "\nSets the colour of the pixel (x, y). Throws an error if the pixel is outside the layer.\n"
      example: []
      syntax:
        content:
          CSharp: public IntVector2[] SetPixel(int x, int y, int frame, Color colour, AnimFrameRefMode frameRefMode)
          VB: Public Function SetPixel(x As Integer, y As Integer, frame As Integer, colour As Color, frameRefMode As AnimFrameRefMode) As IntVector2()
        parameters:
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: colour
          type: Global.Color
        - id: frameRefMode
          type: Global.AnimFrameRefMode
        return:
          type: Global.IntVector2[]
      overload: Global.Layer.SetPixel*
    - id: Global.Layer.SetPixel(IntVector2,System.Int32,Color,AnimFrameRefMode)
      commentId: M:Global.Layer.SetPixel(IntVector2,System.Int32,Color,AnimFrameRefMode)
      language: CSharp
      name:
        CSharp: SetPixel(IntVector2, int, Color, AnimFrameRefMode)
        VB: SetPixel(IntVector2, Integer, Color, AnimFrameRefMode)
      nameWithType:
        CSharp: Layer.SetPixel(IntVector2, int, Color, AnimFrameRefMode)
        VB: Layer.SetPixel(IntVector2, Integer, Color, AnimFrameRefMode)
      qualifiedName:
        CSharp: Layer.SetPixel(IntVector2, int, Color, AnimFrameRefMode)
        VB: Layer.SetPixel(IntVector2, Integer, Color, AnimFrameRefMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetPixel
        path: ''
        startLine: 12555
      summary: "\nSets the colour of the pixel. Throws an error if the pixel is outside the layer.\n"
      example: []
      syntax:
        content:
          CSharp: public IntVector2[] SetPixel(IntVector2 pixel, int frame, Color colour, AnimFrameRefMode frameRefMode)
          VB: Public Function SetPixel(pixel As IntVector2, frame As Integer, colour As Color, frameRefMode As AnimFrameRefMode) As IntVector2()
        parameters:
        - id: pixel
          type: Global.IntVector2
        - id: frame
          type: System.Int32
        - id: colour
          type: Global.Color
        - id: frameRefMode
          type: Global.AnimFrameRefMode
        return:
          type: Global.IntVector2[]
      overload: Global.Layer.SetPixel*
    - id: Global.Layer.SetPixelsNoEvent(IntVector2[],System.Int32,Color,AnimFrameRefMode)
      commentId: M:Global.Layer.SetPixelsNoEvent(IntVector2[],System.Int32,Color,AnimFrameRefMode)
      language: CSharp
      name:
        CSharp: SetPixelsNoEvent(IntVector2[], int, Color, AnimFrameRefMode)
        VB: SetPixelsNoEvent(IntVector2(), Integer, Color, AnimFrameRefMode)
      nameWithType:
        CSharp: Layer.SetPixelsNoEvent(IntVector2[], int, Color, AnimFrameRefMode)
        VB: Layer.SetPixelsNoEvent(IntVector2(), Integer, Color, AnimFrameRefMode)
      qualifiedName:
        CSharp: Layer.SetPixelsNoEvent(IntVector2[], int, Color, AnimFrameRefMode)
        VB: Layer.SetPixelsNoEvent(IntVector2(), Integer, Color, AnimFrameRefMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetPixelsNoEvent
        path: ''
        startLine: 12560
      summary: "\nSets the colour of the pixels.\nYou do not need to check the pixels are in the layer as this check is done in Layer.SetPixels(), which is the only way this method is called.\n"
      example: []
      syntax:
        content:
          CSharp: protected abstract IntVector2[] SetPixelsNoEvent(IntVector2[] pixels, int frame, Color colour, AnimFrameRefMode frameRefMode)
          VB: Protected MustOverride Function SetPixelsNoEvent(pixels As IntVector2(), frame As Integer, colour As Color, frameRefMode As AnimFrameRefMode) As IntVector2()
        parameters:
        - id: pixels
          type: Global.IntVector2[]
        - id: frame
          type: System.Int32
        - id: colour
          type: Global.Color
        - id: frameRefMode
          type: Global.AnimFrameRefMode
        return:
          type: Global.IntVector2[]
      overload: Global.Layer.SetPixelsNoEvent*
    - id: Global.Layer.SetPixels(IntVector2[],System.Int32,Color,AnimFrameRefMode)
      commentId: M:Global.Layer.SetPixels(IntVector2[],System.Int32,Color,AnimFrameRefMode)
      language: CSharp
      name:
        CSharp: SetPixels(IntVector2[], int, Color, AnimFrameRefMode)
        VB: SetPixels(IntVector2(), Integer, Color, AnimFrameRefMode)
      nameWithType:
        CSharp: Layer.SetPixels(IntVector2[], int, Color, AnimFrameRefMode)
        VB: Layer.SetPixels(IntVector2(), Integer, Color, AnimFrameRefMode)
      qualifiedName:
        CSharp: Layer.SetPixels(IntVector2[], int, Color, AnimFrameRefMode)
        VB: Layer.SetPixels(IntVector2(), Integer, Color, AnimFrameRefMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetPixels
        path: ''
        startLine: 12564
      summary: "\nSets the colour of the pixels. Throws an error if a pixel is outside the layer.\n"
      example: []
      syntax:
        content:
          CSharp: public IntVector2[] SetPixels(IntVector2[] pixels, int frame, Color colour, AnimFrameRefMode frameRefMode)
          VB: Public Function SetPixels(pixels As IntVector2(), frame As Integer, colour As Color, frameRefMode As AnimFrameRefMode) As IntVector2()
        parameters:
        - id: pixels
          type: Global.IntVector2[]
        - id: frame
          type: System.Int32
        - id: colour
          type: Global.Color
        - id: frameRefMode
          type: Global.AnimFrameRefMode
        return:
          type: Global.IntVector2[]
      overload: Global.Layer.SetPixels*
    - id: Global.Layer.GetPixel(System.Int32,System.Int32,System.Int32,System.Boolean)
      commentId: M:Global.Layer.GetPixel(System.Int32,System.Int32,System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: GetPixel(int, int, int, bool)
        VB: GetPixel(Integer, Integer, Integer, Boolean)
      nameWithType:
        CSharp: Layer.GetPixel(int, int, int, bool)
        VB: Layer.GetPixel(Integer, Integer, Integer, Boolean)
      qualifiedName:
        CSharp: Layer.GetPixel(int, int, int, bool)
        VB: Layer.GetPixel(Integer, Integer, Integer, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetPixel
        path: ''
        startLine: 12581
      summary: "\nGets the colour of the pixel (x, y).\n"
      example: []
      syntax:
        content:
          CSharp: public Color GetPixel(int x, int y, int frame, bool useLayerOpacity = true)
          VB: Public Function GetPixel(x As Integer, y As Integer, frame As Integer, useLayerOpacity As Boolean = True) As Color
        parameters:
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
        - id: frame
          type: System.Int32
        - id: useLayerOpacity
          type: System.Boolean
        return:
          type: Global.Color
      overload: Global.Layer.GetPixel*
    - id: Global.Layer.GetPixel(IntVector2,System.Int32,System.Boolean)
      commentId: M:Global.Layer.GetPixel(IntVector2,System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: GetPixel(IntVector2, int, bool)
        VB: GetPixel(IntVector2, Integer, Boolean)
      nameWithType:
        CSharp: Layer.GetPixel(IntVector2, int, bool)
        VB: Layer.GetPixel(IntVector2, Integer, Boolean)
      qualifiedName:
        CSharp: Layer.GetPixel(IntVector2, int, bool)
        VB: Layer.GetPixel(IntVector2, Integer, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetPixel
        path: ''
        startLine: 12585
      summary: "\nGets the colour of the pixel.\n"
      example: []
      syntax:
        content:
          CSharp: public abstract Color GetPixel(IntVector2 pixel, int frame, bool useLayerOpacity = true)
          VB: Public MustOverride Function GetPixel(pixel As IntVector2, frame As Integer, useLayerOpacity As Boolean = True) As Color
        parameters:
        - id: pixel
          type: Global.IntVector2
        - id: frame
          type: System.Int32
        - id: useLayerOpacity
          type: System.Boolean
        return:
          type: Global.Color
      overload: Global.Layer.GetPixel*
    - id: Global.Layer.IsBlank
      commentId: M:Global.Layer.IsBlank
      language: CSharp
      name:
        CSharp: IsBlank()
        VB: IsBlank()
      nameWithType:
        CSharp: Layer.IsBlank()
        VB: Layer.IsBlank()
      qualifiedName:
        CSharp: Layer.IsBlank()
        VB: Layer.IsBlank()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsBlank
        path: ''
        startLine: 12590
      summary: "\nReturns true if and only if all pixels are completely transparent.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsBlank()
          VB: Public Function IsBlank() As Boolean
        return:
          type: System.Boolean
      overload: Global.Layer.IsBlank*
    - id: Global.Layer.FlipNoEvent(FlipDirection)
      commentId: M:Global.Layer.FlipNoEvent(FlipDirection)
      language: CSharp
      name:
        CSharp: FlipNoEvent(FlipDirection)
        VB: FlipNoEvent(FlipDirection)
      nameWithType:
        CSharp: Layer.FlipNoEvent(FlipDirection)
        VB: Layer.FlipNoEvent(FlipDirection)
      qualifiedName:
        CSharp: Layer.FlipNoEvent(FlipDirection)
        VB: Layer.FlipNoEvent(FlipDirection)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FlipNoEvent
        path: ''
        startLine: 12611
      summary: "\nFlips the layer, but does not invoke the onPixelsChanged event.\n"
      example: []
      syntax:
        content:
          CSharp: protected abstract void FlipNoEvent(FlipDirection direction)
          VB: Protected MustOverride Sub FlipNoEvent(direction As FlipDirection)
        parameters:
        - id: direction
          type: Global.FlipDirection
      overload: Global.Layer.FlipNoEvent*
    - id: Global.Layer.Flip(FlipDirection)
      commentId: M:Global.Layer.Flip(FlipDirection)
      language: CSharp
      name:
        CSharp: Flip(FlipDirection)
        VB: Flip(FlipDirection)
      nameWithType:
        CSharp: Layer.Flip(FlipDirection)
        VB: Layer.Flip(FlipDirection)
      qualifiedName:
        CSharp: Layer.Flip(FlipDirection)
        VB: Layer.Flip(FlipDirection)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Flip
        path: ''
        startLine: 12615
      summary: "\nFlips the layer.\n"
      example: []
      syntax:
        content:
          CSharp: public void Flip(FlipDirection direction)
          VB: Public Sub Flip(direction As FlipDirection)
        parameters:
        - id: direction
          type: Global.FlipDirection
      overload: Global.Layer.Flip*
    - id: Global.Layer.RotateNoEvent(RotationAngle)
      commentId: M:Global.Layer.RotateNoEvent(RotationAngle)
      language: CSharp
      name:
        CSharp: RotateNoEvent(RotationAngle)
        VB: RotateNoEvent(RotationAngle)
      nameWithType:
        CSharp: Layer.RotateNoEvent(RotationAngle)
        VB: Layer.RotateNoEvent(RotationAngle)
      qualifiedName:
        CSharp: Layer.RotateNoEvent(RotationAngle)
        VB: Layer.RotateNoEvent(RotationAngle)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RotateNoEvent
        path: ''
        startLine: 12625
      summary: "\nRotates the layer, but does not invoke the onPixelsChanged event.\nRotation is clockwise.\n"
      example: []
      syntax:
        content:
          CSharp: protected abstract void RotateNoEvent(RotationAngle angle)
          VB: Protected MustOverride Sub RotateNoEvent(angle As RotationAngle)
        parameters:
        - id: angle
          type: Global.RotationAngle
      overload: Global.Layer.RotateNoEvent*
    - id: Global.Layer.Rotate(RotationAngle)
      commentId: M:Global.Layer.Rotate(RotationAngle)
      language: CSharp
      name:
        CSharp: Rotate(RotationAngle)
        VB: Rotate(RotationAngle)
      nameWithType:
        CSharp: Layer.Rotate(RotationAngle)
        VB: Layer.Rotate(RotationAngle)
      qualifiedName:
        CSharp: Layer.Rotate(RotationAngle)
        VB: Layer.Rotate(RotationAngle)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Rotate
        path: ''
        startLine: 12629
      summary: "\nRotates the layer. Rotation is clockwise.\n"
      example: []
      syntax:
        content:
          CSharp: public void Rotate(RotationAngle angle)
          VB: Public Sub Rotate(angle As RotationAngle)
        parameters:
        - id: angle
          type: Global.RotationAngle
      overload: Global.Layer.Rotate*
    - id: Global.Layer.ExtendNoEvent(System.Int32,System.Int32,System.Int32,System.Int32)
      commentId: M:Global.Layer.ExtendNoEvent(System.Int32,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: ExtendNoEvent(int, int, int, int)
        VB: ExtendNoEvent(Integer, Integer, Integer, Integer)
      nameWithType:
        CSharp: Layer.ExtendNoEvent(int, int, int, int)
        VB: Layer.ExtendNoEvent(Integer, Integer, Integer, Integer)
      qualifiedName:
        CSharp: Layer.ExtendNoEvent(int, int, int, int)
        VB: Layer.ExtendNoEvent(Integer, Integer, Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ExtendNoEvent
        path: ''
        startLine: 12638
      summary: "\nExtends the dimensions of the layer in each direction by the given amounts, but does not invoke the onPixelsChanged event.\n"
      example: []
      syntax:
        content:
          CSharp: protected abstract void ExtendNoEvent(int left, int right, int up, int down)
          VB: Protected MustOverride Sub ExtendNoEvent(left As Integer, right As Integer, up As Integer, down As Integer)
        parameters:
        - id: left
          type: System.Int32
        - id: right
          type: System.Int32
        - id: up
          type: System.Int32
        - id: down
          type: System.Int32
      overload: Global.Layer.ExtendNoEvent*
    - id: Global.Layer.Extend(System.Int32,System.Int32,System.Int32,System.Int32)
      commentId: M:Global.Layer.Extend(System.Int32,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Extend(int, int, int, int)
        VB: Extend(Integer, Integer, Integer, Integer)
      nameWithType:
        CSharp: Layer.Extend(int, int, int, int)
        VB: Layer.Extend(Integer, Integer, Integer, Integer)
      qualifiedName:
        CSharp: Layer.Extend(int, int, int, int)
        VB: Layer.Extend(Integer, Integer, Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Extend
        path: ''
        startLine: 12642
      summary: "\nExtends the dimensions of the layer in each direction by the given amounts.\n"
      example: []
      syntax:
        content:
          CSharp: public void Extend(int left, int right, int up, int down)
          VB: Public Sub Extend(left As Integer, right As Integer, up As Integer, down As Integer)
        parameters:
        - id: left
          type: System.Int32
        - id: right
          type: System.Int32
        - id: up
          type: System.Int32
        - id: down
          type: System.Int32
      overload: Global.Layer.Extend*
    - id: Global.Layer.ScaleNoEvent(System.Single,System.Single)
      commentId: M:Global.Layer.ScaleNoEvent(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: ScaleNoEvent(float, float)
        VB: ScaleNoEvent(Single, Single)
      nameWithType:
        CSharp: Layer.ScaleNoEvent(float, float)
        VB: Layer.ScaleNoEvent(Single, Single)
      qualifiedName:
        CSharp: Layer.ScaleNoEvent(float, float)
        VB: Layer.ScaleNoEvent(Single, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ScaleNoEvent
        path: ''
        startLine: 12651
      summary: "\nResizes the dimensions of the file by the scale factors, but does not invoke the onPixelsChanged event.\n"
      example: []
      syntax:
        content:
          CSharp: protected abstract void ScaleNoEvent(float xScaleFactor, float yScaleFactor)
          VB: Protected MustOverride Sub ScaleNoEvent(xScaleFactor As Single, yScaleFactor As Single)
        parameters:
        - id: xScaleFactor
          type: System.Single
        - id: yScaleFactor
          type: System.Single
      overload: Global.Layer.ScaleNoEvent*
    - id: Global.Layer.ScaleNoEvent(System.Int32,System.Int32)
      commentId: M:Global.Layer.ScaleNoEvent(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: ScaleNoEvent(int, int)
        VB: ScaleNoEvent(Integer, Integer)
      nameWithType:
        CSharp: Layer.ScaleNoEvent(int, int)
        VB: Layer.ScaleNoEvent(Integer, Integer)
      qualifiedName:
        CSharp: Layer.ScaleNoEvent(int, int)
        VB: Layer.ScaleNoEvent(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ScaleNoEvent
        path: ''
        startLine: 12655
      summary: "\nResizes the dimensions to the new width and height, but does not invoke the onPixelsChanged event.\n"
      example: []
      syntax:
        content:
          CSharp: protected abstract void ScaleNoEvent(int newWidth, int newHeight)
          VB: Protected MustOverride Sub ScaleNoEvent(newWidth As Integer, newHeight As Integer)
        parameters:
        - id: newWidth
          type: System.Int32
        - id: newHeight
          type: System.Int32
      overload: Global.Layer.ScaleNoEvent*
    - id: Global.Layer.Scale(System.Single)
      commentId: M:Global.Layer.Scale(System.Single)
      language: CSharp
      name:
        CSharp: Scale(float)
        VB: Scale(Single)
      nameWithType:
        CSharp: Layer.Scale(float)
        VB: Layer.Scale(Single)
      qualifiedName:
        CSharp: Layer.Scale(float)
        VB: Layer.Scale(Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Scale
        path: ''
        startLine: 12659
      summary: "\nResizes the dimensions of the file by the scale factor.\n"
      example: []
      syntax:
        content:
          CSharp: public void Scale(float scaleFactor)
          VB: Public Sub Scale(scaleFactor As Single)
        parameters:
        - id: scaleFactor
          type: System.Single
      overload: Global.Layer.Scale*
    - id: Global.Layer.Scale(System.Single,System.Single)
      commentId: M:Global.Layer.Scale(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: Scale(float, float)
        VB: Scale(Single, Single)
      nameWithType:
        CSharp: Layer.Scale(float, float)
        VB: Layer.Scale(Single, Single)
      qualifiedName:
        CSharp: Layer.Scale(float, float)
        VB: Layer.Scale(Single, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Scale
        path: ''
        startLine: 12663
      summary: "\nResizes the dimensions of the file by the scale factors.\n"
      example: []
      syntax:
        content:
          CSharp: public void Scale(float xScaleFactor, float yScaleFactor)
          VB: Public Sub Scale(xScaleFactor As Single, yScaleFactor As Single)
        parameters:
        - id: xScaleFactor
          type: System.Single
        - id: yScaleFactor
          type: System.Single
      overload: Global.Layer.Scale*
    - id: Global.Layer.Scale(System.Int32,System.Int32)
      commentId: M:Global.Layer.Scale(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Scale(int, int)
        VB: Scale(Integer, Integer)
      nameWithType:
        CSharp: Layer.Scale(int, int)
        VB: Layer.Scale(Integer, Integer)
      qualifiedName:
        CSharp: Layer.Scale(int, int)
        VB: Layer.Scale(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Scale
        path: ''
        startLine: 12671
      summary: "\nResizes the dimensions of the file by the scale factor.\n"
      example: []
      syntax:
        content:
          CSharp: public void Scale(int newWidth, int newHeight)
          VB: Public Sub Scale(newWidth As Integer, newHeight As Integer)
        parameters:
        - id: newWidth
          type: System.Int32
        - id: newHeight
          type: System.Int32
      overload: Global.Layer.Scale*
    - id: Global.Layer.ToJSON
      commentId: M:Global.Layer.ToJSON
      language: CSharp
      name:
        CSharp: ToJSON()
        VB: ToJSON()
      nameWithType:
        CSharp: Layer.ToJSON()
        VB: Layer.ToJSON()
      qualifiedName:
        CSharp: Layer.ToJSON()
        VB: Layer.ToJSON()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToJSON
        path: ''
        startLine: 12677
      syntax:
        content:
          CSharp: public abstract JSON ToJSON()
          VB: Public MustOverride Function ToJSON() As JSON
        return:
          type: Global.JSON
      overload: Global.Layer.ToJSON*
      implements:
      - Global.IJSONable.ToJSON
    - id: Global.Layer.LoadJSON(JSON)
      commentId: M:Global.Layer.LoadJSON(JSON)
      language: CSharp
      name:
        CSharp: LoadJSON(JSON)
        VB: LoadJSON(JSON)
      nameWithType:
        CSharp: Layer.LoadJSON(JSON)
        VB: Layer.LoadJSON(JSON)
      qualifiedName:
        CSharp: Layer.LoadJSON(JSON)
        VB: Layer.LoadJSON(JSON)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LoadJSON
        path: ''
        startLine: 12678
      syntax:
        content:
          CSharp: protected abstract void LoadJSON(JSON json)
          VB: Protected MustOverride Sub LoadJSON(json As JSON)
        parameters:
        - id: json
          type: Global.JSON
      overload: Global.Layer.LoadJSON*
    - id: Global.Layer.FromJSON(JSON)
      commentId: M:Global.Layer.FromJSON(JSON)
      language: CSharp
      name:
        CSharp: FromJSON(JSON)
        VB: FromJSON(JSON)
      nameWithType:
        CSharp: Layer.FromJSON(JSON)
        VB: Layer.FromJSON(JSON)
      qualifiedName:
        CSharp: Layer.FromJSON(JSON)
        VB: Layer.FromJSON(JSON)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FromJSON
        path: ''
        startLine: 12679
      syntax:
        content:
          CSharp: public static Layer FromJSON(JSON json)
          VB: Public Shared Function FromJSON(json As JSON) As Layer
        parameters:
        - id: json
          type: Global.JSON
        return:
          type: Global.Layer
      overload: Global.Layer.FromJSON*
    - id: Global.Layer.Item(System.Int32)
      commentId: P:Global.Layer.Item(System.Int32)
      language: CSharp
      name:
        CSharp: this[int]
        VB: this[](Integer)
      nameWithType:
        CSharp: Layer.this[int]
        VB: Layer.this[](Integer)
      qualifiedName:
        CSharp: Layer.this[int]
        VB: Layer.this[](Integer)
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: this[]
        path: ''
        startLine: 12714
      summary: "\nReturns the texture of the most recent key frame before or at the frame index. Same as GetTexture(frame).\n"
      example: []
      syntax:
        content:
          CSharp: public AnimationKeyFrame this[int frame] { get; }
          VB: Public ReadOnly Default Property this[](frame As Integer) As AnimationKeyFrame
        parameters:
        - id: frame
          type: System.Int32
        return:
          type: Global.AnimationKeyFrame
      overload: Global.Layer.Item*
    - id: Global.Layer.GetKeyFrame(System.Int32)
      commentId: M:Global.Layer.GetKeyFrame(System.Int32)
      language: CSharp
      name:
        CSharp: GetKeyFrame(int)
        VB: GetKeyFrame(Integer)
      nameWithType:
        CSharp: Layer.GetKeyFrame(int)
        VB: Layer.GetKeyFrame(Integer)
      qualifiedName:
        CSharp: Layer.GetKeyFrame(int)
        VB: Layer.GetKeyFrame(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetKeyFrame
        path: ''
        startLine: 12722
      summary: "\nReturns the most recent key frame before or at the frame index - i.e. the key frame the animation will play at the frame index.\n"
      example: []
      syntax:
        content:
          CSharp: public AnimationKeyFrame GetKeyFrame(int frame)
          VB: Public Function GetKeyFrame(frame As Integer) As AnimationKeyFrame
        parameters:
        - id: frame
          type: System.Int32
        return:
          type: Global.AnimationKeyFrame
      overload: Global.Layer.GetKeyFrame*
    - id: Global.Layer.HasKeyFrameAt(System.Int32)
      commentId: M:Global.Layer.HasKeyFrameAt(System.Int32)
      language: CSharp
      name:
        CSharp: HasKeyFrameAt(int)
        VB: HasKeyFrameAt(Integer)
      nameWithType:
        CSharp: Layer.HasKeyFrameAt(int)
        VB: Layer.HasKeyFrameAt(Integer)
      qualifiedName:
        CSharp: Layer.HasKeyFrameAt(int)
        VB: Layer.HasKeyFrameAt(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: HasKeyFrameAt
        path: ''
        startLine: 12748
      summary: "\nReturns whether or not there is a key frame at the given frame index.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasKeyFrameAt(int frame)
          VB: Public Function HasKeyFrameAt(frame As Integer) As Boolean
        parameters:
        - id: frame
          type: System.Int32
        return:
          type: System.Boolean
      overload: Global.Layer.HasKeyFrameAt*
    - id: Global.Layer.AddKeyFrame(System.Int32)
      commentId: M:Global.Layer.AddKeyFrame(System.Int32)
      language: CSharp
      name:
        CSharp: AddKeyFrame(int)
        VB: AddKeyFrame(Integer)
      nameWithType:
        CSharp: Layer.AddKeyFrame(int)
        VB: Layer.AddKeyFrame(Integer)
      qualifiedName:
        CSharp: Layer.AddKeyFrame(int)
        VB: Layer.AddKeyFrame(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddKeyFrame
        path: ''
        startLine: 12763
      summary: "\nAdds a key frame at frame frame. The texture will be that of the most recent key frame. Returns true if it replaces an existing key frame, and false otherwise.\n"
      example: []
      syntax:
        content:
          CSharp: protected bool AddKeyFrame(int frame)
          VB: Protected Function AddKeyFrame(frame As Integer) As Boolean
        parameters:
        - id: frame
          type: System.Int32
        return:
          type: System.Boolean
      overload: Global.Layer.AddKeyFrame*
    - id: Global.Layer.AddKeyFrame(System.Int32,Texture2D)
      commentId: M:Global.Layer.AddKeyFrame(System.Int32,Texture2D)
      language: CSharp
      name:
        CSharp: AddKeyFrame(int, Texture2D)
        VB: AddKeyFrame(Integer, Texture2D)
      nameWithType:
        CSharp: Layer.AddKeyFrame(int, Texture2D)
        VB: Layer.AddKeyFrame(Integer, Texture2D)
      qualifiedName:
        CSharp: Layer.AddKeyFrame(int, Texture2D)
        VB: Layer.AddKeyFrame(Integer, Texture2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddKeyFrame
        path: ''
        startLine: 12774
      summary: "\nAdds a key frame with the given texture at frame frame. Returns true if it replaces an existing key frame, and false otherwise.\n"
      example: []
      syntax:
        content:
          CSharp: protected bool AddKeyFrame(int frame, Texture2D texture)
          VB: Protected Function AddKeyFrame(frame As Integer, texture As Texture2D) As Boolean
        parameters:
        - id: frame
          type: System.Int32
        - id: texture
          type: Global.Texture2D
        return:
          type: System.Boolean
      overload: Global.Layer.AddKeyFrame*
    - id: Global.Layer.AddKeyFrame(AnimationKeyFrame)
      commentId: M:Global.Layer.AddKeyFrame(AnimationKeyFrame)
      language: CSharp
      name:
        CSharp: AddKeyFrame(AnimationKeyFrame)
        VB: AddKeyFrame(AnimationKeyFrame)
      nameWithType:
        CSharp: Layer.AddKeyFrame(AnimationKeyFrame)
        VB: Layer.AddKeyFrame(AnimationKeyFrame)
      qualifiedName:
        CSharp: Layer.AddKeyFrame(AnimationKeyFrame)
        VB: Layer.AddKeyFrame(AnimationKeyFrame)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddKeyFrame
        path: ''
        startLine: 12778
      summary: "\nAdds the given key frame. Returns true if it replaces an existing key frame, and false otherwise.\n"
      example: []
      syntax:
        content:
          CSharp: protected bool AddKeyFrame(AnimationKeyFrame keyFrame)
          VB: Protected Function AddKeyFrame(keyFrame As AnimationKeyFrame) As Boolean
        parameters:
        - id: keyFrame
          type: Global.AnimationKeyFrame
        return:
          type: System.Boolean
      overload: Global.Layer.AddKeyFrame*
    - id: Global.Layer.DeleteMostRecentKeyFrame(System.Int32)
      commentId: M:Global.Layer.DeleteMostRecentKeyFrame(System.Int32)
      language: CSharp
      name:
        CSharp: DeleteMostRecentKeyFrame(int)
        VB: DeleteMostRecentKeyFrame(Integer)
      nameWithType:
        CSharp: Layer.DeleteMostRecentKeyFrame(int)
        VB: Layer.DeleteMostRecentKeyFrame(Integer)
      qualifiedName:
        CSharp: Layer.DeleteMostRecentKeyFrame(int)
        VB: Layer.DeleteMostRecentKeyFrame(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeleteMostRecentKeyFrame
        path: ''
        startLine: 12813
      summary: "\nDeletes the most recent key frame before or at the given frame index and returns that key frame.\n"
      example: []
      syntax:
        content:
          CSharp: public AnimationKeyFrame DeleteMostRecentKeyFrame(int frame)
          VB: Public Function DeleteMostRecentKeyFrame(frame As Integer) As AnimationKeyFrame
        parameters:
        - id: frame
          type: System.Int32
        return:
          type: Global.AnimationKeyFrame
      overload: Global.Layer.DeleteMostRecentKeyFrame*
    - id: Global.Layer.DeleteKeyFrameNoEvent(System.Int32)
      commentId: M:Global.Layer.DeleteKeyFrameNoEvent(System.Int32)
      language: CSharp
      name:
        CSharp: DeleteKeyFrameNoEvent(int)
        VB: DeleteKeyFrameNoEvent(Integer)
      nameWithType:
        CSharp: Layer.DeleteKeyFrameNoEvent(int)
        VB: Layer.DeleteKeyFrameNoEvent(Integer)
      qualifiedName:
        CSharp: Layer.DeleteKeyFrameNoEvent(int)
        VB: Layer.DeleteKeyFrameNoEvent(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeleteKeyFrameNoEvent
        path: ''
        startLine: 12821
      summary: "\nDeletes the key frame at the given frame index, if there is one, in which case it returns that key frame. Otherwise it returns null.\n"
      example: []
      syntax:
        content:
          CSharp: protected abstract AnimationKeyFrame DeleteKeyFrameNoEvent(int keyframe)
          VB: Protected MustOverride Function DeleteKeyFrameNoEvent(keyframe As Integer) As AnimationKeyFrame
        parameters:
        - id: keyframe
          type: System.Int32
        return:
          type: Global.AnimationKeyFrame
      overload: Global.Layer.DeleteKeyFrameNoEvent*
    - id: Global.Layer.DeleteKeyFrame(System.Int32)
      commentId: M:Global.Layer.DeleteKeyFrame(System.Int32)
      language: CSharp
      name:
        CSharp: DeleteKeyFrame(int)
        VB: DeleteKeyFrame(Integer)
      nameWithType:
        CSharp: Layer.DeleteKeyFrame(int)
        VB: Layer.DeleteKeyFrame(Integer)
      qualifiedName:
        CSharp: Layer.DeleteKeyFrame(int)
        VB: Layer.DeleteKeyFrame(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeleteKeyFrame
        path: ''
        startLine: 12822
      syntax:
        content:
          CSharp: public AnimationKeyFrame DeleteKeyFrame(int keyFrame)
          VB: Public Function DeleteKeyFrame(keyFrame As Integer) As AnimationKeyFrame
        parameters:
        - id: keyFrame
          type: System.Int32
        return:
          type: Global.AnimationKeyFrame
      overload: Global.Layer.DeleteKeyFrame*
    - id: Global.Layer.DeleteKeyFrame(AnimationKeyFrame)
      commentId: M:Global.Layer.DeleteKeyFrame(AnimationKeyFrame)
      language: CSharp
      name:
        CSharp: DeleteKeyFrame(AnimationKeyFrame)
        VB: DeleteKeyFrame(AnimationKeyFrame)
      nameWithType:
        CSharp: Layer.DeleteKeyFrame(AnimationKeyFrame)
        VB: Layer.DeleteKeyFrame(AnimationKeyFrame)
      qualifiedName:
        CSharp: Layer.DeleteKeyFrame(AnimationKeyFrame)
        VB: Layer.DeleteKeyFrame(AnimationKeyFrame)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeleteKeyFrame
        path: ''
        startLine: 12831
      summary: "\nDeletes the given key frame, if it&apos;s in the animation, in which case it returns true. Otherwise it returns false.\n"
      example: []
      syntax:
        content:
          CSharp: public bool DeleteKeyFrame(AnimationKeyFrame keyFrame)
          VB: Public Function DeleteKeyFrame(keyFrame As AnimationKeyFrame) As Boolean
        parameters:
        - id: keyFrame
          type: Global.AnimationKeyFrame
        return:
          type: System.Boolean
      overload: Global.Layer.DeleteKeyFrame*
    - id: Global.Layer.ClearFrames
      commentId: M:Global.Layer.ClearFrames
      language: CSharp
      name:
        CSharp: ClearFrames()
        VB: ClearFrames()
      nameWithType:
        CSharp: Layer.ClearFrames()
        VB: Layer.ClearFrames()
      qualifiedName:
        CSharp: Layer.ClearFrames()
        VB: Layer.ClearFrames()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ClearFrames
        path: ''
        startLine: 12847
      summary: "\nDeletes all key frames.\n"
      example: []
      syntax:
        content:
          CSharp: public abstract void ClearFrames()
          VB: Public MustOverride Sub ClearFrames()
      overload: Global.Layer.ClearFrames*
    - id: Global.Layer.SubscribeToOnPixelsChanged(UnityAction{IntVector2[],System.Int32[]})
      commentId: M:Global.Layer.SubscribeToOnPixelsChanged(UnityAction{IntVector2[],System.Int32[]})
      language: CSharp
      name:
        CSharp: SubscribeToOnPixelsChanged(UnityAction<IntVector2[], int[]>)
        VB: SubscribeToOnPixelsChanged(UnityAction(Of IntVector2(), Integer()))
      nameWithType:
        CSharp: Layer.SubscribeToOnPixelsChanged(UnityAction<IntVector2[], int[]>)
        VB: Layer.SubscribeToOnPixelsChanged(UnityAction(Of IntVector2(), Integer()))
      qualifiedName:
        CSharp: Layer.SubscribeToOnPixelsChanged(UnityAction<IntVector2[], int[]>)
        VB: Layer.SubscribeToOnPixelsChanged(UnityAction(Of IntVector2(), Integer()))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnPixelsChanged
        path: ''
        startLine: 12852
      example: []
      syntax:
        content:
          CSharp: public void SubscribeToOnPixelsChanged(UnityAction<IntVector2[], int[]> call)
          VB: Public Sub SubscribeToOnPixelsChanged([call] As UnityAction(Of IntVector2(), Integer()))
        parameters:
        - id: call
          type: Global.UnityAction{IntVector2[],System.Int32[]}
      overload: Global.Layer.SubscribeToOnPixelsChanged*
    - id: Global.Layer.SubscribeToOnVisibilityChanged(UnityAction)
      commentId: M:Global.Layer.SubscribeToOnVisibilityChanged(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnVisibilityChanged(UnityAction)
        VB: SubscribeToOnVisibilityChanged(UnityAction)
      nameWithType:
        CSharp: Layer.SubscribeToOnVisibilityChanged(UnityAction)
        VB: Layer.SubscribeToOnVisibilityChanged(UnityAction)
      qualifiedName:
        CSharp: Layer.SubscribeToOnVisibilityChanged(UnityAction)
        VB: Layer.SubscribeToOnVisibilityChanged(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnVisibilityChanged
        path: ''
        startLine: 12856
      syntax:
        content:
          CSharp: public void SubscribeToOnVisibilityChanged(UnityAction call)
          VB: Public Sub SubscribeToOnVisibilityChanged([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.Layer.SubscribeToOnVisibilityChanged*
    - id: Global.Layer.SubscribeToOnBlendModeChanged(UnityAction)
      commentId: M:Global.Layer.SubscribeToOnBlendModeChanged(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnBlendModeChanged(UnityAction)
        VB: SubscribeToOnBlendModeChanged(UnityAction)
      nameWithType:
        CSharp: Layer.SubscribeToOnBlendModeChanged(UnityAction)
        VB: Layer.SubscribeToOnBlendModeChanged(UnityAction)
      qualifiedName:
        CSharp: Layer.SubscribeToOnBlendModeChanged(UnityAction)
        VB: Layer.SubscribeToOnBlendModeChanged(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnBlendModeChanged
        path: ''
        startLine: 12860
      syntax:
        content:
          CSharp: public void SubscribeToOnBlendModeChanged(UnityAction call)
          VB: Public Sub SubscribeToOnBlendModeChanged([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.Layer.SubscribeToOnBlendModeChanged*
    - id: Global.Layer.SubscribeToOnKeyFrameAdded(UnityAction{System.Int32})
      commentId: M:Global.Layer.SubscribeToOnKeyFrameAdded(UnityAction{System.Int32})
      language: CSharp
      name:
        CSharp: SubscribeToOnKeyFrameAdded(UnityAction<int>)
        VB: SubscribeToOnKeyFrameAdded(UnityAction(Of Integer))
      nameWithType:
        CSharp: Layer.SubscribeToOnKeyFrameAdded(UnityAction<int>)
        VB: Layer.SubscribeToOnKeyFrameAdded(UnityAction(Of Integer))
      qualifiedName:
        CSharp: Layer.SubscribeToOnKeyFrameAdded(UnityAction<int>)
        VB: Layer.SubscribeToOnKeyFrameAdded(UnityAction(Of Integer))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnKeyFrameAdded
        path: ''
        startLine: 12864
      syntax:
        content:
          CSharp: public void SubscribeToOnKeyFrameAdded(UnityAction<int> call)
          VB: Public Sub SubscribeToOnKeyFrameAdded([call] As UnityAction(Of Integer))
        parameters:
        - id: call
          type: Global.UnityAction{System.Int32}
      overload: Global.Layer.SubscribeToOnKeyFrameAdded*
    - id: Global.Layer.SubscribeToOnKeyFrameRemoved(UnityAction{System.Int32})
      commentId: M:Global.Layer.SubscribeToOnKeyFrameRemoved(UnityAction{System.Int32})
      language: CSharp
      name:
        CSharp: SubscribeToOnKeyFrameRemoved(UnityAction<int>)
        VB: SubscribeToOnKeyFrameRemoved(UnityAction(Of Integer))
      nameWithType:
        CSharp: Layer.SubscribeToOnKeyFrameRemoved(UnityAction<int>)
        VB: Layer.SubscribeToOnKeyFrameRemoved(UnityAction(Of Integer))
      qualifiedName:
        CSharp: Layer.SubscribeToOnKeyFrameRemoved(UnityAction<int>)
        VB: Layer.SubscribeToOnKeyFrameRemoved(UnityAction(Of Integer))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnKeyFrameRemoved
        path: ''
        startLine: 12868
      syntax:
        content:
          CSharp: public void SubscribeToOnKeyFrameRemoved(UnityAction<int> call)
          VB: Public Sub SubscribeToOnKeyFrameRemoved([call] As UnityAction(Of Integer))
        parameters:
        - id: call
          type: Global.UnityAction{System.Int32}
      overload: Global.Layer.SubscribeToOnKeyFrameRemoved*
  - id: Global.LayerManager
    commentId: T:Global.LayerManager
    language: CSharp
    name:
      CSharp: LayerManager
      VB: LayerManager
    nameWithType:
      CSharp: LayerManager
      VB: LayerManager
    qualifiedName:
      CSharp: LayerManager
      VB: LayerManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: LayerManager
      path: ''
      startLine: 12880
    syntax:
      content:
        CSharp: 'public class LayerManager : MonoBehaviour'
        VB: Public Class LayerManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.LayerManager.layerTypeSprite
      commentId: F:Global.LayerManager.layerTypeSprite
      language: CSharp
      name:
        CSharp: layerTypeSprite
        VB: layerTypeSprite
      nameWithType:
        CSharp: LayerManager.layerTypeSprite
        VB: LayerManager.layerTypeSprite
      qualifiedName:
        CSharp: LayerManager.layerTypeSprite
        VB: LayerManager.layerTypeSprite
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: layerTypeSprite
        path: ''
        startLine: 12892
      syntax:
        content:
          CSharp: public Sprite layerTypeSprite
          VB: Public layerTypeSprite As Sprite
        return:
          type: Global.Sprite
    - id: Global.LayerManager.tileLayerTypeSprite
      commentId: F:Global.LayerManager.tileLayerTypeSprite
      language: CSharp
      name:
        CSharp: tileLayerTypeSprite
        VB: tileLayerTypeSprite
      nameWithType:
        CSharp: LayerManager.tileLayerTypeSprite
        VB: LayerManager.tileLayerTypeSprite
      qualifiedName:
        CSharp: LayerManager.tileLayerTypeSprite
        VB: LayerManager.tileLayerTypeSprite
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: tileLayerTypeSprite
        path: ''
        startLine: 12893
      syntax:
        content:
          CSharp: public Sprite tileLayerTypeSprite
          VB: Public tileLayerTypeSprite As Sprite
        return:
          type: Global.Sprite
    - id: Global.LayerManager.selectedLayerIndex
      commentId: P:Global.LayerManager.selectedLayerIndex
      language: CSharp
      name:
        CSharp: selectedLayerIndex
        VB: selectedLayerIndex
      nameWithType:
        CSharp: LayerManager.selectedLayerIndex
        VB: LayerManager.selectedLayerIndex
      qualifiedName:
        CSharp: LayerManager.selectedLayerIndex
        VB: LayerManager.selectedLayerIndex
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: selectedLayerIndex
        path: ''
        startLine: 12914
      summary: "\nThe index of the last layer that was selected.\n"
      example: []
      syntax:
        content:
          CSharp: public int selectedLayerIndex { get; }
          VB: Public ReadOnly Property selectedLayerIndex As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.LayerManager.selectedLayerIndex*
    - id: Global.LayerManager.selectedLayer
      commentId: P:Global.LayerManager.selectedLayer
      language: CSharp
      name:
        CSharp: selectedLayer
        VB: selectedLayer
      nameWithType:
        CSharp: LayerManager.selectedLayer
        VB: LayerManager.selectedLayer
      qualifiedName:
        CSharp: LayerManager.selectedLayer
        VB: LayerManager.selectedLayer
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: selectedLayer
        path: ''
        startLine: 12924
      summary: "\nThe last layer that was selected.\n"
      example: []
      syntax:
        content:
          CSharp: public Layer selectedLayer { get; }
          VB: Public ReadOnly Property selectedLayer As Layer
        parameters: []
        return:
          type: Global.Layer
      overload: Global.LayerManager.selectedLayer*
    - id: Global.LayerManager.selectedLayerIndices
      commentId: P:Global.LayerManager.selectedLayerIndices
      language: CSharp
      name:
        CSharp: selectedLayerIndices
        VB: selectedLayerIndices
      nameWithType:
        CSharp: LayerManager.selectedLayerIndices
        VB: LayerManager.selectedLayerIndices
      qualifiedName:
        CSharp: LayerManager.selectedLayerIndices
        VB: LayerManager.selectedLayerIndices
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: selectedLayerIndices
        path: ''
        startLine: 12935
      summary: "\nThe indices of all selected layers, in increasing order.\n"
      example: []
      syntax:
        content:
          CSharp: public int[] selectedLayerIndices { get; }
          VB: Public ReadOnly Property selectedLayerIndices As Integer()
        parameters: []
        return:
          type: System.Int32[]
      overload: Global.LayerManager.selectedLayerIndices*
    - id: Global.LayerManager.selectedLayers
      commentId: P:Global.LayerManager.selectedLayers
      language: CSharp
      name:
        CSharp: selectedLayers
        VB: selectedLayers
      nameWithType:
        CSharp: LayerManager.selectedLayers
        VB: LayerManager.selectedLayers
      qualifiedName:
        CSharp: LayerManager.selectedLayers
        VB: LayerManager.selectedLayers
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: selectedLayers
        path: ''
        startLine: 12945
      summary: "\nThe selected layers, in order (highest layer first etc).\n"
      example: []
      syntax:
        content:
          CSharp: public Layer[] selectedLayers { get; }
          VB: Public ReadOnly Property selectedLayers As Layer()
        parameters: []
        return:
          type: Global.Layer[]
      overload: Global.LayerManager.selectedLayers*
    - id: Global.LayerManager.OnLayersChanged
      commentId: M:Global.LayerManager.OnLayersChanged
      language: CSharp
      name:
        CSharp: OnLayersChanged()
        VB: OnLayersChanged()
      nameWithType:
        CSharp: LayerManager.OnLayersChanged()
        VB: LayerManager.OnLayersChanged()
      qualifiedName:
        CSharp: LayerManager.OnLayersChanged()
        VB: LayerManager.OnLayersChanged()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnLayersChanged
        path: ''
        startLine: 12974
      syntax:
        content:
          CSharp: public void OnLayersChanged()
          VB: Public Sub OnLayersChanged()
      overload: Global.LayerManager.OnLayersChanged*
    - id: Global.LayerManager.OnFileSwitched
      commentId: M:Global.LayerManager.OnFileSwitched
      language: CSharp
      name:
        CSharp: OnFileSwitched()
        VB: OnFileSwitched()
      nameWithType:
        CSharp: LayerManager.OnFileSwitched()
        VB: LayerManager.OnFileSwitched()
      qualifiedName:
        CSharp: LayerManager.OnFileSwitched()
        VB: LayerManager.OnFileSwitched()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnFileSwitched
        path: ''
        startLine: 12980
      syntax:
        content:
          CSharp: public void OnFileSwitched()
          VB: Public Sub OnFileSwitched()
      overload: Global.LayerManager.OnFileSwitched*
    - id: Global.LayerManager.AddLayer
      commentId: M:Global.LayerManager.AddLayer
      language: CSharp
      name:
        CSharp: AddLayer()
        VB: AddLayer()
      nameWithType:
        CSharp: LayerManager.AddLayer()
        VB: LayerManager.AddLayer()
      qualifiedName:
        CSharp: LayerManager.AddLayer()
        VB: LayerManager.AddLayer()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddLayer
        path: ''
        startLine: 13065
      syntax:
        content:
          CSharp: public void AddLayer()
          VB: Public Sub AddLayer()
      overload: Global.LayerManager.AddLayer*
    - id: Global.LayerManager.AddLayer(Texture2D)
      commentId: M:Global.LayerManager.AddLayer(Texture2D)
      language: CSharp
      name:
        CSharp: AddLayer(Texture2D)
        VB: AddLayer(Texture2D)
      nameWithType:
        CSharp: LayerManager.AddLayer(Texture2D)
        VB: LayerManager.AddLayer(Texture2D)
      qualifiedName:
        CSharp: LayerManager.AddLayer(Texture2D)
        VB: LayerManager.AddLayer(Texture2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddLayer
        path: ''
        startLine: 13072
      syntax:
        content:
          CSharp: public void AddLayer(Texture2D texture)
          VB: Public Sub AddLayer(texture As Texture2D)
        parameters:
        - id: texture
          type: Global.Texture2D
      overload: Global.LayerManager.AddLayer*
    - id: Global.LayerManager.AddTileLayer
      commentId: M:Global.LayerManager.AddTileLayer
      language: CSharp
      name:
        CSharp: AddTileLayer()
        VB: AddTileLayer()
      nameWithType:
        CSharp: LayerManager.AddTileLayer()
        VB: LayerManager.AddTileLayer()
      qualifiedName:
        CSharp: LayerManager.AddTileLayer()
        VB: LayerManager.AddTileLayer()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddTileLayer
        path: ''
        startLine: 13080
      syntax:
        content:
          CSharp: public void AddTileLayer()
          VB: Public Sub AddTileLayer()
      overload: Global.LayerManager.AddTileLayer*
    - id: Global.LayerManager.RemoveSelectedLayers
      commentId: M:Global.LayerManager.RemoveSelectedLayers
      language: CSharp
      name:
        CSharp: RemoveSelectedLayers()
        VB: RemoveSelectedLayers()
      nameWithType:
        CSharp: LayerManager.RemoveSelectedLayers()
        VB: LayerManager.RemoveSelectedLayers()
      qualifiedName:
        CSharp: LayerManager.RemoveSelectedLayers()
        VB: LayerManager.RemoveSelectedLayers()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RemoveSelectedLayers
        path: ''
        startLine: 13088
      syntax:
        content:
          CSharp: public void RemoveSelectedLayers()
          VB: Public Sub RemoveSelectedLayers()
      overload: Global.LayerManager.RemoveSelectedLayers*
    - id: Global.LayerManager.DuplicateSelectedLayers
      commentId: M:Global.LayerManager.DuplicateSelectedLayers
      language: CSharp
      name:
        CSharp: DuplicateSelectedLayers()
        VB: DuplicateSelectedLayers()
      nameWithType:
        CSharp: LayerManager.DuplicateSelectedLayers()
        VB: LayerManager.DuplicateSelectedLayers()
      qualifiedName:
        CSharp: LayerManager.DuplicateSelectedLayers()
        VB: LayerManager.DuplicateSelectedLayers()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DuplicateSelectedLayers
        path: ''
        startLine: 13095
      syntax:
        content:
          CSharp: public void DuplicateSelectedLayers()
          VB: Public Sub DuplicateSelectedLayers()
      overload: Global.LayerManager.DuplicateSelectedLayers*
    - id: Global.LayerManager.FlattenSelectedLayers
      commentId: M:Global.LayerManager.FlattenSelectedLayers
      language: CSharp
      name:
        CSharp: FlattenSelectedLayers()
        VB: FlattenSelectedLayers()
      nameWithType:
        CSharp: LayerManager.FlattenSelectedLayers()
        VB: LayerManager.FlattenSelectedLayers()
      qualifiedName:
        CSharp: LayerManager.FlattenSelectedLayers()
        VB: LayerManager.FlattenSelectedLayers()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FlattenSelectedLayers
        path: ''
        startLine: 13113
      syntax:
        content:
          CSharp: public void FlattenSelectedLayers()
          VB: Public Sub FlattenSelectedLayers()
      overload: Global.LayerManager.FlattenSelectedLayers*
    - id: Global.LayerManager.MoveSelectedLayersUp
      commentId: M:Global.LayerManager.MoveSelectedLayersUp
      language: CSharp
      name:
        CSharp: MoveSelectedLayersUp()
        VB: MoveSelectedLayersUp()
      nameWithType:
        CSharp: LayerManager.MoveSelectedLayersUp()
        VB: LayerManager.MoveSelectedLayersUp()
      qualifiedName:
        CSharp: LayerManager.MoveSelectedLayersUp()
        VB: LayerManager.MoveSelectedLayersUp()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MoveSelectedLayersUp
        path: ''
        startLine: 13153
      syntax:
        content:
          CSharp: public void MoveSelectedLayersUp()
          VB: Public Sub MoveSelectedLayersUp()
      overload: Global.LayerManager.MoveSelectedLayersUp*
    - id: Global.LayerManager.MoveSelectedLayersDown
      commentId: M:Global.LayerManager.MoveSelectedLayersDown
      language: CSharp
      name:
        CSharp: MoveSelectedLayersDown()
        VB: MoveSelectedLayersDown()
      nameWithType:
        CSharp: LayerManager.MoveSelectedLayersDown()
        VB: LayerManager.MoveSelectedLayersDown()
      qualifiedName:
        CSharp: LayerManager.MoveSelectedLayersDown()
        VB: LayerManager.MoveSelectedLayersDown()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MoveSelectedLayersDown
        path: ''
        startLine: 13179
      syntax:
        content:
          CSharp: public void MoveSelectedLayersDown()
          VB: Public Sub MoveSelectedLayersDown()
      overload: Global.LayerManager.MoveSelectedLayersDown*
    - id: Global.LayerManager.HideAllBut(Layer)
      commentId: M:Global.LayerManager.HideAllBut(Layer)
      language: CSharp
      name:
        CSharp: HideAllBut(Layer)
        VB: HideAllBut(Layer)
      nameWithType:
        CSharp: LayerManager.HideAllBut(Layer)
        VB: LayerManager.HideAllBut(Layer)
      qualifiedName:
        CSharp: LayerManager.HideAllBut(Layer)
        VB: LayerManager.HideAllBut(Layer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: HideAllBut
        path: ''
        startLine: 13205
      syntax:
        content:
          CSharp: public void HideAllBut(Layer layer)
          VB: Public Sub HideAllBut(layer As Layer)
        parameters:
        - id: layer
          type: Global.Layer
      overload: Global.LayerManager.HideAllBut*
    - id: Global.LayerManager.WorldYCoordOfLayerTile(System.Int32)
      commentId: M:Global.LayerManager.WorldYCoordOfLayerTile(System.Int32)
      language: CSharp
      name:
        CSharp: WorldYCoordOfLayerTile(int)
        VB: WorldYCoordOfLayerTile(Integer)
      nameWithType:
        CSharp: LayerManager.WorldYCoordOfLayerTile(int)
        VB: LayerManager.WorldYCoordOfLayerTile(Integer)
      qualifiedName:
        CSharp: LayerManager.WorldYCoordOfLayerTile(int)
        VB: LayerManager.WorldYCoordOfLayerTile(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: WorldYCoordOfLayerTile
        path: ''
        startLine: 13228
      syntax:
        content:
          CSharp: public float WorldYCoordOfLayerTile(int layerTileIndex)
          VB: Public Function WorldYCoordOfLayerTile(layerTileIndex As Integer) As Single
        parameters:
        - id: layerTileIndex
          type: System.Int32
        return:
          type: System.Single
      overload: Global.LayerManager.WorldYCoordOfLayerTile*
    - id: Global.LayerManager.SetLayerName(System.Int32,System.String)
      commentId: M:Global.LayerManager.SetLayerName(System.Int32,System.String)
      language: CSharp
      name:
        CSharp: SetLayerName(int, string)
        VB: SetLayerName(Integer, String)
      nameWithType:
        CSharp: LayerManager.SetLayerName(int, string)
        VB: LayerManager.SetLayerName(Integer, String)
      qualifiedName:
        CSharp: LayerManager.SetLayerName(int, string)
        VB: LayerManager.SetLayerName(Integer, String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetLayerName
        path: ''
        startLine: 13238
      syntax:
        content:
          CSharp: public void SetLayerName(int layerIndex, string layerName)
          VB: Public Sub SetLayerName(layerIndex As Integer, layerName As String)
        parameters:
        - id: layerIndex
          type: System.Int32
        - id: layerName
          type: System.String
      overload: Global.LayerManager.SetLayerName*
    - id: Global.LayerManager.SetLayerOpacity(System.Int32,System.Single)
      commentId: M:Global.LayerManager.SetLayerOpacity(System.Int32,System.Single)
      language: CSharp
      name:
        CSharp: SetLayerOpacity(int, float)
        VB: SetLayerOpacity(Integer, Single)
      nameWithType:
        CSharp: LayerManager.SetLayerOpacity(int, float)
        VB: LayerManager.SetLayerOpacity(Integer, Single)
      qualifiedName:
        CSharp: LayerManager.SetLayerOpacity(int, float)
        VB: LayerManager.SetLayerOpacity(Integer, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetLayerOpacity
        path: ''
        startLine: 13251
      syntax:
        content:
          CSharp: public void SetLayerOpacity(int layerIndex, float opacity)
          VB: Public Sub SetLayerOpacity(layerIndex As Integer, opacity As Single)
        parameters:
        - id: layerIndex
          type: System.Int32
        - id: opacity
          type: System.Single
      overload: Global.LayerManager.SetLayerOpacity*
    - id: Global.LayerManager.SetLayerBlendMode(System.Int32,BlendMode)
      commentId: M:Global.LayerManager.SetLayerBlendMode(System.Int32,BlendMode)
      language: CSharp
      name:
        CSharp: SetLayerBlendMode(int, BlendMode)
        VB: SetLayerBlendMode(Integer, BlendMode)
      nameWithType:
        CSharp: LayerManager.SetLayerBlendMode(int, BlendMode)
        VB: LayerManager.SetLayerBlendMode(Integer, BlendMode)
      qualifiedName:
        CSharp: LayerManager.SetLayerBlendMode(int, BlendMode)
        VB: LayerManager.SetLayerBlendMode(Integer, BlendMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetLayerBlendMode
        path: ''
        startLine: 13268
      syntax:
        content:
          CSharp: public void SetLayerBlendMode(int layerIndex, BlendMode blendMode)
          VB: Public Sub SetLayerBlendMode(layerIndex As Integer, blendMode As BlendMode)
        parameters:
        - id: layerIndex
          type: System.Int32
        - id: blendMode
          type: Global.BlendMode
      overload: Global.LayerManager.SetLayerBlendMode*
    - id: Global.LayerManager.SubscribeToLayerChange(UnityAction)
      commentId: M:Global.LayerManager.SubscribeToLayerChange(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToLayerChange(UnityAction)
        VB: SubscribeToLayerChange(UnityAction)
      nameWithType:
        CSharp: LayerManager.SubscribeToLayerChange(UnityAction)
        VB: LayerManager.SubscribeToLayerChange(UnityAction)
      qualifiedName:
        CSharp: LayerManager.SubscribeToLayerChange(UnityAction)
        VB: LayerManager.SubscribeToLayerChange(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToLayerChange
        path: ''
        startLine: 13286
      syntax:
        content:
          CSharp: public void SubscribeToLayerChange(UnityAction call)
          VB: Public Sub SubscribeToLayerChange([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.LayerManager.SubscribeToLayerChange*
    - id: Global.LayerManager.SubscribeToVisibilityChange(UnityAction)
      commentId: M:Global.LayerManager.SubscribeToVisibilityChange(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToVisibilityChange(UnityAction)
        VB: SubscribeToVisibilityChange(UnityAction)
      nameWithType:
        CSharp: LayerManager.SubscribeToVisibilityChange(UnityAction)
        VB: LayerManager.SubscribeToVisibilityChange(UnityAction)
      qualifiedName:
        CSharp: LayerManager.SubscribeToVisibilityChange(UnityAction)
        VB: LayerManager.SubscribeToVisibilityChange(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToVisibilityChange
        path: ''
        startLine: 13290
      syntax:
        content:
          CSharp: public void SubscribeToVisibilityChange(UnityAction call)
          VB: Public Sub SubscribeToVisibilityChange([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.LayerManager.SubscribeToVisibilityChange*
  - id: Global.LayerTile
    commentId: T:Global.LayerTile
    language: CSharp
    name:
      CSharp: LayerTile
      VB: LayerTile
    nameWithType:
      CSharp: LayerTile
      VB: LayerTile
    qualifiedName:
      CSharp: LayerTile
      VB: LayerTile
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: LayerTile
      path: ''
      startLine: 13302
    syntax:
      content:
        CSharp: 'public class LayerTile : MonoBehaviour'
        VB: Public Class LayerTile Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.LayerTile.layer
      commentId: P:Global.LayerTile.layer
      language: CSharp
      name:
        CSharp: layer
        VB: layer
      nameWithType:
        CSharp: LayerTile.layer
        VB: LayerTile.layer
      qualifiedName:
        CSharp: LayerTile.layer
        VB: LayerTile.layer
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: layer
        path: ''
        startLine: 13304
      syntax:
        content:
          CSharp: public Layer layer { get; }
          VB: Public Property layer As Layer
        parameters: []
        return:
          type: Global.Layer
      overload: Global.LayerTile.layer*
    - id: Global.LayerTile.selected
      commentId: P:Global.LayerTile.selected
      language: CSharp
      name:
        CSharp: selected
        VB: selected
      nameWithType:
        CSharp: LayerTile.selected
        VB: LayerTile.selected
      qualifiedName:
        CSharp: LayerTile.selected
        VB: LayerTile.selected
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: selected
        path: ''
        startLine: 13305
      syntax:
        content:
          CSharp: public bool selected { get; }
          VB: Public ReadOnly Property selected As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.LayerTile.selected*
    - id: Global.LayerTile.tileToggle
      commentId: P:Global.LayerTile.tileToggle
      language: CSharp
      name:
        CSharp: tileToggle
        VB: tileToggle
      nameWithType:
        CSharp: LayerTile.tileToggle
        VB: LayerTile.tileToggle
      qualifiedName:
        CSharp: LayerTile.tileToggle
        VB: LayerTile.tileToggle
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: tileToggle
        path: ''
        startLine: 13313
      syntax:
        content:
          CSharp: public UIToggleButton tileToggle { get; }
          VB: Public Property tileToggle As UIToggleButton
        parameters: []
        return:
          type: Global.UIToggleButton
      overload: Global.LayerTile.tileToggle*
    - id: Global.LayerTile.SetLayer(Layer)
      commentId: M:Global.LayerTile.SetLayer(Layer)
      language: CSharp
      name:
        CSharp: SetLayer(Layer)
        VB: SetLayer(Layer)
      nameWithType:
        CSharp: LayerTile.SetLayer(Layer)
        VB: LayerTile.SetLayer(Layer)
      qualifiedName:
        CSharp: LayerTile.SetLayer(Layer)
        VB: LayerTile.SetLayer(Layer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetLayer
        path: ''
        startLine: 13348
      syntax:
        content:
          CSharp: public void SetLayer(Layer layer)
          VB: Public Sub SetLayer(layer As Layer)
        parameters:
        - id: layer
          type: Global.Layer
      overload: Global.LayerTile.SetLayer*
    - id: Global.LayerTile.SubscribeToVisibilityChange(UnityAction)
      commentId: M:Global.LayerTile.SubscribeToVisibilityChange(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToVisibilityChange(UnityAction)
        VB: SubscribeToVisibilityChange(UnityAction)
      nameWithType:
        CSharp: LayerTile.SubscribeToVisibilityChange(UnityAction)
        VB: LayerTile.SubscribeToVisibilityChange(UnityAction)
      qualifiedName:
        CSharp: LayerTile.SubscribeToVisibilityChange(UnityAction)
        VB: LayerTile.SubscribeToVisibilityChange(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToVisibilityChange
        path: ''
        startLine: 13401
      syntax:
        content:
          CSharp: public void SubscribeToVisibilityChange(UnityAction call)
          VB: Public Sub SubscribeToVisibilityChange([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.LayerTile.SubscribeToVisibilityChange*
    - id: Global.LayerTile.SubscribeToLockChange(UnityAction)
      commentId: M:Global.LayerTile.SubscribeToLockChange(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToLockChange(UnityAction)
        VB: SubscribeToLockChange(UnityAction)
      nameWithType:
        CSharp: LayerTile.SubscribeToLockChange(UnityAction)
        VB: LayerTile.SubscribeToLockChange(UnityAction)
      qualifiedName:
        CSharp: LayerTile.SubscribeToLockChange(UnityAction)
        VB: LayerTile.SubscribeToLockChange(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToLockChange
        path: ''
        startLine: 13405
      syntax:
        content:
          CSharp: public void SubscribeToLockChange(UnityAction call)
          VB: Public Sub SubscribeToLockChange([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.LayerTile.SubscribeToLockChange*
    - id: Global.LayerTile.SubscribeToNameChange(UnityAction)
      commentId: M:Global.LayerTile.SubscribeToNameChange(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToNameChange(UnityAction)
        VB: SubscribeToNameChange(UnityAction)
      nameWithType:
        CSharp: LayerTile.SubscribeToNameChange(UnityAction)
        VB: LayerTile.SubscribeToNameChange(UnityAction)
      qualifiedName:
        CSharp: LayerTile.SubscribeToNameChange(UnityAction)
        VB: LayerTile.SubscribeToNameChange(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToNameChange
        path: ''
        startLine: 13409
      syntax:
        content:
          CSharp: public void SubscribeToNameChange(UnityAction call)
          VB: Public Sub SubscribeToNameChange([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.LayerTile.SubscribeToNameChange*
    - id: Global.LayerTile.SubscribeToRightClick(UnityAction)
      commentId: M:Global.LayerTile.SubscribeToRightClick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToRightClick(UnityAction)
        VB: SubscribeToRightClick(UnityAction)
      nameWithType:
        CSharp: LayerTile.SubscribeToRightClick(UnityAction)
        VB: LayerTile.SubscribeToRightClick(UnityAction)
      qualifiedName:
        CSharp: LayerTile.SubscribeToRightClick(UnityAction)
        VB: LayerTile.SubscribeToRightClick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToRightClick
        path: ''
        startLine: 13413
      syntax:
        content:
          CSharp: public void SubscribeToRightClick(UnityAction call)
          VB: Public Sub SubscribeToRightClick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.LayerTile.SubscribeToRightClick*
  - id: Global.NormalLayer
    commentId: T:Global.NormalLayer
    language: CSharp
    name:
      CSharp: NormalLayer
      VB: NormalLayer
    nameWithType:
      CSharp: NormalLayer
      VB: NormalLayer
    qualifiedName:
      CSharp: NormalLayer
      VB: NormalLayer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: NormalLayer
      path: ''
      startLine: 13427
    summary: "\nA class to represent a normal layer - one that can be drawn on as a regular image.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class NormalLayer : Layer, IJSONable'
        VB: Public Class NormalLayer Inherits Layer Implements IJSONable
    inheritance:
    - System.Object
    - Global.Layer
    implements:
    - Global.IJSONable
    inheritedMembers:
    - Global.Layer.name
    - Global.Layer.width
    - Global.Layer.height
    - Global.Layer.rect
    - Global.Layer._visible
    - Global.Layer.visible
    - Global.Layer.locked
    - Global.Layer.opacity
    - Global.Layer._blendMode
    - Global.Layer.blendMode
    - Global.Layer.keyFrames
    - Global.Layer.keyFrameIndices
    - Global.Layer.keyFrameTextures
    - Global.Layer.onPixelsChanged
    - Global.Layer.SetPixel(System.Int32,System.Int32,System.Int32,Color,AnimFrameRefMode)
    - Global.Layer.SetPixel(IntVector2,System.Int32,Color,AnimFrameRefMode)
    - Global.Layer.SetPixels(IntVector2[],System.Int32,Color,AnimFrameRefMode)
    - Global.Layer.GetPixel(System.Int32,System.Int32,System.Int32,System.Boolean)
    - Global.Layer.IsBlank
    - Global.Layer.Flip(FlipDirection)
    - Global.Layer.Rotate(RotationAngle)
    - Global.Layer.Extend(System.Int32,System.Int32,System.Int32,System.Int32)
    - Global.Layer.Scale(System.Single)
    - Global.Layer.Scale(System.Single,System.Single)
    - Global.Layer.Scale(System.Int32,System.Int32)
    - Global.Layer.FromJSON(JSON)
    - Global.Layer.Item(System.Int32)
    - Global.Layer.GetKeyFrame(System.Int32)
    - Global.Layer.HasKeyFrameAt(System.Int32)
    - Global.Layer.AddKeyFrame(System.Int32)
    - Global.Layer.AddKeyFrame(System.Int32,Texture2D)
    - Global.Layer.AddKeyFrame(AnimationKeyFrame)
    - Global.Layer.DeleteMostRecentKeyFrame(System.Int32)
    - Global.Layer.DeleteKeyFrame(System.Int32)
    - Global.Layer.DeleteKeyFrame(AnimationKeyFrame)
    - Global.Layer.SubscribeToOnPixelsChanged(UnityAction{IntVector2[],System.Int32[]})
    - Global.Layer.SubscribeToOnVisibilityChanged(UnityAction)
    - Global.Layer.SubscribeToOnBlendModeChanged(UnityAction)
    - Global.Layer.SubscribeToOnKeyFrameAdded(UnityAction{System.Int32})
    - Global.Layer.SubscribeToOnKeyFrameRemoved(UnityAction{System.Int32})
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.NormalLayer.layerType
      commentId: P:Global.NormalLayer.layerType
      language: CSharp
      name:
        CSharp: layerType
        VB: layerType
      nameWithType:
        CSharp: NormalLayer.layerType
        VB: NormalLayer.layerType
      qualifiedName:
        CSharp: NormalLayer.layerType
        VB: NormalLayer.layerType
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: layerType
        path: ''
        startLine: 13429
      syntax:
        content:
          CSharp: public override LayerType layerType { get; }
          VB: Public Overrides ReadOnly Property layerType As LayerType
        parameters: []
        return:
          type: Global.LayerType
      overload: Global.NormalLayer.layerType*
      overridden: Global.Layer.layerType
    - id: Global.NormalLayer.#ctor(System.Int32,System.Int32)
      commentId: M:Global.NormalLayer.#ctor(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: NormalLayer(int, int)
        VB: New(Integer, Integer)
      nameWithType:
        CSharp: NormalLayer.NormalLayer(int, int)
        VB: NormalLayer.New(Integer, Integer)
      qualifiedName:
        CSharp: NormalLayer.NormalLayer(int, int)
        VB: NormalLayer.New(Integer, Integer)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 13431
      syntax:
        content:
          CSharp: public NormalLayer(int width, int height)
          VB: Public Sub New(width As Integer, height As Integer)
        parameters:
        - id: width
          type: System.Int32
        - id: height
          type: System.Int32
      overload: Global.NormalLayer.#ctor*
    - id: Global.NormalLayer.#ctor(Texture2D)
      commentId: M:Global.NormalLayer.#ctor(Texture2D)
      language: CSharp
      name:
        CSharp: NormalLayer(Texture2D)
        VB: New(Texture2D)
      nameWithType:
        CSharp: NormalLayer.NormalLayer(Texture2D)
        VB: NormalLayer.New(Texture2D)
      qualifiedName:
        CSharp: NormalLayer.NormalLayer(Texture2D)
        VB: NormalLayer.New(Texture2D)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 13432
      syntax:
        content:
          CSharp: public NormalLayer(Texture2D texture)
          VB: Public Sub New(texture As Texture2D)
        parameters:
        - id: texture
          type: Global.Texture2D
      overload: Global.NormalLayer.#ctor*
    - id: Global.NormalLayer.#ctor(System.String,System.Int32,System.Int32)
      commentId: M:Global.NormalLayer.#ctor(System.String,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: NormalLayer(string, int, int)
        VB: New(String, Integer, Integer)
      nameWithType:
        CSharp: NormalLayer.NormalLayer(string, int, int)
        VB: NormalLayer.New(String, Integer, Integer)
      qualifiedName:
        CSharp: NormalLayer.NormalLayer(string, int, int)
        VB: NormalLayer.New(String, Integer, Integer)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 13433
      syntax:
        content:
          CSharp: public NormalLayer(string name, int width, int height)
          VB: Public Sub New(name As String, width As Integer, height As Integer)
        parameters:
        - id: name
          type: System.String
        - id: width
          type: System.Int32
        - id: height
          type: System.Int32
      overload: Global.NormalLayer.#ctor*
    - id: Global.NormalLayer.#ctor(System.String,Texture2D)
      commentId: M:Global.NormalLayer.#ctor(System.String,Texture2D)
      language: CSharp
      name:
        CSharp: NormalLayer(string, Texture2D)
        VB: New(String, Texture2D)
      nameWithType:
        CSharp: NormalLayer.NormalLayer(string, Texture2D)
        VB: NormalLayer.New(String, Texture2D)
      qualifiedName:
        CSharp: NormalLayer.NormalLayer(string, Texture2D)
        VB: NormalLayer.New(String, Texture2D)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 13434
      syntax:
        content:
          CSharp: public NormalLayer(string name, Texture2D texture)
          VB: Public Sub New(name As String, texture As Texture2D)
        parameters:
        - id: name
          type: System.String
        - id: texture
          type: Global.Texture2D
      overload: Global.NormalLayer.#ctor*
    - id: Global.NormalLayer.#ctor(NormalLayer)
      commentId: M:Global.NormalLayer.#ctor(NormalLayer)
      language: CSharp
      name:
        CSharp: NormalLayer(NormalLayer)
        VB: New(NormalLayer)
      nameWithType:
        CSharp: NormalLayer.NormalLayer(NormalLayer)
        VB: NormalLayer.New(NormalLayer)
      qualifiedName:
        CSharp: NormalLayer.NormalLayer(NormalLayer)
        VB: NormalLayer.New(NormalLayer)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 13439
      summary: "\nCreates a deep copy of the NormalLayer.\n"
      example: []
      syntax:
        content:
          CSharp: public NormalLayer(NormalLayer layer)
          VB: Public Sub New(layer As NormalLayer)
        parameters:
        - id: layer
          type: Global.NormalLayer
      overload: Global.NormalLayer.#ctor*
    - id: Global.NormalLayer.DeepCopy
      commentId: M:Global.NormalLayer.DeepCopy
      language: CSharp
      name:
        CSharp: DeepCopy()
        VB: DeepCopy()
      nameWithType:
        CSharp: NormalLayer.DeepCopy()
        VB: NormalLayer.DeepCopy()
      qualifiedName:
        CSharp: NormalLayer.DeepCopy()
        VB: NormalLayer.DeepCopy()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeepCopy
        path: ''
        startLine: 13441
      syntax:
        content:
          CSharp: public override Layer DeepCopy()
          VB: Public Overrides Function DeepCopy() As Layer
        return:
          type: Global.Layer
      overload: Global.NormalLayer.DeepCopy*
      overridden: Global.Layer.DeepCopy
    - id: Global.NormalLayer.SetPixelsNoEvent(IntVector2[],System.Int32,Color,AnimFrameRefMode)
      commentId: M:Global.NormalLayer.SetPixelsNoEvent(IntVector2[],System.Int32,Color,AnimFrameRefMode)
      language: CSharp
      name:
        CSharp: SetPixelsNoEvent(IntVector2[], int, Color, AnimFrameRefMode)
        VB: SetPixelsNoEvent(IntVector2(), Integer, Color, AnimFrameRefMode)
      nameWithType:
        CSharp: NormalLayer.SetPixelsNoEvent(IntVector2[], int, Color, AnimFrameRefMode)
        VB: NormalLayer.SetPixelsNoEvent(IntVector2(), Integer, Color, AnimFrameRefMode)
      qualifiedName:
        CSharp: NormalLayer.SetPixelsNoEvent(IntVector2[], int, Color, AnimFrameRefMode)
        VB: NormalLayer.SetPixelsNoEvent(IntVector2(), Integer, Color, AnimFrameRefMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetPixelsNoEvent
        path: ''
        startLine: 13446
      syntax:
        content:
          CSharp: protected override IntVector2[] SetPixelsNoEvent(IntVector2[] pixels, int frame, Color colour, AnimFrameRefMode frameRefMode)
          VB: Protected Overrides Function SetPixelsNoEvent(pixels As IntVector2(), frame As Integer, colour As Color, frameRefMode As AnimFrameRefMode) As IntVector2()
        parameters:
        - id: pixels
          type: Global.IntVector2[]
        - id: frame
          type: System.Int32
        - id: colour
          type: Global.Color
        - id: frameRefMode
          type: Global.AnimFrameRefMode
        return:
          type: Global.IntVector2[]
      overload: Global.NormalLayer.SetPixelsNoEvent*
      overridden: Global.Layer.SetPixelsNoEvent(IntVector2[],System.Int32,Color,AnimFrameRefMode)
    - id: Global.NormalLayer.GetPixel(IntVector2,System.Int32,System.Boolean)
      commentId: M:Global.NormalLayer.GetPixel(IntVector2,System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: GetPixel(IntVector2, int, bool)
        VB: GetPixel(IntVector2, Integer, Boolean)
      nameWithType:
        CSharp: NormalLayer.GetPixel(IntVector2, int, bool)
        VB: NormalLayer.GetPixel(IntVector2, Integer, Boolean)
      qualifiedName:
        CSharp: NormalLayer.GetPixel(IntVector2, int, bool)
        VB: NormalLayer.GetPixel(IntVector2, Integer, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetPixel
        path: ''
        startLine: 13460
      syntax:
        content:
          CSharp: public override Color GetPixel(IntVector2 pixel, int frame, bool useLayerOpacity = true)
          VB: Public Overrides Function GetPixel(pixel As IntVector2, frame As Integer, useLayerOpacity As Boolean = True) As Color
        parameters:
        - id: pixel
          type: Global.IntVector2
        - id: frame
          type: System.Int32
        - id: useLayerOpacity
          type: System.Boolean
        return:
          type: Global.Color
      overload: Global.NormalLayer.GetPixel*
      overridden: Global.Layer.GetPixel(IntVector2,System.Int32,System.Boolean)
    - id: Global.NormalLayer.SetTexture(System.Int32,Texture2D,AnimFrameRefMode)
      commentId: M:Global.NormalLayer.SetTexture(System.Int32,Texture2D,AnimFrameRefMode)
      language: CSharp
      name:
        CSharp: SetTexture(int, Texture2D, AnimFrameRefMode)
        VB: SetTexture(Integer, Texture2D, AnimFrameRefMode)
      nameWithType:
        CSharp: NormalLayer.SetTexture(int, Texture2D, AnimFrameRefMode)
        VB: NormalLayer.SetTexture(Integer, Texture2D, AnimFrameRefMode)
      qualifiedName:
        CSharp: NormalLayer.SetTexture(int, Texture2D, AnimFrameRefMode)
        VB: NormalLayer.SetTexture(Integer, Texture2D, AnimFrameRefMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetTexture
        path: ''
        startLine: 13473
      summary: "\nSets the texture at the given frame.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetTexture(int frame, Texture2D texture, AnimFrameRefMode frameRefMode)
          VB: Public Sub SetTexture(frame As Integer, texture As Texture2D, frameRefMode As AnimFrameRefMode)
        parameters:
        - id: frame
          type: System.Int32
        - id: texture
          type: Global.Texture2D
        - id: frameRefMode
          type: Global.AnimFrameRefMode
      overload: Global.NormalLayer.SetTexture*
    - id: Global.NormalLayer.OverlayTexture(System.Int32,Texture2D,AnimFrameRefMode)
      commentId: M:Global.NormalLayer.OverlayTexture(System.Int32,Texture2D,AnimFrameRefMode)
      language: CSharp
      name:
        CSharp: OverlayTexture(int, Texture2D, AnimFrameRefMode)
        VB: OverlayTexture(Integer, Texture2D, AnimFrameRefMode)
      nameWithType:
        CSharp: NormalLayer.OverlayTexture(int, Texture2D, AnimFrameRefMode)
        VB: NormalLayer.OverlayTexture(Integer, Texture2D, AnimFrameRefMode)
      qualifiedName:
        CSharp: NormalLayer.OverlayTexture(int, Texture2D, AnimFrameRefMode)
        VB: NormalLayer.OverlayTexture(Integer, Texture2D, AnimFrameRefMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OverlayTexture
        path: ''
        startLine: 13490
      summary: "\nOverlays the texture onto the given frame. Uses Normal blend mode.\n"
      example: []
      syntax:
        content:
          CSharp: public void OverlayTexture(int frame, Texture2D overlayTex, AnimFrameRefMode frameRefMode)
          VB: Public Sub OverlayTexture(frame As Integer, overlayTex As Texture2D, frameRefMode As AnimFrameRefMode)
        parameters:
        - id: frame
          type: System.Int32
        - id: overlayTex
          type: Global.Texture2D
        - id: frameRefMode
          type: Global.AnimFrameRefMode
      overload: Global.NormalLayer.OverlayTexture*
    - id: Global.NormalLayer.OverlayTexture(System.Int32,Texture2D,IntVector2,AnimFrameRefMode)
      commentId: M:Global.NormalLayer.OverlayTexture(System.Int32,Texture2D,IntVector2,AnimFrameRefMode)
      language: CSharp
      name:
        CSharp: OverlayTexture(int, Texture2D, IntVector2, AnimFrameRefMode)
        VB: OverlayTexture(Integer, Texture2D, IntVector2, AnimFrameRefMode)
      nameWithType:
        CSharp: NormalLayer.OverlayTexture(int, Texture2D, IntVector2, AnimFrameRefMode)
        VB: NormalLayer.OverlayTexture(Integer, Texture2D, IntVector2, AnimFrameRefMode)
      qualifiedName:
        CSharp: NormalLayer.OverlayTexture(int, Texture2D, IntVector2, AnimFrameRefMode)
        VB: NormalLayer.OverlayTexture(Integer, Texture2D, IntVector2, AnimFrameRefMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OverlayTexture
        path: ''
        startLine: 13494
      summary: "\nOverlays the texture onto the given frame, placing the bottom-left corner at the coordinates &apos;offset&apos; (which don&apos;t have to be within the image). Uses Normal blend mode.\n"
      example: []
      syntax:
        content:
          CSharp: public void OverlayTexture(int frame, Texture2D overlayTex, IntVector2 offset, AnimFrameRefMode frameRefMode)
          VB: Public Sub OverlayTexture(frame As Integer, overlayTex As Texture2D, offset As IntVector2, frameRefMode As AnimFrameRefMode)
        parameters:
        - id: frame
          type: System.Int32
        - id: overlayTex
          type: Global.Texture2D
        - id: offset
          type: Global.IntVector2
        - id: frameRefMode
          type: Global.AnimFrameRefMode
      overload: Global.NormalLayer.OverlayTexture*
    - id: Global.NormalLayer.OverlayTexture(Texture2D)
      commentId: M:Global.NormalLayer.OverlayTexture(Texture2D)
      language: CSharp
      name:
        CSharp: OverlayTexture(Texture2D)
        VB: OverlayTexture(Texture2D)
      nameWithType:
        CSharp: NormalLayer.OverlayTexture(Texture2D)
        VB: NormalLayer.OverlayTexture(Texture2D)
      qualifiedName:
        CSharp: NormalLayer.OverlayTexture(Texture2D)
        VB: NormalLayer.OverlayTexture(Texture2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OverlayTexture
        path: ''
        startLine: 13507
      summary: "\nOverlays the texture onto every frame. Uses Normal blend mode.\n"
      example: []
      syntax:
        content:
          CSharp: public void OverlayTexture(Texture2D overlayTex)
          VB: Public Sub OverlayTexture(overlayTex As Texture2D)
        parameters:
        - id: overlayTex
          type: Global.Texture2D
      overload: Global.NormalLayer.OverlayTexture*
    - id: Global.NormalLayer.OverlayTexture(Texture2D,IntVector2)
      commentId: M:Global.NormalLayer.OverlayTexture(Texture2D,IntVector2)
      language: CSharp
      name:
        CSharp: OverlayTexture(Texture2D, IntVector2)
        VB: OverlayTexture(Texture2D, IntVector2)
      nameWithType:
        CSharp: NormalLayer.OverlayTexture(Texture2D, IntVector2)
        VB: NormalLayer.OverlayTexture(Texture2D, IntVector2)
      qualifiedName:
        CSharp: NormalLayer.OverlayTexture(Texture2D, IntVector2)
        VB: NormalLayer.OverlayTexture(Texture2D, IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OverlayTexture
        path: ''
        startLine: 13511
      summary: "\nOverlays the texture onto every frame, placing the bottom-left corner at the coordinates &apos;offset&apos; (which don&apos;t have to be within the image). Uses Normal blend mode.\n"
      example: []
      syntax:
        content:
          CSharp: public void OverlayTexture(Texture2D overlayTex, IntVector2 offset)
          VB: Public Sub OverlayTexture(overlayTex As Texture2D, offset As IntVector2)
        parameters:
        - id: overlayTex
          type: Global.Texture2D
        - id: offset
          type: Global.IntVector2
      overload: Global.NormalLayer.OverlayTexture*
    - id: Global.NormalLayer.Offset(System.Int32,IntVector2,AnimFrameRefMode)
      commentId: M:Global.NormalLayer.Offset(System.Int32,IntVector2,AnimFrameRefMode)
      language: CSharp
      name:
        CSharp: Offset(int, IntVector2, AnimFrameRefMode)
        VB: Offset(Integer, IntVector2, AnimFrameRefMode)
      nameWithType:
        CSharp: NormalLayer.Offset(int, IntVector2, AnimFrameRefMode)
        VB: NormalLayer.Offset(Integer, IntVector2, AnimFrameRefMode)
      qualifiedName:
        CSharp: NormalLayer.Offset(int, IntVector2, AnimFrameRefMode)
        VB: NormalLayer.Offset(Integer, IntVector2, AnimFrameRefMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset
        path: ''
        startLine: 13522
      summary: "\nOffsets the texture at the given frame. (Moves the texture so the bottom-left corner is at the coordinates &apos;offset&apos;.\n"
      example: []
      syntax:
        content:
          CSharp: public void Offset(int frame, IntVector2 offset, AnimFrameRefMode frameRefMode)
          VB: Public Sub Offset(frame As Integer, offset As IntVector2, frameRefMode As AnimFrameRefMode)
        parameters:
        - id: frame
          type: System.Int32
        - id: offset
          type: Global.IntVector2
        - id: frameRefMode
          type: Global.AnimFrameRefMode
      overload: Global.NormalLayer.Offset*
    - id: Global.NormalLayer.Offset(IntVector2)
      commentId: M:Global.NormalLayer.Offset(IntVector2)
      language: CSharp
      name:
        CSharp: Offset(IntVector2)
        VB: Offset(IntVector2)
      nameWithType:
        CSharp: NormalLayer.Offset(IntVector2)
        VB: NormalLayer.Offset(IntVector2)
      qualifiedName:
        CSharp: NormalLayer.Offset(IntVector2)
        VB: NormalLayer.Offset(IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset
        path: ''
        startLine: 13534
      summary: "\nOffsets the texture of every frame. (Moves the texture so the bottom-left corner is at the coordinates &apos;offset&apos;.\n"
      example: []
      syntax:
        content:
          CSharp: public void Offset(IntVector2 offset)
          VB: Public Sub Offset(offset As IntVector2)
        parameters:
        - id: offset
          type: Global.IntVector2
      overload: Global.NormalLayer.Offset*
    - id: Global.NormalLayer.Flip(System.Int32,FlipDirection,AnimFrameRefMode)
      commentId: M:Global.NormalLayer.Flip(System.Int32,FlipDirection,AnimFrameRefMode)
      language: CSharp
      name:
        CSharp: Flip(int, FlipDirection, AnimFrameRefMode)
        VB: Flip(Integer, FlipDirection, AnimFrameRefMode)
      nameWithType:
        CSharp: NormalLayer.Flip(int, FlipDirection, AnimFrameRefMode)
        VB: NormalLayer.Flip(Integer, FlipDirection, AnimFrameRefMode)
      qualifiedName:
        CSharp: NormalLayer.Flip(int, FlipDirection, AnimFrameRefMode)
        VB: NormalLayer.Flip(Integer, FlipDirection, AnimFrameRefMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Flip
        path: ''
        startLine: 13545
      summary: "\nFlips the given frame of the layer.\n"
      example: []
      syntax:
        content:
          CSharp: public void Flip(int frame, FlipDirection direction, AnimFrameRefMode frameRefMode)
          VB: Public Sub Flip(frame As Integer, direction As FlipDirection, frameRefMode As AnimFrameRefMode)
        parameters:
        - id: frame
          type: System.Int32
        - id: direction
          type: Global.FlipDirection
        - id: frameRefMode
          type: Global.AnimFrameRefMode
      overload: Global.NormalLayer.Flip*
    - id: Global.NormalLayer.FlipNoEvent(FlipDirection)
      commentId: M:Global.NormalLayer.FlipNoEvent(FlipDirection)
      language: CSharp
      name:
        CSharp: FlipNoEvent(FlipDirection)
        VB: FlipNoEvent(FlipDirection)
      nameWithType:
        CSharp: NormalLayer.FlipNoEvent(FlipDirection)
        VB: NormalLayer.FlipNoEvent(FlipDirection)
      qualifiedName:
        CSharp: NormalLayer.FlipNoEvent(FlipDirection)
        VB: NormalLayer.FlipNoEvent(FlipDirection)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FlipNoEvent
        path: ''
        startLine: 13556
      syntax:
        content:
          CSharp: protected override void FlipNoEvent(FlipDirection direction)
          VB: Protected Overrides Sub FlipNoEvent(direction As FlipDirection)
        parameters:
        - id: direction
          type: Global.FlipDirection
      overload: Global.NormalLayer.FlipNoEvent*
      overridden: Global.Layer.FlipNoEvent(FlipDirection)
    - id: Global.NormalLayer.Rotate(System.Int32,RotationAngle,AnimFrameRefMode)
      commentId: M:Global.NormalLayer.Rotate(System.Int32,RotationAngle,AnimFrameRefMode)
      language: CSharp
      name:
        CSharp: Rotate(int, RotationAngle, AnimFrameRefMode)
        VB: Rotate(Integer, RotationAngle, AnimFrameRefMode)
      nameWithType:
        CSharp: NormalLayer.Rotate(int, RotationAngle, AnimFrameRefMode)
        VB: NormalLayer.Rotate(Integer, RotationAngle, AnimFrameRefMode)
      qualifiedName:
        CSharp: NormalLayer.Rotate(int, RotationAngle, AnimFrameRefMode)
        VB: NormalLayer.Rotate(Integer, RotationAngle, AnimFrameRefMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Rotate
        path: ''
        startLine: 13567
      summary: "\nRotates the given frame of the layer. Rotation is clockwise.\n"
      example: []
      syntax:
        content:
          CSharp: public void Rotate(int frame, RotationAngle angle, AnimFrameRefMode frameRefMode)
          VB: Public Sub Rotate(frame As Integer, angle As RotationAngle, frameRefMode As AnimFrameRefMode)
        parameters:
        - id: frame
          type: System.Int32
        - id: angle
          type: Global.RotationAngle
        - id: frameRefMode
          type: Global.AnimFrameRefMode
      overload: Global.NormalLayer.Rotate*
    - id: Global.NormalLayer.RotateNoEvent(RotationAngle)
      commentId: M:Global.NormalLayer.RotateNoEvent(RotationAngle)
      language: CSharp
      name:
        CSharp: RotateNoEvent(RotationAngle)
        VB: RotateNoEvent(RotationAngle)
      nameWithType:
        CSharp: NormalLayer.RotateNoEvent(RotationAngle)
        VB: NormalLayer.RotateNoEvent(RotationAngle)
      qualifiedName:
        CSharp: NormalLayer.RotateNoEvent(RotationAngle)
        VB: NormalLayer.RotateNoEvent(RotationAngle)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RotateNoEvent
        path: ''
        startLine: 13583
      syntax:
        content:
          CSharp: protected override void RotateNoEvent(RotationAngle angle)
          VB: Protected Overrides Sub RotateNoEvent(angle As RotationAngle)
        parameters:
        - id: angle
          type: Global.RotationAngle
      overload: Global.NormalLayer.RotateNoEvent*
      overridden: Global.Layer.RotateNoEvent(RotationAngle)
    - id: Global.NormalLayer.ExtendNoEvent(System.Int32,System.Int32,System.Int32,System.Int32)
      commentId: M:Global.NormalLayer.ExtendNoEvent(System.Int32,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: ExtendNoEvent(int, int, int, int)
        VB: ExtendNoEvent(Integer, Integer, Integer, Integer)
      nameWithType:
        CSharp: NormalLayer.ExtendNoEvent(int, int, int, int)
        VB: NormalLayer.ExtendNoEvent(Integer, Integer, Integer, Integer)
      qualifiedName:
        CSharp: NormalLayer.ExtendNoEvent(int, int, int, int)
        VB: NormalLayer.ExtendNoEvent(Integer, Integer, Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ExtendNoEvent
        path: ''
        startLine: 13599
      syntax:
        content:
          CSharp: protected override void ExtendNoEvent(int left, int right, int up, int down)
          VB: Protected Overrides Sub ExtendNoEvent(left As Integer, right As Integer, up As Integer, down As Integer)
        parameters:
        - id: left
          type: System.Int32
        - id: right
          type: System.Int32
        - id: up
          type: System.Int32
        - id: down
          type: System.Int32
      overload: Global.NormalLayer.ExtendNoEvent*
      overridden: Global.Layer.ExtendNoEvent(System.Int32,System.Int32,System.Int32,System.Int32)
    - id: Global.NormalLayer.ScaleNoEvent(System.Single,System.Single)
      commentId: M:Global.NormalLayer.ScaleNoEvent(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: ScaleNoEvent(float, float)
        VB: ScaleNoEvent(Single, Single)
      nameWithType:
        CSharp: NormalLayer.ScaleNoEvent(float, float)
        VB: NormalLayer.ScaleNoEvent(Single, Single)
      qualifiedName:
        CSharp: NormalLayer.ScaleNoEvent(float, float)
        VB: NormalLayer.ScaleNoEvent(Single, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ScaleNoEvent
        path: ''
        startLine: 13610
      syntax:
        content:
          CSharp: protected override void ScaleNoEvent(float xScaleFactor, float yScaleFactor)
          VB: Protected Overrides Sub ScaleNoEvent(xScaleFactor As Single, yScaleFactor As Single)
        parameters:
        - id: xScaleFactor
          type: System.Single
        - id: yScaleFactor
          type: System.Single
      overload: Global.NormalLayer.ScaleNoEvent*
      overridden: Global.Layer.ScaleNoEvent(System.Single,System.Single)
    - id: Global.NormalLayer.ScaleNoEvent(System.Int32,System.Int32)
      commentId: M:Global.NormalLayer.ScaleNoEvent(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: ScaleNoEvent(int, int)
        VB: ScaleNoEvent(Integer, Integer)
      nameWithType:
        CSharp: NormalLayer.ScaleNoEvent(int, int)
        VB: NormalLayer.ScaleNoEvent(Integer, Integer)
      qualifiedName:
        CSharp: NormalLayer.ScaleNoEvent(int, int)
        VB: NormalLayer.ScaleNoEvent(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ScaleNoEvent
        path: ''
        startLine: 13620
      syntax:
        content:
          CSharp: protected override void ScaleNoEvent(int newWidth, int newHeight)
          VB: Protected Overrides Sub ScaleNoEvent(newWidth As Integer, newHeight As Integer)
        parameters:
        - id: newWidth
          type: System.Int32
        - id: newHeight
          type: System.Int32
      overload: Global.NormalLayer.ScaleNoEvent*
      overridden: Global.Layer.ScaleNoEvent(System.Int32,System.Int32)
    - id: Global.NormalLayer.ToJSON
      commentId: M:Global.NormalLayer.ToJSON
      language: CSharp
      name:
        CSharp: ToJSON()
        VB: ToJSON()
      nameWithType:
        CSharp: NormalLayer.ToJSON()
        VB: NormalLayer.ToJSON()
      qualifiedName:
        CSharp: NormalLayer.ToJSON()
        VB: NormalLayer.ToJSON()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToJSON
        path: ''
        startLine: 13631
      syntax:
        content:
          CSharp: public override JSON ToJSON()
          VB: Public Overrides Function ToJSON() As JSON
        return:
          type: Global.JSON
      overload: Global.NormalLayer.ToJSON*
      overridden: Global.Layer.ToJSON
    - id: Global.NormalLayer.LoadJSON(JSON)
      commentId: M:Global.NormalLayer.LoadJSON(JSON)
      language: CSharp
      name:
        CSharp: LoadJSON(JSON)
        VB: LoadJSON(JSON)
      nameWithType:
        CSharp: NormalLayer.LoadJSON(JSON)
        VB: NormalLayer.LoadJSON(JSON)
      qualifiedName:
        CSharp: NormalLayer.LoadJSON(JSON)
        VB: NormalLayer.LoadJSON(JSON)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LoadJSON
        path: ''
        startLine: 13649
      syntax:
        content:
          CSharp: protected override void LoadJSON(JSON json)
          VB: Protected Overrides Sub LoadJSON(json As JSON)
        parameters:
        - id: json
          type: Global.JSON
      overload: Global.NormalLayer.LoadJSON*
      overridden: Global.Layer.LoadJSON(JSON)
    - id: Global.NormalLayer.DeleteKeyFrameNoEvent(System.Int32)
      commentId: M:Global.NormalLayer.DeleteKeyFrameNoEvent(System.Int32)
      language: CSharp
      name:
        CSharp: DeleteKeyFrameNoEvent(int)
        VB: DeleteKeyFrameNoEvent(Integer)
      nameWithType:
        CSharp: NormalLayer.DeleteKeyFrameNoEvent(int)
        VB: NormalLayer.DeleteKeyFrameNoEvent(Integer)
      qualifiedName:
        CSharp: NormalLayer.DeleteKeyFrameNoEvent(int)
        VB: NormalLayer.DeleteKeyFrameNoEvent(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeleteKeyFrameNoEvent
        path: ''
        startLine: 13690
      syntax:
        content:
          CSharp: protected override AnimationKeyFrame DeleteKeyFrameNoEvent(int keyframe)
          VB: Protected Overrides Function DeleteKeyFrameNoEvent(keyframe As Integer) As AnimationKeyFrame
        parameters:
        - id: keyframe
          type: System.Int32
        return:
          type: Global.AnimationKeyFrame
      overload: Global.NormalLayer.DeleteKeyFrameNoEvent*
      overridden: Global.Layer.DeleteKeyFrameNoEvent(System.Int32)
    - id: Global.NormalLayer.ClearFrames
      commentId: M:Global.NormalLayer.ClearFrames
      language: CSharp
      name:
        CSharp: ClearFrames()
        VB: ClearFrames()
      nameWithType:
        CSharp: NormalLayer.ClearFrames()
        VB: NormalLayer.ClearFrames()
      qualifiedName:
        CSharp: NormalLayer.ClearFrames()
        VB: NormalLayer.ClearFrames()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ClearFrames
        path: ''
        startLine: 13707
      syntax:
        content:
          CSharp: public override void ClearFrames()
          VB: Public Overrides Sub ClearFrames()
      overload: Global.NormalLayer.ClearFrames*
      overridden: Global.Layer.ClearFrames
  - id: Global.TileLayer
    commentId: T:Global.TileLayer
    language: CSharp
    name:
      CSharp: TileLayer
      VB: TileLayer
    nameWithType:
      CSharp: TileLayer
      VB: TileLayer
    qualifiedName:
      CSharp: TileLayer
      VB: TileLayer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: TileLayer
      path: ''
      startLine: 13722
    summary: "\nA class to represent a tile layer - one for placing and editing tileset tiles.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class TileLayer : Layer, IJSONable'
        VB: Public Class TileLayer Inherits Layer Implements IJSONable
    inheritance:
    - System.Object
    - Global.Layer
    implements:
    - Global.IJSONable
    inheritedMembers:
    - Global.Layer.name
    - Global.Layer.width
    - Global.Layer.height
    - Global.Layer.rect
    - Global.Layer._visible
    - Global.Layer.visible
    - Global.Layer.locked
    - Global.Layer.opacity
    - Global.Layer._blendMode
    - Global.Layer.blendMode
    - Global.Layer.keyFrames
    - Global.Layer.keyFrameIndices
    - Global.Layer.keyFrameTextures
    - Global.Layer.onPixelsChanged
    - Global.Layer.SetPixel(System.Int32,System.Int32,System.Int32,Color,AnimFrameRefMode)
    - Global.Layer.SetPixel(IntVector2,System.Int32,Color,AnimFrameRefMode)
    - Global.Layer.SetPixels(IntVector2[],System.Int32,Color,AnimFrameRefMode)
    - Global.Layer.GetPixel(System.Int32,System.Int32,System.Int32,System.Boolean)
    - Global.Layer.IsBlank
    - Global.Layer.Flip(FlipDirection)
    - Global.Layer.Rotate(RotationAngle)
    - Global.Layer.Extend(System.Int32,System.Int32,System.Int32,System.Int32)
    - Global.Layer.Scale(System.Single)
    - Global.Layer.Scale(System.Single,System.Single)
    - Global.Layer.Scale(System.Int32,System.Int32)
    - Global.Layer.FromJSON(JSON)
    - Global.Layer.Item(System.Int32)
    - Global.Layer.GetKeyFrame(System.Int32)
    - Global.Layer.HasKeyFrameAt(System.Int32)
    - Global.Layer.AddKeyFrame(System.Int32)
    - Global.Layer.AddKeyFrame(System.Int32,Texture2D)
    - Global.Layer.AddKeyFrame(AnimationKeyFrame)
    - Global.Layer.DeleteMostRecentKeyFrame(System.Int32)
    - Global.Layer.DeleteKeyFrame(System.Int32)
    - Global.Layer.DeleteKeyFrame(AnimationKeyFrame)
    - Global.Layer.SubscribeToOnPixelsChanged(UnityAction{IntVector2[],System.Int32[]})
    - Global.Layer.SubscribeToOnVisibilityChanged(UnityAction)
    - Global.Layer.SubscribeToOnBlendModeChanged(UnityAction)
    - Global.Layer.SubscribeToOnKeyFrameAdded(UnityAction{System.Int32})
    - Global.Layer.SubscribeToOnKeyFrameRemoved(UnityAction{System.Int32})
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.TileLayer.layerType
      commentId: P:Global.TileLayer.layerType
      language: CSharp
      name:
        CSharp: layerType
        VB: layerType
      nameWithType:
        CSharp: TileLayer.layerType
        VB: TileLayer.layerType
      qualifiedName:
        CSharp: TileLayer.layerType
        VB: TileLayer.layerType
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: layerType
        path: ''
        startLine: 13724
      syntax:
        content:
          CSharp: public override LayerType layerType { get; }
          VB: Public Overrides ReadOnly Property layerType As LayerType
        parameters: []
        return:
          type: Global.LayerType
      overload: Global.TileLayer.layerType*
      overridden: Global.Layer.layerType
    - id: Global.TileLayer.tiles
      commentId: P:Global.TileLayer.tiles
      language: CSharp
      name:
        CSharp: tiles
        VB: tiles
      nameWithType:
        CSharp: TileLayer.tiles
        VB: TileLayer.tiles
      qualifiedName:
        CSharp: TileLayer.tiles
        VB: TileLayer.tiles
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: tiles
        path: ''
        startLine: 13727
      summary: The tiles on this layer.
      example: []
      syntax:
        content:
          CSharp: public List<Tile> tiles { get; }
          VB: Public Property tiles As List(Of Tile)
        parameters: []
        return:
          type: System.Collections.Generic.List{Tile}
      overload: Global.TileLayer.tiles*
    - id: Global.TileLayer.#ctor(System.String,System.Int32,System.Int32)
      commentId: M:Global.TileLayer.#ctor(System.String,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: TileLayer(string, int, int)
        VB: New(String, Integer, Integer)
      nameWithType:
        CSharp: TileLayer.TileLayer(string, int, int)
        VB: TileLayer.New(String, Integer, Integer)
      qualifiedName:
        CSharp: TileLayer.TileLayer(string, int, int)
        VB: TileLayer.New(String, Integer, Integer)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 13739
      syntax:
        content:
          CSharp: public TileLayer(string name, int width, int height)
          VB: Public Sub New(name As String, width As Integer, height As Integer)
        parameters:
        - id: name
          type: System.String
        - id: width
          type: System.Int32
        - id: height
          type: System.Int32
      overload: Global.TileLayer.#ctor*
    - id: Global.TileLayer.#ctor(TileLayer)
      commentId: M:Global.TileLayer.#ctor(TileLayer)
      language: CSharp
      name:
        CSharp: TileLayer(TileLayer)
        VB: New(TileLayer)
      nameWithType:
        CSharp: TileLayer.TileLayer(TileLayer)
        VB: TileLayer.New(TileLayer)
      qualifiedName:
        CSharp: TileLayer.TileLayer(TileLayer)
        VB: TileLayer.New(TileLayer)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 13744
      summary: "\nCreates a deep copy of the TileLayer.\n"
      example: []
      syntax:
        content:
          CSharp: public TileLayer(TileLayer layer)
          VB: Public Sub New(layer As TileLayer)
        parameters:
        - id: layer
          type: Global.TileLayer
      overload: Global.TileLayer.#ctor*
    - id: Global.TileLayer.DeepCopy
      commentId: M:Global.TileLayer.DeepCopy
      language: CSharp
      name:
        CSharp: DeepCopy()
        VB: DeepCopy()
      nameWithType:
        CSharp: TileLayer.DeepCopy()
        VB: TileLayer.DeepCopy()
      qualifiedName:
        CSharp: TileLayer.DeepCopy()
        VB: TileLayer.DeepCopy()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeepCopy
        path: ''
        startLine: 13750
      syntax:
        content:
          CSharp: public override Layer DeepCopy()
          VB: Public Overrides Function DeepCopy() As Layer
        return:
          type: Global.Layer
      overload: Global.TileLayer.DeepCopy*
      overridden: Global.Layer.DeepCopy
    - id: Global.TileLayer.AddTile(Tile)
      commentId: M:Global.TileLayer.AddTile(Tile)
      language: CSharp
      name:
        CSharp: AddTile(Tile)
        VB: AddTile(Tile)
      nameWithType:
        CSharp: TileLayer.AddTile(Tile)
        VB: TileLayer.AddTile(Tile)
      qualifiedName:
        CSharp: TileLayer.AddTile(Tile)
        VB: TileLayer.AddTile(Tile)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddTile
        path: ''
        startLine: 13758
      summary: "\nAdds the tile to the layer.\n"
      example: []
      syntax:
        content:
          CSharp: public void AddTile(Tile tile)
          VB: Public Sub AddTile(tile As Tile)
        parameters:
        - id: tile
          type: Global.Tile
      overload: Global.TileLayer.AddTile*
    - id: Global.TileLayer.RemoveTile(Tile)
      commentId: M:Global.TileLayer.RemoveTile(Tile)
      language: CSharp
      name:
        CSharp: RemoveTile(Tile)
        VB: RemoveTile(Tile)
      nameWithType:
        CSharp: TileLayer.RemoveTile(Tile)
        VB: TileLayer.RemoveTile(Tile)
      qualifiedName:
        CSharp: TileLayer.RemoveTile(Tile)
        VB: TileLayer.RemoveTile(Tile)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RemoveTile
        path: ''
        startLine: 13806
      summary: "\nRemoves the tile from the layer. Throws an error if the tile is not in the layer.\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveTile(Tile tile)
          VB: Public Sub RemoveTile(tile As Tile)
        parameters:
        - id: tile
          type: Global.Tile
      overload: Global.TileLayer.RemoveTile*
    - id: Global.TileLayer.ClearTiles
      commentId: M:Global.TileLayer.ClearTiles
      language: CSharp
      name:
        CSharp: ClearTiles()
        VB: ClearTiles()
      nameWithType:
        CSharp: TileLayer.ClearTiles()
        VB: TileLayer.ClearTiles()
      qualifiedName:
        CSharp: TileLayer.ClearTiles()
        VB: TileLayer.ClearTiles()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ClearTiles
        path: ''
        startLine: 13829
      summary: "\nRemoves all tiles.\n"
      example: []
      syntax:
        content:
          CSharp: public void ClearTiles()
          VB: Public Sub ClearTiles()
      overload: Global.TileLayer.ClearTiles*
    - id: Global.TileLayer.ContainsTile(Tile)
      commentId: M:Global.TileLayer.ContainsTile(Tile)
      language: CSharp
      name:
        CSharp: ContainsTile(Tile)
        VB: ContainsTile(Tile)
      nameWithType:
        CSharp: TileLayer.ContainsTile(Tile)
        VB: TileLayer.ContainsTile(Tile)
      qualifiedName:
        CSharp: TileLayer.ContainsTile(Tile)
        VB: TileLayer.ContainsTile(Tile)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ContainsTile
        path: ''
        startLine: 13838
      summary: "\nReturns true if the tile appears on this layer.\n"
      example: []
      syntax:
        content:
          CSharp: public bool ContainsTile(Tile tile)
          VB: Public Function ContainsTile(tile As Tile) As Boolean
        parameters:
        - id: tile
          type: Global.Tile
        return:
          type: System.Boolean
      overload: Global.TileLayer.ContainsTile*
    - id: Global.TileLayer.SetPixelsNoEvent(IntVector2[],System.Int32,Color,AnimFrameRefMode)
      commentId: M:Global.TileLayer.SetPixelsNoEvent(IntVector2[],System.Int32,Color,AnimFrameRefMode)
      language: CSharp
      name:
        CSharp: SetPixelsNoEvent(IntVector2[], int, Color, AnimFrameRefMode)
        VB: SetPixelsNoEvent(IntVector2(), Integer, Color, AnimFrameRefMode)
      nameWithType:
        CSharp: TileLayer.SetPixelsNoEvent(IntVector2[], int, Color, AnimFrameRefMode)
        VB: TileLayer.SetPixelsNoEvent(IntVector2(), Integer, Color, AnimFrameRefMode)
      qualifiedName:
        CSharp: TileLayer.SetPixelsNoEvent(IntVector2[], int, Color, AnimFrameRefMode)
        VB: TileLayer.SetPixelsNoEvent(IntVector2(), Integer, Color, AnimFrameRefMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetPixelsNoEvent
        path: ''
        startLine: 13843
      syntax:
        content:
          CSharp: protected override IntVector2[] SetPixelsNoEvent(IntVector2[] pixels, int frame, Color colour, AnimFrameRefMode frameRefMode)
          VB: Protected Overrides Function SetPixelsNoEvent(pixels As IntVector2(), frame As Integer, colour As Color, frameRefMode As AnimFrameRefMode) As IntVector2()
        parameters:
        - id: pixels
          type: Global.IntVector2[]
        - id: frame
          type: System.Int32
        - id: colour
          type: Global.Color
        - id: frameRefMode
          type: Global.AnimFrameRefMode
        return:
          type: Global.IntVector2[]
      overload: Global.TileLayer.SetPixelsNoEvent*
      overridden: Global.Layer.SetPixelsNoEvent(IntVector2[],System.Int32,Color,AnimFrameRefMode)
    - id: Global.TileLayer.GetPixel(IntVector2,System.Int32,System.Boolean)
      commentId: M:Global.TileLayer.GetPixel(IntVector2,System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: GetPixel(IntVector2, int, bool)
        VB: GetPixel(IntVector2, Integer, Boolean)
      nameWithType:
        CSharp: TileLayer.GetPixel(IntVector2, int, bool)
        VB: TileLayer.GetPixel(IntVector2, Integer, Boolean)
      qualifiedName:
        CSharp: TileLayer.GetPixel(IntVector2, int, bool)
        VB: TileLayer.GetPixel(IntVector2, Integer, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetPixel
        path: ''
        startLine: 13875
      syntax:
        content:
          CSharp: public override Color GetPixel(IntVector2 pixel, int frame, bool useLayerOpacity = true)
          VB: Public Overrides Function GetPixel(pixel As IntVector2, frame As Integer, useLayerOpacity As Boolean = True) As Color
        parameters:
        - id: pixel
          type: Global.IntVector2
        - id: frame
          type: System.Int32
        - id: useLayerOpacity
          type: System.Boolean
        return:
          type: Global.Color
      overload: Global.TileLayer.GetPixel*
      overridden: Global.Layer.GetPixel(IntVector2,System.Int32,System.Boolean)
    - id: Global.TileLayer.PixelToTile(System.Int32,System.Int32)
      commentId: M:Global.TileLayer.PixelToTile(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: PixelToTile(int, int)
        VB: PixelToTile(Integer, Integer)
      nameWithType:
        CSharp: TileLayer.PixelToTile(int, int)
        VB: TileLayer.PixelToTile(Integer, Integer)
      qualifiedName:
        CSharp: TileLayer.PixelToTile(int, int)
        VB: TileLayer.PixelToTile(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PixelToTile
        path: ''
        startLine: 13888
      summary: "\nGets the tile that the pixel (x, y) lands in, or null if there isn&apos;t one.\n"
      example: []
      syntax:
        content:
          CSharp: public Tile PixelToTile(int x, int y)
          VB: Public Function PixelToTile(x As Integer, y As Integer) As Tile
        parameters:
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
        return:
          type: Global.Tile
      overload: Global.TileLayer.PixelToTile*
    - id: Global.TileLayer.PixelToTile(IntVector2)
      commentId: M:Global.TileLayer.PixelToTile(IntVector2)
      language: CSharp
      name:
        CSharp: PixelToTile(IntVector2)
        VB: PixelToTile(IntVector2)
      nameWithType:
        CSharp: TileLayer.PixelToTile(IntVector2)
        VB: TileLayer.PixelToTile(IntVector2)
      qualifiedName:
        CSharp: TileLayer.PixelToTile(IntVector2)
        VB: TileLayer.PixelToTile(IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PixelToTile
        path: ''
        startLine: 13892
      summary: "\nGets the tile that the pixel lands in, or null if there isn&apos;t one.\n"
      example: []
      syntax:
        content:
          CSharp: public Tile PixelToTile(IntVector2 pixel)
          VB: Public Function PixelToTile(pixel As IntVector2) As Tile
        parameters:
        - id: pixel
          type: Global.IntVector2
        return:
          type: Global.Tile
      overload: Global.TileLayer.PixelToTile*
    - id: Global.TileLayer.GetLinkedPixels(IntVector2)
      commentId: M:Global.TileLayer.GetLinkedPixels(IntVector2)
      language: CSharp
      name:
        CSharp: GetLinkedPixels(IntVector2)
        VB: GetLinkedPixels(IntVector2)
      nameWithType:
        CSharp: TileLayer.GetLinkedPixels(IntVector2)
        VB: TileLayer.GetLinkedPixels(IntVector2)
      qualifiedName:
        CSharp: TileLayer.GetLinkedPixels(IntVector2)
        VB: TileLayer.GetLinkedPixels(IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetLinkedPixels
        path: ''
        startLine: 13916
      summary: "\nGet the pixels that are linked to the given pixel due to multiple tiles having the same file - i.e. they point to the same pixel within the tiles&apos; file.\n"
      example: []
      syntax:
        content:
          CSharp: public IntVector2[] GetLinkedPixels(IntVector2 pixel)
          VB: Public Function GetLinkedPixels(pixel As IntVector2) As IntVector2()
        parameters:
        - id: pixel
          type: Global.IntVector2
        return:
          type: Global.IntVector2[]
      overload: Global.TileLayer.GetLinkedPixels*
    - id: Global.TileLayer.GetLinkedPixels(IntVector2[])
      commentId: M:Global.TileLayer.GetLinkedPixels(IntVector2[])
      language: CSharp
      name:
        CSharp: GetLinkedPixels(IntVector2[])
        VB: GetLinkedPixels(IntVector2())
      nameWithType:
        CSharp: TileLayer.GetLinkedPixels(IntVector2[])
        VB: TileLayer.GetLinkedPixels(IntVector2())
      qualifiedName:
        CSharp: TileLayer.GetLinkedPixels(IntVector2[])
        VB: TileLayer.GetLinkedPixels(IntVector2())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetLinkedPixels
        path: ''
        startLine: 13920
      summary: "\nGet the pixels that are linked to the given pixels due to multiple tiles having the same file - i.e. they point to the same pixels within the tiles&apos; file.\n"
      example: []
      syntax:
        content:
          CSharp: public IntVector2[] GetLinkedPixels(IntVector2[] pixels)
          VB: Public Function GetLinkedPixels(pixels As IntVector2()) As IntVector2()
        parameters:
        - id: pixels
          type: Global.IntVector2[]
        return:
          type: Global.IntVector2[]
      overload: Global.TileLayer.GetLinkedPixels*
    - id: Global.TileLayer.FlipNoEvent(FlipDirection)
      commentId: M:Global.TileLayer.FlipNoEvent(FlipDirection)
      language: CSharp
      name:
        CSharp: FlipNoEvent(FlipDirection)
        VB: FlipNoEvent(FlipDirection)
      nameWithType:
        CSharp: TileLayer.FlipNoEvent(FlipDirection)
        VB: TileLayer.FlipNoEvent(FlipDirection)
      qualifiedName:
        CSharp: TileLayer.FlipNoEvent(FlipDirection)
        VB: TileLayer.FlipNoEvent(FlipDirection)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FlipNoEvent
        path: ''
        startLine: 13953
      syntax:
        content:
          CSharp: protected override void FlipNoEvent(FlipDirection direction)
          VB: Protected Overrides Sub FlipNoEvent(direction As FlipDirection)
        parameters:
        - id: direction
          type: Global.FlipDirection
      overload: Global.TileLayer.FlipNoEvent*
      overridden: Global.Layer.FlipNoEvent(FlipDirection)
    - id: Global.TileLayer.RotateNoEvent(RotationAngle)
      commentId: M:Global.TileLayer.RotateNoEvent(RotationAngle)
      language: CSharp
      name:
        CSharp: RotateNoEvent(RotationAngle)
        VB: RotateNoEvent(RotationAngle)
      nameWithType:
        CSharp: TileLayer.RotateNoEvent(RotationAngle)
        VB: TileLayer.RotateNoEvent(RotationAngle)
      qualifiedName:
        CSharp: TileLayer.RotateNoEvent(RotationAngle)
        VB: TileLayer.RotateNoEvent(RotationAngle)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RotateNoEvent
        path: ''
        startLine: 13979
      syntax:
        content:
          CSharp: protected override void RotateNoEvent(RotationAngle angle)
          VB: Protected Overrides Sub RotateNoEvent(angle As RotationAngle)
        parameters:
        - id: angle
          type: Global.RotationAngle
      overload: Global.TileLayer.RotateNoEvent*
      overridden: Global.Layer.RotateNoEvent(RotationAngle)
    - id: Global.TileLayer.ExtendNoEvent(System.Int32,System.Int32,System.Int32,System.Int32)
      commentId: M:Global.TileLayer.ExtendNoEvent(System.Int32,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: ExtendNoEvent(int, int, int, int)
        VB: ExtendNoEvent(Integer, Integer, Integer, Integer)
      nameWithType:
        CSharp: TileLayer.ExtendNoEvent(int, int, int, int)
        VB: TileLayer.ExtendNoEvent(Integer, Integer, Integer, Integer)
      qualifiedName:
        CSharp: TileLayer.ExtendNoEvent(int, int, int, int)
        VB: TileLayer.ExtendNoEvent(Integer, Integer, Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ExtendNoEvent
        path: ''
        startLine: 14022
      syntax:
        content:
          CSharp: protected override void ExtendNoEvent(int left, int right, int up, int down)
          VB: Protected Overrides Sub ExtendNoEvent(left As Integer, right As Integer, up As Integer, down As Integer)
        parameters:
        - id: left
          type: System.Int32
        - id: right
          type: System.Int32
        - id: up
          type: System.Int32
        - id: down
          type: System.Int32
      overload: Global.TileLayer.ExtendNoEvent*
      overridden: Global.Layer.ExtendNoEvent(System.Int32,System.Int32,System.Int32,System.Int32)
    - id: Global.TileLayer.ScaleNoEvent(System.Single,System.Single)
      commentId: M:Global.TileLayer.ScaleNoEvent(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: ScaleNoEvent(float, float)
        VB: ScaleNoEvent(Single, Single)
      nameWithType:
        CSharp: TileLayer.ScaleNoEvent(float, float)
        VB: TileLayer.ScaleNoEvent(Single, Single)
      qualifiedName:
        CSharp: TileLayer.ScaleNoEvent(float, float)
        VB: TileLayer.ScaleNoEvent(Single, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ScaleNoEvent
        path: ''
        startLine: 14042
      syntax:
        content:
          CSharp: protected override void ScaleNoEvent(float xScaleFactor, float yScaleFactor)
          VB: Protected Overrides Sub ScaleNoEvent(xScaleFactor As Single, yScaleFactor As Single)
        parameters:
        - id: xScaleFactor
          type: System.Single
        - id: yScaleFactor
          type: System.Single
      overload: Global.TileLayer.ScaleNoEvent*
      overridden: Global.Layer.ScaleNoEvent(System.Single,System.Single)
    - id: Global.TileLayer.ScaleNoEvent(System.Int32,System.Int32)
      commentId: M:Global.TileLayer.ScaleNoEvent(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: ScaleNoEvent(int, int)
        VB: ScaleNoEvent(Integer, Integer)
      nameWithType:
        CSharp: TileLayer.ScaleNoEvent(int, int)
        VB: TileLayer.ScaleNoEvent(Integer, Integer)
      qualifiedName:
        CSharp: TileLayer.ScaleNoEvent(int, int)
        VB: TileLayer.ScaleNoEvent(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ScaleNoEvent
        path: ''
        startLine: 14068
      syntax:
        content:
          CSharp: protected override void ScaleNoEvent(int newWidth, int newHeight)
          VB: Protected Overrides Sub ScaleNoEvent(newWidth As Integer, newHeight As Integer)
        parameters:
        - id: newWidth
          type: System.Int32
        - id: newHeight
          type: System.Int32
      overload: Global.TileLayer.ScaleNoEvent*
      overridden: Global.Layer.ScaleNoEvent(System.Int32,System.Int32)
    - id: Global.TileLayer.ToJSON
      commentId: M:Global.TileLayer.ToJSON
      language: CSharp
      name:
        CSharp: ToJSON()
        VB: ToJSON()
      nameWithType:
        CSharp: TileLayer.ToJSON()
        VB: TileLayer.ToJSON()
      qualifiedName:
        CSharp: TileLayer.ToJSON()
        VB: TileLayer.ToJSON()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToJSON
        path: ''
        startLine: 14095
      syntax:
        content:
          CSharp: public override JSON ToJSON()
          VB: Public Overrides Function ToJSON() As JSON
        return:
          type: Global.JSON
      overload: Global.TileLayer.ToJSON*
      overridden: Global.Layer.ToJSON
    - id: Global.TileLayer.LoadJSON(JSON)
      commentId: M:Global.TileLayer.LoadJSON(JSON)
      language: CSharp
      name:
        CSharp: LoadJSON(JSON)
        VB: LoadJSON(JSON)
      nameWithType:
        CSharp: TileLayer.LoadJSON(JSON)
        VB: TileLayer.LoadJSON(JSON)
      qualifiedName:
        CSharp: TileLayer.LoadJSON(JSON)
        VB: TileLayer.LoadJSON(JSON)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LoadJSON
        path: ''
        startLine: 14096
      syntax:
        content:
          CSharp: protected override void LoadJSON(JSON json)
          VB: Protected Overrides Sub LoadJSON(json As JSON)
        parameters:
        - id: json
          type: Global.JSON
      overload: Global.TileLayer.LoadJSON*
      overridden: Global.Layer.LoadJSON(JSON)
    - id: Global.TileLayer.DeleteKeyFrameNoEvent(System.Int32)
      commentId: M:Global.TileLayer.DeleteKeyFrameNoEvent(System.Int32)
      language: CSharp
      name:
        CSharp: DeleteKeyFrameNoEvent(int)
        VB: DeleteKeyFrameNoEvent(Integer)
      nameWithType:
        CSharp: TileLayer.DeleteKeyFrameNoEvent(int)
        VB: TileLayer.DeleteKeyFrameNoEvent(Integer)
      qualifiedName:
        CSharp: TileLayer.DeleteKeyFrameNoEvent(int)
        VB: TileLayer.DeleteKeyFrameNoEvent(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DeleteKeyFrameNoEvent
        path: ''
        startLine: 14098
      syntax:
        content:
          CSharp: protected override AnimationKeyFrame DeleteKeyFrameNoEvent(int keyframe)
          VB: Protected Overrides Function DeleteKeyFrameNoEvent(keyframe As Integer) As AnimationKeyFrame
        parameters:
        - id: keyframe
          type: System.Int32
        return:
          type: Global.AnimationKeyFrame
      overload: Global.TileLayer.DeleteKeyFrameNoEvent*
      overridden: Global.Layer.DeleteKeyFrameNoEvent(System.Int32)
    - id: Global.TileLayer.ClearFrames
      commentId: M:Global.TileLayer.ClearFrames
      language: CSharp
      name:
        CSharp: ClearFrames()
        VB: ClearFrames()
      nameWithType:
        CSharp: TileLayer.ClearFrames()
        VB: TileLayer.ClearFrames()
      qualifiedName:
        CSharp: TileLayer.ClearFrames()
        VB: TileLayer.ClearFrames()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ClearFrames
        path: ''
        startLine: 14123
      syntax:
        content:
          CSharp: public override void ClearFrames()
          VB: Public Overrides Sub ClearFrames()
      overload: Global.TileLayer.ClearFrames*
      overridden: Global.Layer.ClearFrames
    - id: Global.TileLayer.RerenderKeyFrames
      commentId: M:Global.TileLayer.RerenderKeyFrames
      language: CSharp
      name:
        CSharp: RerenderKeyFrames()
        VB: RerenderKeyFrames()
      nameWithType:
        CSharp: TileLayer.RerenderKeyFrames()
        VB: TileLayer.RerenderKeyFrames()
      qualifiedName:
        CSharp: TileLayer.RerenderKeyFrames()
        VB: TileLayer.RerenderKeyFrames()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RerenderKeyFrames
        path: ''
        startLine: 14137
      summary: "\nRerenders all keyframes.\n"
      example: []
      syntax:
        content:
          CSharp: public void RerenderKeyFrames()
          VB: Public Sub RerenderKeyFrames()
      overload: Global.TileLayer.RerenderKeyFrames*
    - id: Global.TileLayer.RerenderKeyFrames(IntRect)
      commentId: M:Global.TileLayer.RerenderKeyFrames(IntRect)
      language: CSharp
      name:
        CSharp: RerenderKeyFrames(IntRect)
        VB: RerenderKeyFrames(IntRect)
      nameWithType:
        CSharp: TileLayer.RerenderKeyFrames(IntRect)
        VB: TileLayer.RerenderKeyFrames(IntRect)
      qualifiedName:
        CSharp: TileLayer.RerenderKeyFrames(IntRect)
        VB: TileLayer.RerenderKeyFrames(IntRect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RerenderKeyFrames
        path: ''
        startLine: 14141
      summary: "\nRerenders the section of every keyframe within the given rect.\n"
      example: []
      syntax:
        content:
          CSharp: public void RerenderKeyFrames(IntRect rect)
          VB: Public Sub RerenderKeyFrames(rect As IntRect)
        parameters:
        - id: rect
          type: Global.IntRect
      overload: Global.TileLayer.RerenderKeyFrames*
    - id: Global.TileLayer.RerenderKeyFrames(IntVector2[])
      commentId: M:Global.TileLayer.RerenderKeyFrames(IntVector2[])
      language: CSharp
      name:
        CSharp: RerenderKeyFrames(IntVector2[])
        VB: RerenderKeyFrames(IntVector2())
      nameWithType:
        CSharp: TileLayer.RerenderKeyFrames(IntVector2[])
        VB: TileLayer.RerenderKeyFrames(IntVector2())
      qualifiedName:
        CSharp: TileLayer.RerenderKeyFrames(IntVector2[])
        VB: TileLayer.RerenderKeyFrames(IntVector2())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RerenderKeyFrames
        path: ''
        startLine: 14145
      summary: "\nRerenders the given pixels of every keyframe.\n"
      example: []
      syntax:
        content:
          CSharp: public void RerenderKeyFrames(IntVector2[] pixels)
          VB: Public Sub RerenderKeyFrames(pixels As IntVector2())
        parameters:
        - id: pixels
          type: Global.IntVector2[]
      overload: Global.TileLayer.RerenderKeyFrames*
    - id: Global.TileLayer.RerenderKeyFrames(System.Int32[])
      commentId: M:Global.TileLayer.RerenderKeyFrames(System.Int32[])
      language: CSharp
      name:
        CSharp: RerenderKeyFrames(int[])
        VB: RerenderKeyFrames(Integer())
      nameWithType:
        CSharp: TileLayer.RerenderKeyFrames(int[])
        VB: TileLayer.RerenderKeyFrames(Integer())
      qualifiedName:
        CSharp: TileLayer.RerenderKeyFrames(int[])
        VB: TileLayer.RerenderKeyFrames(Integer())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RerenderKeyFrames
        path: ''
        startLine: 14149
      summary: "\nRerenders the given keyframes.\n"
      example: []
      syntax:
        content:
          CSharp: public void RerenderKeyFrames(int[] keyFrames)
          VB: Public Sub RerenderKeyFrames(keyFrames As Integer())
        parameters:
        - id: keyFrames
          type: System.Int32[]
      overload: Global.TileLayer.RerenderKeyFrames*
    - id: Global.TileLayer.RerenderKeyFrames(System.Int32[],IntRect)
      commentId: M:Global.TileLayer.RerenderKeyFrames(System.Int32[],IntRect)
      language: CSharp
      name:
        CSharp: RerenderKeyFrames(int[], IntRect)
        VB: RerenderKeyFrames(Integer(), IntRect)
      nameWithType:
        CSharp: TileLayer.RerenderKeyFrames(int[], IntRect)
        VB: TileLayer.RerenderKeyFrames(Integer(), IntRect)
      qualifiedName:
        CSharp: TileLayer.RerenderKeyFrames(int[], IntRect)
        VB: TileLayer.RerenderKeyFrames(Integer(), IntRect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RerenderKeyFrames
        path: ''
        startLine: 14153
      summary: "\nRerenders the section of the given keyframes within the given rect.\n"
      example: []
      syntax:
        content:
          CSharp: public void RerenderKeyFrames(int[] keyFrames, IntRect rect)
          VB: Public Sub RerenderKeyFrames(keyFrames As Integer(), rect As IntRect)
        parameters:
        - id: keyFrames
          type: System.Int32[]
        - id: rect
          type: Global.IntRect
      overload: Global.TileLayer.RerenderKeyFrames*
    - id: Global.TileLayer.RerenderKeyFrames(System.Int32[],IntVector2[])
      commentId: M:Global.TileLayer.RerenderKeyFrames(System.Int32[],IntVector2[])
      language: CSharp
      name:
        CSharp: RerenderKeyFrames(int[], IntVector2[])
        VB: RerenderKeyFrames(Integer(), IntVector2())
      nameWithType:
        CSharp: TileLayer.RerenderKeyFrames(int[], IntVector2[])
        VB: TileLayer.RerenderKeyFrames(Integer(), IntVector2())
      qualifiedName:
        CSharp: TileLayer.RerenderKeyFrames(int[], IntVector2[])
        VB: TileLayer.RerenderKeyFrames(Integer(), IntVector2())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RerenderKeyFrames
        path: ''
        startLine: 14157
      summary: "\nRerenders the given pixels of the given keyframes.\n"
      example: []
      syntax:
        content:
          CSharp: public void RerenderKeyFrames(int[] keyFrames, IntVector2[] pixels)
          VB: Public Sub RerenderKeyFrames(keyFrames As Integer(), pixels As IntVector2())
        parameters:
        - id: keyFrames
          type: System.Int32[]
        - id: pixels
          type: Global.IntVector2[]
      overload: Global.TileLayer.RerenderKeyFrames*
    - id: Global.TileLayer.RerenderKeyFrame(System.Int32)
      commentId: M:Global.TileLayer.RerenderKeyFrame(System.Int32)
      language: CSharp
      name:
        CSharp: RerenderKeyFrame(int)
        VB: RerenderKeyFrame(Integer)
      nameWithType:
        CSharp: TileLayer.RerenderKeyFrame(int)
        VB: TileLayer.RerenderKeyFrame(Integer)
      qualifiedName:
        CSharp: TileLayer.RerenderKeyFrame(int)
        VB: TileLayer.RerenderKeyFrame(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RerenderKeyFrame
        path: ''
        startLine: 14167
      summary: "\nRerenders the keyframe.\n"
      example: []
      syntax:
        content:
          CSharp: public void RerenderKeyFrame(int frame)
          VB: Public Sub RerenderKeyFrame(frame As Integer)
        parameters:
        - id: frame
          type: System.Int32
      overload: Global.TileLayer.RerenderKeyFrame*
    - id: Global.TileLayer.RerenderKeyFrame(System.Int32,IntRect)
      commentId: M:Global.TileLayer.RerenderKeyFrame(System.Int32,IntRect)
      language: CSharp
      name:
        CSharp: RerenderKeyFrame(int, IntRect)
        VB: RerenderKeyFrame(Integer, IntRect)
      nameWithType:
        CSharp: TileLayer.RerenderKeyFrame(int, IntRect)
        VB: TileLayer.RerenderKeyFrame(Integer, IntRect)
      qualifiedName:
        CSharp: TileLayer.RerenderKeyFrame(int, IntRect)
        VB: TileLayer.RerenderKeyFrame(Integer, IntRect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RerenderKeyFrame
        path: ''
        startLine: 14171
      summary: "\nRerenders the section of the keyframe within the given rect.\n"
      example: []
      syntax:
        content:
          CSharp: public void RerenderKeyFrame(int frame, IntRect rect)
          VB: Public Sub RerenderKeyFrame(frame As Integer, rect As IntRect)
        parameters:
        - id: frame
          type: System.Int32
        - id: rect
          type: Global.IntRect
      overload: Global.TileLayer.RerenderKeyFrame*
    - id: Global.TileLayer.RerenderKeyFrame(System.Int32,IntVector2[])
      commentId: M:Global.TileLayer.RerenderKeyFrame(System.Int32,IntVector2[])
      language: CSharp
      name:
        CSharp: RerenderKeyFrame(int, IntVector2[])
        VB: RerenderKeyFrame(Integer, IntVector2())
      nameWithType:
        CSharp: TileLayer.RerenderKeyFrame(int, IntVector2[])
        VB: TileLayer.RerenderKeyFrame(Integer, IntVector2())
      qualifiedName:
        CSharp: TileLayer.RerenderKeyFrame(int, IntVector2[])
        VB: TileLayer.RerenderKeyFrame(Integer, IntVector2())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RerenderKeyFrame
        path: ''
        startLine: 14175
      summary: "\nRerenders the given pixels of the keyframe.\n"
      example: []
      syntax:
        content:
          CSharp: public void RerenderKeyFrame(int frame, IntVector2[] pixels)
          VB: Public Sub RerenderKeyFrame(frame As Integer, pixels As IntVector2())
        parameters:
        - id: frame
          type: System.Int32
        - id: pixels
          type: Global.IntVector2[]
      overload: Global.TileLayer.RerenderKeyFrame*
  - id: Global.MaximiseWindow
    commentId: T:Global.MaximiseWindow
    language: CSharp
    name:
      CSharp: MaximiseWindow
      VB: MaximiseWindow
    nameWithType:
      CSharp: MaximiseWindow
      VB: MaximiseWindow
    qualifiedName:
      CSharp: MaximiseWindow
      VB: MaximiseWindow
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: MaximiseWindow
      path: ''
      startLine: 14247
    syntax:
      content:
        CSharp: 'public class MaximiseWindow : MonoBehaviour'
        VB: Public Class MaximiseWindow Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.MaximiseWindow.ShowWindowAsync(System.Int32,System.Int32)
      commentId: M:Global.MaximiseWindow.ShowWindowAsync(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: ShowWindowAsync(int, int)
        VB: ShowWindowAsync(Integer, Integer)
      nameWithType:
        CSharp: MaximiseWindow.ShowWindowAsync(int, int)
        VB: MaximiseWindow.ShowWindowAsync(Integer, Integer)
      qualifiedName:
        CSharp: MaximiseWindow.ShowWindowAsync(int, int)
        VB: MaximiseWindow.ShowWindowAsync(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        path: cs.temp.dll
        isExternal: true
      syntax:
        content:
          CSharp: public static extern bool ShowWindowAsync(int hWnd, int nCmdShow)
          VB: Public Shared Function ShowWindowAsync(hWnd As Integer, nCmdShow As Integer) As Boolean
        parameters:
        - id: hWnd
          type: System.Int32
        - id: nCmdShow
          type: System.Int32
        return:
          type: System.Boolean
      overload: Global.MaximiseWindow.ShowWindowAsync*
  - id: Global.ScreenInfo
    commentId: T:Global.ScreenInfo
    language: CSharp
    name:
      CSharp: ScreenInfo
      VB: ScreenInfo
    nameWithType:
      CSharp: ScreenInfo
      VB: ScreenInfo
    qualifiedName:
      CSharp: ScreenInfo
      VB: ScreenInfo
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ScreenInfo
      path: ''
      startLine: 14269
    syntax:
      content:
        CSharp: public static class ScreenInfo
        VB: Public Module ScreenInfo
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.ScreenInfo.screenWorldWidth
      commentId: P:Global.ScreenInfo.screenWorldWidth
      language: CSharp
      name:
        CSharp: screenWorldWidth
        VB: screenWorldWidth
      nameWithType:
        CSharp: ScreenInfo.screenWorldWidth
        VB: ScreenInfo.screenWorldWidth
      qualifiedName:
        CSharp: ScreenInfo.screenWorldWidth
        VB: ScreenInfo.screenWorldWidth
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: screenWorldWidth
        path: ''
        startLine: 14274
      summary: "\nReturns the width of the screen in world coords.\n"
      example: []
      syntax:
        content:
          CSharp: public static float screenWorldWidth { get; }
          VB: Public Shared ReadOnly Property screenWorldWidth As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.ScreenInfo.screenWorldWidth*
    - id: Global.ScreenInfo.screenWorldHeight
      commentId: P:Global.ScreenInfo.screenWorldHeight
      language: CSharp
      name:
        CSharp: screenWorldHeight
        VB: screenWorldHeight
      nameWithType:
        CSharp: ScreenInfo.screenWorldHeight
        VB: ScreenInfo.screenWorldHeight
      qualifiedName:
        CSharp: ScreenInfo.screenWorldHeight
        VB: ScreenInfo.screenWorldHeight
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: screenWorldHeight
        path: ''
        startLine: 14285
      summary: "\nReturns the height of the screen in world coords.\n"
      example: []
      syntax:
        content:
          CSharp: public static float screenWorldHeight { get; }
          VB: Public Shared ReadOnly Property screenWorldHeight As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.ScreenInfo.screenWorldHeight*
    - id: Global.ScreenInfo.GetScreenPixelColour(IntVector2)
      commentId: M:Global.ScreenInfo.GetScreenPixelColour(IntVector2)
      language: CSharp
      name:
        CSharp: GetScreenPixelColour(IntVector2)
        VB: GetScreenPixelColour(IntVector2)
      nameWithType:
        CSharp: ScreenInfo.GetScreenPixelColour(IntVector2)
        VB: ScreenInfo.GetScreenPixelColour(IntVector2)
      qualifiedName:
        CSharp: ScreenInfo.GetScreenPixelColour(IntVector2)
        VB: ScreenInfo.GetScreenPixelColour(IntVector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetScreenPixelColour
        path: ''
        startLine: 14299
      summary: "\nReturns the colour of the screen pixel at the given coords. Best results when called after end of frame, using &apos;yield return new WaitForEndOfFrame()&apos;.\n"
      example: []
      syntax:
        content:
          CSharp: public static Color GetScreenPixelColour(IntVector2 coords)
          VB: Public Shared Function GetScreenPixelColour(coords As IntVector2) As Color
        parameters:
        - id: coords
          type: Global.IntVector2
        return:
          type: Global.Color
          description: ''
      overload: Global.ScreenInfo.GetScreenPixelColour*
    - id: Global.ScreenInfo.GetScreenPixelColour(System.Int32,System.Int32)
      commentId: M:Global.ScreenInfo.GetScreenPixelColour(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: GetScreenPixelColour(int, int)
        VB: GetScreenPixelColour(Integer, Integer)
      nameWithType:
        CSharp: ScreenInfo.GetScreenPixelColour(int, int)
        VB: ScreenInfo.GetScreenPixelColour(Integer, Integer)
      qualifiedName:
        CSharp: ScreenInfo.GetScreenPixelColour(int, int)
        VB: ScreenInfo.GetScreenPixelColour(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetScreenPixelColour
        path: ''
        startLine: 14309
      summary: "\nReturns the colour of the screen pixel at coords (x, y). Best results when called after end of frame, using &apos;yield return new WaitForEndOfFrame()&apos;.\n"
      example: []
      syntax:
        content:
          CSharp: public static Color GetScreenPixelColour(int x, int y)
          VB: Public Shared Function GetScreenPixelColour(x As Integer, y As Integer) As Color
        parameters:
        - id: x
          type: System.Int32
          description: ''
        - id: y
          type: System.Int32
          description: ''
        return:
          type: Global.Color
          description: ''
      overload: Global.ScreenInfo.GetScreenPixelColour*
  - id: Global.LayerSerializationSurrogate
    commentId: T:Global.LayerSerializationSurrogate
    language: CSharp
    name:
      CSharp: LayerSerializationSurrogate
      VB: LayerSerializationSurrogate
    nameWithType:
      CSharp: LayerSerializationSurrogate
      VB: LayerSerializationSurrogate
    qualifiedName:
      CSharp: LayerSerializationSurrogate
      VB: LayerSerializationSurrogate
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: LayerSerializationSurrogate
      path: ''
      startLine: 14324
    syntax:
      content:
        CSharp: >-
          [Obsolete]

          public class LayerSerializationSurrogate : ISerializationSurrogate
        VB: >-
          <Obsolete>

          Public Class LayerSerializationSurrogate Inherits ISerializationSurrogate
    inheritance:
    - System.Object
    attributes:
    - type: System.ObsoleteAttribute
      ctor: System.ObsoleteAttribute.#ctor
      arguments: []
    items:
    - id: Global.LayerSerializationSurrogate.GetObjectData(System.Object,SerializationInfo,StreamingContext)
      commentId: M:Global.LayerSerializationSurrogate.GetObjectData(System.Object,SerializationInfo,StreamingContext)
      language: CSharp
      name:
        CSharp: GetObjectData(object, SerializationInfo, StreamingContext)
        VB: GetObjectData(Object, SerializationInfo, StreamingContext)
      nameWithType:
        CSharp: LayerSerializationSurrogate.GetObjectData(object, SerializationInfo, StreamingContext)
        VB: LayerSerializationSurrogate.GetObjectData(Object, SerializationInfo, StreamingContext)
      qualifiedName:
        CSharp: LayerSerializationSurrogate.GetObjectData(object, SerializationInfo, StreamingContext)
        VB: LayerSerializationSurrogate.GetObjectData(Object, SerializationInfo, StreamingContext)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetObjectData
        path: ''
        startLine: 14327
      syntax:
        content:
          CSharp: public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)
          VB: Public Sub GetObjectData(obj As Object, info As SerializationInfo, context As StreamingContext)
        parameters:
        - id: obj
          type: System.Object
        - id: info
          type: Global.SerializationInfo
        - id: context
          type: Global.StreamingContext
      overload: Global.LayerSerializationSurrogate.GetObjectData*
    - id: Global.LayerSerializationSurrogate.SetObjectData(System.Object,SerializationInfo,StreamingContext,ISurrogateSelector)
      commentId: M:Global.LayerSerializationSurrogate.SetObjectData(System.Object,SerializationInfo,StreamingContext,ISurrogateSelector)
      language: CSharp
      name:
        CSharp: SetObjectData(object, SerializationInfo, StreamingContext, ISurrogateSelector)
        VB: SetObjectData(Object, SerializationInfo, StreamingContext, ISurrogateSelector)
      nameWithType:
        CSharp: LayerSerializationSurrogate.SetObjectData(object, SerializationInfo, StreamingContext, ISurrogateSelector)
        VB: LayerSerializationSurrogate.SetObjectData(Object, SerializationInfo, StreamingContext, ISurrogateSelector)
      qualifiedName:
        CSharp: LayerSerializationSurrogate.SetObjectData(object, SerializationInfo, StreamingContext, ISurrogateSelector)
        VB: LayerSerializationSurrogate.SetObjectData(Object, SerializationInfo, StreamingContext, ISurrogateSelector)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetObjectData
        path: ''
        startLine: 14335
      syntax:
        content:
          CSharp: public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
          VB: Public Function SetObjectData(obj As Object, info As SerializationInfo, context As StreamingContext, selector As ISurrogateSelector) As Object
        parameters:
        - id: obj
          type: System.Object
        - id: info
          type: Global.SerializationInfo
        - id: context
          type: Global.StreamingContext
        - id: selector
          type: Global.ISurrogateSelector
        return:
          type: System.Object
      overload: Global.LayerSerializationSurrogate.SetObjectData*
  - id: Global.Texture2DSerializationSurrogate
    commentId: T:Global.Texture2DSerializationSurrogate
    language: CSharp
    name:
      CSharp: Texture2DSerializationSurrogate
      VB: Texture2DSerializationSurrogate
    nameWithType:
      CSharp: Texture2DSerializationSurrogate
      VB: Texture2DSerializationSurrogate
    qualifiedName:
      CSharp: Texture2DSerializationSurrogate
      VB: Texture2DSerializationSurrogate
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Texture2DSerializationSurrogate
      path: ''
      startLine: 14352
    syntax:
      content:
        CSharp: >-
          [Obsolete]

          public class Texture2DSerializationSurrogate : ISerializationSurrogate
        VB: >-
          <Obsolete>

          Public Class Texture2DSerializationSurrogate Inherits ISerializationSurrogate
    inheritance:
    - System.Object
    attributes:
    - type: System.ObsoleteAttribute
      ctor: System.ObsoleteAttribute.#ctor
      arguments: []
    items:
    - id: Global.Texture2DSerializationSurrogate.GetObjectData(System.Object,SerializationInfo,StreamingContext)
      commentId: M:Global.Texture2DSerializationSurrogate.GetObjectData(System.Object,SerializationInfo,StreamingContext)
      language: CSharp
      name:
        CSharp: GetObjectData(object, SerializationInfo, StreamingContext)
        VB: GetObjectData(Object, SerializationInfo, StreamingContext)
      nameWithType:
        CSharp: Texture2DSerializationSurrogate.GetObjectData(object, SerializationInfo, StreamingContext)
        VB: Texture2DSerializationSurrogate.GetObjectData(Object, SerializationInfo, StreamingContext)
      qualifiedName:
        CSharp: Texture2DSerializationSurrogate.GetObjectData(object, SerializationInfo, StreamingContext)
        VB: Texture2DSerializationSurrogate.GetObjectData(Object, SerializationInfo, StreamingContext)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetObjectData
        path: ''
        startLine: 14355
      syntax:
        content:
          CSharp: public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)
          VB: Public Sub GetObjectData(obj As Object, info As SerializationInfo, context As StreamingContext)
        parameters:
        - id: obj
          type: System.Object
        - id: info
          type: Global.SerializationInfo
        - id: context
          type: Global.StreamingContext
      overload: Global.Texture2DSerializationSurrogate.GetObjectData*
    - id: Global.Texture2DSerializationSurrogate.SetObjectData(System.Object,SerializationInfo,StreamingContext,ISurrogateSelector)
      commentId: M:Global.Texture2DSerializationSurrogate.SetObjectData(System.Object,SerializationInfo,StreamingContext,ISurrogateSelector)
      language: CSharp
      name:
        CSharp: SetObjectData(object, SerializationInfo, StreamingContext, ISurrogateSelector)
        VB: SetObjectData(Object, SerializationInfo, StreamingContext, ISurrogateSelector)
      nameWithType:
        CSharp: Texture2DSerializationSurrogate.SetObjectData(object, SerializationInfo, StreamingContext, ISurrogateSelector)
        VB: Texture2DSerializationSurrogate.SetObjectData(Object, SerializationInfo, StreamingContext, ISurrogateSelector)
      qualifiedName:
        CSharp: Texture2DSerializationSurrogate.SetObjectData(object, SerializationInfo, StreamingContext, ISurrogateSelector)
        VB: Texture2DSerializationSurrogate.SetObjectData(Object, SerializationInfo, StreamingContext, ISurrogateSelector)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetObjectData
        path: ''
        startLine: 14367
      syntax:
        content:
          CSharp: public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
          VB: Public Function SetObjectData(obj As Object, info As SerializationInfo, context As StreamingContext, selector As ISurrogateSelector) As Object
        parameters:
        - id: obj
          type: System.Object
        - id: info
          type: Global.SerializationInfo
        - id: context
          type: Global.StreamingContext
        - id: selector
          type: Global.ISurrogateSelector
        return:
          type: System.Object
      overload: Global.Texture2DSerializationSurrogate.SetObjectData*
  - id: Global.HueSaturationBoxShader
    commentId: T:Global.HueSaturationBoxShader
    language: CSharp
    name:
      CSharp: HueSaturationBoxShader
      VB: HueSaturationBoxShader
    nameWithType:
      CSharp: HueSaturationBoxShader
      VB: HueSaturationBoxShader
    qualifiedName:
      CSharp: HueSaturationBoxShader
      VB: HueSaturationBoxShader
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: HueSaturationBoxShader
      path: ''
      startLine: 14388
    syntax:
      content:
        CSharp: 'public class HueSaturationBoxShader : MonoBehaviour'
        VB: Public Class HueSaturationBoxShader Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.HueSaturationBoxShader.hueSaturationBoxMaterial
      commentId: F:Global.HueSaturationBoxShader.hueSaturationBoxMaterial
      language: CSharp
      name:
        CSharp: hueSaturationBoxMaterial
        VB: hueSaturationBoxMaterial
      nameWithType:
        CSharp: HueSaturationBoxShader.hueSaturationBoxMaterial
        VB: HueSaturationBoxShader.hueSaturationBoxMaterial
      qualifiedName:
        CSharp: HueSaturationBoxShader.hueSaturationBoxMaterial
        VB: HueSaturationBoxShader.hueSaturationBoxMaterial
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hueSaturationBoxMaterial
        path: ''
        startLine: 14391
      syntax:
        content:
          CSharp: public Material hueSaturationBoxMaterial
          VB: Public hueSaturationBoxMaterial As Material
        return:
          type: Global.Material
  - id: Global.LightnessSliderShader
    commentId: T:Global.LightnessSliderShader
    language: CSharp
    name:
      CSharp: LightnessSliderShader
      VB: LightnessSliderShader
    nameWithType:
      CSharp: LightnessSliderShader
      VB: LightnessSliderShader
    qualifiedName:
      CSharp: LightnessSliderShader
      VB: LightnessSliderShader
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: LightnessSliderShader
      path: ''
      startLine: 14428
    syntax:
      content:
        CSharp: 'public class LightnessSliderShader : MonoBehaviour'
        VB: Public Class LightnessSliderShader Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.LightnessSliderShader.lightnessSliderMaterial
      commentId: F:Global.LightnessSliderShader.lightnessSliderMaterial
      language: CSharp
      name:
        CSharp: lightnessSliderMaterial
        VB: lightnessSliderMaterial
      nameWithType:
        CSharp: LightnessSliderShader.lightnessSliderMaterial
        VB: LightnessSliderShader.lightnessSliderMaterial
      qualifiedName:
        CSharp: LightnessSliderShader.lightnessSliderMaterial
        VB: LightnessSliderShader.lightnessSliderMaterial
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: lightnessSliderMaterial
        path: ''
        startLine: 14431
      syntax:
        content:
          CSharp: public Material lightnessSliderMaterial
          VB: Public lightnessSliderMaterial As Material
        return:
          type: Global.Material
  - id: Global.Outline
    commentId: T:Global.Outline
    language: CSharp
    name:
      CSharp: Outline
      VB: Outline
    nameWithType:
      CSharp: Outline
      VB: Outline
    qualifiedName:
      CSharp: Outline
      VB: Outline
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Outline
      path: ''
      startLine: 14468
    syntax:
      content:
        CSharp: 'public class Outline : MonoBehaviour'
        VB: Public Class Outline Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.Outline.outlineEnabled
      commentId: P:Global.Outline.outlineEnabled
      language: CSharp
      name:
        CSharp: outlineEnabled
        VB: outlineEnabled
      nameWithType:
        CSharp: Outline.outlineEnabled
        VB: Outline.outlineEnabled
      qualifiedName:
        CSharp: Outline.outlineEnabled
        VB: Outline.outlineEnabled
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: outlineEnabled
        path: ''
        startLine: 14473
      syntax:
        content:
          CSharp: public bool outlineEnabled { get; set; }
          VB: Public Property outlineEnabled As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Outline.outlineEnabled*
    - id: Global.Outline.colour
      commentId: P:Global.Outline.colour
      language: CSharp
      name:
        CSharp: colour
        VB: colour
      nameWithType:
        CSharp: Outline.colour
        VB: Outline.colour
      qualifiedName:
        CSharp: Outline.colour
        VB: Outline.colour
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: colour
        path: ''
        startLine: 14492
      syntax:
        content:
          CSharp: public Color colour { get; set; }
          VB: Public Property colour As Color
        parameters: []
        return:
          type: Global.Color
      overload: Global.Outline.colour*
    - id: Global.Outline.thickness
      commentId: P:Global.Outline.thickness
      language: CSharp
      name:
        CSharp: thickness
        VB: thickness
      nameWithType:
        CSharp: Outline.thickness
        VB: Outline.thickness
      qualifiedName:
        CSharp: Outline.thickness
        VB: Outline.thickness
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: thickness
        path: ''
        startLine: 14512
      syntax:
        content:
          CSharp: public float thickness { get; set; }
          VB: Public Property thickness As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.Outline.thickness*
    - id: Global.Outline.keepExistingTexture
      commentId: P:Global.Outline.keepExistingTexture
      language: CSharp
      name:
        CSharp: keepExistingTexture
        VB: keepExistingTexture
      nameWithType:
        CSharp: Outline.keepExistingTexture
        VB: Outline.keepExistingTexture
      qualifiedName:
        CSharp: Outline.keepExistingTexture
        VB: Outline.keepExistingTexture
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: keepExistingTexture
        path: ''
        startLine: 14531
      syntax:
        content:
          CSharp: public bool keepExistingTexture { get; set; }
          VB: Public Property keepExistingTexture As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Outline.keepExistingTexture*
    - id: Global.Outline.outlineMaterial
      commentId: F:Global.Outline.outlineMaterial
      language: CSharp
      name:
        CSharp: outlineMaterial
        VB: outlineMaterial
      nameWithType:
        CSharp: Outline.outlineMaterial
        VB: Outline.outlineMaterial
      qualifiedName:
        CSharp: Outline.outlineMaterial
        VB: Outline.outlineMaterial
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: outlineMaterial
        path: ''
        startLine: 14550
      syntax:
        content:
          CSharp: public Material outlineMaterial
          VB: Public outlineMaterial As Material
        return:
          type: Global.Material
  - id: Global.RainbowOutline
    commentId: T:Global.RainbowOutline
    language: CSharp
    name:
      CSharp: RainbowOutline
      VB: RainbowOutline
    nameWithType:
      CSharp: RainbowOutline
      VB: RainbowOutline
    qualifiedName:
      CSharp: RainbowOutline
      VB: RainbowOutline
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: RainbowOutline
      path: ''
      startLine: 14591
    syntax:
      content:
        CSharp: 'public class RainbowOutline : MonoBehaviour'
        VB: Public Class RainbowOutline Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.RainbowOutline.outlineEnabled
      commentId: P:Global.RainbowOutline.outlineEnabled
      language: CSharp
      name:
        CSharp: outlineEnabled
        VB: outlineEnabled
      nameWithType:
        CSharp: RainbowOutline.outlineEnabled
        VB: RainbowOutline.outlineEnabled
      qualifiedName:
        CSharp: RainbowOutline.outlineEnabled
        VB: RainbowOutline.outlineEnabled
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: outlineEnabled
        path: ''
        startLine: 14596
      syntax:
        content:
          CSharp: public bool outlineEnabled { get; set; }
          VB: Public Property outlineEnabled As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.RainbowOutline.outlineEnabled*
    - id: Global.RainbowOutline.thickness
      commentId: P:Global.RainbowOutline.thickness
      language: CSharp
      name:
        CSharp: thickness
        VB: thickness
      nameWithType:
        CSharp: RainbowOutline.thickness
        VB: RainbowOutline.thickness
      qualifiedName:
        CSharp: RainbowOutline.thickness
        VB: RainbowOutline.thickness
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: thickness
        path: ''
        startLine: 14616
      syntax:
        content:
          CSharp: public float thickness { get; set; }
          VB: Public Property thickness As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.RainbowOutline.thickness*
    - id: Global.RainbowOutline.keepExistingTexture
      commentId: P:Global.RainbowOutline.keepExistingTexture
      language: CSharp
      name:
        CSharp: keepExistingTexture
        VB: keepExistingTexture
      nameWithType:
        CSharp: RainbowOutline.keepExistingTexture
        VB: RainbowOutline.keepExistingTexture
      qualifiedName:
        CSharp: RainbowOutline.keepExistingTexture
        VB: RainbowOutline.keepExistingTexture
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: keepExistingTexture
        path: ''
        startLine: 14635
      syntax:
        content:
          CSharp: public bool keepExistingTexture { get; set; }
          VB: Public Property keepExistingTexture As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.RainbowOutline.keepExistingTexture*
    - id: Global.RainbowOutline.rainbowOutlineMaterial
      commentId: F:Global.RainbowOutline.rainbowOutlineMaterial
      language: CSharp
      name:
        CSharp: rainbowOutlineMaterial
        VB: rainbowOutlineMaterial
      nameWithType:
        CSharp: RainbowOutline.rainbowOutlineMaterial
        VB: RainbowOutline.rainbowOutlineMaterial
      qualifiedName:
        CSharp: RainbowOutline.rainbowOutlineMaterial
        VB: RainbowOutline.rainbowOutlineMaterial
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: rainbowOutlineMaterial
        path: ''
        startLine: 14654
      syntax:
        content:
          CSharp: public Material rainbowOutlineMaterial
          VB: Public rainbowOutlineMaterial As Material
        return:
          type: Global.Material
  - id: Global.Theme
    commentId: T:Global.Theme
    language: CSharp
    name:
      CSharp: Theme
      VB: Theme
    nameWithType:
      CSharp: Theme
      VB: Theme
    qualifiedName:
      CSharp: Theme
      VB: Theme
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Theme
      path: ''
      startLine: 14695
    syntax:
      content:
        CSharp: 'public class Theme : ScriptableObject'
        VB: Public Class Theme Inherits ScriptableObject
    inheritance:
    - System.Object
    items:
    - id: Global.Theme.themeName
      commentId: F:Global.Theme.themeName
      language: CSharp
      name:
        CSharp: themeName
        VB: themeName
      nameWithType:
        CSharp: Theme.themeName
        VB: Theme.themeName
      qualifiedName:
        CSharp: Theme.themeName
        VB: Theme.themeName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: themeName
        path: ''
        startLine: 14699
      syntax:
        content:
          CSharp: public string themeName
          VB: Public themeName As String
        return:
          type: System.String
    - id: Global.Theme.backgroundColour
      commentId: F:Global.Theme.backgroundColour
      language: CSharp
      name:
        CSharp: backgroundColour
        VB: backgroundColour
      nameWithType:
        CSharp: Theme.backgroundColour
        VB: Theme.backgroundColour
      qualifiedName:
        CSharp: Theme.backgroundColour
        VB: Theme.backgroundColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: backgroundColour
        path: ''
        startLine: 14702
      syntax:
        content:
          CSharp: public Color backgroundColour
          VB: Public backgroundColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.panelColour
      commentId: F:Global.Theme.panelColour
      language: CSharp
      name:
        CSharp: panelColour
        VB: panelColour
      nameWithType:
        CSharp: Theme.panelColour
        VB: Theme.panelColour
      qualifiedName:
        CSharp: Theme.panelColour
        VB: Theme.panelColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: panelColour
        path: ''
        startLine: 14703
      syntax:
        content:
          CSharp: public Color panelColour
          VB: Public panelColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.subPanelColour
      commentId: F:Global.Theme.subPanelColour
      language: CSharp
      name:
        CSharp: subPanelColour
        VB: subPanelColour
      nameWithType:
        CSharp: Theme.subPanelColour
        VB: Theme.subPanelColour
      qualifiedName:
        CSharp: Theme.subPanelColour
        VB: Theme.subPanelColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: subPanelColour
        path: ''
        startLine: 14704
      syntax:
        content:
          CSharp: public Color subPanelColour
          VB: Public subPanelColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.shadowColour
      commentId: F:Global.Theme.shadowColour
      language: CSharp
      name:
        CSharp: shadowColour
        VB: shadowColour
      nameWithType:
        CSharp: Theme.shadowColour
        VB: Theme.shadowColour
      qualifiedName:
        CSharp: Theme.shadowColour
        VB: Theme.shadowColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: shadowColour
        path: ''
        startLine: 14705
      syntax:
        content:
          CSharp: public Color shadowColour
          VB: Public shadowColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.buttonColour
      commentId: F:Global.Theme.buttonColour
      language: CSharp
      name:
        CSharp: buttonColour
        VB: buttonColour
      nameWithType:
        CSharp: Theme.buttonColour
        VB: Theme.buttonColour
      qualifiedName:
        CSharp: Theme.buttonColour
        VB: Theme.buttonColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: buttonColour
        path: ''
        startLine: 14708
      syntax:
        content:
          CSharp: public Color buttonColour
          VB: Public buttonColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.buttonHoverColour
      commentId: F:Global.Theme.buttonHoverColour
      language: CSharp
      name:
        CSharp: buttonHoverColour
        VB: buttonHoverColour
      nameWithType:
        CSharp: Theme.buttonHoverColour
        VB: Theme.buttonHoverColour
      qualifiedName:
        CSharp: Theme.buttonHoverColour
        VB: Theme.buttonHoverColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: buttonHoverColour
        path: ''
        startLine: 14709
      syntax:
        content:
          CSharp: public Color buttonHoverColour
          VB: Public buttonHoverColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.buttonPressedColour
      commentId: F:Global.Theme.buttonPressedColour
      language: CSharp
      name:
        CSharp: buttonPressedColour
        VB: buttonPressedColour
      nameWithType:
        CSharp: Theme.buttonPressedColour
        VB: Theme.buttonPressedColour
      qualifiedName:
        CSharp: Theme.buttonPressedColour
        VB: Theme.buttonPressedColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: buttonPressedColour
        path: ''
        startLine: 14710
      syntax:
        content:
          CSharp: public Color buttonPressedColour
          VB: Public buttonPressedColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.toggleButtonOffColour
      commentId: F:Global.Theme.toggleButtonOffColour
      language: CSharp
      name:
        CSharp: toggleButtonOffColour
        VB: toggleButtonOffColour
      nameWithType:
        CSharp: Theme.toggleButtonOffColour
        VB: Theme.toggleButtonOffColour
      qualifiedName:
        CSharp: Theme.toggleButtonOffColour
        VB: Theme.toggleButtonOffColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: toggleButtonOffColour
        path: ''
        startLine: 14713
      syntax:
        content:
          CSharp: public Color toggleButtonOffColour
          VB: Public toggleButtonOffColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.toggleButtonOnColour
      commentId: F:Global.Theme.toggleButtonOnColour
      language: CSharp
      name:
        CSharp: toggleButtonOnColour
        VB: toggleButtonOnColour
      nameWithType:
        CSharp: Theme.toggleButtonOnColour
        VB: Theme.toggleButtonOnColour
      qualifiedName:
        CSharp: Theme.toggleButtonOnColour
        VB: Theme.toggleButtonOnColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: toggleButtonOnColour
        path: ''
        startLine: 14714
      syntax:
        content:
          CSharp: public Color toggleButtonOnColour
          VB: Public toggleButtonOnColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.toggleButtonHoverTint
      commentId: F:Global.Theme.toggleButtonHoverTint
      language: CSharp
      name:
        CSharp: toggleButtonHoverTint
        VB: toggleButtonHoverTint
      nameWithType:
        CSharp: Theme.toggleButtonHoverTint
        VB: Theme.toggleButtonHoverTint
      qualifiedName:
        CSharp: Theme.toggleButtonHoverTint
        VB: Theme.toggleButtonHoverTint
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: toggleButtonHoverTint
        path: ''
        startLine: 14715
      syntax:
        content:
          CSharp: public Color toggleButtonHoverTint
          VB: Public toggleButtonHoverTint As Color
        return:
          type: Global.Color
    - id: Global.Theme.toggleButtonPressedColour
      commentId: F:Global.Theme.toggleButtonPressedColour
      language: CSharp
      name:
        CSharp: toggleButtonPressedColour
        VB: toggleButtonPressedColour
      nameWithType:
        CSharp: Theme.toggleButtonPressedColour
        VB: Theme.toggleButtonPressedColour
      qualifiedName:
        CSharp: Theme.toggleButtonPressedColour
        VB: Theme.toggleButtonPressedColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: toggleButtonPressedColour
        path: ''
        startLine: 14716
      syntax:
        content:
          CSharp: public Color toggleButtonPressedColour
          VB: Public toggleButtonPressedColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.textboxColour
      commentId: F:Global.Theme.textboxColour
      language: CSharp
      name:
        CSharp: textboxColour
        VB: textboxColour
      nameWithType:
        CSharp: Theme.textboxColour
        VB: Theme.textboxColour
      qualifiedName:
        CSharp: Theme.textboxColour
        VB: Theme.textboxColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: textboxColour
        path: ''
        startLine: 14719
      syntax:
        content:
          CSharp: public Color textboxColour
          VB: Public textboxColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.textboxHoverColour
      commentId: F:Global.Theme.textboxHoverColour
      language: CSharp
      name:
        CSharp: textboxHoverColour
        VB: textboxHoverColour
      nameWithType:
        CSharp: Theme.textboxHoverColour
        VB: Theme.textboxHoverColour
      qualifiedName:
        CSharp: Theme.textboxHoverColour
        VB: Theme.textboxHoverColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: textboxHoverColour
        path: ''
        startLine: 14720
      syntax:
        content:
          CSharp: public Color textboxHoverColour
          VB: Public textboxHoverColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.textboxPressedColour
      commentId: F:Global.Theme.textboxPressedColour
      language: CSharp
      name:
        CSharp: textboxPressedColour
        VB: textboxPressedColour
      nameWithType:
        CSharp: Theme.textboxPressedColour
        VB: Theme.textboxPressedColour
      qualifiedName:
        CSharp: Theme.textboxPressedColour
        VB: Theme.textboxPressedColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: textboxPressedColour
        path: ''
        startLine: 14721
      syntax:
        content:
          CSharp: public Color textboxPressedColour
          VB: Public textboxPressedColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.textboxSelectedColour
      commentId: F:Global.Theme.textboxSelectedColour
      language: CSharp
      name:
        CSharp: textboxSelectedColour
        VB: textboxSelectedColour
      nameWithType:
        CSharp: Theme.textboxSelectedColour
        VB: Theme.textboxSelectedColour
      qualifiedName:
        CSharp: Theme.textboxSelectedColour
        VB: Theme.textboxSelectedColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: textboxSelectedColour
        path: ''
        startLine: 14722
      syntax:
        content:
          CSharp: public Color textboxSelectedColour
          VB: Public textboxSelectedColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.scaleColour
      commentId: F:Global.Theme.scaleColour
      language: CSharp
      name:
        CSharp: scaleColour
        VB: scaleColour
      nameWithType:
        CSharp: Theme.scaleColour
        VB: Theme.scaleColour
      qualifiedName:
        CSharp: Theme.scaleColour
        VB: Theme.scaleColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: scaleColour
        path: ''
        startLine: 14725
      syntax:
        content:
          CSharp: public Color scaleColour
          VB: Public scaleColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.scaleHoverColour
      commentId: F:Global.Theme.scaleHoverColour
      language: CSharp
      name:
        CSharp: scaleHoverColour
        VB: scaleHoverColour
      nameWithType:
        CSharp: Theme.scaleHoverColour
        VB: Theme.scaleHoverColour
      qualifiedName:
        CSharp: Theme.scaleHoverColour
        VB: Theme.scaleHoverColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: scaleHoverColour
        path: ''
        startLine: 14726
      syntax:
        content:
          CSharp: public Color scaleHoverColour
          VB: Public scaleHoverColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.scalePressedColour
      commentId: F:Global.Theme.scalePressedColour
      language: CSharp
      name:
        CSharp: scalePressedColour
        VB: scalePressedColour
      nameWithType:
        CSharp: Theme.scalePressedColour
        VB: Theme.scalePressedColour
      qualifiedName:
        CSharp: Theme.scalePressedColour
        VB: Theme.scalePressedColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: scalePressedColour
        path: ''
        startLine: 14727
      syntax:
        content:
          CSharp: public Color scalePressedColour
          VB: Public scalePressedColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.scrollbarHandleColour
      commentId: F:Global.Theme.scrollbarHandleColour
      language: CSharp
      name:
        CSharp: scrollbarHandleColour
        VB: scrollbarHandleColour
      nameWithType:
        CSharp: Theme.scrollbarHandleColour
        VB: Theme.scrollbarHandleColour
      qualifiedName:
        CSharp: Theme.scrollbarHandleColour
        VB: Theme.scrollbarHandleColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: scrollbarHandleColour
        path: ''
        startLine: 14730
      syntax:
        content:
          CSharp: public Color scrollbarHandleColour
          VB: Public scrollbarHandleColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.scrollbarHandleHoverColour
      commentId: F:Global.Theme.scrollbarHandleHoverColour
      language: CSharp
      name:
        CSharp: scrollbarHandleHoverColour
        VB: scrollbarHandleHoverColour
      nameWithType:
        CSharp: Theme.scrollbarHandleHoverColour
        VB: Theme.scrollbarHandleHoverColour
      qualifiedName:
        CSharp: Theme.scrollbarHandleHoverColour
        VB: Theme.scrollbarHandleHoverColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: scrollbarHandleHoverColour
        path: ''
        startLine: 14731
      syntax:
        content:
          CSharp: public Color scrollbarHandleHoverColour
          VB: Public scrollbarHandleHoverColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.scrollbarHandlePressedColour
      commentId: F:Global.Theme.scrollbarHandlePressedColour
      language: CSharp
      name:
        CSharp: scrollbarHandlePressedColour
        VB: scrollbarHandlePressedColour
      nameWithType:
        CSharp: Theme.scrollbarHandlePressedColour
        VB: Theme.scrollbarHandlePressedColour
      qualifiedName:
        CSharp: Theme.scrollbarHandlePressedColour
        VB: Theme.scrollbarHandlePressedColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: scrollbarHandlePressedColour
        path: ''
        startLine: 14732
      syntax:
        content:
          CSharp: public Color scrollbarHandlePressedColour
          VB: Public scrollbarHandlePressedColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.scrollbarBackgroundColour
      commentId: F:Global.Theme.scrollbarBackgroundColour
      language: CSharp
      name:
        CSharp: scrollbarBackgroundColour
        VB: scrollbarBackgroundColour
      nameWithType:
        CSharp: Theme.scrollbarBackgroundColour
        VB: Theme.scrollbarBackgroundColour
      qualifiedName:
        CSharp: Theme.scrollbarBackgroundColour
        VB: Theme.scrollbarBackgroundColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: scrollbarBackgroundColour
        path: ''
        startLine: 14734
      syntax:
        content:
          CSharp: public Color scrollbarBackgroundColour
          VB: Public scrollbarBackgroundColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.scrollbarBackgroundHoverColour
      commentId: F:Global.Theme.scrollbarBackgroundHoverColour
      language: CSharp
      name:
        CSharp: scrollbarBackgroundHoverColour
        VB: scrollbarBackgroundHoverColour
      nameWithType:
        CSharp: Theme.scrollbarBackgroundHoverColour
        VB: Theme.scrollbarBackgroundHoverColour
      qualifiedName:
        CSharp: Theme.scrollbarBackgroundHoverColour
        VB: Theme.scrollbarBackgroundHoverColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: scrollbarBackgroundHoverColour
        path: ''
        startLine: 14735
      syntax:
        content:
          CSharp: public Color scrollbarBackgroundHoverColour
          VB: Public scrollbarBackgroundHoverColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.scrollbarBackgroundPressedColour
      commentId: F:Global.Theme.scrollbarBackgroundPressedColour
      language: CSharp
      name:
        CSharp: scrollbarBackgroundPressedColour
        VB: scrollbarBackgroundPressedColour
      nameWithType:
        CSharp: Theme.scrollbarBackgroundPressedColour
        VB: Theme.scrollbarBackgroundPressedColour
      qualifiedName:
        CSharp: Theme.scrollbarBackgroundPressedColour
        VB: Theme.scrollbarBackgroundPressedColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: scrollbarBackgroundPressedColour
        path: ''
        startLine: 14736
      syntax:
        content:
          CSharp: public Color scrollbarBackgroundPressedColour
          VB: Public scrollbarBackgroundPressedColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.layerTileOffColour
      commentId: F:Global.Theme.layerTileOffColour
      language: CSharp
      name:
        CSharp: layerTileOffColour
        VB: layerTileOffColour
      nameWithType:
        CSharp: Theme.layerTileOffColour
        VB: Theme.layerTileOffColour
      qualifiedName:
        CSharp: Theme.layerTileOffColour
        VB: Theme.layerTileOffColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: layerTileOffColour
        path: ''
        startLine: 14739
      syntax:
        content:
          CSharp: public Color layerTileOffColour
          VB: Public layerTileOffColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.layerTileOnColour
      commentId: F:Global.Theme.layerTileOnColour
      language: CSharp
      name:
        CSharp: layerTileOnColour
        VB: layerTileOnColour
      nameWithType:
        CSharp: Theme.layerTileOnColour
        VB: Theme.layerTileOnColour
      qualifiedName:
        CSharp: Theme.layerTileOnColour
        VB: Theme.layerTileOnColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: layerTileOnColour
        path: ''
        startLine: 14740
      syntax:
        content:
          CSharp: public Color layerTileOnColour
          VB: Public layerTileOnColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.layerTileHoverTint
      commentId: F:Global.Theme.layerTileHoverTint
      language: CSharp
      name:
        CSharp: layerTileHoverTint
        VB: layerTileHoverTint
      nameWithType:
        CSharp: Theme.layerTileHoverTint
        VB: Theme.layerTileHoverTint
      qualifiedName:
        CSharp: Theme.layerTileHoverTint
        VB: Theme.layerTileHoverTint
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: layerTileHoverTint
        path: ''
        startLine: 14741
      syntax:
        content:
          CSharp: public Color layerTileHoverTint
          VB: Public layerTileHoverTint As Color
        return:
          type: Global.Color
    - id: Global.Theme.layerTilePressedColour
      commentId: F:Global.Theme.layerTilePressedColour
      language: CSharp
      name:
        CSharp: layerTilePressedColour
        VB: layerTilePressedColour
      nameWithType:
        CSharp: Theme.layerTilePressedColour
        VB: Theme.layerTilePressedColour
      qualifiedName:
        CSharp: Theme.layerTilePressedColour
        VB: Theme.layerTilePressedColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: layerTilePressedColour
        path: ''
        startLine: 14742
      syntax:
        content:
          CSharp: public Color layerTilePressedColour
          VB: Public layerTilePressedColour As Color
        return:
          type: Global.Color
    - id: Global.Theme.SubscribeToOnChanged(UnityAction)
      commentId: M:Global.Theme.SubscribeToOnChanged(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnChanged(UnityAction)
        VB: SubscribeToOnChanged(UnityAction)
      nameWithType:
        CSharp: Theme.SubscribeToOnChanged(UnityAction)
        VB: Theme.SubscribeToOnChanged(UnityAction)
      qualifiedName:
        CSharp: Theme.SubscribeToOnChanged(UnityAction)
        VB: Theme.SubscribeToOnChanged(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnChanged
        path: ''
        startLine: 14752
      syntax:
        content:
          CSharp: public void SubscribeToOnChanged(UnityAction call)
          VB: Public Sub SubscribeToOnChanged([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.Theme.SubscribeToOnChanged*
  - id: Global.ThemeManager
    commentId: T:Global.ThemeManager
    language: CSharp
    name:
      CSharp: ThemeManager
      VB: ThemeManager
    nameWithType:
      CSharp: ThemeManager
      VB: ThemeManager
    qualifiedName:
      CSharp: ThemeManager
      VB: ThemeManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ThemeManager
      path: ''
      startLine: 14763
    syntax:
      content:
        CSharp: 'public class ThemeManager : MonoBehaviour'
        VB: Public Class ThemeManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.ThemeManager.currentTheme
      commentId: P:Global.ThemeManager.currentTheme
      language: CSharp
      name:
        CSharp: currentTheme
        VB: currentTheme
      nameWithType:
        CSharp: ThemeManager.currentTheme
        VB: ThemeManager.currentTheme
      qualifiedName:
        CSharp: ThemeManager.currentTheme
        VB: ThemeManager.currentTheme
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: currentTheme
        path: ''
        startLine: 14768
      syntax:
        content:
          CSharp: public Theme currentTheme { get; }
          VB: Public Property currentTheme As Theme
        parameters: []
        return:
          type: Global.Theme
      overload: Global.ThemeManager.currentTheme*
    - id: Global.ThemeManager.themes
      commentId: P:Global.ThemeManager.themes
      language: CSharp
      name:
        CSharp: themes
        VB: themes
      nameWithType:
        CSharp: ThemeManager.themes
        VB: ThemeManager.themes
      qualifiedName:
        CSharp: ThemeManager.themes
        VB: ThemeManager.themes
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: themes
        path: ''
        startLine: 14775
      syntax:
        content:
          CSharp: public List<Theme> themes { get; }
          VB: Public Property themes As List(Of Theme)
        parameters: []
        return:
          type: System.Collections.Generic.List{Theme}
      overload: Global.ThemeManager.themes*
    - id: Global.ThemeManager.SetTheme(Theme)
      commentId: M:Global.ThemeManager.SetTheme(Theme)
      language: CSharp
      name:
        CSharp: SetTheme(Theme)
        VB: SetTheme(Theme)
      nameWithType:
        CSharp: ThemeManager.SetTheme(Theme)
        VB: ThemeManager.SetTheme(Theme)
      qualifiedName:
        CSharp: ThemeManager.SetTheme(Theme)
        VB: ThemeManager.SetTheme(Theme)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetTheme
        path: ''
        startLine: 14806
      syntax:
        content:
          CSharp: public void SetTheme(Theme theme)
          VB: Public Sub SetTheme(theme As Theme)
        parameters:
        - id: theme
          type: Global.Theme
      overload: Global.ThemeManager.SetTheme*
    - id: Global.ThemeManager.SetTheme(System.String)
      commentId: M:Global.ThemeManager.SetTheme(System.String)
      language: CSharp
      name:
        CSharp: SetTheme(string)
        VB: SetTheme(String)
      nameWithType:
        CSharp: ThemeManager.SetTheme(string)
        VB: ThemeManager.SetTheme(String)
      qualifiedName:
        CSharp: ThemeManager.SetTheme(string)
        VB: ThemeManager.SetTheme(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetTheme
        path: ''
        startLine: 14812
      syntax:
        content:
          CSharp: public void SetTheme(string themeName)
          VB: Public Sub SetTheme(themeName As String)
        parameters:
        - id: themeName
          type: System.String
      overload: Global.ThemeManager.SetTheme*
    - id: Global.ThemeManager.SubscribeToThemeChanged(UnityAction)
      commentId: M:Global.ThemeManager.SubscribeToThemeChanged(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToThemeChanged(UnityAction)
        VB: SubscribeToThemeChanged(UnityAction)
      nameWithType:
        CSharp: ThemeManager.SubscribeToThemeChanged(UnityAction)
        VB: ThemeManager.SubscribeToThemeChanged(UnityAction)
      qualifiedName:
        CSharp: ThemeManager.SubscribeToThemeChanged(UnityAction)
        VB: ThemeManager.SubscribeToThemeChanged(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToThemeChanged
        path: ''
        startLine: 14827
      syntax:
        content:
          CSharp: public void SubscribeToThemeChanged(UnityAction call)
          VB: Public Sub SubscribeToThemeChanged([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.ThemeManager.SubscribeToThemeChanged*
  - id: Global.ThemeObjectType
    commentId: T:Global.ThemeObjectType
    language: CSharp
    name:
      CSharp: ThemeObjectType
      VB: ThemeObjectType
    nameWithType:
      CSharp: ThemeObjectType
      VB: ThemeObjectType
    qualifiedName:
      CSharp: ThemeObjectType
      VB: ThemeObjectType
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ThemeObjectType
      path: ''
      startLine: 14838
    syntax:
      content:
        CSharp: public enum ThemeObjectType
        VB: Public Enum ThemeObjectType
    items:
    - id: Global.ThemeObjectType.None
      commentId: F:Global.ThemeObjectType.None
      language: CSharp
      name:
        CSharp: None
        VB: None
      nameWithType:
        CSharp: ThemeObjectType.None
        VB: ThemeObjectType.None
      qualifiedName:
        CSharp: ThemeObjectType.None
        VB: ThemeObjectType.None
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: None
        path: ''
        startLine: 14840
      syntax:
        content:
          CSharp: None = 0
          VB: None = 0
        return:
          type: Global.ThemeObjectType
    - id: Global.ThemeObjectType.Background
      commentId: F:Global.ThemeObjectType.Background
      language: CSharp
      name:
        CSharp: Background
        VB: Background
      nameWithType:
        CSharp: ThemeObjectType.Background
        VB: ThemeObjectType.Background
      qualifiedName:
        CSharp: ThemeObjectType.Background
        VB: ThemeObjectType.Background
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Background
        path: ''
        startLine: 14841
      syntax:
        content:
          CSharp: Background = 1
          VB: Background = 1
        return:
          type: Global.ThemeObjectType
    - id: Global.ThemeObjectType.Panel
      commentId: F:Global.ThemeObjectType.Panel
      language: CSharp
      name:
        CSharp: Panel
        VB: Panel
      nameWithType:
        CSharp: ThemeObjectType.Panel
        VB: ThemeObjectType.Panel
      qualifiedName:
        CSharp: ThemeObjectType.Panel
        VB: ThemeObjectType.Panel
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Panel
        path: ''
        startLine: 14842
      syntax:
        content:
          CSharp: Panel = 2
          VB: Panel = 2
        return:
          type: Global.ThemeObjectType
    - id: Global.ThemeObjectType.SubPanel
      commentId: F:Global.ThemeObjectType.SubPanel
      language: CSharp
      name:
        CSharp: SubPanel
        VB: SubPanel
      nameWithType:
        CSharp: ThemeObjectType.SubPanel
        VB: ThemeObjectType.SubPanel
      qualifiedName:
        CSharp: ThemeObjectType.SubPanel
        VB: ThemeObjectType.SubPanel
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubPanel
        path: ''
        startLine: 14843
      syntax:
        content:
          CSharp: SubPanel = 3
          VB: SubPanel = 3
        return:
          type: Global.ThemeObjectType
    - id: Global.ThemeObjectType.Shadow
      commentId: F:Global.ThemeObjectType.Shadow
      language: CSharp
      name:
        CSharp: Shadow
        VB: Shadow
      nameWithType:
        CSharp: ThemeObjectType.Shadow
        VB: ThemeObjectType.Shadow
      qualifiedName:
        CSharp: ThemeObjectType.Shadow
        VB: ThemeObjectType.Shadow
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Shadow
        path: ''
        startLine: 14844
      syntax:
        content:
          CSharp: Shadow = 4
          VB: Shadow = 4
        return:
          type: Global.ThemeObjectType
    - id: Global.ThemeObjectType.RadioButton
      commentId: F:Global.ThemeObjectType.RadioButton
      language: CSharp
      name:
        CSharp: RadioButton
        VB: RadioButton
      nameWithType:
        CSharp: ThemeObjectType.RadioButton
        VB: ThemeObjectType.RadioButton
      qualifiedName:
        CSharp: ThemeObjectType.RadioButton
        VB: ThemeObjectType.RadioButton
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RadioButton
        path: ''
        startLine: 14845
      syntax:
        content:
          CSharp: RadioButton = 5
          VB: RadioButton = 5
        return:
          type: Global.ThemeObjectType
  - id: Global.UITheme
    commentId: T:Global.UITheme
    language: CSharp
    name:
      CSharp: UITheme
      VB: UITheme
    nameWithType:
      CSharp: UITheme
      VB: UITheme
    qualifiedName:
      CSharp: UITheme
      VB: UITheme
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UITheme
      path: ''
      startLine: 14848
    syntax:
      content:
        CSharp: 'public class UITheme : MonoBehaviour'
        VB: Public Class UITheme Inherits MonoBehaviour
    inheritance:
    - System.Object
    items: []
  - id: Global.Tile
    commentId: T:Global.Tile
    language: CSharp
    name:
      CSharp: Tile
      VB: Tile
    nameWithType:
      CSharp: Tile
      VB: Tile
    qualifiedName:
      CSharp: Tile
      VB: Tile
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Tile
      path: ''
      startLine: 14997
    syntax:
      content:
        CSharp: public class Tile
        VB: Public Class Tile
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.Tile.file
      commentId: P:Global.Tile.file
      language: CSharp
      name:
        CSharp: file
        VB: file
      nameWithType:
        CSharp: Tile.file
        VB: Tile.file
      qualifiedName:
        CSharp: Tile.file
        VB: Tile.file
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: file
        path: ''
        startLine: 14999
      syntax:
        content:
          CSharp: public File file { get; }
          VB: Public Property file As File
        parameters: []
        return:
          type: Global.File
      overload: Global.Tile.file*
    - id: Global.Tile.tileLayersAppearsOn
      commentId: P:Global.Tile.tileLayersAppearsOn
      language: CSharp
      name:
        CSharp: tileLayersAppearsOn
        VB: tileLayersAppearsOn
      nameWithType:
        CSharp: Tile.tileLayersAppearsOn
        VB: Tile.tileLayersAppearsOn
      qualifiedName:
        CSharp: Tile.tileLayersAppearsOn
        VB: Tile.tileLayersAppearsOn
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: tileLayersAppearsOn
        path: ''
        startLine: 15009
      syntax:
        content:
          CSharp: public TileLayer[] tileLayersAppearsOn { get; }
          VB: Public ReadOnly Property tileLayersAppearsOn As TileLayer()
        parameters: []
        return:
          type: Global.TileLayer[]
      overload: Global.Tile.tileLayersAppearsOn*
    - id: Global.Tile.width
      commentId: P:Global.Tile.width
      language: CSharp
      name:
        CSharp: width
        VB: width
      nameWithType:
        CSharp: Tile.width
        VB: Tile.width
      qualifiedName:
        CSharp: Tile.width
        VB: Tile.width
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: width
        path: ''
        startLine: 15011
      syntax:
        content:
          CSharp: public int width { get; }
          VB: Public ReadOnly Property width As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.Tile.width*
    - id: Global.Tile.height
      commentId: P:Global.Tile.height
      language: CSharp
      name:
        CSharp: height
        VB: height
      nameWithType:
        CSharp: Tile.height
        VB: Tile.height
      qualifiedName:
        CSharp: Tile.height
        VB: Tile.height
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: height
        path: ''
        startLine: 15012
      syntax:
        content:
          CSharp: public int height { get; }
          VB: Public ReadOnly Property height As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.Tile.height*
    - id: Global.Tile.bottomLeft
      commentId: P:Global.Tile.bottomLeft
      language: CSharp
      name:
        CSharp: bottomLeft
        VB: bottomLeft
      nameWithType:
        CSharp: Tile.bottomLeft
        VB: Tile.bottomLeft
      qualifiedName:
        CSharp: Tile.bottomLeft
        VB: Tile.bottomLeft
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: bottomLeft
        path: ''
        startLine: 15015
      syntax:
        content:
          CSharp: public IntVector2 bottomLeft { get; set; }
          VB: Public Property bottomLeft As IntVector2
        parameters: []
        return:
          type: Global.IntVector2
      overload: Global.Tile.bottomLeft*
    - id: Global.Tile.bottomRight
      commentId: P:Global.Tile.bottomRight
      language: CSharp
      name:
        CSharp: bottomRight
        VB: bottomRight
      nameWithType:
        CSharp: Tile.bottomRight
        VB: Tile.bottomRight
      qualifiedName:
        CSharp: Tile.bottomRight
        VB: Tile.bottomRight
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: bottomRight
        path: ''
        startLine: 15025
      syntax:
        content:
          CSharp: public IntVector2 bottomRight { get; set; }
          VB: Public Property bottomRight As IntVector2
        parameters: []
        return:
          type: Global.IntVector2
      overload: Global.Tile.bottomRight*
    - id: Global.Tile.topLeft
      commentId: P:Global.Tile.topLeft
      language: CSharp
      name:
        CSharp: topLeft
        VB: topLeft
      nameWithType:
        CSharp: Tile.topLeft
        VB: Tile.topLeft
      qualifiedName:
        CSharp: Tile.topLeft
        VB: Tile.topLeft
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: topLeft
        path: ''
        startLine: 15033
      syntax:
        content:
          CSharp: public IntVector2 topLeft { get; set; }
          VB: Public Property topLeft As IntVector2
        parameters: []
        return:
          type: Global.IntVector2
      overload: Global.Tile.topLeft*
    - id: Global.Tile.topRight
      commentId: P:Global.Tile.topRight
      language: CSharp
      name:
        CSharp: topRight
        VB: topRight
      nameWithType:
        CSharp: Tile.topRight
        VB: Tile.topRight
      qualifiedName:
        CSharp: Tile.topRight
        VB: Tile.topRight
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: topRight
        path: ''
        startLine: 15041
      syntax:
        content:
          CSharp: public IntVector2 topRight { get; set; }
          VB: Public Property topRight As IntVector2
        parameters: []
        return:
          type: Global.IntVector2
      overload: Global.Tile.topRight*
    - id: Global.Tile.centre
      commentId: P:Global.Tile.centre
      language: CSharp
      name:
        CSharp: centre
        VB: centre
      nameWithType:
        CSharp: Tile.centre
        VB: Tile.centre
      qualifiedName:
        CSharp: Tile.centre
        VB: Tile.centre
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: centre
        path: ''
        startLine: 15049
      syntax:
        content:
          CSharp: public Vector2 centre { get; }
          VB: Public ReadOnly Property centre As Vector2
        parameters: []
        return:
          type: Global.Vector2
      overload: Global.Tile.centre*
    - id: Global.Tile.rect
      commentId: P:Global.Tile.rect
      language: CSharp
      name:
        CSharp: rect
        VB: rect
      nameWithType:
        CSharp: Tile.rect
        VB: Tile.rect
      qualifiedName:
        CSharp: Tile.rect
        VB: Tile.rect
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: rect
        path: ''
        startLine: 15050
      syntax:
        content:
          CSharp: public IntRect rect { get; }
          VB: Public ReadOnly Property rect As IntRect
        parameters: []
        return:
          type: Global.IntRect
      overload: Global.Tile.rect*
    - id: Global.Tile.#ctor(File,IntVector2,TileLayer[])
      commentId: M:Global.Tile.#ctor(File,IntVector2,TileLayer[])
      language: CSharp
      name:
        CSharp: Tile(File, IntVector2, TileLayer[])
        VB: New(File, IntVector2, TileLayer())
      nameWithType:
        CSharp: Tile.Tile(File, IntVector2, TileLayer[])
        VB: Tile.New(File, IntVector2, TileLayer())
      qualifiedName:
        CSharp: Tile.Tile(File, IntVector2, TileLayer[])
        VB: Tile.New(File, IntVector2, TileLayer())
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 15062
      example: []
      syntax:
        content:
          CSharp: public Tile(File file, IntVector2 bottomLeft, TileLayer[] linkedTileLayers)
          VB: Public Sub New(file As File, bottomLeft As IntVector2, linkedTileLayers As TileLayer())
        parameters:
        - id: file
          type: Global.File
        - id: bottomLeft
          type: Global.IntVector2
        - id: linkedTileLayers
          type: Global.TileLayer[]
          description: "\nThe tile layers that the tile is on that are associated with each of the layers in the tile&apos;s file.\nGiven in the same order as the layers in the tile&apos;s file.\n"
      overload: Global.Tile.#ctor*
    - id: Global.Tile.TileLayerToLayerInTile(TileLayer)
      commentId: M:Global.Tile.TileLayerToLayerInTile(TileLayer)
      language: CSharp
      name:
        CSharp: TileLayerToLayerInTile(TileLayer)
        VB: TileLayerToLayerInTile(TileLayer)
      nameWithType:
        CSharp: Tile.TileLayerToLayerInTile(TileLayer)
        VB: Tile.TileLayerToLayerInTile(TileLayer)
      qualifiedName:
        CSharp: Tile.TileLayerToLayerInTile(TileLayer)
        VB: Tile.TileLayerToLayerInTile(TileLayer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: TileLayerToLayerInTile
        path: ''
        startLine: 15092
      summary: "\nTakes in the tile layer (that this tile must be on) and returns the layer it is associated with in the tile&apos;s file.\n"
      example: []
      syntax:
        content:
          CSharp: public Layer TileLayerToLayerInTile(TileLayer tileLayer)
          VB: Public Function TileLayerToLayerInTile(tileLayer As TileLayer) As Layer
        parameters:
        - id: tileLayer
          type: Global.TileLayer
        return:
          type: Global.Layer
      overload: Global.Tile.TileLayerToLayerInTile*
    - id: Global.Tile.LayerInTileToTileLayer(Layer)
      commentId: M:Global.Tile.LayerInTileToTileLayer(Layer)
      language: CSharp
      name:
        CSharp: LayerInTileToTileLayer(Layer)
        VB: LayerInTileToTileLayer(Layer)
      nameWithType:
        CSharp: Tile.LayerInTileToTileLayer(Layer)
        VB: Tile.LayerInTileToTileLayer(Layer)
      qualifiedName:
        CSharp: Tile.LayerInTileToTileLayer(Layer)
        VB: Tile.LayerInTileToTileLayer(Layer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LayerInTileToTileLayer
        path: ''
        startLine: 15103
      summary: "\nTakes in the layer (that must be in the tile&apos;s file) and returns the tile layer (that the tile is on) that the layer is associated with.\n"
      example: []
      syntax:
        content:
          CSharp: public TileLayer LayerInTileToTileLayer(Layer layer)
          VB: Public Function LayerInTileToTileLayer(layer As Layer) As TileLayer
        parameters:
        - id: layer
          type: Global.Layer
        return:
          type: Global.TileLayer
      overload: Global.Tile.LayerInTileToTileLayer*
    - id: Global.Tile.SubscribeToOnMoved(UnityAction{IntRect})
      commentId: M:Global.Tile.SubscribeToOnMoved(UnityAction{IntRect})
      language: CSharp
      name:
        CSharp: SubscribeToOnMoved(UnityAction<IntRect>)
        VB: SubscribeToOnMoved(UnityAction(Of IntRect))
      nameWithType:
        CSharp: Tile.SubscribeToOnMoved(UnityAction<IntRect>)
        VB: Tile.SubscribeToOnMoved(UnityAction(Of IntRect))
      qualifiedName:
        CSharp: Tile.SubscribeToOnMoved(UnityAction<IntRect>)
        VB: Tile.SubscribeToOnMoved(UnityAction(Of IntRect))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnMoved
        path: ''
        startLine: 15114
      syntax:
        content:
          CSharp: public void SubscribeToOnMoved(UnityAction<IntRect> call)
          VB: Public Sub SubscribeToOnMoved([call] As UnityAction(Of IntRect))
        parameters:
        - id: call
          type: Global.UnityAction{IntRect}
      overload: Global.Tile.SubscribeToOnMoved*
  - id: Global.TileOutlineManager
    commentId: T:Global.TileOutlineManager
    language: CSharp
    name:
      CSharp: TileOutlineManager
      VB: TileOutlineManager
    nameWithType:
      CSharp: TileOutlineManager
      VB: TileOutlineManager
    qualifiedName:
      CSharp: TileOutlineManager
      VB: TileOutlineManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: TileOutlineManager
      path: ''
      startLine: 15124
    syntax:
      content:
        CSharp: 'public class TileOutlineManager : MonoBehaviour'
        VB: Public Class TileOutlineManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.TileOutlineManager.RefreshTileOutlines
      commentId: M:Global.TileOutlineManager.RefreshTileOutlines
      language: CSharp
      name:
        CSharp: RefreshTileOutlines()
        VB: RefreshTileOutlines()
      nameWithType:
        CSharp: TileOutlineManager.RefreshTileOutlines()
        VB: TileOutlineManager.RefreshTileOutlines()
      qualifiedName:
        CSharp: TileOutlineManager.RefreshTileOutlines()
        VB: TileOutlineManager.RefreshTileOutlines()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RefreshTileOutlines
        path: ''
        startLine: 15148
      syntax:
        content:
          CSharp: public void RefreshTileOutlines()
          VB: Public Sub RefreshTileOutlines()
      overload: Global.TileOutlineManager.RefreshTileOutlines*
    - id: Global.TileOutlineManager.HideShowTileOutline(Tile,System.Boolean)
      commentId: M:Global.TileOutlineManager.HideShowTileOutline(Tile,System.Boolean)
      language: CSharp
      name:
        CSharp: HideShowTileOutline(Tile, bool)
        VB: HideShowTileOutline(Tile, Boolean)
      nameWithType:
        CSharp: TileOutlineManager.HideShowTileOutline(Tile, bool)
        VB: TileOutlineManager.HideShowTileOutline(Tile, Boolean)
      qualifiedName:
        CSharp: TileOutlineManager.HideShowTileOutline(Tile, bool)
        VB: TileOutlineManager.HideShowTileOutline(Tile, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: HideShowTileOutline
        path: ''
        startLine: 15162
      syntax:
        content:
          CSharp: public void HideShowTileOutline(Tile tile, bool show)
          VB: Public Sub HideShowTileOutline(tile As Tile, show As Boolean)
        parameters:
        - id: tile
          type: Global.Tile
        - id: show
          type: System.Boolean
      overload: Global.TileOutlineManager.HideShowTileOutline*
    - id: Global.TileOutlineManager.HideTileOutline(Tile)
      commentId: M:Global.TileOutlineManager.HideTileOutline(Tile)
      language: CSharp
      name:
        CSharp: HideTileOutline(Tile)
        VB: HideTileOutline(Tile)
      nameWithType:
        CSharp: TileOutlineManager.HideTileOutline(Tile)
        VB: TileOutlineManager.HideTileOutline(Tile)
      qualifiedName:
        CSharp: TileOutlineManager.HideTileOutline(Tile)
        VB: TileOutlineManager.HideTileOutline(Tile)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: HideTileOutline
        path: ''
        startLine: 15175
      syntax:
        content:
          CSharp: public void HideTileOutline(Tile tile)
          VB: Public Sub HideTileOutline(tile As Tile)
        parameters:
        - id: tile
          type: Global.Tile
      overload: Global.TileOutlineManager.HideTileOutline*
    - id: Global.TileOutlineManager.ShowTileOutline(Tile)
      commentId: M:Global.TileOutlineManager.ShowTileOutline(Tile)
      language: CSharp
      name:
        CSharp: ShowTileOutline(Tile)
        VB: ShowTileOutline(Tile)
      nameWithType:
        CSharp: TileOutlineManager.ShowTileOutline(Tile)
        VB: TileOutlineManager.ShowTileOutline(Tile)
      qualifiedName:
        CSharp: TileOutlineManager.ShowTileOutline(Tile)
        VB: TileOutlineManager.ShowTileOutline(Tile)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ShowTileOutline
        path: ''
        startLine: 15179
      syntax:
        content:
          CSharp: public void ShowTileOutline(Tile tile)
          VB: Public Sub ShowTileOutline(tile As Tile)
        parameters:
        - id: tile
          type: Global.Tile
      overload: Global.TileOutlineManager.ShowTileOutline*
  - id: Global.Tileset
    commentId: T:Global.Tileset
    language: CSharp
    name:
      CSharp: Tileset
      VB: Tileset
    nameWithType:
      CSharp: Tileset
      VB: Tileset
    qualifiedName:
      CSharp: Tileset
      VB: Tileset
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Tileset
      path: ''
      startLine: 15189
    syntax:
      content:
        CSharp: public class Tileset
        VB: Public Class Tileset
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.Tileset.tilesetName
      commentId: P:Global.Tileset.tilesetName
      language: CSharp
      name:
        CSharp: tilesetName
        VB: tilesetName
      nameWithType:
        CSharp: Tileset.tilesetName
        VB: Tileset.tilesetName
      qualifiedName:
        CSharp: Tileset.tilesetName
        VB: Tileset.tilesetName
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: tilesetName
        path: ''
        startLine: 15191
      syntax:
        content:
          CSharp: public string tilesetName { get; }
          VB: Public Property tilesetName As String
        parameters: []
        return:
          type: System.String
      overload: Global.Tileset.tilesetName*
    - id: Global.Tileset.Count
      commentId: P:Global.Tileset.Count
      language: CSharp
      name:
        CSharp: Count
        VB: Count
      nameWithType:
        CSharp: Tileset.Count
        VB: Tileset.Count
      qualifiedName:
        CSharp: Tileset.Count
        VB: Tileset.Count
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Count
        path: ''
        startLine: 15195
      syntax:
        content:
          CSharp: public int Count { get; }
          VB: Public ReadOnly Property Count As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.Tileset.Count*
    - id: Global.Tileset.#ctor(System.String)
      commentId: M:Global.Tileset.#ctor(System.String)
      language: CSharp
      name:
        CSharp: Tileset(string)
        VB: New(String)
      nameWithType:
        CSharp: Tileset.Tileset(string)
        VB: Tileset.New(String)
      qualifiedName:
        CSharp: Tileset.Tileset(string)
        VB: Tileset.New(String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 15201
      syntax:
        content:
          CSharp: public Tileset(string name)
          VB: Public Sub New(name As String)
        parameters:
        - id: name
          type: System.String
      overload: Global.Tileset.#ctor*
    - id: Global.Tileset.#ctor(System.String,System.Collections.Generic.List{File})
      commentId: M:Global.Tileset.#ctor(System.String,System.Collections.Generic.List{File})
      language: CSharp
      name:
        CSharp: Tileset(string, List<File>)
        VB: New(String, List(Of File))
      nameWithType:
        CSharp: Tileset.Tileset(string, List<File>)
        VB: Tileset.New(String, List(Of File))
      qualifiedName:
        CSharp: Tileset.Tileset(string, System.Collections.Generic.List<File>)
        VB: Tileset.New(String, System.Collections.Generic.List(Of File))
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 15203
      syntax:
        content:
          CSharp: public Tileset(string name, List<File> tiles)
          VB: Public Sub New(name As String, tiles As List(Of File))
        parameters:
        - id: name
          type: System.String
        - id: tiles
          type: System.Collections.Generic.List{File}
      overload: Global.Tileset.#ctor*
    - id: Global.Tileset.AddTile(File)
      commentId: M:Global.Tileset.AddTile(File)
      language: CSharp
      name:
        CSharp: AddTile(File)
        VB: AddTile(File)
      nameWithType:
        CSharp: Tileset.AddTile(File)
        VB: Tileset.AddTile(File)
      qualifiedName:
        CSharp: Tileset.AddTile(File)
        VB: Tileset.AddTile(File)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddTile
        path: ''
        startLine: 15210
      syntax:
        content:
          CSharp: public void AddTile(File tile)
          VB: Public Sub AddTile(tile As File)
        parameters:
        - id: tile
          type: Global.File
      overload: Global.Tileset.AddTile*
    - id: Global.Tileset.RemoveTile(File)
      commentId: M:Global.Tileset.RemoveTile(File)
      language: CSharp
      name:
        CSharp: RemoveTile(File)
        VB: RemoveTile(File)
      nameWithType:
        CSharp: Tileset.RemoveTile(File)
        VB: Tileset.RemoveTile(File)
      qualifiedName:
        CSharp: Tileset.RemoveTile(File)
        VB: Tileset.RemoveTile(File)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RemoveTile
        path: ''
        startLine: 15217
      syntax:
        content:
          CSharp: public bool RemoveTile(File tile)
          VB: Public Function RemoveTile(tile As File) As Boolean
        parameters:
        - id: tile
          type: Global.File
        return:
          type: System.Boolean
      overload: Global.Tileset.RemoveTile*
  - id: Global.TilesetManager
    commentId: T:Global.TilesetManager
    language: CSharp
    name:
      CSharp: TilesetManager
      VB: TilesetManager
    nameWithType:
      CSharp: TilesetManager
      VB: TilesetManager
    qualifiedName:
      CSharp: TilesetManager
      VB: TilesetManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: TilesetManager
      path: ''
      startLine: 15228
    syntax:
      content:
        CSharp: 'public class TilesetManager : MonoBehaviour'
        VB: Public Class TilesetManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.TilesetManager.SubscribeToOnTileIconSelected(UnityAction{File})
      commentId: M:Global.TilesetManager.SubscribeToOnTileIconSelected(UnityAction{File})
      language: CSharp
      name:
        CSharp: SubscribeToOnTileIconSelected(UnityAction<File>)
        VB: SubscribeToOnTileIconSelected(UnityAction(Of File))
      nameWithType:
        CSharp: TilesetManager.SubscribeToOnTileIconSelected(UnityAction<File>)
        VB: TilesetManager.SubscribeToOnTileIconSelected(UnityAction(Of File))
      qualifiedName:
        CSharp: TilesetManager.SubscribeToOnTileIconSelected(UnityAction<File>)
        VB: TilesetManager.SubscribeToOnTileIconSelected(UnityAction(Of File))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnTileIconSelected
        path: ''
        startLine: 15252
      syntax:
        content:
          CSharp: public void SubscribeToOnTileIconSelected(UnityAction<File> call)
          VB: Public Sub SubscribeToOnTileIconSelected([call] As UnityAction(Of File))
        parameters:
        - id: call
          type: Global.UnityAction{File}
      overload: Global.TilesetManager.SubscribeToOnTileIconSelected*
  - id: Global.UIAnchorPoint
    commentId: T:Global.UIAnchorPoint
    language: CSharp
    name:
      CSharp: UIAnchorPoint
      VB: UIAnchorPoint
    nameWithType:
      CSharp: UIAnchorPoint
      VB: UIAnchorPoint
    qualifiedName:
      CSharp: UIAnchorPoint
      VB: UIAnchorPoint
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIAnchorPoint
      path: ''
      startLine: 15262
    syntax:
      content:
        CSharp: public enum UIAnchorPoint
        VB: Public Enum UIAnchorPoint
    items:
    - id: Global.UIAnchorPoint.topLeft
      commentId: F:Global.UIAnchorPoint.topLeft
      language: CSharp
      name:
        CSharp: topLeft
        VB: topLeft
      nameWithType:
        CSharp: UIAnchorPoint.topLeft
        VB: UIAnchorPoint.topLeft
      qualifiedName:
        CSharp: UIAnchorPoint.topLeft
        VB: UIAnchorPoint.topLeft
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: topLeft
        path: ''
        startLine: 15264
      syntax:
        content:
          CSharp: topLeft = 0
          VB: topLeft = 0
        return:
          type: Global.UIAnchorPoint
    - id: Global.UIAnchorPoint.topCentre
      commentId: F:Global.UIAnchorPoint.topCentre
      language: CSharp
      name:
        CSharp: topCentre
        VB: topCentre
      nameWithType:
        CSharp: UIAnchorPoint.topCentre
        VB: UIAnchorPoint.topCentre
      qualifiedName:
        CSharp: UIAnchorPoint.topCentre
        VB: UIAnchorPoint.topCentre
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: topCentre
        path: ''
        startLine: 15265
      syntax:
        content:
          CSharp: topCentre = 1
          VB: topCentre = 1
        return:
          type: Global.UIAnchorPoint
    - id: Global.UIAnchorPoint.topRight
      commentId: F:Global.UIAnchorPoint.topRight
      language: CSharp
      name:
        CSharp: topRight
        VB: topRight
      nameWithType:
        CSharp: UIAnchorPoint.topRight
        VB: UIAnchorPoint.topRight
      qualifiedName:
        CSharp: UIAnchorPoint.topRight
        VB: UIAnchorPoint.topRight
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: topRight
        path: ''
        startLine: 15266
      syntax:
        content:
          CSharp: topRight = 2
          VB: topRight = 2
        return:
          type: Global.UIAnchorPoint
    - id: Global.UIAnchorPoint.leftCentre
      commentId: F:Global.UIAnchorPoint.leftCentre
      language: CSharp
      name:
        CSharp: leftCentre
        VB: leftCentre
      nameWithType:
        CSharp: UIAnchorPoint.leftCentre
        VB: UIAnchorPoint.leftCentre
      qualifiedName:
        CSharp: UIAnchorPoint.leftCentre
        VB: UIAnchorPoint.leftCentre
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: leftCentre
        path: ''
        startLine: 15267
      syntax:
        content:
          CSharp: leftCentre = 3
          VB: leftCentre = 3
        return:
          type: Global.UIAnchorPoint
    - id: Global.UIAnchorPoint.centre
      commentId: F:Global.UIAnchorPoint.centre
      language: CSharp
      name:
        CSharp: centre
        VB: centre
      nameWithType:
        CSharp: UIAnchorPoint.centre
        VB: UIAnchorPoint.centre
      qualifiedName:
        CSharp: UIAnchorPoint.centre
        VB: UIAnchorPoint.centre
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: centre
        path: ''
        startLine: 15268
      syntax:
        content:
          CSharp: centre = 4
          VB: centre = 4
        return:
          type: Global.UIAnchorPoint
    - id: Global.UIAnchorPoint.rightCentre
      commentId: F:Global.UIAnchorPoint.rightCentre
      language: CSharp
      name:
        CSharp: rightCentre
        VB: rightCentre
      nameWithType:
        CSharp: UIAnchorPoint.rightCentre
        VB: UIAnchorPoint.rightCentre
      qualifiedName:
        CSharp: UIAnchorPoint.rightCentre
        VB: UIAnchorPoint.rightCentre
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: rightCentre
        path: ''
        startLine: 15269
      syntax:
        content:
          CSharp: rightCentre = 5
          VB: rightCentre = 5
        return:
          type: Global.UIAnchorPoint
    - id: Global.UIAnchorPoint.bottomLeft
      commentId: F:Global.UIAnchorPoint.bottomLeft
      language: CSharp
      name:
        CSharp: bottomLeft
        VB: bottomLeft
      nameWithType:
        CSharp: UIAnchorPoint.bottomLeft
        VB: UIAnchorPoint.bottomLeft
      qualifiedName:
        CSharp: UIAnchorPoint.bottomLeft
        VB: UIAnchorPoint.bottomLeft
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: bottomLeft
        path: ''
        startLine: 15270
      syntax:
        content:
          CSharp: bottomLeft = 6
          VB: bottomLeft = 6
        return:
          type: Global.UIAnchorPoint
    - id: Global.UIAnchorPoint.bottomCentre
      commentId: F:Global.UIAnchorPoint.bottomCentre
      language: CSharp
      name:
        CSharp: bottomCentre
        VB: bottomCentre
      nameWithType:
        CSharp: UIAnchorPoint.bottomCentre
        VB: UIAnchorPoint.bottomCentre
      qualifiedName:
        CSharp: UIAnchorPoint.bottomCentre
        VB: UIAnchorPoint.bottomCentre
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: bottomCentre
        path: ''
        startLine: 15271
      syntax:
        content:
          CSharp: bottomCentre = 7
          VB: bottomCentre = 7
        return:
          type: Global.UIAnchorPoint
    - id: Global.UIAnchorPoint.bottomRight
      commentId: F:Global.UIAnchorPoint.bottomRight
      language: CSharp
      name:
        CSharp: bottomRight
        VB: bottomRight
      nameWithType:
        CSharp: UIAnchorPoint.bottomRight
        VB: UIAnchorPoint.bottomRight
      qualifiedName:
        CSharp: UIAnchorPoint.bottomRight
        VB: UIAnchorPoint.bottomRight
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: bottomRight
        path: ''
        startLine: 15272
      syntax:
        content:
          CSharp: bottomRight = 8
          VB: bottomRight = 8
        return:
          type: Global.UIAnchorPoint
  - id: Global.UIButton
    commentId: T:Global.UIButton
    language: CSharp
    name:
      CSharp: UIButton
      VB: UIButton
    nameWithType:
      CSharp: UIButton
      VB: UIButton
    qualifiedName:
      CSharp: UIButton
      VB: UIButton
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIButton
      path: ''
      startLine: 15281
    syntax:
      content:
        CSharp: 'public class UIButton : MonoBehaviour'
        VB: Public Class UIButton Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UIButton.width
      commentId: P:Global.UIButton.width
      language: CSharp
      name:
        CSharp: width
        VB: width
      nameWithType:
        CSharp: UIButton.width
        VB: UIButton.width
      qualifiedName:
        CSharp: UIButton.width
        VB: UIButton.width
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: width
        path: ''
        startLine: 15289
      syntax:
        content:
          CSharp: public float width { get; set; }
          VB: Public Property width As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.UIButton.width*
    - id: Global.UIButton.height
      commentId: P:Global.UIButton.height
      language: CSharp
      name:
        CSharp: height
        VB: height
      nameWithType:
        CSharp: UIButton.height
        VB: UIButton.height
      qualifiedName:
        CSharp: UIButton.height
        VB: UIButton.height
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: height
        path: ''
        startLine: 15304
      syntax:
        content:
          CSharp: public float height { get; set; }
          VB: Public Property height As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.UIButton.height*
    - id: Global.UIButton.image
      commentId: P:Global.UIButton.image
      language: CSharp
      name:
        CSharp: image
        VB: image
      nameWithType:
        CSharp: UIButton.image
        VB: UIButton.image
      qualifiedName:
        CSharp: UIButton.image
        VB: UIButton.image
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: image
        path: ''
        startLine: 15320
      syntax:
        content:
          CSharp: public Sprite image { get; }
          VB: Public Property image As Sprite
        parameters: []
        return:
          type: Global.Sprite
      overload: Global.UIButton.image*
    - id: Global.UIButton.hoverImage
      commentId: P:Global.UIButton.hoverImage
      language: CSharp
      name:
        CSharp: hoverImage
        VB: hoverImage
      nameWithType:
        CSharp: UIButton.hoverImage
        VB: UIButton.hoverImage
      qualifiedName:
        CSharp: UIButton.hoverImage
        VB: UIButton.hoverImage
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hoverImage
        path: ''
        startLine: 15333
      syntax:
        content:
          CSharp: public Sprite hoverImage { get; }
          VB: Public Property hoverImage As Sprite
        parameters: []
        return:
          type: Global.Sprite
      overload: Global.UIButton.hoverImage*
    - id: Global.UIButton.pressedImage
      commentId: P:Global.UIButton.pressedImage
      language: CSharp
      name:
        CSharp: pressedImage
        VB: pressedImage
      nameWithType:
        CSharp: UIButton.pressedImage
        VB: UIButton.pressedImage
      qualifiedName:
        CSharp: UIButton.pressedImage
        VB: UIButton.pressedImage
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: pressedImage
        path: ''
        startLine: 15346
      syntax:
        content:
          CSharp: public Sprite pressedImage { get; }
          VB: Public Property pressedImage As Sprite
        parameters: []
        return:
          type: Global.Sprite
      overload: Global.UIButton.pressedImage*
    - id: Global.UIButton.backgroundColour
      commentId: F:Global.UIButton.backgroundColour
      language: CSharp
      name:
        CSharp: backgroundColour
        VB: backgroundColour
      nameWithType:
        CSharp: UIButton.backgroundColour
        VB: UIButton.backgroundColour
      qualifiedName:
        CSharp: UIButton.backgroundColour
        VB: UIButton.backgroundColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: backgroundColour
        path: ''
        startLine: 15361
      syntax:
        content:
          CSharp: public Color backgroundColour
          VB: Public backgroundColour As Color
        return:
          type: Global.Color
    - id: Global.UIButton.backgroundHoverColour
      commentId: F:Global.UIButton.backgroundHoverColour
      language: CSharp
      name:
        CSharp: backgroundHoverColour
        VB: backgroundHoverColour
      nameWithType:
        CSharp: UIButton.backgroundHoverColour
        VB: UIButton.backgroundHoverColour
      qualifiedName:
        CSharp: UIButton.backgroundHoverColour
        VB: UIButton.backgroundHoverColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: backgroundHoverColour
        path: ''
        startLine: 15362
      syntax:
        content:
          CSharp: public Color backgroundHoverColour
          VB: Public backgroundHoverColour As Color
        return:
          type: Global.Color
    - id: Global.UIButton.backgroundPressedColour
      commentId: F:Global.UIButton.backgroundPressedColour
      language: CSharp
      name:
        CSharp: backgroundPressedColour
        VB: backgroundPressedColour
      nameWithType:
        CSharp: UIButton.backgroundPressedColour
        VB: UIButton.backgroundPressedColour
      qualifiedName:
        CSharp: UIButton.backgroundPressedColour
        VB: UIButton.backgroundPressedColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: backgroundPressedColour
        path: ''
        startLine: 15363
      syntax:
        content:
          CSharp: public Color backgroundPressedColour
          VB: Public backgroundPressedColour As Color
        return:
          type: Global.Color
    - id: Global.UIButton.isPressed
      commentId: P:Global.UIButton.isPressed
      language: CSharp
      name:
        CSharp: isPressed
        VB: isPressed
      nameWithType:
        CSharp: UIButton.isPressed
        VB: UIButton.isPressed
      qualifiedName:
        CSharp: UIButton.isPressed
        VB: UIButton.isPressed
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: isPressed
        path: ''
        startLine: 15396
      syntax:
        content:
          CSharp: public bool isPressed { get; }
          VB: Public ReadOnly Property isPressed As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.UIButton.isPressed*
    - id: Global.UIButton.UpdateDisplay
      commentId: M:Global.UIButton.UpdateDisplay
      language: CSharp
      name:
        CSharp: UpdateDisplay()
        VB: UpdateDisplay()
      nameWithType:
        CSharp: UIButton.UpdateDisplay()
        VB: UIButton.UpdateDisplay()
      qualifiedName:
        CSharp: UIButton.UpdateDisplay()
        VB: UIButton.UpdateDisplay()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UpdateDisplay
        path: ''
        startLine: 15445
      syntax:
        content:
          CSharp: public void UpdateDisplay()
          VB: Public Sub UpdateDisplay()
      overload: Global.UIButton.UpdateDisplay*
    - id: Global.UIButton.Press
      commentId: M:Global.UIButton.Press
      language: CSharp
      name:
        CSharp: Press()
        VB: Press()
      nameWithType:
        CSharp: UIButton.Press()
        VB: UIButton.Press()
      qualifiedName:
        CSharp: UIButton.Press()
        VB: UIButton.Press()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Press
        path: ''
        startLine: 15488
      syntax:
        content:
          CSharp: public void Press()
          VB: Public Sub Press()
      overload: Global.UIButton.Press*
    - id: Global.UIButton.RightClick
      commentId: M:Global.UIButton.RightClick
      language: CSharp
      name:
        CSharp: RightClick()
        VB: RightClick()
      nameWithType:
        CSharp: UIButton.RightClick()
        VB: UIButton.RightClick()
      qualifiedName:
        CSharp: UIButton.RightClick()
        VB: UIButton.RightClick()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RightClick
        path: ''
        startLine: 15501
      syntax:
        content:
          CSharp: public void RightClick()
          VB: Public Sub RightClick()
      overload: Global.UIButton.RightClick*
    - id: Global.UIButton.SetImages(Sprite,Sprite,Sprite)
      commentId: M:Global.UIButton.SetImages(Sprite,Sprite,Sprite)
      language: CSharp
      name:
        CSharp: SetImages(Sprite, Sprite, Sprite)
        VB: SetImages(Sprite, Sprite, Sprite)
      nameWithType:
        CSharp: UIButton.SetImages(Sprite, Sprite, Sprite)
        VB: UIButton.SetImages(Sprite, Sprite, Sprite)
      qualifiedName:
        CSharp: UIButton.SetImages(Sprite, Sprite, Sprite)
        VB: UIButton.SetImages(Sprite, Sprite, Sprite)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetImages
        path: ''
        startLine: 15556
      syntax:
        content:
          CSharp: public void SetImages(Sprite image, Sprite hoverImage, Sprite pressedImage)
          VB: Public Sub SetImages(image As Sprite, hoverImage As Sprite, pressedImage As Sprite)
        parameters:
        - id: image
          type: Global.Sprite
        - id: hoverImage
          type: Global.Sprite
        - id: pressedImage
          type: Global.Sprite
      overload: Global.UIButton.SetImages*
    - id: Global.UIButton.SetText(System.String)
      commentId: M:Global.UIButton.SetText(System.String)
      language: CSharp
      name:
        CSharp: SetText(string)
        VB: SetText(String)
      nameWithType:
        CSharp: UIButton.SetText(string)
        VB: UIButton.SetText(String)
      qualifiedName:
        CSharp: UIButton.SetText(string)
        VB: UIButton.SetText(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetText
        path: ''
        startLine: 15576
      syntax:
        content:
          CSharp: public void SetText(string text)
          VB: Public Sub SetText(text As String)
        parameters:
        - id: text
          type: System.String
      overload: Global.UIButton.SetText*
    - id: Global.UIButton.SetSortingLayer(System.String,System.Int32)
      commentId: M:Global.UIButton.SetSortingLayer(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: SetSortingLayer(string, int)
        VB: SetSortingLayer(String, Integer)
      nameWithType:
        CSharp: UIButton.SetSortingLayer(string, int)
        VB: UIButton.SetSortingLayer(String, Integer)
      qualifiedName:
        CSharp: UIButton.SetSortingLayer(string, int)
        VB: UIButton.SetSortingLayer(String, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetSortingLayer
        path: ''
        startLine: 15583
      syntax:
        content:
          CSharp: public void SetSortingLayer(string sortingLayer, int sortingOrder)
          VB: Public Sub SetSortingLayer(sortingLayer As String, sortingOrder As Integer)
        parameters:
        - id: sortingLayer
          type: System.String
        - id: sortingOrder
          type: System.Int32
      overload: Global.UIButton.SetSortingLayer*
    - id: Global.UIButton.SetSortingLayer(System.String)
      commentId: M:Global.UIButton.SetSortingLayer(System.String)
      language: CSharp
      name:
        CSharp: SetSortingLayer(string)
        VB: SetSortingLayer(String)
      nameWithType:
        CSharp: UIButton.SetSortingLayer(string)
        VB: UIButton.SetSortingLayer(String)
      qualifiedName:
        CSharp: UIButton.SetSortingLayer(string)
        VB: UIButton.SetSortingLayer(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetSortingLayer
        path: ''
        startLine: 15588
      syntax:
        content:
          CSharp: public void SetSortingLayer(string sortingLayer)
          VB: Public Sub SetSortingLayer(sortingLayer As String)
        parameters:
        - id: sortingLayer
          type: System.String
      overload: Global.UIButton.SetSortingLayer*
    - id: Global.UIButton.SetSortingOrder(System.Int32)
      commentId: M:Global.UIButton.SetSortingOrder(System.Int32)
      language: CSharp
      name:
        CSharp: SetSortingOrder(int)
        VB: SetSortingOrder(Integer)
      nameWithType:
        CSharp: UIButton.SetSortingOrder(int)
        VB: UIButton.SetSortingOrder(Integer)
      qualifiedName:
        CSharp: UIButton.SetSortingOrder(int)
        VB: UIButton.SetSortingOrder(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetSortingOrder
        path: ''
        startLine: 15592
      syntax:
        content:
          CSharp: public void SetSortingOrder(int sortingOrder)
          VB: Public Sub SetSortingOrder(sortingOrder As Integer)
        parameters:
        - id: sortingOrder
          type: System.Int32
      overload: Global.UIButton.SetSortingOrder*
    - id: Global.UIButton.SubscribeToIdle(UnityAction)
      commentId: M:Global.UIButton.SubscribeToIdle(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToIdle(UnityAction)
        VB: SubscribeToIdle(UnityAction)
      nameWithType:
        CSharp: UIButton.SubscribeToIdle(UnityAction)
        VB: UIButton.SubscribeToIdle(UnityAction)
      qualifiedName:
        CSharp: UIButton.SubscribeToIdle(UnityAction)
        VB: UIButton.SubscribeToIdle(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToIdle
        path: ''
        startLine: 15597
      syntax:
        content:
          CSharp: public void SubscribeToIdle(UnityAction call)
          VB: Public Sub SubscribeToIdle([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIButton.SubscribeToIdle*
    - id: Global.UIButton.SubscribeToHover(UnityAction)
      commentId: M:Global.UIButton.SubscribeToHover(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToHover(UnityAction)
        VB: SubscribeToHover(UnityAction)
      nameWithType:
        CSharp: UIButton.SubscribeToHover(UnityAction)
        VB: UIButton.SubscribeToHover(UnityAction)
      qualifiedName:
        CSharp: UIButton.SubscribeToHover(UnityAction)
        VB: UIButton.SubscribeToHover(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToHover
        path: ''
        startLine: 15601
      syntax:
        content:
          CSharp: public void SubscribeToHover(UnityAction call)
          VB: Public Sub SubscribeToHover([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIButton.SubscribeToHover*
    - id: Global.UIButton.SubscribeToClick(UnityAction)
      commentId: M:Global.UIButton.SubscribeToClick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToClick(UnityAction)
        VB: SubscribeToClick(UnityAction)
      nameWithType:
        CSharp: UIButton.SubscribeToClick(UnityAction)
        VB: UIButton.SubscribeToClick(UnityAction)
      qualifiedName:
        CSharp: UIButton.SubscribeToClick(UnityAction)
        VB: UIButton.SubscribeToClick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToClick
        path: ''
        startLine: 15605
      syntax:
        content:
          CSharp: public void SubscribeToClick(UnityAction call)
          VB: Public Sub SubscribeToClick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIButton.SubscribeToClick*
    - id: Global.UIButton.SubscribeToLeftClick(UnityAction)
      commentId: M:Global.UIButton.SubscribeToLeftClick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToLeftClick(UnityAction)
        VB: SubscribeToLeftClick(UnityAction)
      nameWithType:
        CSharp: UIButton.SubscribeToLeftClick(UnityAction)
        VB: UIButton.SubscribeToLeftClick(UnityAction)
      qualifiedName:
        CSharp: UIButton.SubscribeToLeftClick(UnityAction)
        VB: UIButton.SubscribeToLeftClick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToLeftClick
        path: ''
        startLine: 15609
      syntax:
        content:
          CSharp: public void SubscribeToLeftClick(UnityAction call)
          VB: Public Sub SubscribeToLeftClick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIButton.SubscribeToLeftClick*
    - id: Global.UIButton.SubscribeToRightClick(UnityAction)
      commentId: M:Global.UIButton.SubscribeToRightClick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToRightClick(UnityAction)
        VB: SubscribeToRightClick(UnityAction)
      nameWithType:
        CSharp: UIButton.SubscribeToRightClick(UnityAction)
        VB: UIButton.SubscribeToRightClick(UnityAction)
      qualifiedName:
        CSharp: UIButton.SubscribeToRightClick(UnityAction)
        VB: UIButton.SubscribeToRightClick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToRightClick
        path: ''
        startLine: 15613
      syntax:
        content:
          CSharp: public void SubscribeToRightClick(UnityAction call)
          VB: Public Sub SubscribeToRightClick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIButton.SubscribeToRightClick*
  - id: Global.CollapsedState
    commentId: T:Global.CollapsedState
    language: CSharp
    name:
      CSharp: CollapsedState
      VB: CollapsedState
    nameWithType:
      CSharp: CollapsedState
      VB: CollapsedState
    qualifiedName:
      CSharp: CollapsedState
      VB: CollapsedState
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: CollapsedState
      path: ''
      startLine: 15623
    syntax:
      content:
        CSharp: public enum CollapsedState
        VB: Public Enum CollapsedState
    items:
    - id: Global.CollapsedState.Uncollapsed
      commentId: F:Global.CollapsedState.Uncollapsed
      language: CSharp
      name:
        CSharp: Uncollapsed
        VB: Uncollapsed
      nameWithType:
        CSharp: CollapsedState.Uncollapsed
        VB: CollapsedState.Uncollapsed
      qualifiedName:
        CSharp: CollapsedState.Uncollapsed
        VB: CollapsedState.Uncollapsed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Uncollapsed
        path: ''
        startLine: 15625
      syntax:
        content:
          CSharp: Uncollapsed = 0
          VB: Uncollapsed = 0
        return:
          type: Global.CollapsedState
    - id: Global.CollapsedState.Collapsed
      commentId: F:Global.CollapsedState.Collapsed
      language: CSharp
      name:
        CSharp: Collapsed
        VB: Collapsed
      nameWithType:
        CSharp: CollapsedState.Collapsed
        VB: CollapsedState.Collapsed
      qualifiedName:
        CSharp: CollapsedState.Collapsed
        VB: CollapsedState.Collapsed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Collapsed
        path: ''
        startLine: 15626
      syntax:
        content:
          CSharp: Collapsed = 1
          VB: Collapsed = 1
        return:
          type: Global.CollapsedState
  - id: Global.UICollapser
    commentId: T:Global.UICollapser
    language: CSharp
    name:
      CSharp: UICollapser
      VB: UICollapser
    nameWithType:
      CSharp: UICollapser
      VB: UICollapser
    qualifiedName:
      CSharp: UICollapser
      VB: UICollapser
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UICollapser
      path: ''
      startLine: 15629
    syntax:
      content:
        CSharp: 'public class UICollapser : MonoBehaviour'
        VB: Public Class UICollapser Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UICollapser.Collapse
      commentId: M:Global.UICollapser.Collapse
      language: CSharp
      name:
        CSharp: Collapse()
        VB: Collapse()
      nameWithType:
        CSharp: UICollapser.Collapse()
        VB: UICollapser.Collapse()
      qualifiedName:
        CSharp: UICollapser.Collapse()
        VB: UICollapser.Collapse()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Collapse
        path: ''
        startLine: 15686
      syntax:
        content:
          CSharp: public void Collapse()
          VB: Public Sub Collapse()
      overload: Global.UICollapser.Collapse*
    - id: Global.UICollapser.Uncollapse
      commentId: M:Global.UICollapser.Uncollapse
      language: CSharp
      name:
        CSharp: Uncollapse()
        VB: Uncollapse()
      nameWithType:
        CSharp: UICollapser.Uncollapse()
        VB: UICollapser.Uncollapse()
      qualifiedName:
        CSharp: UICollapser.Uncollapse()
        VB: UICollapser.Uncollapse()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Uncollapse
        path: ''
        startLine: 15690
      syntax:
        content:
          CSharp: public void Uncollapse()
          VB: Public Sub Uncollapse()
      overload: Global.UICollapser.Uncollapse*
    - id: Global.UICollapser.SetCollapsed(CollapsedState)
      commentId: M:Global.UICollapser.SetCollapsed(CollapsedState)
      language: CSharp
      name:
        CSharp: SetCollapsed(CollapsedState)
        VB: SetCollapsed(CollapsedState)
      nameWithType:
        CSharp: UICollapser.SetCollapsed(CollapsedState)
        VB: UICollapser.SetCollapsed(CollapsedState)
      qualifiedName:
        CSharp: UICollapser.SetCollapsed(CollapsedState)
        VB: UICollapser.SetCollapsed(CollapsedState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetCollapsed
        path: ''
        startLine: 15694
      syntax:
        content:
          CSharp: public void SetCollapsed(CollapsedState collapsedState)
          VB: Public Sub SetCollapsed(collapsedState As CollapsedState)
        parameters:
        - id: collapsedState
          type: Global.CollapsedState
      overload: Global.UICollapser.SetCollapsed*
  - id: Global.UIColourField
    commentId: T:Global.UIColourField
    language: CSharp
    name:
      CSharp: UIColourField
      VB: UIColourField
    nameWithType:
      CSharp: UIColourField
      VB: UIColourField
    qualifiedName:
      CSharp: UIColourField
      VB: UIColourField
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIColourField
      path: ''
      startLine: 15750
    syntax:
      content:
        CSharp: 'public class UIColourField : MonoBehaviour'
        VB: Public Class UIColourField Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UIColourField.colour
      commentId: P:Global.UIColourField.colour
      language: CSharp
      name:
        CSharp: colour
        VB: colour
      nameWithType:
        CSharp: UIColourField.colour
        VB: UIColourField.colour
      qualifiedName:
        CSharp: UIColourField.colour
        VB: UIColourField.colour
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: colour
        path: ''
        startLine: 15755
      syntax:
        content:
          CSharp: public Color colour { get; }
          VB: Public ReadOnly Property colour As Color
        parameters: []
        return:
          type: Global.Color
      overload: Global.UIColourField.colour*
    - id: Global.UIColourField.outlineThickness
      commentId: P:Global.UIColourField.outlineThickness
      language: CSharp
      name:
        CSharp: outlineThickness
        VB: outlineThickness
      nameWithType:
        CSharp: UIColourField.outlineThickness
        VB: UIColourField.outlineThickness
      qualifiedName:
        CSharp: UIColourField.outlineThickness
        VB: UIColourField.outlineThickness
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: outlineThickness
        path: ''
        startLine: 15765
      syntax:
        content:
          CSharp: public float outlineThickness { get; }
          VB: Public ReadOnly Property outlineThickness As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.UIColourField.outlineThickness*
    - id: Global.UIColourField.colourPickerOpen
      commentId: P:Global.UIColourField.colourPickerOpen
      language: CSharp
      name:
        CSharp: colourPickerOpen
        VB: colourPickerOpen
      nameWithType:
        CSharp: UIColourField.colourPickerOpen
        VB: UIColourField.colourPickerOpen
      qualifiedName:
        CSharp: UIColourField.colourPickerOpen
        VB: UIColourField.colourPickerOpen
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: colourPickerOpen
        path: ''
        startLine: 15773
      syntax:
        content:
          CSharp: public bool colourPickerOpen { get; }
          VB: Public Property colourPickerOpen As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.UIColourField.colourPickerOpen*
    - id: Global.UIColourField.SetColour(Color)
      commentId: M:Global.UIColourField.SetColour(Color)
      language: CSharp
      name:
        CSharp: SetColour(Color)
        VB: SetColour(Color)
      nameWithType:
        CSharp: UIColourField.SetColour(Color)
        VB: UIColourField.SetColour(Color)
      qualifiedName:
        CSharp: UIColourField.SetColour(Color)
        VB: UIColourField.SetColour(Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetColour
        path: ''
        startLine: 15870
      syntax:
        content:
          CSharp: public void SetColour(Color colour)
          VB: Public Sub SetColour(colour As Color)
        parameters:
        - id: colour
          type: Global.Color
      overload: Global.UIColourField.SetColour*
    - id: Global.UIColourField.OpenColourPicker
      commentId: M:Global.UIColourField.OpenColourPicker
      language: CSharp
      name:
        CSharp: OpenColourPicker()
        VB: OpenColourPicker()
      nameWithType:
        CSharp: UIColourField.OpenColourPicker()
        VB: UIColourField.OpenColourPicker()
      qualifiedName:
        CSharp: UIColourField.OpenColourPicker()
        VB: UIColourField.OpenColourPicker()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenColourPicker
        path: ''
        startLine: 15875
      syntax:
        content:
          CSharp: public void OpenColourPicker()
          VB: Public Sub OpenColourPicker()
      overload: Global.UIColourField.OpenColourPicker*
    - id: Global.UIColourField.CloseColourPicker
      commentId: M:Global.UIColourField.CloseColourPicker
      language: CSharp
      name:
        CSharp: CloseColourPicker()
        VB: CloseColourPicker()
      nameWithType:
        CSharp: UIColourField.CloseColourPicker()
        VB: UIColourField.CloseColourPicker()
      qualifiedName:
        CSharp: UIColourField.CloseColourPicker()
        VB: UIColourField.CloseColourPicker()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CloseColourPicker
        path: ''
        startLine: 15883
      syntax:
        content:
          CSharp: public void CloseColourPicker()
          VB: Public Sub CloseColourPicker()
      overload: Global.UIColourField.CloseColourPicker*
    - id: Global.UIColourField.SubscribeToColourChange(UnityAction)
      commentId: M:Global.UIColourField.SubscribeToColourChange(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToColourChange(UnityAction)
        VB: SubscribeToColourChange(UnityAction)
      nameWithType:
        CSharp: UIColourField.SubscribeToColourChange(UnityAction)
        VB: UIColourField.SubscribeToColourChange(UnityAction)
      qualifiedName:
        CSharp: UIColourField.SubscribeToColourChange(UnityAction)
        VB: UIColourField.SubscribeToColourChange(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToColourChange
        path: ''
        startLine: 15891
      syntax:
        content:
          CSharp: public void SubscribeToColourChange(UnityAction call)
          VB: Public Sub SubscribeToColourChange([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIColourField.SubscribeToColourChange*
    - id: Global.UIColourField.SubscribeToColourPickerOpen(UnityAction)
      commentId: M:Global.UIColourField.SubscribeToColourPickerOpen(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToColourPickerOpen(UnityAction)
        VB: SubscribeToColourPickerOpen(UnityAction)
      nameWithType:
        CSharp: UIColourField.SubscribeToColourPickerOpen(UnityAction)
        VB: UIColourField.SubscribeToColourPickerOpen(UnityAction)
      qualifiedName:
        CSharp: UIColourField.SubscribeToColourPickerOpen(UnityAction)
        VB: UIColourField.SubscribeToColourPickerOpen(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToColourPickerOpen
        path: ''
        startLine: 15895
      syntax:
        content:
          CSharp: public void SubscribeToColourPickerOpen(UnityAction call)
          VB: Public Sub SubscribeToColourPickerOpen([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIColourField.SubscribeToColourPickerOpen*
    - id: Global.UIColourField.SubscribeToColourPickerClose(UnityAction)
      commentId: M:Global.UIColourField.SubscribeToColourPickerClose(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToColourPickerClose(UnityAction)
        VB: SubscribeToColourPickerClose(UnityAction)
      nameWithType:
        CSharp: UIColourField.SubscribeToColourPickerClose(UnityAction)
        VB: UIColourField.SubscribeToColourPickerClose(UnityAction)
      qualifiedName:
        CSharp: UIColourField.SubscribeToColourPickerClose(UnityAction)
        VB: UIColourField.SubscribeToColourPickerClose(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToColourPickerClose
        path: ''
        startLine: 15899
      syntax:
        content:
          CSharp: public void SubscribeToColourPickerClose(UnityAction call)
          VB: Public Sub SubscribeToColourPickerClose([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIColourField.SubscribeToColourPickerClose*
  - id: Global.UIColourFieldGroup
    commentId: T:Global.UIColourFieldGroup
    language: CSharp
    name:
      CSharp: UIColourFieldGroup
      VB: UIColourFieldGroup
    nameWithType:
      CSharp: UIColourFieldGroup
      VB: UIColourFieldGroup
    qualifiedName:
      CSharp: UIColourFieldGroup
      VB: UIColourFieldGroup
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIColourFieldGroup
      path: ''
      startLine: 15910
    syntax:
      content:
        CSharp: 'public class UIColourFieldGroup : MonoBehaviour'
        VB: Public Class UIColourFieldGroup Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UIColourFieldGroup.colourFields
      commentId: P:Global.UIColourFieldGroup.colourFields
      language: CSharp
      name:
        CSharp: colourFields
        VB: colourFields
      nameWithType:
        CSharp: UIColourFieldGroup.colourFields
        VB: UIColourFieldGroup.colourFields
      qualifiedName:
        CSharp: UIColourFieldGroup.colourFields
        VB: UIColourFieldGroup.colourFields
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: colourFields
        path: ''
        startLine: 15915
      syntax:
        content:
          CSharp: public List<UIColourField> colourFields { get; }
          VB: Public ReadOnly Property colourFields As List(Of UIColourField)
        parameters: []
        return:
          type: System.Collections.Generic.List{UIColourField}
      overload: Global.UIColourFieldGroup.colourFields*
    - id: Global.UIColourFieldGroup.currentOpenColourField
      commentId: P:Global.UIColourFieldGroup.currentOpenColourField
      language: CSharp
      name:
        CSharp: currentOpenColourField
        VB: currentOpenColourField
      nameWithType:
        CSharp: UIColourFieldGroup.currentOpenColourField
        VB: UIColourFieldGroup.currentOpenColourField
      qualifiedName:
        CSharp: UIColourFieldGroup.currentOpenColourField
        VB: UIColourFieldGroup.currentOpenColourField
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: currentOpenColourField
        path: ''
        startLine: 15923
      syntax:
        content:
          CSharp: public UIColourField currentOpenColourField { get; }
          VB: Public ReadOnly Property currentOpenColourField As UIColourField
        parameters: []
        return:
          type: Global.UIColourField
      overload: Global.UIColourFieldGroup.currentOpenColourField*
    - id: Global.UIColourFieldGroup.Count
      commentId: P:Global.UIColourFieldGroup.Count
      language: CSharp
      name:
        CSharp: Count
        VB: Count
      nameWithType:
        CSharp: UIColourFieldGroup.Count
        VB: UIColourFieldGroup.Count
      qualifiedName:
        CSharp: UIColourFieldGroup.Count
        VB: UIColourFieldGroup.Count
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Count
        path: ''
        startLine: 15938
      syntax:
        content:
          CSharp: public int Count { get; }
          VB: Public ReadOnly Property Count As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.UIColourFieldGroup.Count*
    - id: Global.UIColourFieldGroup.Add(UIColourField)
      commentId: M:Global.UIColourFieldGroup.Add(UIColourField)
      language: CSharp
      name:
        CSharp: Add(UIColourField)
        VB: Add(UIColourField)
      nameWithType:
        CSharp: UIColourFieldGroup.Add(UIColourField)
        VB: UIColourFieldGroup.Add(UIColourField)
      qualifiedName:
        CSharp: UIColourFieldGroup.Add(UIColourField)
        VB: UIColourFieldGroup.Add(UIColourField)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Add
        path: ''
        startLine: 15965
      syntax:
        content:
          CSharp: public bool Add(UIColourField colourField)
          VB: Public Function Add(colourField As UIColourField) As Boolean
        parameters:
        - id: colourField
          type: Global.UIColourField
        return:
          type: System.Boolean
      overload: Global.UIColourFieldGroup.Add*
    - id: Global.UIColourFieldGroup.Remove(UIColourField)
      commentId: M:Global.UIColourFieldGroup.Remove(UIColourField)
      language: CSharp
      name:
        CSharp: Remove(UIColourField)
        VB: Remove(UIColourField)
      nameWithType:
        CSharp: UIColourFieldGroup.Remove(UIColourField)
        VB: UIColourFieldGroup.Remove(UIColourField)
      qualifiedName:
        CSharp: UIColourFieldGroup.Remove(UIColourField)
        VB: UIColourFieldGroup.Remove(UIColourField)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Remove
        path: ''
        startLine: 15972
      syntax:
        content:
          CSharp: public bool Remove(UIColourField colourField)
          VB: Public Function Remove(colourField As UIColourField) As Boolean
        parameters:
        - id: colourField
          type: Global.UIColourField
        return:
          type: System.Boolean
      overload: Global.UIColourFieldGroup.Remove*
    - id: Global.UIColourFieldGroup.Contains(UIColourField)
      commentId: M:Global.UIColourFieldGroup.Contains(UIColourField)
      language: CSharp
      name:
        CSharp: Contains(UIColourField)
        VB: Contains(UIColourField)
      nameWithType:
        CSharp: UIColourFieldGroup.Contains(UIColourField)
        VB: UIColourFieldGroup.Contains(UIColourField)
      qualifiedName:
        CSharp: UIColourFieldGroup.Contains(UIColourField)
        VB: UIColourFieldGroup.Contains(UIColourField)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Contains
        path: ''
        startLine: 15981
      syntax:
        content:
          CSharp: public bool Contains(UIColourField colourField)
          VB: Public Function Contains(colourField As UIColourField) As Boolean
        parameters:
        - id: colourField
          type: Global.UIColourField
        return:
          type: System.Boolean
      overload: Global.UIColourFieldGroup.Contains*
    - id: Global.UIColourFieldGroup.Clear
      commentId: M:Global.UIColourFieldGroup.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: UIColourFieldGroup.Clear()
        VB: UIColourFieldGroup.Clear()
      qualifiedName:
        CSharp: UIColourFieldGroup.Clear()
        VB: UIColourFieldGroup.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Clear
        path: ''
        startLine: 15986
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear()
      overload: Global.UIColourFieldGroup.Clear*
    - id: Global.UIColourFieldGroup.DestroyColourFields
      commentId: M:Global.UIColourFieldGroup.DestroyColourFields
      language: CSharp
      name:
        CSharp: DestroyColourFields()
        VB: DestroyColourFields()
      nameWithType:
        CSharp: UIColourFieldGroup.DestroyColourFields()
        VB: UIColourFieldGroup.DestroyColourFields()
      qualifiedName:
        CSharp: UIColourFieldGroup.DestroyColourFields()
        VB: UIColourFieldGroup.DestroyColourFields()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DestroyColourFields
        path: ''
        startLine: 15991
      syntax:
        content:
          CSharp: public void DestroyColourFields()
          VB: Public Sub DestroyColourFields()
      overload: Global.UIColourFieldGroup.DestroyColourFields*
    - id: Global.UIColourFieldGroup.Opened(UIColourField)
      commentId: M:Global.UIColourFieldGroup.Opened(UIColourField)
      language: CSharp
      name:
        CSharp: Opened(UIColourField)
        VB: Opened(UIColourField)
      nameWithType:
        CSharp: UIColourFieldGroup.Opened(UIColourField)
        VB: UIColourFieldGroup.Opened(UIColourField)
      qualifiedName:
        CSharp: UIColourFieldGroup.Opened(UIColourField)
        VB: UIColourFieldGroup.Opened(UIColourField)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Opened
        path: ''
        startLine: 16001
      syntax:
        content:
          CSharp: public void Opened(UIColourField openedColourField)
          VB: Public Sub Opened(openedColourField As UIColourField)
        parameters:
        - id: openedColourField
          type: Global.UIColourField
      overload: Global.UIColourFieldGroup.Opened*
    - id: Global.UIColourFieldGroup.SubscribeToColourFieldOpen(UnityAction)
      commentId: M:Global.UIColourFieldGroup.SubscribeToColourFieldOpen(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToColourFieldOpen(UnityAction)
        VB: SubscribeToColourFieldOpen(UnityAction)
      nameWithType:
        CSharp: UIColourFieldGroup.SubscribeToColourFieldOpen(UnityAction)
        VB: UIColourFieldGroup.SubscribeToColourFieldOpen(UnityAction)
      qualifiedName:
        CSharp: UIColourFieldGroup.SubscribeToColourFieldOpen(UnityAction)
        VB: UIColourFieldGroup.SubscribeToColourFieldOpen(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToColourFieldOpen
        path: ''
        startLine: 16012
      syntax:
        content:
          CSharp: public void SubscribeToColourFieldOpen(UnityAction call)
          VB: Public Sub SubscribeToColourFieldOpen([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIColourFieldGroup.SubscribeToColourFieldOpen*
  - id: Global.UIColourPicker
    commentId: T:Global.UIColourPicker
    language: CSharp
    name:
      CSharp: UIColourPicker
      VB: UIColourPicker
    nameWithType:
      CSharp: UIColourPicker
      VB: UIColourPicker
    qualifiedName:
      CSharp: UIColourPicker
      VB: UIColourPicker
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIColourPicker
      path: ''
      startLine: 16023
    syntax:
      content:
        CSharp: 'public class UIColourPicker : MonoBehaviour'
        VB: Public Class UIColourPicker Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UIColourPicker.colour
      commentId: P:Global.UIColourPicker.colour
      language: CSharp
      name:
        CSharp: colour
        VB: colour
      nameWithType:
        CSharp: UIColourPicker.colour
        VB: UIColourPicker.colour
      qualifiedName:
        CSharp: UIColourPicker.colour
        VB: UIColourPicker.colour
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: colour
        path: ''
        startLine: 16031
      syntax:
        content:
          CSharp: public Color colour { get; }
          VB: Public ReadOnly Property colour As Color
        parameters: []
        return:
          type: Global.Color
      overload: Global.UIColourPicker.colour*
    - id: Global.UIColourPicker.colourPreview
      commentId: F:Global.UIColourPicker.colourPreview
      language: CSharp
      name:
        CSharp: colourPreview
        VB: colourPreview
      nameWithType:
        CSharp: UIColourPicker.colourPreview
        VB: UIColourPicker.colourPreview
      qualifiedName:
        CSharp: UIColourPicker.colourPreview
        VB: UIColourPicker.colourPreview
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: colourPreview
        path: ''
        startLine: 16041
      syntax:
        content:
          CSharp: public ColourPreview colourPreview
          VB: Public colourPreview As ColourPreview
        return:
          type: Global.ColourPreview
    - id: Global.UIColourPicker.UpdateColour(Color)
      commentId: M:Global.UIColourPicker.UpdateColour(Color)
      language: CSharp
      name:
        CSharp: UpdateColour(Color)
        VB: UpdateColour(Color)
      nameWithType:
        CSharp: UIColourPicker.UpdateColour(Color)
        VB: UIColourPicker.UpdateColour(Color)
      qualifiedName:
        CSharp: UIColourPicker.UpdateColour(Color)
        VB: UIColourPicker.UpdateColour(Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UpdateColour
        path: ''
        startLine: 16122
      syntax:
        content:
          CSharp: public void UpdateColour(Color colour)
          VB: Public Sub UpdateColour(colour As Color)
        parameters:
        - id: colour
          type: Global.Color
      overload: Global.UIColourPicker.UpdateColour*
    - id: Global.UIColourPicker.SetColour(Color)
      commentId: M:Global.UIColourPicker.SetColour(Color)
      language: CSharp
      name:
        CSharp: SetColour(Color)
        VB: SetColour(Color)
      nameWithType:
        CSharp: UIColourPicker.SetColour(Color)
        VB: UIColourPicker.SetColour(Color)
      qualifiedName:
        CSharp: UIColourPicker.SetColour(Color)
        VB: UIColourPicker.SetColour(Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetColour
        path: ''
        startLine: 16139
      syntax:
        content:
          CSharp: public void SetColour(Color colour)
          VB: Public Sub SetColour(colour As Color)
        parameters:
        - id: colour
          type: Global.Color
      overload: Global.UIColourPicker.SetColour*
    - id: Global.UIColourPicker.Close
      commentId: M:Global.UIColourPicker.Close
      language: CSharp
      name:
        CSharp: Close()
        VB: Close()
      nameWithType:
        CSharp: UIColourPicker.Close()
        VB: UIColourPicker.Close()
      qualifiedName:
        CSharp: UIColourPicker.Close()
        VB: UIColourPicker.Close()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Close
        path: ''
        startLine: 16150
      syntax:
        content:
          CSharp: public void Close()
          VB: Public Sub Close()
      overload: Global.UIColourPicker.Close*
    - id: Global.UIColourPicker.SelectDeselectEyeDropper
      commentId: M:Global.UIColourPicker.SelectDeselectEyeDropper
      language: CSharp
      name:
        CSharp: SelectDeselectEyeDropper()
        VB: SelectDeselectEyeDropper()
      nameWithType:
        CSharp: UIColourPicker.SelectDeselectEyeDropper()
        VB: UIColourPicker.SelectDeselectEyeDropper()
      qualifiedName:
        CSharp: UIColourPicker.SelectDeselectEyeDropper()
        VB: UIColourPicker.SelectDeselectEyeDropper()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SelectDeselectEyeDropper
        path: ''
        startLine: 16155
      syntax:
        content:
          CSharp: public void SelectDeselectEyeDropper()
          VB: Public Sub SelectDeselectEyeDropper()
      overload: Global.UIColourPicker.SelectDeselectEyeDropper*
    - id: Global.UIColourPicker.SubscribeToColourChange(UnityAction)
      commentId: M:Global.UIColourPicker.SubscribeToColourChange(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToColourChange(UnityAction)
        VB: SubscribeToColourChange(UnityAction)
      nameWithType:
        CSharp: UIColourPicker.SubscribeToColourChange(UnityAction)
        VB: UIColourPicker.SubscribeToColourChange(UnityAction)
      qualifiedName:
        CSharp: UIColourPicker.SubscribeToColourChange(UnityAction)
        VB: UIColourPicker.SubscribeToColourChange(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToColourChange
        path: ''
        startLine: 16188
      syntax:
        content:
          CSharp: public void SubscribeToColourChange(UnityAction call)
          VB: Public Sub SubscribeToColourChange([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIColourPicker.SubscribeToColourChange*
    - id: Global.UIColourPicker.SubscribeToClose(UnityAction)
      commentId: M:Global.UIColourPicker.SubscribeToClose(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToClose(UnityAction)
        VB: SubscribeToClose(UnityAction)
      nameWithType:
        CSharp: UIColourPicker.SubscribeToClose(UnityAction)
        VB: UIColourPicker.SubscribeToClose(UnityAction)
      qualifiedName:
        CSharp: UIColourPicker.SubscribeToClose(UnityAction)
        VB: UIColourPicker.SubscribeToClose(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToClose
        path: ''
        startLine: 16193
      syntax:
        content:
          CSharp: public void SubscribeToClose(UnityAction call)
          VB: Public Sub SubscribeToClose([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIColourPicker.SubscribeToClose*
  - id: Global.DropdownCloseMode
    commentId: T:Global.DropdownCloseMode
    language: CSharp
    name:
      CSharp: DropdownCloseMode
      VB: DropdownCloseMode
    nameWithType:
      CSharp: DropdownCloseMode
      VB: DropdownCloseMode
    qualifiedName:
      CSharp: DropdownCloseMode
      VB: DropdownCloseMode
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: DropdownCloseMode
      path: ''
      startLine: 16203
    syntax:
      content:
        CSharp: public enum DropdownCloseMode
        VB: Public Enum DropdownCloseMode
    items:
    - id: Global.DropdownCloseMode.ClickOff
      commentId: F:Global.DropdownCloseMode.ClickOff
      language: CSharp
      name:
        CSharp: ClickOff
        VB: ClickOff
      nameWithType:
        CSharp: DropdownCloseMode.ClickOff
        VB: DropdownCloseMode.ClickOff
      qualifiedName:
        CSharp: DropdownCloseMode.ClickOff
        VB: DropdownCloseMode.ClickOff
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ClickOff
        path: ''
        startLine: 16205
      syntax:
        content:
          CSharp: ClickOff = 0
          VB: ClickOff = 0
        return:
          type: Global.DropdownCloseMode
    - id: Global.DropdownCloseMode.MouseOff
      commentId: F:Global.DropdownCloseMode.MouseOff
      language: CSharp
      name:
        CSharp: MouseOff
        VB: MouseOff
      nameWithType:
        CSharp: DropdownCloseMode.MouseOff
        VB: DropdownCloseMode.MouseOff
      qualifiedName:
        CSharp: DropdownCloseMode.MouseOff
        VB: DropdownCloseMode.MouseOff
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MouseOff
        path: ''
        startLine: 16206
      syntax:
        content:
          CSharp: MouseOff = 1
          VB: MouseOff = 1
        return:
          type: Global.DropdownCloseMode
  - id: Global.UIDropdown
    commentId: T:Global.UIDropdown
    language: CSharp
    name:
      CSharp: UIDropdown
      VB: UIDropdown
    nameWithType:
      CSharp: UIDropdown
      VB: UIDropdown
    qualifiedName:
      CSharp: UIDropdown
      VB: UIDropdown
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIDropdown
      path: ''
      startLine: 16209
    syntax:
      content:
        CSharp: 'public class UIDropdown : MonoBehaviour'
        VB: Public Class UIDropdown Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UIDropdown.open
      commentId: P:Global.UIDropdown.open
      language: CSharp
      name:
        CSharp: open
        VB: open
      nameWithType:
        CSharp: UIDropdown.open
        VB: UIDropdown.open
      qualifiedName:
        CSharp: UIDropdown.open
        VB: UIDropdown.open
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: open
        path: ''
        startLine: 16215
      syntax:
        content:
          CSharp: public bool open { get; }
          VB: Public Property open As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.UIDropdown.open*
    - id: Global.UIDropdown.openingButton
      commentId: F:Global.UIDropdown.openingButton
      language: CSharp
      name:
        CSharp: openingButton
        VB: openingButton
      nameWithType:
        CSharp: UIDropdown.openingButton
        VB: UIDropdown.openingButton
      qualifiedName:
        CSharp: UIDropdown.openingButton
        VB: UIDropdown.openingButton
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: openingButton
        path: ''
        startLine: 16230
      syntax:
        content:
          CSharp: public GameObject openingButton
          VB: Public openingButton As GameObject
        return:
          type: Global.GameObject
    - id: Global.UIDropdown.parentDropdown
      commentId: F:Global.UIDropdown.parentDropdown
      language: CSharp
      name:
        CSharp: parentDropdown
        VB: parentDropdown
      nameWithType:
        CSharp: UIDropdown.parentDropdown
        VB: UIDropdown.parentDropdown
      qualifiedName:
        CSharp: UIDropdown.parentDropdown
        VB: UIDropdown.parentDropdown
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: parentDropdown
        path: ''
        startLine: 16233
      syntax:
        content:
          CSharp: public UIDropdown parentDropdown
          VB: Public parentDropdown As UIDropdown
        return:
          type: Global.UIDropdown
    - id: Global.UIDropdown.rootDropdown
      commentId: P:Global.UIDropdown.rootDropdown
      language: CSharp
      name:
        CSharp: rootDropdown
        VB: rootDropdown
      nameWithType:
        CSharp: UIDropdown.rootDropdown
        VB: UIDropdown.rootDropdown
      qualifiedName:
        CSharp: UIDropdown.rootDropdown
        VB: UIDropdown.rootDropdown
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: rootDropdown
        path: ''
        startLine: 16234
      syntax:
        content:
          CSharp: public UIDropdown rootDropdown { get; }
          VB: Public ReadOnly Property rootDropdown As UIDropdown
        parameters: []
        return:
          type: Global.UIDropdown
      overload: Global.UIDropdown.rootDropdown*
    - id: Global.UIDropdown.isRootDropdown
      commentId: P:Global.UIDropdown.isRootDropdown
      language: CSharp
      name:
        CSharp: isRootDropdown
        VB: isRootDropdown
      nameWithType:
        CSharp: UIDropdown.isRootDropdown
        VB: UIDropdown.isRootDropdown
      qualifiedName:
        CSharp: UIDropdown.isRootDropdown
        VB: UIDropdown.isRootDropdown
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: isRootDropdown
        path: ''
        startLine: 16242
      syntax:
        content:
          CSharp: public bool isRootDropdown { get; }
          VB: Public ReadOnly Property isRootDropdown As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.UIDropdown.isRootDropdown*
    - id: Global.UIDropdown.Initialise
      commentId: M:Global.UIDropdown.Initialise
      language: CSharp
      name:
        CSharp: Initialise()
        VB: Initialise()
      nameWithType:
        CSharp: UIDropdown.Initialise()
        VB: UIDropdown.Initialise()
      qualifiedName:
        CSharp: UIDropdown.Initialise()
        VB: UIDropdown.Initialise()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Initialise
        path: ''
        startLine: 16282
      syntax:
        content:
          CSharp: public void Initialise()
          VB: Public Sub Initialise()
      overload: Global.UIDropdown.Initialise*
    - id: Global.UIDropdown.Open
      commentId: M:Global.UIDropdown.Open
      language: CSharp
      name:
        CSharp: Open()
        VB: Open()
      nameWithType:
        CSharp: UIDropdown.Open()
        VB: UIDropdown.Open()
      qualifiedName:
        CSharp: UIDropdown.Open()
        VB: UIDropdown.Open()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Open
        path: ''
        startLine: 16366
      syntax:
        content:
          CSharp: public void Open()
          VB: Public Sub Open()
      overload: Global.UIDropdown.Open*
    - id: Global.UIDropdown.Close
      commentId: M:Global.UIDropdown.Close
      language: CSharp
      name:
        CSharp: Close()
        VB: Close()
      nameWithType:
        CSharp: UIDropdown.Close()
        VB: UIDropdown.Close()
      qualifiedName:
        CSharp: UIDropdown.Close()
        VB: UIDropdown.Close()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Close
        path: ''
        startLine: 16370
      syntax:
        content:
          CSharp: public void Close()
          VB: Public Sub Close()
      overload: Global.UIDropdown.Close*
    - id: Global.UIDropdown.ToggleOpen
      commentId: M:Global.UIDropdown.ToggleOpen
      language: CSharp
      name:
        CSharp: ToggleOpen()
        VB: ToggleOpen()
      nameWithType:
        CSharp: UIDropdown.ToggleOpen()
        VB: UIDropdown.ToggleOpen()
      qualifiedName:
        CSharp: UIDropdown.ToggleOpen()
        VB: UIDropdown.ToggleOpen()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToggleOpen
        path: ''
        startLine: 16374
      syntax:
        content:
          CSharp: public void ToggleOpen()
          VB: Public Sub ToggleOpen()
      overload: Global.UIDropdown.ToggleOpen*
    - id: Global.UIDropdown.SetOpen(System.Boolean)
      commentId: M:Global.UIDropdown.SetOpen(System.Boolean)
      language: CSharp
      name:
        CSharp: SetOpen(bool)
        VB: SetOpen(Boolean)
      nameWithType:
        CSharp: UIDropdown.SetOpen(bool)
        VB: UIDropdown.SetOpen(Boolean)
      qualifiedName:
        CSharp: UIDropdown.SetOpen(bool)
        VB: UIDropdown.SetOpen(Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetOpen
        path: ''
        startLine: 16379
      syntax:
        content:
          CSharp: public void SetOpen(bool open)
          VB: Public Sub SetOpen(open As Boolean)
        parameters:
        - id: open
          type: System.Boolean
      overload: Global.UIDropdown.SetOpen*
    - id: Global.UIDropdown.SetOpenEditor(System.Boolean)
      commentId: M:Global.UIDropdown.SetOpenEditor(System.Boolean)
      language: CSharp
      name:
        CSharp: SetOpenEditor(bool)
        VB: SetOpenEditor(Boolean)
      nameWithType:
        CSharp: UIDropdown.SetOpenEditor(bool)
        VB: UIDropdown.SetOpenEditor(Boolean)
      qualifiedName:
        CSharp: UIDropdown.SetOpenEditor(bool)
        VB: UIDropdown.SetOpenEditor(Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetOpenEditor
        path: ''
        startLine: 16430
      syntax:
        content:
          CSharp: public void SetOpenEditor(bool open)
          VB: Public Sub SetOpenEditor(open As Boolean)
        parameters:
        - id: open
          type: System.Boolean
      overload: Global.UIDropdown.SetOpenEditor*
    - id: Global.UIDropdown.FullyOpen
      commentId: M:Global.UIDropdown.FullyOpen
      language: CSharp
      name:
        CSharp: FullyOpen()
        VB: FullyOpen()
      nameWithType:
        CSharp: UIDropdown.FullyOpen()
        VB: UIDropdown.FullyOpen()
      qualifiedName:
        CSharp: UIDropdown.FullyOpen()
        VB: UIDropdown.FullyOpen()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FullyOpen
        path: ''
        startLine: 16466
      summary: "\nOpens this dropdown and all child dropdowns, and all their child dropdowns, etc.\n"
      example: []
      syntax:
        content:
          CSharp: public void FullyOpen()
          VB: Public Sub FullyOpen()
      overload: Global.UIDropdown.FullyOpen*
    - id: Global.UIDropdown.CloseRoot
      commentId: M:Global.UIDropdown.CloseRoot
      language: CSharp
      name:
        CSharp: CloseRoot()
        VB: CloseRoot()
      nameWithType:
        CSharp: UIDropdown.CloseRoot()
        VB: UIDropdown.CloseRoot()
      qualifiedName:
        CSharp: UIDropdown.CloseRoot()
        VB: UIDropdown.CloseRoot()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CloseRoot
        path: ''
        startLine: 16484
      summary: "\nCloses the highest-level dropdown containing this one.\n"
      example: []
      syntax:
        content:
          CSharp: public void CloseRoot()
          VB: Public Sub CloseRoot()
      overload: Global.UIDropdown.CloseRoot*
    - id: Global.UIDropdown.MouseOff
      commentId: M:Global.UIDropdown.MouseOff
      language: CSharp
      name:
        CSharp: MouseOff()
        VB: MouseOff()
      nameWithType:
        CSharp: UIDropdown.MouseOff()
        VB: UIDropdown.MouseOff()
      qualifiedName:
        CSharp: UIDropdown.MouseOff()
        VB: UIDropdown.MouseOff()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MouseOff
        path: ''
        startLine: 16489
      syntax:
        content:
          CSharp: public bool MouseOff()
          VB: Public Function MouseOff() As Boolean
        return:
          type: System.Boolean
      overload: Global.UIDropdown.MouseOff*
  - id: Global.DropdownDirection
    commentId: T:Global.DropdownDirection
    language: CSharp
    name:
      CSharp: DropdownDirection
      VB: DropdownDirection
    nameWithType:
      CSharp: DropdownDirection
      VB: DropdownDirection
    qualifiedName:
      CSharp: DropdownDirection
      VB: DropdownDirection
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: DropdownDirection
      path: ''
      startLine: 16524
    syntax:
      content:
        CSharp: public enum DropdownDirection
        VB: Public Enum DropdownDirection
    items:
    - id: Global.DropdownDirection.up
      commentId: F:Global.DropdownDirection.up
      language: CSharp
      name:
        CSharp: up
        VB: up
      nameWithType:
        CSharp: DropdownDirection.up
        VB: DropdownDirection.up
      qualifiedName:
        CSharp: DropdownDirection.up
        VB: DropdownDirection.up
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: up
        path: ''
        startLine: 16526
      syntax:
        content:
          CSharp: up = 1
          VB: up = 1
        return:
          type: Global.DropdownDirection
    - id: Global.DropdownDirection.down
      commentId: F:Global.DropdownDirection.down
      language: CSharp
      name:
        CSharp: down
        VB: down
      nameWithType:
        CSharp: DropdownDirection.down
        VB: DropdownDirection.down
      qualifiedName:
        CSharp: DropdownDirection.down
        VB: DropdownDirection.down
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: down
        path: ''
        startLine: 16527
      syntax:
        content:
          CSharp: down = -1
          VB: down = -1
        return:
          type: Global.DropdownDirection
  - id: Global.UIDropdownChoice
    commentId: T:Global.UIDropdownChoice
    language: CSharp
    name:
      CSharp: UIDropdownChoice
      VB: UIDropdownChoice
    nameWithType:
      CSharp: UIDropdownChoice
      VB: UIDropdownChoice
    qualifiedName:
      CSharp: UIDropdownChoice
      VB: UIDropdownChoice
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIDropdownChoice
      path: ''
      startLine: 16530
    syntax:
      content:
        CSharp: 'public class UIDropdownChoice : MonoBehaviour'
        VB: Public Class UIDropdownChoice Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UIDropdownChoice.direction
      commentId: F:Global.UIDropdownChoice.direction
      language: CSharp
      name:
        CSharp: direction
        VB: direction
      nameWithType:
        CSharp: UIDropdownChoice.direction
        VB: UIDropdownChoice.direction
      qualifiedName:
        CSharp: UIDropdownChoice.direction
        VB: UIDropdownChoice.direction
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: direction
        path: ''
        startLine: 16533
      syntax:
        content:
          CSharp: public DropdownDirection direction
          VB: Public direction As DropdownDirection
        return:
          type: Global.DropdownDirection
    - id: Global.UIDropdownChoice.selectedOptionIndex
      commentId: F:Global.UIDropdownChoice.selectedOptionIndex
      language: CSharp
      name:
        CSharp: selectedOptionIndex
        VB: selectedOptionIndex
      nameWithType:
        CSharp: UIDropdownChoice.selectedOptionIndex
        VB: UIDropdownChoice.selectedOptionIndex
      qualifiedName:
        CSharp: UIDropdownChoice.selectedOptionIndex
        VB: UIDropdownChoice.selectedOptionIndex
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: selectedOptionIndex
        path: ''
        startLine: 16534
      syntax:
        content:
          CSharp: public int selectedOptionIndex
          VB: Public selectedOptionIndex As Integer
        return:
          type: System.Int32
    - id: Global.UIDropdownChoice.options
      commentId: F:Global.UIDropdownChoice.options
      language: CSharp
      name:
        CSharp: options
        VB: options
      nameWithType:
        CSharp: UIDropdownChoice.options
        VB: UIDropdownChoice.options
      qualifiedName:
        CSharp: UIDropdownChoice.options
        VB: UIDropdownChoice.options
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: options
        path: ''
        startLine: 16535
      syntax:
        content:
          CSharp: public List<string> options
          VB: Public options As List(Of String)
        return:
          type: System.Collections.Generic.List{System.String}
    - id: Global.UIDropdownChoice.selectedOption
      commentId: P:Global.UIDropdownChoice.selectedOption
      language: CSharp
      name:
        CSharp: selectedOption
        VB: selectedOption
      nameWithType:
        CSharp: UIDropdownChoice.selectedOption
        VB: UIDropdownChoice.selectedOption
      qualifiedName:
        CSharp: UIDropdownChoice.selectedOption
        VB: UIDropdownChoice.selectedOption
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: selectedOption
        path: ''
        startLine: 16536
      syntax:
        content:
          CSharp: public string selectedOption { get; }
          VB: Public ReadOnly Property selectedOption As String
        parameters: []
        return:
          type: System.String
      overload: Global.UIDropdownChoice.selectedOption*
    - id: Global.UIDropdownChoice.SetUpDropdown
      commentId: M:Global.UIDropdownChoice.SetUpDropdown
      language: CSharp
      name:
        CSharp: SetUpDropdown()
        VB: SetUpDropdown()
      nameWithType:
        CSharp: UIDropdownChoice.SetUpDropdown()
        VB: UIDropdownChoice.SetUpDropdown()
      qualifiedName:
        CSharp: UIDropdownChoice.SetUpDropdown()
        VB: UIDropdownChoice.SetUpDropdown()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetUpDropdown
        path: ''
        startLine: 16595
      syntax:
        content:
          CSharp: public void SetUpDropdown()
          VB: Public Sub SetUpDropdown()
      overload: Global.UIDropdownChoice.SetUpDropdown*
    - id: Global.UIDropdownChoice.Select(System.String)
      commentId: M:Global.UIDropdownChoice.Select(System.String)
      language: CSharp
      name:
        CSharp: Select(string)
        VB: Select(String)
      nameWithType:
        CSharp: UIDropdownChoice.Select(string)
        VB: UIDropdownChoice.Select(String)
      qualifiedName:
        CSharp: UIDropdownChoice.Select(string)
        VB: UIDropdownChoice.Select(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Select
        path: ''
        startLine: 16628
      syntax:
        content:
          CSharp: public bool Select(string option)
          VB: Public Function [Select]([option] As String) As Boolean
        parameters:
        - id: option
          type: System.String
        return:
          type: System.Boolean
      overload: Global.UIDropdownChoice.Select*
    - id: Global.UIDropdownChoice.SubscribeToOptionChanged(UnityAction)
      commentId: M:Global.UIDropdownChoice.SubscribeToOptionChanged(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOptionChanged(UnityAction)
        VB: SubscribeToOptionChanged(UnityAction)
      nameWithType:
        CSharp: UIDropdownChoice.SubscribeToOptionChanged(UnityAction)
        VB: UIDropdownChoice.SubscribeToOptionChanged(UnityAction)
      qualifiedName:
        CSharp: UIDropdownChoice.SubscribeToOptionChanged(UnityAction)
        VB: UIDropdownChoice.SubscribeToOptionChanged(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOptionChanged
        path: ''
        startLine: 16648
      syntax:
        content:
          CSharp: public void SubscribeToOptionChanged(UnityAction call)
          VB: Public Sub SubscribeToOptionChanged([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIDropdownChoice.SubscribeToOptionChanged*
  - id: Global.UIElementSelectMode
    commentId: T:Global.UIElementSelectMode
    language: CSharp
    name:
      CSharp: UIElementSelectMode
      VB: UIElementSelectMode
    nameWithType:
      CSharp: UIElementSelectMode
      VB: UIElementSelectMode
    qualifiedName:
      CSharp: UIElementSelectMode
      VB: UIElementSelectMode
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIElementSelectMode
      path: ''
      startLine: 16658
    syntax:
      content:
        CSharp: public enum UIElementSelectMode
        VB: Public Enum UIElementSelectMode
    items:
    - id: Global.UIElementSelectMode.Manual
      commentId: F:Global.UIElementSelectMode.Manual
      language: CSharp
      name:
        CSharp: Manual
        VB: Manual
      nameWithType:
        CSharp: UIElementSelectMode.Manual
        VB: UIElementSelectMode.Manual
      qualifiedName:
        CSharp: UIElementSelectMode.Manual
        VB: UIElementSelectMode.Manual
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Manual
        path: ''
        startLine: 16660
      syntax:
        content:
          CSharp: Manual = 0
          VB: Manual = 0
        return:
          type: Global.UIElementSelectMode
    - id: Global.UIElementSelectMode.OnInputTargetTargeted
      commentId: F:Global.UIElementSelectMode.OnInputTargetTargeted
      language: CSharp
      name:
        CSharp: OnInputTargetTargeted
        VB: OnInputTargetTargeted
      nameWithType:
        CSharp: UIElementSelectMode.OnInputTargetTargeted
        VB: UIElementSelectMode.OnInputTargetTargeted
      qualifiedName:
        CSharp: UIElementSelectMode.OnInputTargetTargeted
        VB: UIElementSelectMode.OnInputTargetTargeted
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnInputTargetTargeted
        path: ''
        startLine: 16661
      syntax:
        content:
          CSharp: OnInputTargetTargeted = 1
          VB: OnInputTargetTargeted = 1
        return:
          type: Global.UIElementSelectMode
  - id: Global.UIElementDeselectMode
    commentId: T:Global.UIElementDeselectMode
    language: CSharp
    name:
      CSharp: UIElementDeselectMode
      VB: UIElementDeselectMode
    nameWithType:
      CSharp: UIElementDeselectMode
      VB: UIElementDeselectMode
    qualifiedName:
      CSharp: UIElementDeselectMode
      VB: UIElementDeselectMode
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIElementDeselectMode
      path: ''
      startLine: 16664
    syntax:
      content:
        CSharp: public enum UIElementDeselectMode
        VB: Public Enum UIElementDeselectMode
    items:
    - id: Global.UIElementDeselectMode.Manual
      commentId: F:Global.UIElementDeselectMode.Manual
      language: CSharp
      name:
        CSharp: Manual
        VB: Manual
      nameWithType:
        CSharp: UIElementDeselectMode.Manual
        VB: UIElementDeselectMode.Manual
      qualifiedName:
        CSharp: UIElementDeselectMode.Manual
        VB: UIElementDeselectMode.Manual
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Manual
        path: ''
        startLine: 16666
      syntax:
        content:
          CSharp: Manual = 0
          VB: Manual = 0
        return:
          type: Global.UIElementDeselectMode
    - id: Global.UIElementDeselectMode.OnInputTargetUntargeted
      commentId: F:Global.UIElementDeselectMode.OnInputTargetUntargeted
      language: CSharp
      name:
        CSharp: OnInputTargetUntargeted
        VB: OnInputTargetUntargeted
      nameWithType:
        CSharp: UIElementDeselectMode.OnInputTargetUntargeted
        VB: UIElementDeselectMode.OnInputTargetUntargeted
      qualifiedName:
        CSharp: UIElementDeselectMode.OnInputTargetUntargeted
        VB: UIElementDeselectMode.OnInputTargetUntargeted
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnInputTargetUntargeted
        path: ''
        startLine: 16667
      syntax:
        content:
          CSharp: OnInputTargetUntargeted = 1
          VB: OnInputTargetUntargeted = 1
        return:
          type: Global.UIElementDeselectMode
  - id: Global.UIElement
    commentId: T:Global.UIElement
    language: CSharp
    name:
      CSharp: UIElement
      VB: UIElement
    nameWithType:
      CSharp: UIElement
      VB: UIElement
    qualifiedName:
      CSharp: UIElement
      VB: UIElement
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIElement
      path: ''
      startLine: 16670
    syntax:
      content:
        CSharp: 'public class UIElement : MonoBehaviour'
        VB: Public Class UIElement Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UIElement.elementName
      commentId: P:Global.UIElement.elementName
      language: CSharp
      name:
        CSharp: elementName
        VB: elementName
      nameWithType:
        CSharp: UIElement.elementName
        VB: UIElement.elementName
      qualifiedName:
        CSharp: UIElement.elementName
        VB: UIElement.elementName
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: elementName
        path: ''
        startLine: 16675
      syntax:
        content:
          CSharp: public string elementName { get; }
          VB: Public ReadOnly Property elementName As String
        parameters: []
        return:
          type: System.String
      overload: Global.UIElement.elementName*
    - id: Global.UIElement.viewport
      commentId: F:Global.UIElement.viewport
      language: CSharp
      name:
        CSharp: viewport
        VB: viewport
      nameWithType:
        CSharp: UIElement.viewport
        VB: UIElement.viewport
      qualifiedName:
        CSharp: UIElement.viewport
        VB: UIElement.viewport
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: viewport
        path: ''
        startLine: 16688
      syntax:
        content:
          CSharp: public UIViewport viewport
          VB: Public viewport As UIViewport
        return:
          type: Global.UIViewport
  - id: Global.GridAlignment
    commentId: T:Global.GridAlignment
    language: CSharp
    name:
      CSharp: GridAlignment
      VB: GridAlignment
    nameWithType:
      CSharp: GridAlignment
      VB: GridAlignment
    qualifiedName:
      CSharp: GridAlignment
      VB: GridAlignment
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GridAlignment
      path: ''
      startLine: 16731
    syntax:
      content:
        CSharp: public enum GridAlignment
        VB: Public Enum GridAlignment
    items:
    - id: Global.GridAlignment.Left
      commentId: F:Global.GridAlignment.Left
      language: CSharp
      name:
        CSharp: Left
        VB: Left
      nameWithType:
        CSharp: GridAlignment.Left
        VB: GridAlignment.Left
      qualifiedName:
        CSharp: GridAlignment.Left
        VB: GridAlignment.Left
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Left
        path: ''
        startLine: 16733
      syntax:
        content:
          CSharp: Left = -1
          VB: Left = -1
        return:
          type: Global.GridAlignment
    - id: Global.GridAlignment.Centre
      commentId: F:Global.GridAlignment.Centre
      language: CSharp
      name:
        CSharp: Centre
        VB: Centre
      nameWithType:
        CSharp: GridAlignment.Centre
        VB: GridAlignment.Centre
      qualifiedName:
        CSharp: GridAlignment.Centre
        VB: GridAlignment.Centre
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Centre
        path: ''
        startLine: 16734
      syntax:
        content:
          CSharp: Centre = 0
          VB: Centre = 0
        return:
          type: Global.GridAlignment
    - id: Global.GridAlignment.Right
      commentId: F:Global.GridAlignment.Right
      language: CSharp
      name:
        CSharp: Right
        VB: Right
      nameWithType:
        CSharp: GridAlignment.Right
        VB: GridAlignment.Right
      qualifiedName:
        CSharp: GridAlignment.Right
        VB: GridAlignment.Right
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Right
        path: ''
        startLine: 16735
      syntax:
        content:
          CSharp: Right = 1
          VB: Right = 1
        return:
          type: Global.GridAlignment
  - id: Global.UIGridPacker
    commentId: T:Global.UIGridPacker
    language: CSharp
    name:
      CSharp: UIGridPacker
      VB: UIGridPacker
    nameWithType:
      CSharp: UIGridPacker
      VB: UIGridPacker
    qualifiedName:
      CSharp: UIGridPacker
      VB: UIGridPacker
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIGridPacker
      path: ''
      startLine: 16738
    syntax:
      content:
        CSharp: 'public class UIGridPacker : MonoBehaviour'
        VB: Public Class UIGridPacker Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UIGridPacker.Repack
      commentId: M:Global.UIGridPacker.Repack
      language: CSharp
      name:
        CSharp: Repack()
        VB: Repack()
      nameWithType:
        CSharp: UIGridPacker.Repack()
        VB: UIGridPacker.Repack()
      qualifiedName:
        CSharp: UIGridPacker.Repack()
        VB: UIGridPacker.Repack()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Repack
        path: ''
        startLine: 16769
      syntax:
        content:
          CSharp: public void Repack()
          VB: Public Sub Repack()
      overload: Global.UIGridPacker.Repack*
  - id: Global.UIKeyboardShortcut
    commentId: T:Global.UIKeyboardShortcut
    language: CSharp
    name:
      CSharp: UIKeyboardShortcut
      VB: UIKeyboardShortcut
    nameWithType:
      CSharp: UIKeyboardShortcut
      VB: UIKeyboardShortcut
    qualifiedName:
      CSharp: UIKeyboardShortcut
      VB: UIKeyboardShortcut
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIKeyboardShortcut
      path: ''
      startLine: 16890
    syntax:
      content:
        CSharp: 'public class UIKeyboardShortcut : MonoBehaviour'
        VB: Public Class UIKeyboardShortcut Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UIKeyboardShortcut.actionName
      commentId: F:Global.UIKeyboardShortcut.actionName
      language: CSharp
      name:
        CSharp: actionName
        VB: actionName
      nameWithType:
        CSharp: UIKeyboardShortcut.actionName
        VB: UIKeyboardShortcut.actionName
      qualifiedName:
        CSharp: UIKeyboardShortcut.actionName
        VB: UIKeyboardShortcut.actionName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: actionName
        path: ''
        startLine: 16893
      syntax:
        content:
          CSharp: public string actionName
          VB: Public actionName As String
        return:
          type: System.String
    - id: Global.UIKeyboardShortcut.shortcut
      commentId: P:Global.UIKeyboardShortcut.shortcut
      language: CSharp
      name:
        CSharp: shortcut
        VB: shortcut
      nameWithType:
        CSharp: UIKeyboardShortcut.shortcut
        VB: UIKeyboardShortcut.shortcut
      qualifiedName:
        CSharp: UIKeyboardShortcut.shortcut
        VB: UIKeyboardShortcut.shortcut
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: shortcut
        path: ''
        startLine: 16896
      syntax:
        content:
          CSharp: public KeyboardShortcut shortcut { get; set; }
          VB: Public Property shortcut As KeyboardShortcut
        parameters: []
        return:
          type: Global.KeyboardShortcut
      overload: Global.UIKeyboardShortcut.shortcut*
    - id: Global.UIKeyboardShortcut.SubscribeToOnShortcutSet(UnityAction{KeyboardShortcut})
      commentId: M:Global.UIKeyboardShortcut.SubscribeToOnShortcutSet(UnityAction{KeyboardShortcut})
      language: CSharp
      name:
        CSharp: SubscribeToOnShortcutSet(UnityAction<KeyboardShortcut>)
        VB: SubscribeToOnShortcutSet(UnityAction(Of KeyboardShortcut))
      nameWithType:
        CSharp: UIKeyboardShortcut.SubscribeToOnShortcutSet(UnityAction<KeyboardShortcut>)
        VB: UIKeyboardShortcut.SubscribeToOnShortcutSet(UnityAction(Of KeyboardShortcut))
      qualifiedName:
        CSharp: UIKeyboardShortcut.SubscribeToOnShortcutSet(UnityAction<KeyboardShortcut>)
        VB: UIKeyboardShortcut.SubscribeToOnShortcutSet(UnityAction(Of KeyboardShortcut))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnShortcutSet
        path: ''
        startLine: 16949
      syntax:
        content:
          CSharp: public void SubscribeToOnShortcutSet(UnityAction<KeyboardShortcut> call)
          VB: Public Sub SubscribeToOnShortcutSet([call] As UnityAction(Of KeyboardShortcut))
        parameters:
        - id: call
          type: Global.UnityAction{KeyboardShortcut}
      overload: Global.UIKeyboardShortcut.SubscribeToOnShortcutSet*
  - id: Global.UIManager
    commentId: T:Global.UIManager
    language: CSharp
    name:
      CSharp: UIManager
      VB: UIManager
    nameWithType:
      CSharp: UIManager
      VB: UIManager
    qualifiedName:
      CSharp: UIManager
      VB: UIManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIManager
      path: ''
      startLine: 16963
    syntax:
      content:
        CSharp: 'public class UIManager : MonoBehaviour'
        VB: Public Class UIManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UIManager.selectedUIElement
      commentId: P:Global.UIManager.selectedUIElement
      language: CSharp
      name:
        CSharp: selectedUIElement
        VB: selectedUIElement
      nameWithType:
        CSharp: UIManager.selectedUIElement
        VB: UIManager.selectedUIElement
      qualifiedName:
        CSharp: UIManager.selectedUIElement
        VB: UIManager.selectedUIElement
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: selectedUIElement
        path: ''
        startLine: 17114
      syntax:
        content:
          CSharp: public UIElement selectedUIElement { get; }
          VB: Public Property selectedUIElement As UIElement
        parameters: []
        return:
          type: Global.UIElement
      overload: Global.UIManager.selectedUIElement*
    - id: Global.UIManager.TryTarget(UIElement)
      commentId: M:Global.UIManager.TryTarget(UIElement)
      language: CSharp
      name:
        CSharp: TryTarget(UIElement)
        VB: TryTarget(UIElement)
      nameWithType:
        CSharp: UIManager.TryTarget(UIElement)
        VB: UIManager.TryTarget(UIElement)
      qualifiedName:
        CSharp: UIManager.TryTarget(UIElement)
        VB: UIManager.TryTarget(UIElement)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: TryTarget
        path: ''
        startLine: 17234
      syntax:
        content:
          CSharp: public bool TryTarget(UIElement uiElement)
          VB: Public Function TryTarget(uiElement As UIElement) As Boolean
        parameters:
        - id: uiElement
          type: Global.UIElement
        return:
          type: System.Boolean
      overload: Global.UIManager.TryTarget*
    - id: Global.UIManager.TryUntarget(UIElement)
      commentId: M:Global.UIManager.TryUntarget(UIElement)
      language: CSharp
      name:
        CSharp: TryUntarget(UIElement)
        VB: TryUntarget(UIElement)
      nameWithType:
        CSharp: UIManager.TryUntarget(UIElement)
        VB: UIManager.TryUntarget(UIElement)
      qualifiedName:
        CSharp: UIManager.TryUntarget(UIElement)
        VB: UIManager.TryUntarget(UIElement)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: TryUntarget
        path: ''
        startLine: 17252
      syntax:
        content:
          CSharp: public bool TryUntarget(UIElement uiElement)
          VB: Public Function TryUntarget(uiElement As UIElement) As Boolean
        parameters:
        - id: uiElement
          type: Global.UIElement
        return:
          type: System.Boolean
      overload: Global.UIManager.TryUntarget*
    - id: Global.UIManager.CanTargetInputTarget(InputTarget)
      commentId: M:Global.UIManager.CanTargetInputTarget(InputTarget)
      language: CSharp
      name:
        CSharp: CanTargetInputTarget(InputTarget)
        VB: CanTargetInputTarget(InputTarget)
      nameWithType:
        CSharp: UIManager.CanTargetInputTarget(InputTarget)
        VB: UIManager.CanTargetInputTarget(InputTarget)
      qualifiedName:
        CSharp: UIManager.CanTargetInputTarget(InputTarget)
        VB: UIManager.CanTargetInputTarget(InputTarget)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CanTargetInputTarget
        path: ''
        startLine: 17267
      syntax:
        content:
          CSharp: public bool CanTargetInputTarget(InputTarget inputTarget)
          VB: Public Function CanTargetInputTarget(inputTarget As InputTarget) As Boolean
        parameters:
        - id: inputTarget
          type: Global.InputTarget
        return:
          type: System.Boolean
      overload: Global.UIManager.CanTargetInputTarget*
    - id: Global.UIManager.OpenDialogBox(GameObject)
      commentId: M:Global.UIManager.OpenDialogBox(GameObject)
      language: CSharp
      name:
        CSharp: OpenDialogBox(GameObject)
        VB: OpenDialogBox(GameObject)
      nameWithType:
        CSharp: UIManager.OpenDialogBox(GameObject)
        VB: UIManager.OpenDialogBox(GameObject)
      qualifiedName:
        CSharp: UIManager.OpenDialogBox(GameObject)
        VB: UIManager.OpenDialogBox(GameObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenDialogBox
        path: ''
        startLine: 17272
      syntax:
        content:
          CSharp: public void OpenDialogBox(GameObject dialogBox)
          VB: Public Sub OpenDialogBox(dialogBox As GameObject)
        parameters:
        - id: dialogBox
          type: Global.GameObject
      overload: Global.UIManager.OpenDialogBox*
    - id: Global.UIManager.CloseDialogBox(GameObject)
      commentId: M:Global.UIManager.CloseDialogBox(GameObject)
      language: CSharp
      name:
        CSharp: CloseDialogBox(GameObject)
        VB: CloseDialogBox(GameObject)
      nameWithType:
        CSharp: UIManager.CloseDialogBox(GameObject)
        VB: UIManager.CloseDialogBox(GameObject)
      qualifiedName:
        CSharp: UIManager.CloseDialogBox(GameObject)
        VB: UIManager.CloseDialogBox(GameObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CloseDialogBox
        path: ''
        startLine: 17280
      syntax:
        content:
          CSharp: public void CloseDialogBox(GameObject dialogBox)
          VB: Public Sub CloseDialogBox(dialogBox As GameObject)
        parameters:
        - id: dialogBox
          type: Global.GameObject
      overload: Global.UIManager.CloseDialogBox*
    - id: Global.UIManager.CloseDialogBox(GameObject,Action)
      commentId: M:Global.UIManager.CloseDialogBox(GameObject,Action)
      language: CSharp
      name:
        CSharp: CloseDialogBox(GameObject, Action)
        VB: CloseDialogBox(GameObject, Action)
      nameWithType:
        CSharp: UIManager.CloseDialogBox(GameObject, Action)
        VB: UIManager.CloseDialogBox(GameObject, Action)
      qualifiedName:
        CSharp: UIManager.CloseDialogBox(GameObject, Action)
        VB: UIManager.CloseDialogBox(GameObject, Action)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CloseDialogBox
        path: ''
        startLine: 17281
      syntax:
        content:
          CSharp: public void CloseDialogBox(GameObject dialogBox, Action onComplete)
          VB: Public Sub CloseDialogBox(dialogBox As GameObject, onComplete As Action)
        parameters:
        - id: dialogBox
          type: Global.GameObject
        - id: onComplete
          type: Global.Action
      overload: Global.UIManager.CloseDialogBox*
    - id: Global.UIManager.OpenNewFileWindow
      commentId: M:Global.UIManager.OpenNewFileWindow
      language: CSharp
      name:
        CSharp: OpenNewFileWindow()
        VB: OpenNewFileWindow()
      nameWithType:
        CSharp: UIManager.OpenNewFileWindow()
        VB: UIManager.OpenNewFileWindow()
      qualifiedName:
        CSharp: UIManager.OpenNewFileWindow()
        VB: UIManager.OpenNewFileWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenNewFileWindow
        path: ''
        startLine: 17291
      syntax:
        content:
          CSharp: public void OpenNewFileWindow()
          VB: Public Sub OpenNewFileWindow()
      overload: Global.UIManager.OpenNewFileWindow*
    - id: Global.UIManager.CloseNewFileWindow
      commentId: M:Global.UIManager.CloseNewFileWindow
      language: CSharp
      name:
        CSharp: CloseNewFileWindow()
        VB: CloseNewFileWindow()
      nameWithType:
        CSharp: UIManager.CloseNewFileWindow()
        VB: UIManager.CloseNewFileWindow()
      qualifiedName:
        CSharp: UIManager.CloseNewFileWindow()
        VB: UIManager.CloseNewFileWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CloseNewFileWindow
        path: ''
        startLine: 17297
      syntax:
        content:
          CSharp: public void CloseNewFileWindow()
          VB: Public Sub CloseNewFileWindow()
      overload: Global.UIManager.CloseNewFileWindow*
    - id: Global.UIManager.ConfirmNewFileWindow
      commentId: M:Global.UIManager.ConfirmNewFileWindow
      language: CSharp
      name:
        CSharp: ConfirmNewFileWindow()
        VB: ConfirmNewFileWindow()
      nameWithType:
        CSharp: UIManager.ConfirmNewFileWindow()
        VB: UIManager.ConfirmNewFileWindow()
      qualifiedName:
        CSharp: UIManager.ConfirmNewFileWindow()
        VB: UIManager.ConfirmNewFileWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ConfirmNewFileWindow
        path: ''
        startLine: 17302
      syntax:
        content:
          CSharp: public void ConfirmNewFileWindow()
          VB: Public Sub ConfirmNewFileWindow()
      overload: Global.UIManager.ConfirmNewFileWindow*
    - id: Global.UIManager.SetNewFileWidth(System.Int32)
      commentId: M:Global.UIManager.SetNewFileWidth(System.Int32)
      language: CSharp
      name:
        CSharp: SetNewFileWidth(int)
        VB: SetNewFileWidth(Integer)
      nameWithType:
        CSharp: UIManager.SetNewFileWidth(int)
        VB: UIManager.SetNewFileWidth(Integer)
      qualifiedName:
        CSharp: UIManager.SetNewFileWidth(int)
        VB: UIManager.SetNewFileWidth(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetNewFileWidth
        path: ''
        startLine: 17312
      syntax:
        content:
          CSharp: public void SetNewFileWidth(int width)
          VB: Public Sub SetNewFileWidth(width As Integer)
        parameters:
        - id: width
          type: System.Int32
      overload: Global.UIManager.SetNewFileWidth*
    - id: Global.UIManager.SetNewFileHeight(System.Int32)
      commentId: M:Global.UIManager.SetNewFileHeight(System.Int32)
      language: CSharp
      name:
        CSharp: SetNewFileHeight(int)
        VB: SetNewFileHeight(Integer)
      nameWithType:
        CSharp: UIManager.SetNewFileHeight(int)
        VB: UIManager.SetNewFileHeight(Integer)
      qualifiedName:
        CSharp: UIManager.SetNewFileHeight(int)
        VB: UIManager.SetNewFileHeight(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetNewFileHeight
        path: ''
        startLine: 17316
      syntax:
        content:
          CSharp: public void SetNewFileHeight(int height)
          VB: Public Sub SetNewFileHeight(height As Integer)
        parameters:
        - id: height
          type: System.Int32
      overload: Global.UIManager.SetNewFileHeight*
    - id: Global.UIManager.OpenExtendCropWindow
      commentId: M:Global.UIManager.OpenExtendCropWindow
      language: CSharp
      name:
        CSharp: OpenExtendCropWindow()
        VB: OpenExtendCropWindow()
      nameWithType:
        CSharp: UIManager.OpenExtendCropWindow()
        VB: UIManager.OpenExtendCropWindow()
      qualifiedName:
        CSharp: UIManager.OpenExtendCropWindow()
        VB: UIManager.OpenExtendCropWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenExtendCropWindow
        path: ''
        startLine: 17321
      syntax:
        content:
          CSharp: public void OpenExtendCropWindow()
          VB: Public Sub OpenExtendCropWindow()
      overload: Global.UIManager.OpenExtendCropWindow*
    - id: Global.UIManager.CloseExtendCropWindow
      commentId: M:Global.UIManager.CloseExtendCropWindow
      language: CSharp
      name:
        CSharp: CloseExtendCropWindow()
        VB: CloseExtendCropWindow()
      nameWithType:
        CSharp: UIManager.CloseExtendCropWindow()
        VB: UIManager.CloseExtendCropWindow()
      qualifiedName:
        CSharp: UIManager.CloseExtendCropWindow()
        VB: UIManager.CloseExtendCropWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CloseExtendCropWindow
        path: ''
        startLine: 17332
      syntax:
        content:
          CSharp: public void CloseExtendCropWindow()
          VB: Public Sub CloseExtendCropWindow()
      overload: Global.UIManager.CloseExtendCropWindow*
    - id: Global.UIManager.ConfirmExtendCropWindow
      commentId: M:Global.UIManager.ConfirmExtendCropWindow
      language: CSharp
      name:
        CSharp: ConfirmExtendCropWindow()
        VB: ConfirmExtendCropWindow()
      nameWithType:
        CSharp: UIManager.ConfirmExtendCropWindow()
        VB: UIManager.ConfirmExtendCropWindow()
      qualifiedName:
        CSharp: UIManager.ConfirmExtendCropWindow()
        VB: UIManager.ConfirmExtendCropWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ConfirmExtendCropWindow
        path: ''
        startLine: 17356
      syntax:
        content:
          CSharp: public void ConfirmExtendCropWindow()
          VB: Public Sub ConfirmExtendCropWindow()
      overload: Global.UIManager.ConfirmExtendCropWindow*
    - id: Global.UIManager.OpenScaleWindow
      commentId: M:Global.UIManager.OpenScaleWindow
      language: CSharp
      name:
        CSharp: OpenScaleWindow()
        VB: OpenScaleWindow()
      nameWithType:
        CSharp: UIManager.OpenScaleWindow()
        VB: UIManager.OpenScaleWindow()
      qualifiedName:
        CSharp: UIManager.OpenScaleWindow()
        VB: UIManager.OpenScaleWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenScaleWindow
        path: ''
        startLine: 17368
      syntax:
        content:
          CSharp: public void OpenScaleWindow()
          VB: Public Sub OpenScaleWindow()
      overload: Global.UIManager.OpenScaleWindow*
    - id: Global.UIManager.CloseScaleWindow
      commentId: M:Global.UIManager.CloseScaleWindow
      language: CSharp
      name:
        CSharp: CloseScaleWindow()
        VB: CloseScaleWindow()
      nameWithType:
        CSharp: UIManager.CloseScaleWindow()
        VB: UIManager.CloseScaleWindow()
      qualifiedName:
        CSharp: UIManager.CloseScaleWindow()
        VB: UIManager.CloseScaleWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CloseScaleWindow
        path: ''
        startLine: 17379
      syntax:
        content:
          CSharp: public void CloseScaleWindow()
          VB: Public Sub CloseScaleWindow()
      overload: Global.UIManager.CloseScaleWindow*
    - id: Global.UIManager.ConfirmScaleWindow
      commentId: M:Global.UIManager.ConfirmScaleWindow
      language: CSharp
      name:
        CSharp: ConfirmScaleWindow()
        VB: ConfirmScaleWindow()
      nameWithType:
        CSharp: UIManager.ConfirmScaleWindow()
        VB: UIManager.ConfirmScaleWindow()
      qualifiedName:
        CSharp: UIManager.ConfirmScaleWindow()
        VB: UIManager.ConfirmScaleWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ConfirmScaleWindow
        path: ''
        startLine: 17430
      syntax:
        content:
          CSharp: public void ConfirmScaleWindow()
          VB: Public Sub ConfirmScaleWindow()
      overload: Global.UIManager.ConfirmScaleWindow*
    - id: Global.UIManager.OpenGridWindow
      commentId: M:Global.UIManager.OpenGridWindow
      language: CSharp
      name:
        CSharp: OpenGridWindow()
        VB: OpenGridWindow()
      nameWithType:
        CSharp: UIManager.OpenGridWindow()
        VB: UIManager.OpenGridWindow()
      qualifiedName:
        CSharp: UIManager.OpenGridWindow()
        VB: UIManager.OpenGridWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenGridWindow
        path: ''
        startLine: 17440
      syntax:
        content:
          CSharp: public void OpenGridWindow()
          VB: Public Sub OpenGridWindow()
      overload: Global.UIManager.OpenGridWindow*
    - id: Global.UIManager.CloseGridWindow
      commentId: M:Global.UIManager.CloseGridWindow
      language: CSharp
      name:
        CSharp: CloseGridWindow()
        VB: CloseGridWindow()
      nameWithType:
        CSharp: UIManager.CloseGridWindow()
        VB: UIManager.CloseGridWindow()
      qualifiedName:
        CSharp: UIManager.CloseGridWindow()
        VB: UIManager.CloseGridWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CloseGridWindow
        path: ''
        startLine: 17454
      syntax:
        content:
          CSharp: public void CloseGridWindow()
          VB: Public Sub CloseGridWindow()
      overload: Global.UIManager.CloseGridWindow*
    - id: Global.UIManager.ConfirmGridWindow
      commentId: M:Global.UIManager.ConfirmGridWindow
      language: CSharp
      name:
        CSharp: ConfirmGridWindow()
        VB: ConfirmGridWindow()
      nameWithType:
        CSharp: UIManager.ConfirmGridWindow()
        VB: UIManager.ConfirmGridWindow()
      qualifiedName:
        CSharp: UIManager.ConfirmGridWindow()
        VB: UIManager.ConfirmGridWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ConfirmGridWindow
        path: ''
        startLine: 17459
      syntax:
        content:
          CSharp: public void ConfirmGridWindow()
          VB: Public Sub ConfirmGridWindow()
      overload: Global.UIManager.ConfirmGridWindow*
    - id: Global.UIManager.OpenOutlineWindow
      commentId: M:Global.UIManager.OpenOutlineWindow
      language: CSharp
      name:
        CSharp: OpenOutlineWindow()
        VB: OpenOutlineWindow()
      nameWithType:
        CSharp: UIManager.OpenOutlineWindow()
        VB: UIManager.OpenOutlineWindow()
      qualifiedName:
        CSharp: UIManager.OpenOutlineWindow()
        VB: UIManager.OpenOutlineWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenOutlineWindow
        path: ''
        startLine: 17489
      syntax:
        content:
          CSharp: public void OpenOutlineWindow()
          VB: Public Sub OpenOutlineWindow()
      overload: Global.UIManager.OpenOutlineWindow*
    - id: Global.UIManager.CloseOutlineWindow
      commentId: M:Global.UIManager.CloseOutlineWindow
      language: CSharp
      name:
        CSharp: CloseOutlineWindow()
        VB: CloseOutlineWindow()
      nameWithType:
        CSharp: UIManager.CloseOutlineWindow()
        VB: UIManager.CloseOutlineWindow()
      qualifiedName:
        CSharp: UIManager.CloseOutlineWindow()
        VB: UIManager.CloseOutlineWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CloseOutlineWindow
        path: ''
        startLine: 17495
      syntax:
        content:
          CSharp: public void CloseOutlineWindow()
          VB: Public Sub CloseOutlineWindow()
      overload: Global.UIManager.CloseOutlineWindow*
    - id: Global.UIManager.ConfirmOutlineWindow
      commentId: M:Global.UIManager.ConfirmOutlineWindow
      language: CSharp
      name:
        CSharp: ConfirmOutlineWindow()
        VB: ConfirmOutlineWindow()
      nameWithType:
        CSharp: UIManager.ConfirmOutlineWindow()
        VB: UIManager.ConfirmOutlineWindow()
      qualifiedName:
        CSharp: UIManager.ConfirmOutlineWindow()
        VB: UIManager.ConfirmOutlineWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ConfirmOutlineWindow
        path: ''
        startLine: 17502
      syntax:
        content:
          CSharp: public void ConfirmOutlineWindow()
          VB: Public Sub ConfirmOutlineWindow()
      overload: Global.UIManager.ConfirmOutlineWindow*
    - id: Global.UIManager.OpenReplaceColourWindow
      commentId: M:Global.UIManager.OpenReplaceColourWindow
      language: CSharp
      name:
        CSharp: OpenReplaceColourWindow()
        VB: OpenReplaceColourWindow()
      nameWithType:
        CSharp: UIManager.OpenReplaceColourWindow()
        VB: UIManager.OpenReplaceColourWindow()
      qualifiedName:
        CSharp: UIManager.OpenReplaceColourWindow()
        VB: UIManager.OpenReplaceColourWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenReplaceColourWindow
        path: ''
        startLine: 17538
      syntax:
        content:
          CSharp: public void OpenReplaceColourWindow()
          VB: Public Sub OpenReplaceColourWindow()
      overload: Global.UIManager.OpenReplaceColourWindow*
    - id: Global.UIManager.CloseReplaceColourWindow
      commentId: M:Global.UIManager.CloseReplaceColourWindow
      language: CSharp
      name:
        CSharp: CloseReplaceColourWindow()
        VB: CloseReplaceColourWindow()
      nameWithType:
        CSharp: UIManager.CloseReplaceColourWindow()
        VB: UIManager.CloseReplaceColourWindow()
      qualifiedName:
        CSharp: UIManager.CloseReplaceColourWindow()
        VB: UIManager.CloseReplaceColourWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CloseReplaceColourWindow
        path: ''
        startLine: 17544
      syntax:
        content:
          CSharp: public void CloseReplaceColourWindow()
          VB: Public Sub CloseReplaceColourWindow()
      overload: Global.UIManager.CloseReplaceColourWindow*
    - id: Global.UIManager.ConfirmReplaceColourWindow
      commentId: M:Global.UIManager.ConfirmReplaceColourWindow
      language: CSharp
      name:
        CSharp: ConfirmReplaceColourWindow()
        VB: ConfirmReplaceColourWindow()
      nameWithType:
        CSharp: UIManager.ConfirmReplaceColourWindow()
        VB: UIManager.ConfirmReplaceColourWindow()
      qualifiedName:
        CSharp: UIManager.ConfirmReplaceColourWindow()
        VB: UIManager.ConfirmReplaceColourWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ConfirmReplaceColourWindow
        path: ''
        startLine: 17552
      syntax:
        content:
          CSharp: public void ConfirmReplaceColourWindow()
          VB: Public Sub ConfirmReplaceColourWindow()
      overload: Global.UIManager.ConfirmReplaceColourWindow*
    - id: Global.UIManager.OpenImportPACWindow(File)
      commentId: M:Global.UIManager.OpenImportPACWindow(File)
      language: CSharp
      name:
        CSharp: OpenImportPACWindow(File)
        VB: OpenImportPACWindow(File)
      nameWithType:
        CSharp: UIManager.OpenImportPACWindow(File)
        VB: UIManager.OpenImportPACWindow(File)
      qualifiedName:
        CSharp: UIManager.OpenImportPACWindow(File)
        VB: UIManager.OpenImportPACWindow(File)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenImportPACWindow
        path: ''
        startLine: 17586
      syntax:
        content:
          CSharp: public void OpenImportPACWindow(File file)
          VB: Public Sub OpenImportPACWindow(file As File)
        parameters:
        - id: file
          type: Global.File
      overload: Global.UIManager.OpenImportPACWindow*
    - id: Global.UIManager.CloseImportPACWindow
      commentId: M:Global.UIManager.CloseImportPACWindow
      language: CSharp
      name:
        CSharp: CloseImportPACWindow()
        VB: CloseImportPACWindow()
      nameWithType:
        CSharp: UIManager.CloseImportPACWindow()
        VB: UIManager.CloseImportPACWindow()
      qualifiedName:
        CSharp: UIManager.CloseImportPACWindow()
        VB: UIManager.CloseImportPACWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CloseImportPACWindow
        path: ''
        startLine: 17621
      syntax:
        content:
          CSharp: public void CloseImportPACWindow()
          VB: Public Sub CloseImportPACWindow()
      overload: Global.UIManager.CloseImportPACWindow*
    - id: Global.UIManager.ConfirmImportPACWindow
      commentId: M:Global.UIManager.ConfirmImportPACWindow
      language: CSharp
      name:
        CSharp: ConfirmImportPACWindow()
        VB: ConfirmImportPACWindow()
      nameWithType:
        CSharp: UIManager.ConfirmImportPACWindow()
        VB: UIManager.ConfirmImportPACWindow()
      qualifiedName:
        CSharp: UIManager.ConfirmImportPACWindow()
        VB: UIManager.ConfirmImportPACWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ConfirmImportPACWindow
        path: ''
        startLine: 17626
      syntax:
        content:
          CSharp: public void ConfirmImportPACWindow()
          VB: Public Sub ConfirmImportPACWindow()
      overload: Global.UIManager.ConfirmImportPACWindow*
    - id: Global.UIManager.UpdateImportPACPreview
      commentId: M:Global.UIManager.UpdateImportPACPreview
      language: CSharp
      name:
        CSharp: UpdateImportPACPreview()
        VB: UpdateImportPACPreview()
      nameWithType:
        CSharp: UIManager.UpdateImportPACPreview()
        VB: UIManager.UpdateImportPACPreview()
      qualifiedName:
        CSharp: UIManager.UpdateImportPACPreview()
        VB: UIManager.UpdateImportPACPreview()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UpdateImportPACPreview
        path: ''
        startLine: 17638
      syntax:
        content:
          CSharp: public void UpdateImportPACPreview()
          VB: Public Sub UpdateImportPACPreview()
      overload: Global.UIManager.UpdateImportPACPreview*
    - id: Global.UIManager.OpenLayerPropertiesWindow(System.Int32)
      commentId: M:Global.UIManager.OpenLayerPropertiesWindow(System.Int32)
      language: CSharp
      name:
        CSharp: OpenLayerPropertiesWindow(int)
        VB: OpenLayerPropertiesWindow(Integer)
      nameWithType:
        CSharp: UIManager.OpenLayerPropertiesWindow(int)
        VB: UIManager.OpenLayerPropertiesWindow(Integer)
      qualifiedName:
        CSharp: UIManager.OpenLayerPropertiesWindow(int)
        VB: UIManager.OpenLayerPropertiesWindow(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenLayerPropertiesWindow
        path: ''
        startLine: 17644
      syntax:
        content:
          CSharp: public void OpenLayerPropertiesWindow(int layerIndex)
          VB: Public Sub OpenLayerPropertiesWindow(layerIndex As Integer)
        parameters:
        - id: layerIndex
          type: System.Int32
      overload: Global.UIManager.OpenLayerPropertiesWindow*
    - id: Global.UIManager.CloseLayerPropertiesWindow
      commentId: M:Global.UIManager.CloseLayerPropertiesWindow
      language: CSharp
      name:
        CSharp: CloseLayerPropertiesWindow()
        VB: CloseLayerPropertiesWindow()
      nameWithType:
        CSharp: UIManager.CloseLayerPropertiesWindow()
        VB: UIManager.CloseLayerPropertiesWindow()
      qualifiedName:
        CSharp: UIManager.CloseLayerPropertiesWindow()
        VB: UIManager.CloseLayerPropertiesWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CloseLayerPropertiesWindow
        path: ''
        startLine: 17658
      syntax:
        content:
          CSharp: public void CloseLayerPropertiesWindow()
          VB: Public Sub CloseLayerPropertiesWindow()
      overload: Global.UIManager.CloseLayerPropertiesWindow*
    - id: Global.UIManager.OpenBrushSettingsWindow
      commentId: M:Global.UIManager.OpenBrushSettingsWindow
      language: CSharp
      name:
        CSharp: OpenBrushSettingsWindow()
        VB: OpenBrushSettingsWindow()
      nameWithType:
        CSharp: UIManager.OpenBrushSettingsWindow()
        VB: UIManager.OpenBrushSettingsWindow()
      qualifiedName:
        CSharp: UIManager.OpenBrushSettingsWindow()
        VB: UIManager.OpenBrushSettingsWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenBrushSettingsWindow
        path: ''
        startLine: 17679
      syntax:
        content:
          CSharp: public void OpenBrushSettingsWindow()
          VB: Public Sub OpenBrushSettingsWindow()
      overload: Global.UIManager.OpenBrushSettingsWindow*
    - id: Global.UIManager.CloseBrushSettingsWindow
      commentId: M:Global.UIManager.CloseBrushSettingsWindow
      language: CSharp
      name:
        CSharp: CloseBrushSettingsWindow()
        VB: CloseBrushSettingsWindow()
      nameWithType:
        CSharp: UIManager.CloseBrushSettingsWindow()
        VB: UIManager.CloseBrushSettingsWindow()
      qualifiedName:
        CSharp: UIManager.CloseBrushSettingsWindow()
        VB: UIManager.CloseBrushSettingsWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CloseBrushSettingsWindow
        path: ''
        startLine: 17687
      syntax:
        content:
          CSharp: public void CloseBrushSettingsWindow()
          VB: Public Sub CloseBrushSettingsWindow()
      overload: Global.UIManager.CloseBrushSettingsWindow*
    - id: Global.UIManager.UpdateBrushSettingsShape
      commentId: M:Global.UIManager.UpdateBrushSettingsShape
      language: CSharp
      name:
        CSharp: UpdateBrushSettingsShape()
        VB: UpdateBrushSettingsShape()
      nameWithType:
        CSharp: UIManager.UpdateBrushSettingsShape()
        VB: UIManager.UpdateBrushSettingsShape()
      qualifiedName:
        CSharp: UIManager.UpdateBrushSettingsShape()
        VB: UIManager.UpdateBrushSettingsShape()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UpdateBrushSettingsShape
        path: ''
        startLine: 17692
      syntax:
        content:
          CSharp: public void UpdateBrushSettingsShape()
          VB: Public Sub UpdateBrushSettingsShape()
      overload: Global.UIManager.UpdateBrushSettingsShape*
    - id: Global.UIManager.OpenKeyboardShortcutsWindow
      commentId: M:Global.UIManager.OpenKeyboardShortcutsWindow
      language: CSharp
      name:
        CSharp: OpenKeyboardShortcutsWindow()
        VB: OpenKeyboardShortcutsWindow()
      nameWithType:
        CSharp: UIManager.OpenKeyboardShortcutsWindow()
        VB: UIManager.OpenKeyboardShortcutsWindow()
      qualifiedName:
        CSharp: UIManager.OpenKeyboardShortcutsWindow()
        VB: UIManager.OpenKeyboardShortcutsWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenKeyboardShortcutsWindow
        path: ''
        startLine: 17724
      syntax:
        content:
          CSharp: public void OpenKeyboardShortcutsWindow()
          VB: Public Sub OpenKeyboardShortcutsWindow()
      overload: Global.UIManager.OpenKeyboardShortcutsWindow*
    - id: Global.UIManager.CloseKeyboardShortcutsWindow
      commentId: M:Global.UIManager.CloseKeyboardShortcutsWindow
      language: CSharp
      name:
        CSharp: CloseKeyboardShortcutsWindow()
        VB: CloseKeyboardShortcutsWindow()
      nameWithType:
        CSharp: UIManager.CloseKeyboardShortcutsWindow()
        VB: UIManager.CloseKeyboardShortcutsWindow()
      qualifiedName:
        CSharp: UIManager.CloseKeyboardShortcutsWindow()
        VB: UIManager.CloseKeyboardShortcutsWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CloseKeyboardShortcutsWindow
        path: ''
        startLine: 17728
      syntax:
        content:
          CSharp: public void CloseKeyboardShortcutsWindow()
          VB: Public Sub CloseKeyboardShortcutsWindow()
      overload: Global.UIManager.CloseKeyboardShortcutsWindow*
    - id: Global.UIManager.OpenUnsavedChangesWindow(System.Int32)
      commentId: M:Global.UIManager.OpenUnsavedChangesWindow(System.Int32)
      language: CSharp
      name:
        CSharp: OpenUnsavedChangesWindow(int)
        VB: OpenUnsavedChangesWindow(Integer)
      nameWithType:
        CSharp: UIManager.OpenUnsavedChangesWindow(int)
        VB: UIManager.OpenUnsavedChangesWindow(Integer)
      qualifiedName:
        CSharp: UIManager.OpenUnsavedChangesWindow(int)
        VB: UIManager.OpenUnsavedChangesWindow(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenUnsavedChangesWindow
        path: ''
        startLine: 17733
      syntax:
        content:
          CSharp: public void OpenUnsavedChangesWindow(int fileIndex)
          VB: Public Sub OpenUnsavedChangesWindow(fileIndex As Integer)
        parameters:
        - id: fileIndex
          type: System.Int32
      overload: Global.UIManager.OpenUnsavedChangesWindow*
    - id: Global.UIManager.UnsavedChangesYes
      commentId: M:Global.UIManager.UnsavedChangesYes
      language: CSharp
      name:
        CSharp: UnsavedChangesYes()
        VB: UnsavedChangesYes()
      nameWithType:
        CSharp: UIManager.UnsavedChangesYes()
        VB: UIManager.UnsavedChangesYes()
      qualifiedName:
        CSharp: UIManager.UnsavedChangesYes()
        VB: UIManager.UnsavedChangesYes()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UnsavedChangesYes
        path: ''
        startLine: 17743
      syntax:
        content:
          CSharp: public void UnsavedChangesYes()
          VB: Public Sub UnsavedChangesYes()
      overload: Global.UIManager.UnsavedChangesYes*
    - id: Global.UIManager.UnsavedChangesNo
      commentId: M:Global.UIManager.UnsavedChangesNo
      language: CSharp
      name:
        CSharp: UnsavedChangesNo()
        VB: UnsavedChangesNo()
      nameWithType:
        CSharp: UIManager.UnsavedChangesNo()
        VB: UIManager.UnsavedChangesNo()
      qualifiedName:
        CSharp: UIManager.UnsavedChangesNo()
        VB: UIManager.UnsavedChangesNo()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UnsavedChangesNo
        path: ''
        startLine: 17750
      syntax:
        content:
          CSharp: public void UnsavedChangesNo()
          VB: Public Sub UnsavedChangesNo()
      overload: Global.UIManager.UnsavedChangesNo*
    - id: Global.UIManager.OpenModalWindow
      commentId: M:Global.UIManager.OpenModalWindow
      language: CSharp
      name:
        CSharp: OpenModalWindow()
        VB: OpenModalWindow()
      nameWithType:
        CSharp: UIManager.OpenModalWindow()
        VB: UIManager.OpenModalWindow()
      qualifiedName:
        CSharp: UIManager.OpenModalWindow()
        VB: UIManager.OpenModalWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenModalWindow
        path: ''
        startLine: 17757
      syntax:
        content:
          CSharp: public UIModalWindow OpenModalWindow()
          VB: Public Function OpenModalWindow() As UIModalWindow
        return:
          type: Global.UIModalWindow
      overload: Global.UIManager.OpenModalWindow*
    - id: Global.UIManager.OpenModalWindow(System.String,System.String)
      commentId: M:Global.UIManager.OpenModalWindow(System.String,System.String)
      language: CSharp
      name:
        CSharp: OpenModalWindow(string, string)
        VB: OpenModalWindow(String, String)
      nameWithType:
        CSharp: UIManager.OpenModalWindow(string, string)
        VB: UIManager.OpenModalWindow(String, String)
      qualifiedName:
        CSharp: UIManager.OpenModalWindow(string, string)
        VB: UIManager.OpenModalWindow(String, String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenModalWindow
        path: ''
        startLine: 17768
      syntax:
        content:
          CSharp: public UIModalWindow OpenModalWindow(string title, string message)
          VB: Public Function OpenModalWindow(title As String, message As String) As UIModalWindow
        parameters:
        - id: title
          type: System.String
        - id: message
          type: System.String
        return:
          type: Global.UIModalWindow
      overload: Global.UIManager.OpenModalWindow*
    - id: Global.UIManager.OpenModalWindow(System.String,System.String,System.String[],UnityAction[])
      commentId: M:Global.UIManager.OpenModalWindow(System.String,System.String,System.String[],UnityAction[])
      language: CSharp
      name:
        CSharp: OpenModalWindow(string, string, string[], UnityAction[])
        VB: OpenModalWindow(String, String, String(), UnityAction())
      nameWithType:
        CSharp: UIManager.OpenModalWindow(string, string, string[], UnityAction[])
        VB: UIManager.OpenModalWindow(String, String, String(), UnityAction())
      qualifiedName:
        CSharp: UIManager.OpenModalWindow(string, string, string[], UnityAction[])
        VB: UIManager.OpenModalWindow(String, String, String(), UnityAction())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OpenModalWindow
        path: ''
        startLine: 17777
      syntax:
        content:
          CSharp: public UIModalWindow OpenModalWindow(string title, string message, string[] buttonTexts, UnityAction[] buttonOnClicks)
          VB: Public Function OpenModalWindow(title As String, message As String, buttonTexts As String(), buttonOnClicks As UnityAction()) As UIModalWindow
        parameters:
        - id: title
          type: System.String
        - id: message
          type: System.String
        - id: buttonTexts
          type: System.String[]
        - id: buttonOnClicks
          type: Global.UnityAction[]
        return:
          type: Global.UIModalWindow
      overload: Global.UIManager.OpenModalWindow*
    - id: Global.UIManager.CloseModalWindow(UIModalWindow)
      commentId: M:Global.UIManager.CloseModalWindow(UIModalWindow)
      language: CSharp
      name:
        CSharp: CloseModalWindow(UIModalWindow)
        VB: CloseModalWindow(UIModalWindow)
      nameWithType:
        CSharp: UIManager.CloseModalWindow(UIModalWindow)
        VB: UIManager.CloseModalWindow(UIModalWindow)
      qualifiedName:
        CSharp: UIManager.CloseModalWindow(UIModalWindow)
        VB: UIManager.CloseModalWindow(UIModalWindow)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CloseModalWindow
        path: ''
        startLine: 17794
      syntax:
        content:
          CSharp: public void CloseModalWindow(UIModalWindow modalWindow)
          VB: Public Sub CloseModalWindow(modalWindow As UIModalWindow)
        parameters:
        - id: modalWindow
          type: Global.UIModalWindow
      overload: Global.UIManager.CloseModalWindow*
  - id: Global.UIModalWindow
    commentId: T:Global.UIModalWindow
    language: CSharp
    name:
      CSharp: UIModalWindow
      VB: UIModalWindow
    nameWithType:
      CSharp: UIModalWindow
      VB: UIModalWindow
    qualifiedName:
      CSharp: UIModalWindow
      VB: UIModalWindow
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIModalWindow
      path: ''
      startLine: 17810
    syntax:
      content:
        CSharp: 'public class UIModalWindow : MonoBehaviour'
        VB: Public Class UIModalWindow Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UIModalWindow.SetTitle(System.String)
      commentId: M:Global.UIModalWindow.SetTitle(System.String)
      language: CSharp
      name:
        CSharp: SetTitle(string)
        VB: SetTitle(String)
      nameWithType:
        CSharp: UIModalWindow.SetTitle(string)
        VB: UIModalWindow.SetTitle(String)
      qualifiedName:
        CSharp: UIModalWindow.SetTitle(string)
        VB: UIModalWindow.SetTitle(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetTitle
        path: ''
        startLine: 17868
      syntax:
        content:
          CSharp: public UIModalWindow SetTitle(string title)
          VB: Public Function SetTitle(title As String) As UIModalWindow
        parameters:
        - id: title
          type: System.String
        return:
          type: Global.UIModalWindow
      overload: Global.UIModalWindow.SetTitle*
    - id: Global.UIModalWindow.SetMessage(System.String)
      commentId: M:Global.UIModalWindow.SetMessage(System.String)
      language: CSharp
      name:
        CSharp: SetMessage(string)
        VB: SetMessage(String)
      nameWithType:
        CSharp: UIModalWindow.SetMessage(string)
        VB: UIModalWindow.SetMessage(String)
      qualifiedName:
        CSharp: UIModalWindow.SetMessage(string)
        VB: UIModalWindow.SetMessage(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetMessage
        path: ''
        startLine: 17884
      syntax:
        content:
          CSharp: public UIModalWindow SetMessage(string message)
          VB: Public Function SetMessage(message As String) As UIModalWindow
        parameters:
        - id: message
          type: System.String
        return:
          type: Global.UIModalWindow
      overload: Global.UIModalWindow.SetMessage*
    - id: Global.UIModalWindow.AddButton(System.String,UnityAction)
      commentId: M:Global.UIModalWindow.AddButton(System.String,UnityAction)
      language: CSharp
      name:
        CSharp: AddButton(string, UnityAction)
        VB: AddButton(String, UnityAction)
      nameWithType:
        CSharp: UIModalWindow.AddButton(string, UnityAction)
        VB: UIModalWindow.AddButton(String, UnityAction)
      qualifiedName:
        CSharp: UIModalWindow.AddButton(string, UnityAction)
        VB: UIModalWindow.AddButton(String, UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddButton
        path: ''
        startLine: 17893
      syntax:
        content:
          CSharp: public UIModalWindow AddButton(string text, UnityAction onClick)
          VB: Public Function AddButton(text As String, onClick As UnityAction) As UIModalWindow
        parameters:
        - id: text
          type: System.String
        - id: onClick
          type: Global.UnityAction
        return:
          type: Global.UIModalWindow
      overload: Global.UIModalWindow.AddButton*
    - id: Global.UIModalWindow.AddCloseButton(System.String)
      commentId: M:Global.UIModalWindow.AddCloseButton(System.String)
      language: CSharp
      name:
        CSharp: AddCloseButton(string)
        VB: AddCloseButton(String)
      nameWithType:
        CSharp: UIModalWindow.AddCloseButton(string)
        VB: UIModalWindow.AddCloseButton(String)
      qualifiedName:
        CSharp: UIModalWindow.AddCloseButton(string)
        VB: UIModalWindow.AddCloseButton(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddCloseButton
        path: ''
        startLine: 17912
      syntax:
        content:
          CSharp: public UIModalWindow AddCloseButton(string text)
          VB: Public Function AddCloseButton(text As String) As UIModalWindow
        parameters:
        - id: text
          type: System.String
        return:
          type: Global.UIModalWindow
      overload: Global.UIModalWindow.AddCloseButton*
    - id: Global.UIModalWindow.Close
      commentId: M:Global.UIModalWindow.Close
      language: CSharp
      name:
        CSharp: Close()
        VB: Close()
      nameWithType:
        CSharp: UIModalWindow.Close()
        VB: UIModalWindow.Close()
      qualifiedName:
        CSharp: UIModalWindow.Close()
        VB: UIModalWindow.Close()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Close
        path: ''
        startLine: 17917
      syntax:
        content:
          CSharp: public void Close()
          VB: Public Sub Close()
      overload: Global.UIModalWindow.Close*
  - id: Global.UINumberField
    commentId: T:Global.UINumberField
    language: CSharp
    name:
      CSharp: UINumberField
      VB: UINumberField
    nameWithType:
      CSharp: UINumberField
      VB: UINumberField
    qualifiedName:
      CSharp: UINumberField
      VB: UINumberField
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UINumberField
      path: ''
      startLine: 17928
    syntax:
      content:
        CSharp: 'public class UINumberField : MonoBehaviour'
        VB: Public Class UINumberField Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UINumberField.max
      commentId: P:Global.UINumberField.max
      language: CSharp
      name:
        CSharp: max
        VB: max
      nameWithType:
        CSharp: UINumberField.max
        VB: UINumberField.max
      qualifiedName:
        CSharp: UINumberField.max
        VB: UINumberField.max
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: max
        path: ''
        startLine: 17943
      syntax:
        content:
          CSharp: public float max { get; set; }
          VB: Public Property max As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.UINumberField.max*
    - id: Global.UINumberField.min
      commentId: P:Global.UINumberField.min
      language: CSharp
      name:
        CSharp: min
        VB: min
      nameWithType:
        CSharp: UINumberField.min
        VB: UINumberField.min
      qualifiedName:
        CSharp: UINumberField.min
        VB: UINumberField.min
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: min
        path: ''
        startLine: 17959
      syntax:
        content:
          CSharp: public float min { get; set; }
          VB: Public Property min As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.UINumberField.min*
    - id: Global.UINumberField.value
      commentId: P:Global.UINumberField.value
      language: CSharp
      name:
        CSharp: value
        VB: value
      nameWithType:
        CSharp: UINumberField.value
        VB: UINumberField.value
      qualifiedName:
        CSharp: UINumberField.value
        VB: UINumberField.value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: value
        path: ''
        startLine: 17973
      syntax:
        content:
          CSharp: public float value { get; set; }
          VB: Public Property value As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.UINumberField.value*
    - id: Global.UINumberField.AddNumOfIncrements(System.Int32)
      commentId: M:Global.UINumberField.AddNumOfIncrements(System.Int32)
      language: CSharp
      name:
        CSharp: AddNumOfIncrements(int)
        VB: AddNumOfIncrements(Integer)
      nameWithType:
        CSharp: UINumberField.AddNumOfIncrements(int)
        VB: UINumberField.AddNumOfIncrements(Integer)
      qualifiedName:
        CSharp: UINumberField.AddNumOfIncrements(int)
        VB: UINumberField.AddNumOfIncrements(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddNumOfIncrements
        path: ''
        startLine: 18053
      syntax:
        content:
          CSharp: public void AddNumOfIncrements(int numOfIncrements)
          VB: Public Sub AddNumOfIncrements(numOfIncrements As Integer)
        parameters:
        - id: numOfIncrements
          type: System.Int32
      overload: Global.UINumberField.AddNumOfIncrements*
    - id: Global.UINumberField.Increment
      commentId: M:Global.UINumberField.Increment
      language: CSharp
      name:
        CSharp: Increment()
        VB: Increment()
      nameWithType:
        CSharp: UINumberField.Increment()
        VB: UINumberField.Increment()
      qualifiedName:
        CSharp: UINumberField.Increment()
        VB: UINumberField.Increment()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Increment
        path: ''
        startLine: 18057
      syntax:
        content:
          CSharp: public void Increment()
          VB: Public Sub Increment()
      overload: Global.UINumberField.Increment*
    - id: Global.UINumberField.Decrement
      commentId: M:Global.UINumberField.Decrement
      language: CSharp
      name:
        CSharp: Decrement()
        VB: Decrement()
      nameWithType:
        CSharp: UINumberField.Decrement()
        VB: UINumberField.Decrement()
      qualifiedName:
        CSharp: UINumberField.Decrement()
        VB: UINumberField.Decrement()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Decrement
        path: ''
        startLine: 18061
      syntax:
        content:
          CSharp: public void Decrement()
          VB: Public Sub Decrement()
      overload: Global.UINumberField.Decrement*
    - id: Global.UINumberField.SubscribeToValueChanged(UnityAction)
      commentId: M:Global.UINumberField.SubscribeToValueChanged(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToValueChanged(UnityAction)
        VB: SubscribeToValueChanged(UnityAction)
      nameWithType:
        CSharp: UINumberField.SubscribeToValueChanged(UnityAction)
        VB: UINumberField.SubscribeToValueChanged(UnityAction)
      qualifiedName:
        CSharp: UINumberField.SubscribeToValueChanged(UnityAction)
        VB: UINumberField.SubscribeToValueChanged(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToValueChanged
        path: ''
        startLine: 18078
      syntax:
        content:
          CSharp: public void SubscribeToValueChanged(UnityAction call)
          VB: Public Sub SubscribeToValueChanged([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UINumberField.SubscribeToValueChanged*
  - id: Global.UIScale
    commentId: T:Global.UIScale
    language: CSharp
    name:
      CSharp: UIScale
      VB: UIScale
    nameWithType:
      CSharp: UIScale
      VB: UIScale
    qualifiedName:
      CSharp: UIScale
      VB: UIScale
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIScale
      path: ''
      startLine: 18090
    syntax:
      content:
        CSharp: 'public class UIScale : MonoBehaviour'
        VB: Public Class UIScale Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UIScale.width
      commentId: F:Global.UIScale.width
      language: CSharp
      name:
        CSharp: width
        VB: width
      nameWithType:
        CSharp: UIScale.width
        VB: UIScale.width
      qualifiedName:
        CSharp: UIScale.width
        VB: UIScale.width
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: width
        path: ''
        startLine: 18110
      syntax:
        content:
          CSharp: public float width
          VB: Public width As Single
        return:
          type: System.Single
    - id: Global.UIScale.height
      commentId: F:Global.UIScale.height
      language: CSharp
      name:
        CSharp: height
        VB: height
      nameWithType:
        CSharp: UIScale.height
        VB: UIScale.height
      qualifiedName:
        CSharp: UIScale.height
        VB: UIScale.height
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: height
        path: ''
        startLine: 18112
      syntax:
        content:
          CSharp: public float height
          VB: Public height As Single
        return:
          type: System.Single
    - id: Global.UIScale.backgroundColour
      commentId: F:Global.UIScale.backgroundColour
      language: CSharp
      name:
        CSharp: backgroundColour
        VB: backgroundColour
      nameWithType:
        CSharp: UIScale.backgroundColour
        VB: UIScale.backgroundColour
      qualifiedName:
        CSharp: UIScale.backgroundColour
        VB: UIScale.backgroundColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: backgroundColour
        path: ''
        startLine: 18115
      syntax:
        content:
          CSharp: public Color backgroundColour
          VB: Public backgroundColour As Color
        return:
          type: Global.Color
    - id: Global.UIScale.backgroundHoverColour
      commentId: F:Global.UIScale.backgroundHoverColour
      language: CSharp
      name:
        CSharp: backgroundHoverColour
        VB: backgroundHoverColour
      nameWithType:
        CSharp: UIScale.backgroundHoverColour
        VB: UIScale.backgroundHoverColour
      qualifiedName:
        CSharp: UIScale.backgroundHoverColour
        VB: UIScale.backgroundHoverColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: backgroundHoverColour
        path: ''
        startLine: 18116
      syntax:
        content:
          CSharp: public Color backgroundHoverColour
          VB: Public backgroundHoverColour As Color
        return:
          type: Global.Color
    - id: Global.UIScale.backgroundPressedColour
      commentId: F:Global.UIScale.backgroundPressedColour
      language: CSharp
      name:
        CSharp: backgroundPressedColour
        VB: backgroundPressedColour
      nameWithType:
        CSharp: UIScale.backgroundPressedColour
        VB: UIScale.backgroundPressedColour
      qualifiedName:
        CSharp: UIScale.backgroundPressedColour
        VB: UIScale.backgroundPressedColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: backgroundPressedColour
        path: ''
        startLine: 18117
      syntax:
        content:
          CSharp: public Color backgroundPressedColour
          VB: Public backgroundPressedColour As Color
        return:
          type: Global.Color
    - id: Global.UIScale.decimalPlaces
      commentId: P:Global.UIScale.decimalPlaces
      language: CSharp
      name:
        CSharp: decimalPlaces
        VB: decimalPlaces
      nameWithType:
        CSharp: UIScale.decimalPlaces
        VB: UIScale.decimalPlaces
      qualifiedName:
        CSharp: UIScale.decimalPlaces
        VB: UIScale.decimalPlaces
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: decimalPlaces
        path: ''
        startLine: 18123
      syntax:
        content:
          CSharp: public int decimalPlaces { get; }
          VB: Public ReadOnly Property decimalPlaces As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.UIScale.decimalPlaces*
    - id: Global.UIScale.value
      commentId: P:Global.UIScale.value
      language: CSharp
      name:
        CSharp: value
        VB: value
      nameWithType:
        CSharp: UIScale.value
        VB: UIScale.value
      qualifiedName:
        CSharp: UIScale.value
        VB: UIScale.value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: value
        path: ''
        startLine: 18143
      syntax:
        content:
          CSharp: public float value { get; }
          VB: Public Property value As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.UIScale.value*
    - id: Global.UIScale.UpdateDisplay
      commentId: M:Global.UIScale.UpdateDisplay
      language: CSharp
      name:
        CSharp: UpdateDisplay()
        VB: UpdateDisplay()
      nameWithType:
        CSharp: UIScale.UpdateDisplay()
        VB: UIScale.UpdateDisplay()
      qualifiedName:
        CSharp: UIScale.UpdateDisplay()
        VB: UIScale.UpdateDisplay()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UpdateDisplay
        path: ''
        startLine: 18204
      syntax:
        content:
          CSharp: public void UpdateDisplay()
          VB: Public Sub UpdateDisplay()
      overload: Global.UIScale.UpdateDisplay*
    - id: Global.UIScale.SetValueNoNotify(System.Single)
      commentId: M:Global.UIScale.SetValueNoNotify(System.Single)
      language: CSharp
      name:
        CSharp: SetValueNoNotify(float)
        VB: SetValueNoNotify(Single)
      nameWithType:
        CSharp: UIScale.SetValueNoNotify(float)
        VB: UIScale.SetValueNoNotify(Single)
      qualifiedName:
        CSharp: UIScale.SetValueNoNotify(float)
        VB: UIScale.SetValueNoNotify(Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetValueNoNotify
        path: ''
        startLine: 18268
      syntax:
        content:
          CSharp: public bool SetValueNoNotify(float value)
          VB: Public Function SetValueNoNotify(value As Single) As Boolean
        parameters:
        - id: value
          type: System.Single
        return:
          type: System.Boolean
      overload: Global.UIScale.SetValueNoNotify*
    - id: Global.UIScale.SetValue(System.Single)
      commentId: M:Global.UIScale.SetValue(System.Single)
      language: CSharp
      name:
        CSharp: SetValue(float)
        VB: SetValue(Single)
      nameWithType:
        CSharp: UIScale.SetValue(float)
        VB: UIScale.SetValue(Single)
      qualifiedName:
        CSharp: UIScale.SetValue(float)
        VB: UIScale.SetValue(Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetValue
        path: ''
        startLine: 18278
      syntax:
        content:
          CSharp: public bool SetValue(float value)
          VB: Public Function SetValue(value As Single) As Boolean
        parameters:
        - id: value
          type: System.Single
        return:
          type: System.Boolean
      overload: Global.UIScale.SetValue*
    - id: Global.UIScale.SubscribeToValueChange(UnityAction)
      commentId: M:Global.UIScale.SubscribeToValueChange(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToValueChange(UnityAction)
        VB: SubscribeToValueChange(UnityAction)
      nameWithType:
        CSharp: UIScale.SubscribeToValueChange(UnityAction)
        VB: UIScale.SubscribeToValueChange(UnityAction)
      qualifiedName:
        CSharp: UIScale.SubscribeToValueChange(UnityAction)
        VB: UIScale.SubscribeToValueChange(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToValueChange
        path: ''
        startLine: 18290
      syntax:
        content:
          CSharp: public void SubscribeToValueChange(UnityAction call)
          VB: Public Sub SubscribeToValueChange([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIScale.SubscribeToValueChange*
  - id: Global.ScrollDirection
    commentId: T:Global.ScrollDirection
    language: CSharp
    name:
      CSharp: ScrollDirection
      VB: ScrollDirection
    nameWithType:
      CSharp: ScrollDirection
      VB: ScrollDirection
    qualifiedName:
      CSharp: ScrollDirection
      VB: ScrollDirection
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ScrollDirection
      path: ''
      startLine: 18302
    syntax:
      content:
        CSharp: public enum ScrollDirection
        VB: Public Enum ScrollDirection
    items:
    - id: Global.ScrollDirection.Vertical
      commentId: F:Global.ScrollDirection.Vertical
      language: CSharp
      name:
        CSharp: Vertical
        VB: Vertical
      nameWithType:
        CSharp: ScrollDirection.Vertical
        VB: ScrollDirection.Vertical
      qualifiedName:
        CSharp: ScrollDirection.Vertical
        VB: ScrollDirection.Vertical
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Vertical
        path: ''
        startLine: 18304
      syntax:
        content:
          CSharp: Vertical = 0
          VB: Vertical = 0
        return:
          type: Global.ScrollDirection
    - id: Global.ScrollDirection.Horizontal
      commentId: F:Global.ScrollDirection.Horizontal
      language: CSharp
      name:
        CSharp: Horizontal
        VB: Horizontal
      nameWithType:
        CSharp: ScrollDirection.Horizontal
        VB: ScrollDirection.Horizontal
      qualifiedName:
        CSharp: ScrollDirection.Horizontal
        VB: ScrollDirection.Horizontal
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Horizontal
        path: ''
        startLine: 18305
      syntax:
        content:
          CSharp: Horizontal = 1
          VB: Horizontal = 1
        return:
          type: Global.ScrollDirection
  - id: Global.UIScrollbar
    commentId: T:Global.UIScrollbar
    language: CSharp
    name:
      CSharp: UIScrollbar
      VB: UIScrollbar
    nameWithType:
      CSharp: UIScrollbar
      VB: UIScrollbar
    qualifiedName:
      CSharp: UIScrollbar
      VB: UIScrollbar
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIScrollbar
      path: ''
      startLine: 18308
    syntax:
      content:
        CSharp: 'public class UIScrollbar : MonoBehaviour'
        VB: Public Class UIScrollbar Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UIScrollbar.scrollAmount
      commentId: P:Global.UIScrollbar.scrollAmount
      language: CSharp
      name:
        CSharp: scrollAmount
        VB: scrollAmount
      nameWithType:
        CSharp: UIScrollbar.scrollAmount
        VB: UIScrollbar.scrollAmount
      qualifiedName:
        CSharp: UIScrollbar.scrollAmount
        VB: UIScrollbar.scrollAmount
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: scrollAmount
        path: ''
        startLine: 18316
      syntax:
        content:
          CSharp: public float scrollAmount { get; set; }
          VB: Public Property scrollAmount As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.UIScrollbar.scrollAmount*
    - id: Global.UIScrollbar.width
      commentId: F:Global.UIScrollbar.width
      language: CSharp
      name:
        CSharp: width
        VB: width
      nameWithType:
        CSharp: UIScrollbar.width
        VB: UIScrollbar.width
      qualifiedName:
        CSharp: UIScrollbar.width
        VB: UIScrollbar.width
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: width
        path: ''
        startLine: 18333
      syntax:
        content:
          CSharp: public float width
          VB: Public width As Single
        return:
          type: System.Single
    - id: Global.UIScrollbar.height
      commentId: F:Global.UIScrollbar.height
      language: CSharp
      name:
        CSharp: height
        VB: height
      nameWithType:
        CSharp: UIScrollbar.height
        VB: UIScrollbar.height
      qualifiedName:
        CSharp: UIScrollbar.height
        VB: UIScrollbar.height
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: height
        path: ''
        startLine: 18335
      syntax:
        content:
          CSharp: public float height
          VB: Public height As Single
        return:
          type: System.Single
    - id: Global.UIScrollbar.backgroundColour
      commentId: F:Global.UIScrollbar.backgroundColour
      language: CSharp
      name:
        CSharp: backgroundColour
        VB: backgroundColour
      nameWithType:
        CSharp: UIScrollbar.backgroundColour
        VB: UIScrollbar.backgroundColour
      qualifiedName:
        CSharp: UIScrollbar.backgroundColour
        VB: UIScrollbar.backgroundColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: backgroundColour
        path: ''
        startLine: 18338
      syntax:
        content:
          CSharp: public Color backgroundColour
          VB: Public backgroundColour As Color
        return:
          type: Global.Color
    - id: Global.UIScrollbar.backgroundHoverColour
      commentId: F:Global.UIScrollbar.backgroundHoverColour
      language: CSharp
      name:
        CSharp: backgroundHoverColour
        VB: backgroundHoverColour
      nameWithType:
        CSharp: UIScrollbar.backgroundHoverColour
        VB: UIScrollbar.backgroundHoverColour
      qualifiedName:
        CSharp: UIScrollbar.backgroundHoverColour
        VB: UIScrollbar.backgroundHoverColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: backgroundHoverColour
        path: ''
        startLine: 18339
      syntax:
        content:
          CSharp: public Color backgroundHoverColour
          VB: Public backgroundHoverColour As Color
        return:
          type: Global.Color
    - id: Global.UIScrollbar.backgroundPressedColour
      commentId: F:Global.UIScrollbar.backgroundPressedColour
      language: CSharp
      name:
        CSharp: backgroundPressedColour
        VB: backgroundPressedColour
      nameWithType:
        CSharp: UIScrollbar.backgroundPressedColour
        VB: UIScrollbar.backgroundPressedColour
      qualifiedName:
        CSharp: UIScrollbar.backgroundPressedColour
        VB: UIScrollbar.backgroundPressedColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: backgroundPressedColour
        path: ''
        startLine: 18340
      syntax:
        content:
          CSharp: public Color backgroundPressedColour
          VB: Public backgroundPressedColour As Color
        return:
          type: Global.Color
    - id: Global.UIScrollbar.handleColour
      commentId: F:Global.UIScrollbar.handleColour
      language: CSharp
      name:
        CSharp: handleColour
        VB: handleColour
      nameWithType:
        CSharp: UIScrollbar.handleColour
        VB: UIScrollbar.handleColour
      qualifiedName:
        CSharp: UIScrollbar.handleColour
        VB: UIScrollbar.handleColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: handleColour
        path: ''
        startLine: 18346
      syntax:
        content:
          CSharp: public Color handleColour
          VB: Public handleColour As Color
        return:
          type: Global.Color
    - id: Global.UIScrollbar.handleHoverColour
      commentId: F:Global.UIScrollbar.handleHoverColour
      language: CSharp
      name:
        CSharp: handleHoverColour
        VB: handleHoverColour
      nameWithType:
        CSharp: UIScrollbar.handleHoverColour
        VB: UIScrollbar.handleHoverColour
      qualifiedName:
        CSharp: UIScrollbar.handleHoverColour
        VB: UIScrollbar.handleHoverColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: handleHoverColour
        path: ''
        startLine: 18347
      syntax:
        content:
          CSharp: public Color handleHoverColour
          VB: Public handleHoverColour As Color
        return:
          type: Global.Color
    - id: Global.UIScrollbar.handlePressedColour
      commentId: F:Global.UIScrollbar.handlePressedColour
      language: CSharp
      name:
        CSharp: handlePressedColour
        VB: handlePressedColour
      nameWithType:
        CSharp: UIScrollbar.handlePressedColour
        VB: UIScrollbar.handlePressedColour
      qualifiedName:
        CSharp: UIScrollbar.handlePressedColour
        VB: UIScrollbar.handlePressedColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: handlePressedColour
        path: ''
        startLine: 18348
      syntax:
        content:
          CSharp: public Color handlePressedColour
          VB: Public handlePressedColour As Color
        return:
          type: Global.Color
    - id: Global.UIScrollbar.UpdateDisplay
      commentId: M:Global.UIScrollbar.UpdateDisplay
      language: CSharp
      name:
        CSharp: UpdateDisplay()
        VB: UpdateDisplay()
      nameWithType:
        CSharp: UIScrollbar.UpdateDisplay()
        VB: UIScrollbar.UpdateDisplay()
      qualifiedName:
        CSharp: UIScrollbar.UpdateDisplay()
        VB: UIScrollbar.UpdateDisplay()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UpdateDisplay
        path: ''
        startLine: 18458
      syntax:
        content:
          CSharp: public void UpdateDisplay()
          VB: Public Sub UpdateDisplay()
      overload: Global.UIScrollbar.UpdateDisplay*
    - id: Global.UIScrollbar.SetScrollAmount(System.Single)
      commentId: M:Global.UIScrollbar.SetScrollAmount(System.Single)
      language: CSharp
      name:
        CSharp: SetScrollAmount(float)
        VB: SetScrollAmount(Single)
      nameWithType:
        CSharp: UIScrollbar.SetScrollAmount(float)
        VB: UIScrollbar.SetScrollAmount(Single)
      qualifiedName:
        CSharp: UIScrollbar.SetScrollAmount(float)
        VB: UIScrollbar.SetScrollAmount(Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetScrollAmount
        path: ''
        startLine: 18503
      syntax:
        content:
          CSharp: public void SetScrollAmount(float scrollAmount)
          VB: Public Sub SetScrollAmount(scrollAmount As Single)
        parameters:
        - id: scrollAmount
          type: System.Single
      overload: Global.UIScrollbar.SetScrollAmount*
    - id: Global.UIScrollbar.GetScrollAmount
      commentId: M:Global.UIScrollbar.GetScrollAmount
      language: CSharp
      name:
        CSharp: GetScrollAmount()
        VB: GetScrollAmount()
      nameWithType:
        CSharp: UIScrollbar.GetScrollAmount()
        VB: UIScrollbar.GetScrollAmount()
      qualifiedName:
        CSharp: UIScrollbar.GetScrollAmount()
        VB: UIScrollbar.GetScrollAmount()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetScrollAmount
        path: ''
        startLine: 18542
      syntax:
        content:
          CSharp: public float GetScrollAmount()
          VB: Public Function GetScrollAmount() As Single
        return:
          type: System.Single
      overload: Global.UIScrollbar.GetScrollAmount*
  - id: Global.UITabManager
    commentId: T:Global.UITabManager
    language: CSharp
    name:
      CSharp: UITabManager
      VB: UITabManager
    nameWithType:
      CSharp: UITabManager
      VB: UITabManager
    qualifiedName:
      CSharp: UITabManager
      VB: UITabManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UITabManager
      path: ''
      startLine: 18566
    syntax:
      content:
        CSharp: 'public class UITabManager : MonoBehaviour'
        VB: Public Class UITabManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UITabManager.AddTab(GameObject)
      commentId: M:Global.UITabManager.AddTab(GameObject)
      language: CSharp
      name:
        CSharp: AddTab(GameObject)
        VB: AddTab(GameObject)
      nameWithType:
        CSharp: UITabManager.AddTab(GameObject)
        VB: UITabManager.AddTab(GameObject)
      qualifiedName:
        CSharp: UITabManager.AddTab(GameObject)
        VB: UITabManager.AddTab(GameObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddTab
        path: ''
        startLine: 18606
      syntax:
        content:
          CSharp: public void AddTab(GameObject tab)
          VB: Public Sub AddTab(tab As GameObject)
        parameters:
        - id: tab
          type: Global.GameObject
      overload: Global.UITabManager.AddTab*
    - id: Global.UITabManager.SelectTab(System.Int32)
      commentId: M:Global.UITabManager.SelectTab(System.Int32)
      language: CSharp
      name:
        CSharp: SelectTab(int)
        VB: SelectTab(Integer)
      nameWithType:
        CSharp: UITabManager.SelectTab(int)
        VB: UITabManager.SelectTab(Integer)
      qualifiedName:
        CSharp: UITabManager.SelectTab(int)
        VB: UITabManager.SelectTab(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SelectTab
        path: ''
        startLine: 18611
      syntax:
        content:
          CSharp: public void SelectTab(int tabIndex)
          VB: Public Sub SelectTab(tabIndex As Integer)
        parameters:
        - id: tabIndex
          type: System.Int32
      overload: Global.UITabManager.SelectTab*
    - id: Global.UITabManager.SelectTabEditor(System.Int32)
      commentId: M:Global.UITabManager.SelectTabEditor(System.Int32)
      language: CSharp
      name:
        CSharp: SelectTabEditor(int)
        VB: SelectTabEditor(Integer)
      nameWithType:
        CSharp: UITabManager.SelectTabEditor(int)
        VB: UITabManager.SelectTabEditor(Integer)
      qualifiedName:
        CSharp: UITabManager.SelectTabEditor(int)
        VB: UITabManager.SelectTabEditor(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SelectTabEditor
        path: ''
        startLine: 18633
      syntax:
        content:
          CSharp: public void SelectTabEditor(int tabIndex)
          VB: Public Sub SelectTabEditor(tabIndex As Integer)
        parameters:
        - id: tabIndex
          type: System.Int32
      overload: Global.UITabManager.SelectTabEditor*
  - id: Global.UITextboxAnchorPoint
    commentId: T:Global.UITextboxAnchorPoint
    language: CSharp
    name:
      CSharp: UITextboxAnchorPoint
      VB: UITextboxAnchorPoint
    nameWithType:
      CSharp: UITextboxAnchorPoint
      VB: UITextboxAnchorPoint
    qualifiedName:
      CSharp: UITextboxAnchorPoint
      VB: UITextboxAnchorPoint
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UITextboxAnchorPoint
      path: ''
      startLine: 18660
    syntax:
      content:
        CSharp: public enum UITextboxAnchorPoint
        VB: Public Enum UITextboxAnchorPoint
    items:
    - id: Global.UITextboxAnchorPoint.Left
      commentId: F:Global.UITextboxAnchorPoint.Left
      language: CSharp
      name:
        CSharp: Left
        VB: Left
      nameWithType:
        CSharp: UITextboxAnchorPoint.Left
        VB: UITextboxAnchorPoint.Left
      qualifiedName:
        CSharp: UITextboxAnchorPoint.Left
        VB: UITextboxAnchorPoint.Left
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Left
        path: ''
        startLine: 18662
      syntax:
        content:
          CSharp: Left = 3
          VB: Left = 3
        return:
          type: Global.UITextboxAnchorPoint
    - id: Global.UITextboxAnchorPoint.Centre
      commentId: F:Global.UITextboxAnchorPoint.Centre
      language: CSharp
      name:
        CSharp: Centre
        VB: Centre
      nameWithType:
        CSharp: UITextboxAnchorPoint.Centre
        VB: UITextboxAnchorPoint.Centre
      qualifiedName:
        CSharp: UITextboxAnchorPoint.Centre
        VB: UITextboxAnchorPoint.Centre
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Centre
        path: ''
        startLine: 18663
      syntax:
        content:
          CSharp: Centre = 4
          VB: Centre = 4
        return:
          type: Global.UITextboxAnchorPoint
    - id: Global.UITextboxAnchorPoint.Right
      commentId: F:Global.UITextboxAnchorPoint.Right
      language: CSharp
      name:
        CSharp: Right
        VB: Right
      nameWithType:
        CSharp: UITextboxAnchorPoint.Right
        VB: UITextboxAnchorPoint.Right
      qualifiedName:
        CSharp: UITextboxAnchorPoint.Right
        VB: UITextboxAnchorPoint.Right
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Right
        path: ''
        startLine: 18664
      syntax:
        content:
          CSharp: Right = 5
          VB: Right = 5
        return:
          type: Global.UITextboxAnchorPoint
  - id: Global.UITextbox
    commentId: T:Global.UITextbox
    language: CSharp
    name:
      CSharp: UITextbox
      VB: UITextbox
    nameWithType:
      CSharp: UITextbox
      VB: UITextbox
    qualifiedName:
      CSharp: UITextbox
      VB: UITextbox
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UITextbox
      path: ''
      startLine: 18667
    syntax:
      content:
        CSharp: 'public class UITextbox : MonoBehaviour'
        VB: Public Class UITextbox Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UITextbox.width
      commentId: F:Global.UITextbox.width
      language: CSharp
      name:
        CSharp: width
        VB: width
      nameWithType:
        CSharp: UITextbox.width
        VB: UITextbox.width
      qualifiedName:
        CSharp: UITextbox.width
        VB: UITextbox.width
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: width
        path: ''
        startLine: 18673
      syntax:
        content:
          CSharp: public float width
          VB: Public width As Single
        return:
          type: System.Single
    - id: Global.UITextbox.height
      commentId: F:Global.UITextbox.height
      language: CSharp
      name:
        CSharp: height
        VB: height
      nameWithType:
        CSharp: UITextbox.height
        VB: UITextbox.height
      qualifiedName:
        CSharp: UITextbox.height
        VB: UITextbox.height
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: height
        path: ''
        startLine: 18675
      syntax:
        content:
          CSharp: public float height
          VB: Public height As Single
        return:
          type: System.Single
    - id: Global.UITextbox.anchorPoint
      commentId: F:Global.UITextbox.anchorPoint
      language: CSharp
      name:
        CSharp: anchorPoint
        VB: anchorPoint
      nameWithType:
        CSharp: UITextbox.anchorPoint
        VB: UITextbox.anchorPoint
      qualifiedName:
        CSharp: UITextbox.anchorPoint
        VB: UITextbox.anchorPoint
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: anchorPoint
        path: ''
        startLine: 18676
      syntax:
        content:
          CSharp: public UITextboxAnchorPoint anchorPoint
          VB: Public anchorPoint As UITextboxAnchorPoint
        return:
          type: Global.UITextboxAnchorPoint
    - id: Global.UITextbox.text
      commentId: P:Global.UITextbox.text
      language: CSharp
      name:
        CSharp: text
        VB: text
      nameWithType:
        CSharp: UITextbox.text
        VB: UITextbox.text
      qualifiedName:
        CSharp: UITextbox.text
        VB: UITextbox.text
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: text
        path: ''
        startLine: 18681
      syntax:
        content:
          CSharp: public string text { get; }
          VB: Public ReadOnly Property text As String
        parameters: []
        return:
          type: System.String
      overload: Global.UITextbox.text*
    - id: Global.UITextbox.prefix
      commentId: P:Global.UITextbox.prefix
      language: CSharp
      name:
        CSharp: prefix
        VB: prefix
      nameWithType:
        CSharp: UITextbox.prefix
        VB: UITextbox.prefix
      qualifiedName:
        CSharp: UITextbox.prefix
        VB: UITextbox.prefix
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: prefix
        path: ''
        startLine: 18690
      syntax:
        content:
          CSharp: public string prefix { get; }
          VB: Public ReadOnly Property prefix As String
        parameters: []
        return:
          type: System.String
      overload: Global.UITextbox.prefix*
    - id: Global.UITextbox.suffix
      commentId: P:Global.UITextbox.suffix
      language: CSharp
      name:
        CSharp: suffix
        VB: suffix
      nameWithType:
        CSharp: UITextbox.suffix
        VB: UITextbox.suffix
      qualifiedName:
        CSharp: UITextbox.suffix
        VB: UITextbox.suffix
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: suffix
        path: ''
        startLine: 18699
      syntax:
        content:
          CSharp: public string suffix { get; }
          VB: Public ReadOnly Property suffix As String
        parameters: []
        return:
          type: System.String
      overload: Global.UITextbox.suffix*
    - id: Global.UITextbox.allowLetters
      commentId: F:Global.UITextbox.allowLetters
      language: CSharp
      name:
        CSharp: allowLetters
        VB: allowLetters
      nameWithType:
        CSharp: UITextbox.allowLetters
        VB: UITextbox.allowLetters
      qualifiedName:
        CSharp: UITextbox.allowLetters
        VB: UITextbox.allowLetters
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: allowLetters
        path: ''
        startLine: 18706
      syntax:
        content:
          CSharp: public bool allowLetters
          VB: Public allowLetters As Boolean
        return:
          type: System.Boolean
    - id: Global.UITextbox.allowNumbers
      commentId: F:Global.UITextbox.allowNumbers
      language: CSharp
      name:
        CSharp: allowNumbers
        VB: allowNumbers
      nameWithType:
        CSharp: UITextbox.allowNumbers
        VB: UITextbox.allowNumbers
      qualifiedName:
        CSharp: UITextbox.allowNumbers
        VB: UITextbox.allowNumbers
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: allowNumbers
        path: ''
        startLine: 18707
      syntax:
        content:
          CSharp: public bool allowNumbers
          VB: Public allowNumbers As Boolean
        return:
          type: System.Boolean
    - id: Global.UITextbox.allowSpaces
      commentId: F:Global.UITextbox.allowSpaces
      language: CSharp
      name:
        CSharp: allowSpaces
        VB: allowSpaces
      nameWithType:
        CSharp: UITextbox.allowSpaces
        VB: UITextbox.allowSpaces
      qualifiedName:
        CSharp: UITextbox.allowSpaces
        VB: UITextbox.allowSpaces
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: allowSpaces
        path: ''
        startLine: 18708
      syntax:
        content:
          CSharp: public bool allowSpaces
          VB: Public allowSpaces As Boolean
        return:
          type: System.Boolean
    - id: Global.UITextbox.allowPunctuation
      commentId: F:Global.UITextbox.allowPunctuation
      language: CSharp
      name:
        CSharp: allowPunctuation
        VB: allowPunctuation
      nameWithType:
        CSharp: UITextbox.allowPunctuation
        VB: UITextbox.allowPunctuation
      qualifiedName:
        CSharp: UITextbox.allowPunctuation
        VB: UITextbox.allowPunctuation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: allowPunctuation
        path: ''
        startLine: 18709
      syntax:
        content:
          CSharp: public bool allowPunctuation
          VB: Public allowPunctuation As Boolean
        return:
          type: System.Boolean
    - id: Global.UITextbox.backgroundColour
      commentId: F:Global.UITextbox.backgroundColour
      language: CSharp
      name:
        CSharp: backgroundColour
        VB: backgroundColour
      nameWithType:
        CSharp: UITextbox.backgroundColour
        VB: UITextbox.backgroundColour
      qualifiedName:
        CSharp: UITextbox.backgroundColour
        VB: UITextbox.backgroundColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: backgroundColour
        path: ''
        startLine: 18720
      syntax:
        content:
          CSharp: public Color backgroundColour
          VB: Public backgroundColour As Color
        return:
          type: Global.Color
    - id: Global.UITextbox.backgroundHoverColour
      commentId: F:Global.UITextbox.backgroundHoverColour
      language: CSharp
      name:
        CSharp: backgroundHoverColour
        VB: backgroundHoverColour
      nameWithType:
        CSharp: UITextbox.backgroundHoverColour
        VB: UITextbox.backgroundHoverColour
      qualifiedName:
        CSharp: UITextbox.backgroundHoverColour
        VB: UITextbox.backgroundHoverColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: backgroundHoverColour
        path: ''
        startLine: 18721
      syntax:
        content:
          CSharp: public Color backgroundHoverColour
          VB: Public backgroundHoverColour As Color
        return:
          type: Global.Color
    - id: Global.UITextbox.backgroundPressedColour
      commentId: F:Global.UITextbox.backgroundPressedColour
      language: CSharp
      name:
        CSharp: backgroundPressedColour
        VB: backgroundPressedColour
      nameWithType:
        CSharp: UITextbox.backgroundPressedColour
        VB: UITextbox.backgroundPressedColour
      qualifiedName:
        CSharp: UITextbox.backgroundPressedColour
        VB: UITextbox.backgroundPressedColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: backgroundPressedColour
        path: ''
        startLine: 18722
      syntax:
        content:
          CSharp: public Color backgroundPressedColour
          VB: Public backgroundPressedColour As Color
        return:
          type: Global.Color
    - id: Global.UITextbox.backgroundSelectedColour
      commentId: F:Global.UITextbox.backgroundSelectedColour
      language: CSharp
      name:
        CSharp: backgroundSelectedColour
        VB: backgroundSelectedColour
      nameWithType:
        CSharp: UITextbox.backgroundSelectedColour
        VB: UITextbox.backgroundSelectedColour
      qualifiedName:
        CSharp: UITextbox.backgroundSelectedColour
        VB: UITextbox.backgroundSelectedColour
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: backgroundSelectedColour
        path: ''
        startLine: 18723
      syntax:
        content:
          CSharp: public Color backgroundSelectedColour
          VB: Public backgroundSelectedColour As Color
        return:
          type: Global.Color
    - id: Global.UITextbox.UpdateDisplay
      commentId: M:Global.UITextbox.UpdateDisplay
      language: CSharp
      name:
        CSharp: UpdateDisplay()
        VB: UpdateDisplay()
      nameWithType:
        CSharp: UITextbox.UpdateDisplay()
        VB: UITextbox.UpdateDisplay()
      qualifiedName:
        CSharp: UITextbox.UpdateDisplay()
        VB: UITextbox.UpdateDisplay()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UpdateDisplay
        path: ''
        startLine: 18799
      syntax:
        content:
          CSharp: public void UpdateDisplay()
          VB: Public Sub UpdateDisplay()
      overload: Global.UITextbox.UpdateDisplay*
    - id: Global.UITextbox.UpdateAnchor
      commentId: M:Global.UITextbox.UpdateAnchor
      language: CSharp
      name:
        CSharp: UpdateAnchor()
        VB: UpdateAnchor()
      nameWithType:
        CSharp: UITextbox.UpdateAnchor()
        VB: UITextbox.UpdateAnchor()
      qualifiedName:
        CSharp: UITextbox.UpdateAnchor()
        VB: UITextbox.UpdateAnchor()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UpdateAnchor
        path: ''
        startLine: 18822
      syntax:
        content:
          CSharp: public void UpdateAnchor()
          VB: Public Sub UpdateAnchor()
      overload: Global.UITextbox.UpdateAnchor*
    - id: Global.UITextbox.SetText(System.String)
      commentId: M:Global.UITextbox.SetText(System.String)
      language: CSharp
      name:
        CSharp: SetText(string)
        VB: SetText(String)
      nameWithType:
        CSharp: UITextbox.SetText(string)
        VB: UITextbox.SetText(String)
      qualifiedName:
        CSharp: UITextbox.SetText(string)
        VB: UITextbox.SetText(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetText
        path: ''
        startLine: 18923
      syntax:
        content:
          CSharp: public void SetText(string text)
          VB: Public Sub SetText(text As String)
        parameters:
        - id: text
          type: System.String
      overload: Global.UITextbox.SetText*
    - id: Global.UITextbox.SetPrefix(System.String)
      commentId: M:Global.UITextbox.SetPrefix(System.String)
      language: CSharp
      name:
        CSharp: SetPrefix(string)
        VB: SetPrefix(String)
      nameWithType:
        CSharp: UITextbox.SetPrefix(string)
        VB: UITextbox.SetPrefix(String)
      qualifiedName:
        CSharp: UITextbox.SetPrefix(string)
        VB: UITextbox.SetPrefix(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetPrefix
        path: ''
        startLine: 18928
      syntax:
        content:
          CSharp: public void SetPrefix(string prefix)
          VB: Public Sub SetPrefix(prefix As String)
        parameters:
        - id: prefix
          type: System.String
      overload: Global.UITextbox.SetPrefix*
    - id: Global.UITextbox.SetSuffix(System.String)
      commentId: M:Global.UITextbox.SetSuffix(System.String)
      language: CSharp
      name:
        CSharp: SetSuffix(string)
        VB: SetSuffix(String)
      nameWithType:
        CSharp: UITextbox.SetSuffix(string)
        VB: UITextbox.SetSuffix(String)
      qualifiedName:
        CSharp: UITextbox.SetSuffix(string)
        VB: UITextbox.SetSuffix(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetSuffix
        path: ''
        startLine: 18933
      syntax:
        content:
          CSharp: public void SetSuffix(string suffix)
          VB: Public Sub SetSuffix(suffix As String)
        parameters:
        - id: suffix
          type: System.String
      overload: Global.UITextbox.SetSuffix*
    - id: Global.UITextbox.SubscribeToInputEvent(UnityAction)
      commentId: M:Global.UITextbox.SubscribeToInputEvent(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToInputEvent(UnityAction)
        VB: SubscribeToInputEvent(UnityAction)
      nameWithType:
        CSharp: UITextbox.SubscribeToInputEvent(UnityAction)
        VB: UITextbox.SubscribeToInputEvent(UnityAction)
      qualifiedName:
        CSharp: UITextbox.SubscribeToInputEvent(UnityAction)
        VB: UITextbox.SubscribeToInputEvent(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToInputEvent
        path: ''
        startLine: 18939
      syntax:
        content:
          CSharp: public void SubscribeToInputEvent(UnityAction call)
          VB: Public Sub SubscribeToInputEvent([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UITextbox.SubscribeToInputEvent*
    - id: Global.UITextbox.SubscribeToFinishEvent(UnityAction)
      commentId: M:Global.UITextbox.SubscribeToFinishEvent(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToFinishEvent(UnityAction)
        VB: SubscribeToFinishEvent(UnityAction)
      nameWithType:
        CSharp: UITextbox.SubscribeToFinishEvent(UnityAction)
        VB: UITextbox.SubscribeToFinishEvent(UnityAction)
      qualifiedName:
        CSharp: UITextbox.SubscribeToFinishEvent(UnityAction)
        VB: UITextbox.SubscribeToFinishEvent(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToFinishEvent
        path: ''
        startLine: 18943
      syntax:
        content:
          CSharp: public void SubscribeToFinishEvent(UnityAction call)
          VB: Public Sub SubscribeToFinishEvent([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UITextbox.SubscribeToFinishEvent*
  - id: Global.UITileIcon
    commentId: T:Global.UITileIcon
    language: CSharp
    name:
      CSharp: UITileIcon
      VB: UITileIcon
    nameWithType:
      CSharp: UITileIcon
      VB: UITileIcon
    qualifiedName:
      CSharp: UITileIcon
      VB: UITileIcon
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UITileIcon
      path: ''
      startLine: 18955
    syntax:
      content:
        CSharp: 'public class UITileIcon : MonoBehaviour'
        VB: Public Class UITileIcon Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UITileIcon.file
      commentId: P:Global.UITileIcon.file
      language: CSharp
      name:
        CSharp: file
        VB: file
      nameWithType:
        CSharp: UITileIcon.file
        VB: UITileIcon.file
      qualifiedName:
        CSharp: UITileIcon.file
        VB: UITileIcon.file
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: file
        path: ''
        startLine: 18959
      syntax:
        content:
          CSharp: public File file { get; }
          VB: Public Property file As File
        parameters: []
        return:
          type: Global.File
      overload: Global.UITileIcon.file*
    - id: Global.UITileIcon.width
      commentId: P:Global.UITileIcon.width
      language: CSharp
      name:
        CSharp: width
        VB: width
      nameWithType:
        CSharp: UITileIcon.width
        VB: UITileIcon.width
      qualifiedName:
        CSharp: UITileIcon.width
        VB: UITileIcon.width
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: width
        path: ''
        startLine: 18968
      syntax:
        content:
          CSharp: public float width { get; }
          VB: Public ReadOnly Property width As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.UITileIcon.width*
    - id: Global.UITileIcon.height
      commentId: P:Global.UITileIcon.height
      language: CSharp
      name:
        CSharp: height
        VB: height
      nameWithType:
        CSharp: UITileIcon.height
        VB: UITileIcon.height
      qualifiedName:
        CSharp: UITileIcon.height
        VB: UITileIcon.height
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: height
        path: ''
        startLine: 18979
      syntax:
        content:
          CSharp: public float height { get; }
          VB: Public ReadOnly Property height As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.UITileIcon.height*
    - id: Global.UITileIcon.SetFile(File)
      commentId: M:Global.UITileIcon.SetFile(File)
      language: CSharp
      name:
        CSharp: SetFile(File)
        VB: SetFile(File)
      nameWithType:
        CSharp: UITileIcon.SetFile(File)
        VB: UITileIcon.SetFile(File)
      qualifiedName:
        CSharp: UITileIcon.SetFile(File)
        VB: UITileIcon.SetFile(File)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetFile
        path: ''
        startLine: 19026
      syntax:
        content:
          CSharp: public void SetFile(File file)
          VB: Public Sub SetFile(file As File)
        parameters:
        - id: file
          type: Global.File
      overload: Global.UITileIcon.SetFile*
    - id: Global.UITileIcon.SubscribeToOnClick(UnityAction)
      commentId: M:Global.UITileIcon.SubscribeToOnClick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnClick(UnityAction)
        VB: SubscribeToOnClick(UnityAction)
      nameWithType:
        CSharp: UITileIcon.SubscribeToOnClick(UnityAction)
        VB: UITileIcon.SubscribeToOnClick(UnityAction)
      qualifiedName:
        CSharp: UITileIcon.SubscribeToOnClick(UnityAction)
        VB: UITileIcon.SubscribeToOnClick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnClick
        path: ''
        startLine: 19036
      syntax:
        content:
          CSharp: public void SubscribeToOnClick(UnityAction call)
          VB: Public Sub SubscribeToOnClick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UITileIcon.SubscribeToOnClick*
    - id: Global.UITileIcon.SubscribeToOnLeftClick(UnityAction)
      commentId: M:Global.UITileIcon.SubscribeToOnLeftClick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnLeftClick(UnityAction)
        VB: SubscribeToOnLeftClick(UnityAction)
      nameWithType:
        CSharp: UITileIcon.SubscribeToOnLeftClick(UnityAction)
        VB: UITileIcon.SubscribeToOnLeftClick(UnityAction)
      qualifiedName:
        CSharp: UITileIcon.SubscribeToOnLeftClick(UnityAction)
        VB: UITileIcon.SubscribeToOnLeftClick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnLeftClick
        path: ''
        startLine: 19040
      syntax:
        content:
          CSharp: public void SubscribeToOnLeftClick(UnityAction call)
          VB: Public Sub SubscribeToOnLeftClick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UITileIcon.SubscribeToOnLeftClick*
    - id: Global.UITileIcon.SubscribeToOnRightClick(UnityAction)
      commentId: M:Global.UITileIcon.SubscribeToOnRightClick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToOnRightClick(UnityAction)
        VB: SubscribeToOnRightClick(UnityAction)
      nameWithType:
        CSharp: UITileIcon.SubscribeToOnRightClick(UnityAction)
        VB: UITileIcon.SubscribeToOnRightClick(UnityAction)
      qualifiedName:
        CSharp: UITileIcon.SubscribeToOnRightClick(UnityAction)
        VB: UITileIcon.SubscribeToOnRightClick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToOnRightClick
        path: ''
        startLine: 19044
      syntax:
        content:
          CSharp: public void SubscribeToOnRightClick(UnityAction call)
          VB: Public Sub SubscribeToOnRightClick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UITileIcon.SubscribeToOnRightClick*
  - id: Global.UIToggleButton
    commentId: T:Global.UIToggleButton
    language: CSharp
    name:
      CSharp: UIToggleButton
      VB: UIToggleButton
    nameWithType:
      CSharp: UIToggleButton
      VB: UIToggleButton
    qualifiedName:
      CSharp: UIToggleButton
      VB: UIToggleButton
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIToggleButton
      path: ''
      startLine: 19056
    syntax:
      content:
        CSharp: 'public class UIToggleButton : MonoBehaviour'
        VB: Public Class UIToggleButton Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UIToggleButton.on
      commentId: P:Global.UIToggleButton.on
      language: CSharp
      name:
        CSharp: on
        VB: on
      nameWithType:
        CSharp: UIToggleButton.on
        VB: UIToggleButton.on
      qualifiedName:
        CSharp: UIToggleButton.on
        VB: UIToggleButton.on
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: on
        path: ''
        startLine: 19063
      syntax:
        content:
          CSharp: public bool on { get; }
          VB: Public ReadOnly Property [on] As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.UIToggleButton.on*
    - id: Global.UIToggleButton.toggleName
      commentId: P:Global.UIToggleButton.toggleName
      language: CSharp
      name:
        CSharp: toggleName
        VB: toggleName
      nameWithType:
        CSharp: UIToggleButton.toggleName
        VB: UIToggleButton.toggleName
      qualifiedName:
        CSharp: UIToggleButton.toggleName
        VB: UIToggleButton.toggleName
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: toggleName
        path: ''
        startLine: 19074
      syntax:
        content:
          CSharp: public string toggleName { get; set; }
          VB: Public Property toggleName As String
        parameters: []
        return:
          type: System.String
      overload: Global.UIToggleButton.toggleName*
    - id: Global.UIToggleButton.toggleGroup
      commentId: P:Global.UIToggleButton.toggleGroup
      language: CSharp
      name:
        CSharp: toggleGroup
        VB: toggleGroup
      nameWithType:
        CSharp: UIToggleButton.toggleGroup
        VB: UIToggleButton.toggleGroup
      qualifiedName:
        CSharp: UIToggleButton.toggleGroup
        VB: UIToggleButton.toggleGroup
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: toggleGroup
        path: ''
        startLine: 19085
      syntax:
        content:
          CSharp: public UIToggleGroup toggleGroup { get; }
          VB: Public Property toggleGroup As UIToggleGroup
        parameters: []
        return:
          type: Global.UIToggleGroup
      overload: Global.UIToggleButton.toggleGroup*
    - id: Global.UIToggleButton.inToggleGroup
      commentId: P:Global.UIToggleButton.inToggleGroup
      language: CSharp
      name:
        CSharp: inToggleGroup
        VB: inToggleGroup
      nameWithType:
        CSharp: UIToggleButton.inToggleGroup
        VB: UIToggleButton.inToggleGroup
      qualifiedName:
        CSharp: UIToggleButton.inToggleGroup
        VB: UIToggleButton.inToggleGroup
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: inToggleGroup
        path: ''
        startLine: 19087
      syntax:
        content:
          CSharp: public bool inToggleGroup { get; }
          VB: Public ReadOnly Property inToggleGroup As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.UIToggleButton.inToggleGroup*
    - id: Global.UIToggleButton.width
      commentId: F:Global.UIToggleButton.width
      language: CSharp
      name:
        CSharp: width
        VB: width
      nameWithType:
        CSharp: UIToggleButton.width
        VB: UIToggleButton.width
      qualifiedName:
        CSharp: UIToggleButton.width
        VB: UIToggleButton.width
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: width
        path: ''
        startLine: 19097
      syntax:
        content:
          CSharp: public float width
          VB: Public width As Single
        return:
          type: System.Single
    - id: Global.UIToggleButton.height
      commentId: F:Global.UIToggleButton.height
      language: CSharp
      name:
        CSharp: height
        VB: height
      nameWithType:
        CSharp: UIToggleButton.height
        VB: UIToggleButton.height
      qualifiedName:
        CSharp: UIToggleButton.height
        VB: UIToggleButton.height
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: height
        path: ''
        startLine: 19099
      syntax:
        content:
          CSharp: public float height
          VB: Public height As Single
        return:
          type: System.Single
    - id: Global.UIToggleButton.offImage
      commentId: P:Global.UIToggleButton.offImage
      language: CSharp
      name:
        CSharp: offImage
        VB: offImage
      nameWithType:
        CSharp: UIToggleButton.offImage
        VB: UIToggleButton.offImage
      qualifiedName:
        CSharp: UIToggleButton.offImage
        VB: UIToggleButton.offImage
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: offImage
        path: ''
        startLine: 19104
      syntax:
        content:
          CSharp: public Sprite offImage { get; }
          VB: Public Property offImage As Sprite
        parameters: []
        return:
          type: Global.Sprite
      overload: Global.UIToggleButton.offImage*
    - id: Global.UIToggleButton.onImage
      commentId: P:Global.UIToggleButton.onImage
      language: CSharp
      name:
        CSharp: onImage
        VB: onImage
      nameWithType:
        CSharp: UIToggleButton.onImage
        VB: UIToggleButton.onImage
      qualifiedName:
        CSharp: UIToggleButton.onImage
        VB: UIToggleButton.onImage
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: onImage
        path: ''
        startLine: 19117
      syntax:
        content:
          CSharp: public Sprite onImage { get; }
          VB: Public Property onImage As Sprite
        parameters: []
        return:
          type: Global.Sprite
      overload: Global.UIToggleButton.onImage*
    - id: Global.UIToggleButton.hoverImage
      commentId: P:Global.UIToggleButton.hoverImage
      language: CSharp
      name:
        CSharp: hoverImage
        VB: hoverImage
      nameWithType:
        CSharp: UIToggleButton.hoverImage
        VB: UIToggleButton.hoverImage
      qualifiedName:
        CSharp: UIToggleButton.hoverImage
        VB: UIToggleButton.hoverImage
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hoverImage
        path: ''
        startLine: 19130
      syntax:
        content:
          CSharp: public Sprite hoverImage { get; }
          VB: Public Property hoverImage As Sprite
        parameters: []
        return:
          type: Global.Sprite
      overload: Global.UIToggleButton.hoverImage*
    - id: Global.UIToggleButton.pressedImage
      commentId: P:Global.UIToggleButton.pressedImage
      language: CSharp
      name:
        CSharp: pressedImage
        VB: pressedImage
      nameWithType:
        CSharp: UIToggleButton.pressedImage
        VB: UIToggleButton.pressedImage
      qualifiedName:
        CSharp: UIToggleButton.pressedImage
        VB: UIToggleButton.pressedImage
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: pressedImage
        path: ''
        startLine: 19146
      syntax:
        content:
          CSharp: public Sprite pressedImage { get; }
          VB: Public Property pressedImage As Sprite
        parameters: []
        return:
          type: Global.Sprite
      overload: Global.UIToggleButton.pressedImage*
    - id: Global.UIToggleButton.offBackgroundColour
      commentId: P:Global.UIToggleButton.offBackgroundColour
      language: CSharp
      name:
        CSharp: offBackgroundColour
        VB: offBackgroundColour
      nameWithType:
        CSharp: UIToggleButton.offBackgroundColour
        VB: UIToggleButton.offBackgroundColour
      qualifiedName:
        CSharp: UIToggleButton.offBackgroundColour
        VB: UIToggleButton.offBackgroundColour
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: offBackgroundColour
        path: ''
        startLine: 19164
      syntax:
        content:
          CSharp: public Color offBackgroundColour { get; set; }
          VB: Public Property offBackgroundColour As Color
        parameters: []
        return:
          type: Global.Color
      overload: Global.UIToggleButton.offBackgroundColour*
    - id: Global.UIToggleButton.onBackgroundColour
      commentId: P:Global.UIToggleButton.onBackgroundColour
      language: CSharp
      name:
        CSharp: onBackgroundColour
        VB: onBackgroundColour
      nameWithType:
        CSharp: UIToggleButton.onBackgroundColour
        VB: UIToggleButton.onBackgroundColour
      qualifiedName:
        CSharp: UIToggleButton.onBackgroundColour
        VB: UIToggleButton.onBackgroundColour
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: onBackgroundColour
        path: ''
        startLine: 19178
      syntax:
        content:
          CSharp: public Color onBackgroundColour { get; set; }
          VB: Public Property onBackgroundColour As Color
        parameters: []
        return:
          type: Global.Color
      overload: Global.UIToggleButton.onBackgroundColour*
    - id: Global.UIToggleButton.hoverBackgroundTint
      commentId: F:Global.UIToggleButton.hoverBackgroundTint
      language: CSharp
      name:
        CSharp: hoverBackgroundTint
        VB: hoverBackgroundTint
      nameWithType:
        CSharp: UIToggleButton.hoverBackgroundTint
        VB: UIToggleButton.hoverBackgroundTint
      qualifiedName:
        CSharp: UIToggleButton.hoverBackgroundTint
        VB: UIToggleButton.hoverBackgroundTint
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hoverBackgroundTint
        path: ''
        startLine: 19190
      syntax:
        content:
          CSharp: public Color hoverBackgroundTint
          VB: Public hoverBackgroundTint As Color
        return:
          type: Global.Color
    - id: Global.UIToggleButton.pressedBackgroundColour
      commentId: P:Global.UIToggleButton.pressedBackgroundColour
      language: CSharp
      name:
        CSharp: pressedBackgroundColour
        VB: pressedBackgroundColour
      nameWithType:
        CSharp: UIToggleButton.pressedBackgroundColour
        VB: UIToggleButton.pressedBackgroundColour
      qualifiedName:
        CSharp: UIToggleButton.pressedBackgroundColour
        VB: UIToggleButton.pressedBackgroundColour
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: pressedBackgroundColour
        path: ''
        startLine: 19193
      syntax:
        content:
          CSharp: public Color pressedBackgroundColour { get; set; }
          VB: Public Property pressedBackgroundColour As Color
        parameters: []
        return:
          type: Global.Color
      overload: Global.UIToggleButton.pressedBackgroundColour*
    - id: Global.UIToggleButton.UpdateDisplay
      commentId: M:Global.UIToggleButton.UpdateDisplay
      language: CSharp
      name:
        CSharp: UpdateDisplay()
        VB: UpdateDisplay()
      nameWithType:
        CSharp: UIToggleButton.UpdateDisplay()
        VB: UIToggleButton.UpdateDisplay()
      qualifiedName:
        CSharp: UIToggleButton.UpdateDisplay()
        VB: UIToggleButton.UpdateDisplay()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UpdateDisplay
        path: ''
        startLine: 19281
      syntax:
        content:
          CSharp: public void UpdateDisplay()
          VB: Public Sub UpdateDisplay()
      overload: Global.UIToggleButton.UpdateDisplay*
    - id: Global.UIToggleButton.Press
      commentId: M:Global.UIToggleButton.Press
      language: CSharp
      name:
        CSharp: Press()
        VB: Press()
      nameWithType:
        CSharp: UIToggleButton.Press()
        VB: UIToggleButton.Press()
      qualifiedName:
        CSharp: UIToggleButton.Press()
        VB: UIToggleButton.Press()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Press
        path: ''
        startLine: 19332
      syntax:
        content:
          CSharp: public void Press()
          VB: Public Sub Press()
      overload: Global.UIToggleButton.Press*
    - id: Global.UIToggleButton.RightClick
      commentId: M:Global.UIToggleButton.RightClick
      language: CSharp
      name:
        CSharp: RightClick()
        VB: RightClick()
      nameWithType:
        CSharp: UIToggleButton.RightClick()
        VB: UIToggleButton.RightClick()
      qualifiedName:
        CSharp: UIToggleButton.RightClick()
        VB: UIToggleButton.RightClick()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RightClick
        path: ''
        startLine: 19372
      syntax:
        content:
          CSharp: public void RightClick()
          VB: Public Sub RightClick()
      overload: Global.UIToggleButton.RightClick*
    - id: Global.UIToggleButton.SetImages(Sprite,Sprite,Sprite,Sprite)
      commentId: M:Global.UIToggleButton.SetImages(Sprite,Sprite,Sprite,Sprite)
      language: CSharp
      name:
        CSharp: SetImages(Sprite, Sprite, Sprite, Sprite)
        VB: SetImages(Sprite, Sprite, Sprite, Sprite)
      nameWithType:
        CSharp: UIToggleButton.SetImages(Sprite, Sprite, Sprite, Sprite)
        VB: UIToggleButton.SetImages(Sprite, Sprite, Sprite, Sprite)
      qualifiedName:
        CSharp: UIToggleButton.SetImages(Sprite, Sprite, Sprite, Sprite)
        VB: UIToggleButton.SetImages(Sprite, Sprite, Sprite, Sprite)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetImages
        path: ''
        startLine: 19427
      syntax:
        content:
          CSharp: public void SetImages(Sprite offImage, Sprite onImage, Sprite hoverImage, Sprite pressedImage)
          VB: Public Sub SetImages(offImage As Sprite, onImage As Sprite, hoverImage As Sprite, pressedImage As Sprite)
        parameters:
        - id: offImage
          type: Global.Sprite
        - id: onImage
          type: Global.Sprite
        - id: hoverImage
          type: Global.Sprite
        - id: pressedImage
          type: Global.Sprite
      overload: Global.UIToggleButton.SetImages*
    - id: Global.UIToggleButton.SetOnOff(System.Boolean)
      commentId: M:Global.UIToggleButton.SetOnOff(System.Boolean)
      language: CSharp
      name:
        CSharp: SetOnOff(bool)
        VB: SetOnOff(Boolean)
      nameWithType:
        CSharp: UIToggleButton.SetOnOff(bool)
        VB: UIToggleButton.SetOnOff(Boolean)
      qualifiedName:
        CSharp: UIToggleButton.SetOnOff(bool)
        VB: UIToggleButton.SetOnOff(Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetOnOff
        path: ''
        startLine: 19448
      syntax:
        content:
          CSharp: public void SetOnOff(bool on)
          VB: Public Sub SetOnOff([on] As Boolean)
        parameters:
        - id: on
          type: System.Boolean
      overload: Global.UIToggleButton.SetOnOff*
    - id: Global.UIToggleButton.SetText(System.String)
      commentId: M:Global.UIToggleButton.SetText(System.String)
      language: CSharp
      name:
        CSharp: SetText(string)
        VB: SetText(String)
      nameWithType:
        CSharp: UIToggleButton.SetText(string)
        VB: UIToggleButton.SetText(String)
      qualifiedName:
        CSharp: UIToggleButton.SetText(string)
        VB: UIToggleButton.SetText(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetText
        path: ''
        startLine: 19457
      syntax:
        content:
          CSharp: public void SetText(string text)
          VB: Public Sub SetText(text As String)
        parameters:
        - id: text
          type: System.String
      overload: Global.UIToggleButton.SetText*
    - id: Global.UIToggleButton.SetTextAlignment(TextAnchor)
      commentId: M:Global.UIToggleButton.SetTextAlignment(TextAnchor)
      language: CSharp
      name:
        CSharp: SetTextAlignment(TextAnchor)
        VB: SetTextAlignment(TextAnchor)
      nameWithType:
        CSharp: UIToggleButton.SetTextAlignment(TextAnchor)
        VB: UIToggleButton.SetTextAlignment(TextAnchor)
      qualifiedName:
        CSharp: UIToggleButton.SetTextAlignment(TextAnchor)
        VB: UIToggleButton.SetTextAlignment(TextAnchor)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetTextAlignment
        path: ''
        startLine: 19464
      syntax:
        content:
          CSharp: public void SetTextAlignment(TextAnchor textAlignment)
          VB: Public Sub SetTextAlignment(textAlignment As TextAnchor)
        parameters:
        - id: textAlignment
          type: Global.TextAnchor
      overload: Global.UIToggleButton.SetTextAlignment*
    - id: Global.UIToggleButton.JoinToggleGroup(UIToggleGroup)
      commentId: M:Global.UIToggleButton.JoinToggleGroup(UIToggleGroup)
      language: CSharp
      name:
        CSharp: JoinToggleGroup(UIToggleGroup)
        VB: JoinToggleGroup(UIToggleGroup)
      nameWithType:
        CSharp: UIToggleButton.JoinToggleGroup(UIToggleGroup)
        VB: UIToggleButton.JoinToggleGroup(UIToggleGroup)
      qualifiedName:
        CSharp: UIToggleButton.JoinToggleGroup(UIToggleGroup)
        VB: UIToggleButton.JoinToggleGroup(UIToggleGroup)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: JoinToggleGroup
        path: ''
        startLine: 19471
      syntax:
        content:
          CSharp: public void JoinToggleGroup(UIToggleGroup toggleGroup)
          VB: Public Sub JoinToggleGroup(toggleGroup As UIToggleGroup)
        parameters:
        - id: toggleGroup
          type: Global.UIToggleGroup
      overload: Global.UIToggleButton.JoinToggleGroup*
    - id: Global.UIToggleButton.LeaveToggleGroup
      commentId: M:Global.UIToggleButton.LeaveToggleGroup
      language: CSharp
      name:
        CSharp: LeaveToggleGroup()
        VB: LeaveToggleGroup()
      nameWithType:
        CSharp: UIToggleButton.LeaveToggleGroup()
        VB: UIToggleButton.LeaveToggleGroup()
      qualifiedName:
        CSharp: UIToggleButton.LeaveToggleGroup()
        VB: UIToggleButton.LeaveToggleGroup()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LeaveToggleGroup
        path: ''
        startLine: 19475
      syntax:
        content:
          CSharp: public void LeaveToggleGroup()
          VB: Public Sub LeaveToggleGroup()
      overload: Global.UIToggleButton.LeaveToggleGroup*
    - id: Global.UIToggleButton.SubscribeToTurnOn(UnityAction)
      commentId: M:Global.UIToggleButton.SubscribeToTurnOn(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToTurnOn(UnityAction)
        VB: SubscribeToTurnOn(UnityAction)
      nameWithType:
        CSharp: UIToggleButton.SubscribeToTurnOn(UnityAction)
        VB: UIToggleButton.SubscribeToTurnOn(UnityAction)
      qualifiedName:
        CSharp: UIToggleButton.SubscribeToTurnOn(UnityAction)
        VB: UIToggleButton.SubscribeToTurnOn(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToTurnOn
        path: ''
        startLine: 19480
      syntax:
        content:
          CSharp: public void SubscribeToTurnOn(UnityAction call)
          VB: Public Sub SubscribeToTurnOn([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIToggleButton.SubscribeToTurnOn*
    - id: Global.UIToggleButton.SubscribeToTurnOff(UnityAction)
      commentId: M:Global.UIToggleButton.SubscribeToTurnOff(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToTurnOff(UnityAction)
        VB: SubscribeToTurnOff(UnityAction)
      nameWithType:
        CSharp: UIToggleButton.SubscribeToTurnOff(UnityAction)
        VB: UIToggleButton.SubscribeToTurnOff(UnityAction)
      qualifiedName:
        CSharp: UIToggleButton.SubscribeToTurnOff(UnityAction)
        VB: UIToggleButton.SubscribeToTurnOff(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToTurnOff
        path: ''
        startLine: 19484
      syntax:
        content:
          CSharp: public void SubscribeToTurnOff(UnityAction call)
          VB: Public Sub SubscribeToTurnOff([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIToggleButton.SubscribeToTurnOff*
    - id: Global.UIToggleButton.SubscribeToHover(UnityAction)
      commentId: M:Global.UIToggleButton.SubscribeToHover(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToHover(UnityAction)
        VB: SubscribeToHover(UnityAction)
      nameWithType:
        CSharp: UIToggleButton.SubscribeToHover(UnityAction)
        VB: UIToggleButton.SubscribeToHover(UnityAction)
      qualifiedName:
        CSharp: UIToggleButton.SubscribeToHover(UnityAction)
        VB: UIToggleButton.SubscribeToHover(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToHover
        path: ''
        startLine: 19488
      syntax:
        content:
          CSharp: public void SubscribeToHover(UnityAction call)
          VB: Public Sub SubscribeToHover([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIToggleButton.SubscribeToHover*
    - id: Global.UIToggleButton.SubscribeToLeftClick(UnityAction)
      commentId: M:Global.UIToggleButton.SubscribeToLeftClick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToLeftClick(UnityAction)
        VB: SubscribeToLeftClick(UnityAction)
      nameWithType:
        CSharp: UIToggleButton.SubscribeToLeftClick(UnityAction)
        VB: UIToggleButton.SubscribeToLeftClick(UnityAction)
      qualifiedName:
        CSharp: UIToggleButton.SubscribeToLeftClick(UnityAction)
        VB: UIToggleButton.SubscribeToLeftClick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToLeftClick
        path: ''
        startLine: 19492
      syntax:
        content:
          CSharp: public void SubscribeToLeftClick(UnityAction call)
          VB: Public Sub SubscribeToLeftClick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIToggleButton.SubscribeToLeftClick*
    - id: Global.UIToggleButton.SubscribeToRightClick(UnityAction)
      commentId: M:Global.UIToggleButton.SubscribeToRightClick(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToRightClick(UnityAction)
        VB: SubscribeToRightClick(UnityAction)
      nameWithType:
        CSharp: UIToggleButton.SubscribeToRightClick(UnityAction)
        VB: UIToggleButton.SubscribeToRightClick(UnityAction)
      qualifiedName:
        CSharp: UIToggleButton.SubscribeToRightClick(UnityAction)
        VB: UIToggleButton.SubscribeToRightClick(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToRightClick
        path: ''
        startLine: 19496
      syntax:
        content:
          CSharp: public void SubscribeToRightClick(UnityAction call)
          VB: Public Sub SubscribeToRightClick([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIToggleButton.SubscribeToRightClick*
  - id: Global.UIToggleGroup
    commentId: T:Global.UIToggleGroup
    language: CSharp
    name:
      CSharp: UIToggleGroup
      VB: UIToggleGroup
    nameWithType:
      CSharp: UIToggleGroup
      VB: UIToggleGroup
    qualifiedName:
      CSharp: UIToggleGroup
      VB: UIToggleGroup
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIToggleGroup
      path: ''
      startLine: 19507
    syntax:
      content:
        CSharp: 'public class UIToggleGroup : MonoBehaviour'
        VB: Public Class UIToggleGroup Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UIToggleGroup.canSelectMultiple
      commentId: P:Global.UIToggleGroup.canSelectMultiple
      language: CSharp
      name:
        CSharp: canSelectMultiple
        VB: canSelectMultiple
      nameWithType:
        CSharp: UIToggleGroup.canSelectMultiple
        VB: UIToggleGroup.canSelectMultiple
      qualifiedName:
        CSharp: UIToggleGroup.canSelectMultiple
        VB: UIToggleGroup.canSelectMultiple
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: canSelectMultiple
        path: ''
        startLine: 19513
      syntax:
        content:
          CSharp: public bool canSelectMultiple { get; }
          VB: Public ReadOnly Property canSelectMultiple As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.UIToggleGroup.canSelectMultiple*
    - id: Global.UIToggleGroup.canSelectNone
      commentId: P:Global.UIToggleGroup.canSelectNone
      language: CSharp
      name:
        CSharp: canSelectNone
        VB: canSelectNone
      nameWithType:
        CSharp: UIToggleGroup.canSelectNone
        VB: UIToggleGroup.canSelectNone
      qualifiedName:
        CSharp: UIToggleGroup.canSelectNone
        VB: UIToggleGroup.canSelectNone
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: canSelectNone
        path: ''
        startLine: 19522
      syntax:
        content:
          CSharp: public bool canSelectNone { get; }
          VB: Public ReadOnly Property canSelectNone As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.UIToggleGroup.canSelectNone*
    - id: Global.UIToggleGroup.swapClickAndCtrlClick
      commentId: P:Global.UIToggleGroup.swapClickAndCtrlClick
      language: CSharp
      name:
        CSharp: swapClickAndCtrlClick
        VB: swapClickAndCtrlClick
      nameWithType:
        CSharp: UIToggleGroup.swapClickAndCtrlClick
        VB: UIToggleGroup.swapClickAndCtrlClick
      qualifiedName:
        CSharp: UIToggleGroup.swapClickAndCtrlClick
        VB: UIToggleGroup.swapClickAndCtrlClick
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: swapClickAndCtrlClick
        path: ''
        startLine: 19531
      syntax:
        content:
          CSharp: public bool swapClickAndCtrlClick { get; }
          VB: Public ReadOnly Property swapClickAndCtrlClick As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.UIToggleGroup.swapClickAndCtrlClick*
    - id: Global.UIToggleGroup.currentToggle
      commentId: P:Global.UIToggleGroup.currentToggle
      language: CSharp
      name:
        CSharp: currentToggle
        VB: currentToggle
      nameWithType:
        CSharp: UIToggleGroup.currentToggle
        VB: UIToggleGroup.currentToggle
      qualifiedName:
        CSharp: UIToggleGroup.currentToggle
        VB: UIToggleGroup.currentToggle
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: currentToggle
        path: ''
        startLine: 19541
      syntax:
        content:
          CSharp: public UIToggleButton currentToggle { get; }
          VB: Public Property currentToggle As UIToggleButton
        parameters: []
        return:
          type: Global.UIToggleButton
      overload: Global.UIToggleGroup.currentToggle*
    - id: Global.UIToggleGroup.currentToggleIndex
      commentId: P:Global.UIToggleGroup.currentToggleIndex
      language: CSharp
      name:
        CSharp: currentToggleIndex
        VB: currentToggleIndex
      nameWithType:
        CSharp: UIToggleGroup.currentToggleIndex
        VB: UIToggleGroup.currentToggleIndex
      qualifiedName:
        CSharp: UIToggleGroup.currentToggleIndex
        VB: UIToggleGroup.currentToggleIndex
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: currentToggleIndex
        path: ''
        startLine: 19547
      syntax:
        content:
          CSharp: public int currentToggleIndex { get; }
          VB: Public ReadOnly Property currentToggleIndex As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.UIToggleGroup.currentToggleIndex*
    - id: Global.UIToggleGroup.toggles
      commentId: P:Global.UIToggleGroup.toggles
      language: CSharp
      name:
        CSharp: toggles
        VB: toggles
      nameWithType:
        CSharp: UIToggleGroup.toggles
        VB: UIToggleGroup.toggles
      qualifiedName:
        CSharp: UIToggleGroup.toggles
        VB: UIToggleGroup.toggles
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: toggles
        path: ''
        startLine: 19564
      syntax:
        content:
          CSharp: public List<UIToggleButton> toggles { get; }
          VB: Public ReadOnly Property toggles As List(Of UIToggleButton)
        parameters: []
        return:
          type: System.Collections.Generic.List{UIToggleButton}
      overload: Global.UIToggleGroup.toggles*
    - id: Global.UIToggleGroup.Count
      commentId: P:Global.UIToggleGroup.Count
      language: CSharp
      name:
        CSharp: Count
        VB: Count
      nameWithType:
        CSharp: UIToggleGroup.Count
        VB: UIToggleGroup.Count
      qualifiedName:
        CSharp: UIToggleGroup.Count
        VB: UIToggleGroup.Count
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Count
        path: ''
        startLine: 19572
      syntax:
        content:
          CSharp: public int Count { get; }
          VB: Public ReadOnly Property Count As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Global.UIToggleGroup.Count*
    - id: Global.UIToggleGroup.selectedToggles
      commentId: P:Global.UIToggleGroup.selectedToggles
      language: CSharp
      name:
        CSharp: selectedToggles
        VB: selectedToggles
      nameWithType:
        CSharp: UIToggleGroup.selectedToggles
        VB: UIToggleGroup.selectedToggles
      qualifiedName:
        CSharp: UIToggleGroup.selectedToggles
        VB: UIToggleGroup.selectedToggles
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: selectedToggles
        path: ''
        startLine: 19580
      syntax:
        content:
          CSharp: public UIToggleButton[] selectedToggles { get; }
          VB: Public ReadOnly Property selectedToggles As UIToggleButton()
        parameters: []
        return:
          type: Global.UIToggleButton[]
      overload: Global.UIToggleGroup.selectedToggles*
    - id: Global.UIToggleGroup.selectedIndices
      commentId: P:Global.UIToggleGroup.selectedIndices
      language: CSharp
      name:
        CSharp: selectedIndices
        VB: selectedIndices
      nameWithType:
        CSharp: UIToggleGroup.selectedIndices
        VB: UIToggleGroup.selectedIndices
      qualifiedName:
        CSharp: UIToggleGroup.selectedIndices
        VB: UIToggleGroup.selectedIndices
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: selectedIndices
        path: ''
        startLine: 19597
      syntax:
        content:
          CSharp: public int[] selectedIndices { get; }
          VB: Public ReadOnly Property selectedIndices As Integer()
        parameters: []
        return:
          type: System.Int32[]
      overload: Global.UIToggleGroup.selectedIndices*
    - id: Global.UIToggleGroup.hasSelectedToggle
      commentId: P:Global.UIToggleGroup.hasSelectedToggle
      language: CSharp
      name:
        CSharp: hasSelectedToggle
        VB: hasSelectedToggle
      nameWithType:
        CSharp: UIToggleGroup.hasSelectedToggle
        VB: UIToggleGroup.hasSelectedToggle
      qualifiedName:
        CSharp: UIToggleGroup.hasSelectedToggle
        VB: UIToggleGroup.hasSelectedToggle
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hasSelectedToggle
        path: ''
        startLine: 19615
      syntax:
        content:
          CSharp: public bool hasSelectedToggle { get; }
          VB: Public ReadOnly Property hasSelectedToggle As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.UIToggleGroup.hasSelectedToggle*
    - id: Global.UIToggleGroup.Add(UIToggleButton)
      commentId: M:Global.UIToggleGroup.Add(UIToggleButton)
      language: CSharp
      name:
        CSharp: Add(UIToggleButton)
        VB: Add(UIToggleButton)
      nameWithType:
        CSharp: UIToggleGroup.Add(UIToggleButton)
        VB: UIToggleGroup.Add(UIToggleButton)
      qualifiedName:
        CSharp: UIToggleGroup.Add(UIToggleButton)
        VB: UIToggleGroup.Add(UIToggleButton)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Add
        path: ''
        startLine: 19653
      syntax:
        content:
          CSharp: public bool Add(UIToggleButton toggle)
          VB: Public Function Add(toggle As UIToggleButton) As Boolean
        parameters:
        - id: toggle
          type: Global.UIToggleButton
        return:
          type: System.Boolean
      overload: Global.UIToggleGroup.Add*
    - id: Global.UIToggleGroup.Remove(UIToggleButton)
      commentId: M:Global.UIToggleGroup.Remove(UIToggleButton)
      language: CSharp
      name:
        CSharp: Remove(UIToggleButton)
        VB: Remove(UIToggleButton)
      nameWithType:
        CSharp: UIToggleGroup.Remove(UIToggleButton)
        VB: UIToggleGroup.Remove(UIToggleButton)
      qualifiedName:
        CSharp: UIToggleGroup.Remove(UIToggleButton)
        VB: UIToggleGroup.Remove(UIToggleButton)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Remove
        path: ''
        startLine: 19661
      syntax:
        content:
          CSharp: public bool Remove(UIToggleButton toggle)
          VB: Public Function Remove(toggle As UIToggleButton) As Boolean
        parameters:
        - id: toggle
          type: Global.UIToggleButton
        return:
          type: System.Boolean
      overload: Global.UIToggleGroup.Remove*
    - id: Global.UIToggleGroup.Contains(UIToggleButton)
      commentId: M:Global.UIToggleGroup.Contains(UIToggleButton)
      language: CSharp
      name:
        CSharp: Contains(UIToggleButton)
        VB: Contains(UIToggleButton)
      nameWithType:
        CSharp: UIToggleGroup.Contains(UIToggleButton)
        VB: UIToggleGroup.Contains(UIToggleButton)
      qualifiedName:
        CSharp: UIToggleGroup.Contains(UIToggleButton)
        VB: UIToggleGroup.Contains(UIToggleButton)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Contains
        path: ''
        startLine: 19671
      syntax:
        content:
          CSharp: public bool Contains(UIToggleButton toggle)
          VB: Public Function Contains(toggle As UIToggleButton) As Boolean
        parameters:
        - id: toggle
          type: Global.UIToggleButton
        return:
          type: System.Boolean
      overload: Global.UIToggleGroup.Contains*
    - id: Global.UIToggleGroup.Press(System.Int32)
      commentId: M:Global.UIToggleGroup.Press(System.Int32)
      language: CSharp
      name:
        CSharp: Press(int)
        VB: Press(Integer)
      nameWithType:
        CSharp: UIToggleGroup.Press(int)
        VB: UIToggleGroup.Press(Integer)
      qualifiedName:
        CSharp: UIToggleGroup.Press(int)
        VB: UIToggleGroup.Press(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Press
        path: ''
        startLine: 19676
      syntax:
        content:
          CSharp: public bool Press(int index)
          VB: Public Function Press(index As Integer) As Boolean
        parameters:
        - id: index
          type: System.Int32
        return:
          type: System.Boolean
      overload: Global.UIToggleGroup.Press*
    - id: Global.UIToggleGroup.Press(UIToggleButton)
      commentId: M:Global.UIToggleGroup.Press(UIToggleButton)
      language: CSharp
      name:
        CSharp: Press(UIToggleButton)
        VB: Press(UIToggleButton)
      nameWithType:
        CSharp: UIToggleGroup.Press(UIToggleButton)
        VB: UIToggleGroup.Press(UIToggleButton)
      qualifiedName:
        CSharp: UIToggleGroup.Press(UIToggleButton)
        VB: UIToggleGroup.Press(UIToggleButton)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Press
        path: ''
        startLine: 19684
      syntax:
        content:
          CSharp: public bool Press(UIToggleButton toggle)
          VB: Public Function Press(toggle As UIToggleButton) As Boolean
        parameters:
        - id: toggle
          type: Global.UIToggleButton
        return:
          type: System.Boolean
      overload: Global.UIToggleGroup.Press*
    - id: Global.UIToggleGroup.PressForceEvent(System.Int32)
      commentId: M:Global.UIToggleGroup.PressForceEvent(System.Int32)
      language: CSharp
      name:
        CSharp: PressForceEvent(int)
        VB: PressForceEvent(Integer)
      nameWithType:
        CSharp: UIToggleGroup.PressForceEvent(int)
        VB: UIToggleGroup.PressForceEvent(Integer)
      qualifiedName:
        CSharp: UIToggleGroup.PressForceEvent(int)
        VB: UIToggleGroup.PressForceEvent(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PressForceEvent
        path: ''
        startLine: 19688
      syntax:
        content:
          CSharp: public bool PressForceEvent(int index)
          VB: Public Function PressForceEvent(index As Integer) As Boolean
        parameters:
        - id: index
          type: System.Int32
        return:
          type: System.Boolean
      overload: Global.UIToggleGroup.PressForceEvent*
    - id: Global.UIToggleGroup.PressForceEvent(UIToggleButton)
      commentId: M:Global.UIToggleGroup.PressForceEvent(UIToggleButton)
      language: CSharp
      name:
        CSharp: PressForceEvent(UIToggleButton)
        VB: PressForceEvent(UIToggleButton)
      nameWithType:
        CSharp: UIToggleGroup.PressForceEvent(UIToggleButton)
        VB: UIToggleGroup.PressForceEvent(UIToggleButton)
      qualifiedName:
        CSharp: UIToggleGroup.PressForceEvent(UIToggleButton)
        VB: UIToggleGroup.PressForceEvent(UIToggleButton)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PressForceEvent
        path: ''
        startLine: 19696
      syntax:
        content:
          CSharp: public bool PressForceEvent(UIToggleButton toggle)
          VB: Public Function PressForceEvent(toggle As UIToggleButton) As Boolean
        parameters:
        - id: toggle
          type: Global.UIToggleButton
        return:
          type: System.Boolean
      overload: Global.UIToggleGroup.PressForceEvent*
    - id: Global.UIToggleGroup.CtrlPress(System.Int32)
      commentId: M:Global.UIToggleGroup.CtrlPress(System.Int32)
      language: CSharp
      name:
        CSharp: CtrlPress(int)
        VB: CtrlPress(Integer)
      nameWithType:
        CSharp: UIToggleGroup.CtrlPress(int)
        VB: UIToggleGroup.CtrlPress(Integer)
      qualifiedName:
        CSharp: UIToggleGroup.CtrlPress(int)
        VB: UIToggleGroup.CtrlPress(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CtrlPress
        path: ''
        startLine: 19701
      syntax:
        content:
          CSharp: public bool CtrlPress(int index)
          VB: Public Function CtrlPress(index As Integer) As Boolean
        parameters:
        - id: index
          type: System.Int32
        return:
          type: System.Boolean
      overload: Global.UIToggleGroup.CtrlPress*
    - id: Global.UIToggleGroup.CtrlPress(UIToggleButton)
      commentId: M:Global.UIToggleGroup.CtrlPress(UIToggleButton)
      language: CSharp
      name:
        CSharp: CtrlPress(UIToggleButton)
        VB: CtrlPress(UIToggleButton)
      nameWithType:
        CSharp: UIToggleGroup.CtrlPress(UIToggleButton)
        VB: UIToggleGroup.CtrlPress(UIToggleButton)
      qualifiedName:
        CSharp: UIToggleGroup.CtrlPress(UIToggleButton)
        VB: UIToggleGroup.CtrlPress(UIToggleButton)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CtrlPress
        path: ''
        startLine: 19709
      syntax:
        content:
          CSharp: public bool CtrlPress(UIToggleButton toggle)
          VB: Public Function CtrlPress(toggle As UIToggleButton) As Boolean
        parameters:
        - id: toggle
          type: Global.UIToggleButton
        return:
          type: System.Boolean
      overload: Global.UIToggleGroup.CtrlPress*
    - id: Global.UIToggleGroup.PressOrCtrlPress(UIToggleButton,System.Boolean)
      commentId: M:Global.UIToggleGroup.PressOrCtrlPress(UIToggleButton,System.Boolean)
      language: CSharp
      name:
        CSharp: PressOrCtrlPress(UIToggleButton, bool)
        VB: PressOrCtrlPress(UIToggleButton, Boolean)
      nameWithType:
        CSharp: UIToggleGroup.PressOrCtrlPress(UIToggleButton, bool)
        VB: UIToggleGroup.PressOrCtrlPress(UIToggleButton, Boolean)
      qualifiedName:
        CSharp: UIToggleGroup.PressOrCtrlPress(UIToggleButton, bool)
        VB: UIToggleGroup.PressOrCtrlPress(UIToggleButton, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PressOrCtrlPress
        path: ''
        startLine: 19714
      syntax:
        content:
          CSharp: public bool PressOrCtrlPress(UIToggleButton toggle, bool ctrlClick)
          VB: Public Function PressOrCtrlPress(toggle As UIToggleButton, ctrlClick As Boolean) As Boolean
        parameters:
        - id: toggle
          type: Global.UIToggleButton
        - id: ctrlClick
          type: System.Boolean
        return:
          type: System.Boolean
      overload: Global.UIToggleGroup.PressOrCtrlPress*
    - id: Global.UIToggleGroup.Clear
      commentId: M:Global.UIToggleGroup.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: UIToggleGroup.Clear()
        VB: UIToggleGroup.Clear()
      qualifiedName:
        CSharp: UIToggleGroup.Clear()
        VB: UIToggleGroup.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Clear
        path: ''
        startLine: 19793
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear()
      overload: Global.UIToggleGroup.Clear*
    - id: Global.UIToggleGroup.DestroyToggles
      commentId: M:Global.UIToggleGroup.DestroyToggles
      language: CSharp
      name:
        CSharp: DestroyToggles()
        VB: DestroyToggles()
      nameWithType:
        CSharp: UIToggleGroup.DestroyToggles()
        VB: UIToggleGroup.DestroyToggles()
      qualifiedName:
        CSharp: UIToggleGroup.DestroyToggles()
        VB: UIToggleGroup.DestroyToggles()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DestroyToggles
        path: ''
        startLine: 19799
      syntax:
        content:
          CSharp: public void DestroyToggles()
          VB: Public Sub DestroyToggles()
      overload: Global.UIToggleGroup.DestroyToggles*
    - id: Global.UIToggleGroup.SubscribeToSelectedToggleChange(UnityAction)
      commentId: M:Global.UIToggleGroup.SubscribeToSelectedToggleChange(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToSelectedToggleChange(UnityAction)
        VB: SubscribeToSelectedToggleChange(UnityAction)
      nameWithType:
        CSharp: UIToggleGroup.SubscribeToSelectedToggleChange(UnityAction)
        VB: UIToggleGroup.SubscribeToSelectedToggleChange(UnityAction)
      qualifiedName:
        CSharp: UIToggleGroup.SubscribeToSelectedToggleChange(UnityAction)
        VB: UIToggleGroup.SubscribeToSelectedToggleChange(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToSelectedToggleChange
        path: ''
        startLine: 19809
      syntax:
        content:
          CSharp: public void SubscribeToSelectedToggleChange(UnityAction call)
          VB: Public Sub SubscribeToSelectedToggleChange([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIToggleGroup.SubscribeToSelectedToggleChange*
  - id: Global.UIToolButton
    commentId: T:Global.UIToolButton
    language: CSharp
    name:
      CSharp: UIToolButton
      VB: UIToolButton
    nameWithType:
      CSharp: UIToolButton
      VB: UIToolButton
    qualifiedName:
      CSharp: UIToolButton
      VB: UIToolButton
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIToolButton
      path: ''
      startLine: 19820
    syntax:
      content:
        CSharp: 'public class UIToolButton : MonoBehaviour'
        VB: Public Class UIToolButton Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UIToolButton.buttons
      commentId: P:Global.UIToolButton.buttons
      language: CSharp
      name:
        CSharp: buttons
        VB: buttons
      nameWithType:
        CSharp: UIToolButton.buttons
        VB: UIToolButton.buttons
      qualifiedName:
        CSharp: UIToolButton.buttons
        VB: UIToolButton.buttons
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: buttons
        path: ''
        startLine: 19822
      syntax:
        content:
          CSharp: public UIButton[] buttons { get; }
          VB: Public Property buttons As UIButton()
        parameters: []
        return:
          type: Global.UIButton[]
      overload: Global.UIToolButton.buttons*
    - id: Global.UIToolButton.currentButton
      commentId: P:Global.UIToolButton.currentButton
      language: CSharp
      name:
        CSharp: currentButton
        VB: currentButton
      nameWithType:
        CSharp: UIToolButton.currentButton
        VB: UIToolButton.currentButton
      qualifiedName:
        CSharp: UIToolButton.currentButton
        VB: UIToolButton.currentButton
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: currentButton
        path: ''
        startLine: 19823
      syntax:
        content:
          CSharp: public UIButton currentButton { get; }
          VB: Public Property currentButton As UIButton
        parameters: []
        return:
          type: Global.UIButton
      overload: Global.UIToolButton.currentButton*
  - id: Global.UITooltip
    commentId: T:Global.UITooltip
    language: CSharp
    name:
      CSharp: UITooltip
      VB: UITooltip
    nameWithType:
      CSharp: UITooltip
      VB: UITooltip
    qualifiedName:
      CSharp: UITooltip
      VB: UITooltip
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UITooltip
      path: ''
      startLine: 19887
    syntax:
      content:
        CSharp: 'public class UITooltip : MonoBehaviour'
        VB: Public Class UITooltip Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UITooltip.text
      commentId: P:Global.UITooltip.text
      language: CSharp
      name:
        CSharp: text
        VB: text
      nameWithType:
        CSharp: UITooltip.text
        VB: UITooltip.text
      qualifiedName:
        CSharp: UITooltip.text
        VB: UITooltip.text
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: text
        path: ''
        startLine: 19893
      syntax:
        content:
          CSharp: public string text { get; set; }
          VB: Public Property text As String
        parameters: []
        return:
          type: System.String
      overload: Global.UITooltip.text*
    - id: Global.UITooltip.padding
      commentId: F:Global.UITooltip.padding
      language: CSharp
      name:
        CSharp: padding
        VB: padding
      nameWithType:
        CSharp: UITooltip.padding
        VB: UITooltip.padding
      qualifiedName:
        CSharp: UITooltip.padding
        VB: UITooltip.padding
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: padding
        path: ''
        startLine: 19904
      syntax:
        content:
          CSharp: public Vector2 padding
          VB: Public padding As Vector2
        return:
          type: Global.Vector2
    - id: Global.UITooltip.globalWidth
      commentId: P:Global.UITooltip.globalWidth
      language: CSharp
      name:
        CSharp: globalWidth
        VB: globalWidth
      nameWithType:
        CSharp: UITooltip.globalWidth
        VB: UITooltip.globalWidth
      qualifiedName:
        CSharp: UITooltip.globalWidth
        VB: UITooltip.globalWidth
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: globalWidth
        path: ''
        startLine: 19906
      syntax:
        content:
          CSharp: public float globalWidth { get; }
          VB: Public ReadOnly Property globalWidth As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.UITooltip.globalWidth*
    - id: Global.UITooltip.globalHeight
      commentId: P:Global.UITooltip.globalHeight
      language: CSharp
      name:
        CSharp: globalHeight
        VB: globalHeight
      nameWithType:
        CSharp: UITooltip.globalHeight
        VB: UITooltip.globalHeight
      qualifiedName:
        CSharp: UITooltip.globalHeight
        VB: UITooltip.globalHeight
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: globalHeight
        path: ''
        startLine: 19913
      syntax:
        content:
          CSharp: public float globalHeight { get; }
          VB: Public ReadOnly Property globalHeight As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.UITooltip.globalHeight*
    - id: Global.UITooltip.localWidth
      commentId: P:Global.UITooltip.localWidth
      language: CSharp
      name:
        CSharp: localWidth
        VB: localWidth
      nameWithType:
        CSharp: UITooltip.localWidth
        VB: UITooltip.localWidth
      qualifiedName:
        CSharp: UITooltip.localWidth
        VB: UITooltip.localWidth
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: localWidth
        path: ''
        startLine: 19921
      syntax:
        content:
          CSharp: public float localWidth { get; }
          VB: Public ReadOnly Property localWidth As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.UITooltip.localWidth*
    - id: Global.UITooltip.localHeight
      commentId: P:Global.UITooltip.localHeight
      language: CSharp
      name:
        CSharp: localHeight
        VB: localHeight
      nameWithType:
        CSharp: UITooltip.localHeight
        VB: UITooltip.localHeight
      qualifiedName:
        CSharp: UITooltip.localHeight
        VB: UITooltip.localHeight
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: localHeight
        path: ''
        startLine: 19928
      syntax:
        content:
          CSharp: public float localHeight { get; }
          VB: Public ReadOnly Property localHeight As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.UITooltip.localHeight*
    - id: Global.UITooltip.Awake
      commentId: M:Global.UITooltip.Awake
      language: CSharp
      name:
        CSharp: Awake()
        VB: Awake()
      nameWithType:
        CSharp: UITooltip.Awake()
        VB: UITooltip.Awake()
      qualifiedName:
        CSharp: UITooltip.Awake()
        VB: UITooltip.Awake()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Awake
        path: ''
        startLine: 19940
      syntax:
        content:
          CSharp: public void Awake()
          VB: Public Sub Awake()
      overload: Global.UITooltip.Awake*
    - id: Global.UITooltip.SetText(System.String)
      commentId: M:Global.UITooltip.SetText(System.String)
      language: CSharp
      name:
        CSharp: SetText(string)
        VB: SetText(String)
      nameWithType:
        CSharp: UITooltip.SetText(string)
        VB: UITooltip.SetText(String)
      qualifiedName:
        CSharp: UITooltip.SetText(string)
        VB: UITooltip.SetText(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetText
        path: ''
        startLine: 19970
      syntax:
        content:
          CSharp: public void SetText(string text)
          VB: Public Sub SetText(text As String)
        parameters:
        - id: text
          type: System.String
      overload: Global.UITooltip.SetText*
    - id: Global.UITooltip.GoesOffScreen
      commentId: M:Global.UITooltip.GoesOffScreen
      language: CSharp
      name:
        CSharp: GoesOffScreen()
        VB: GoesOffScreen()
      nameWithType:
        CSharp: UITooltip.GoesOffScreen()
        VB: UITooltip.GoesOffScreen()
      qualifiedName:
        CSharp: UITooltip.GoesOffScreen()
        VB: UITooltip.GoesOffScreen()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GoesOffScreen
        path: ''
        startLine: 19976
      syntax:
        content:
          CSharp: public bool GoesOffScreen()
          VB: Public Function GoesOffScreen() As Boolean
        return:
          type: System.Boolean
      overload: Global.UITooltip.GoesOffScreen*
    - id: Global.UITooltip.GoesOffLeftOfScreen
      commentId: M:Global.UITooltip.GoesOffLeftOfScreen
      language: CSharp
      name:
        CSharp: GoesOffLeftOfScreen()
        VB: GoesOffLeftOfScreen()
      nameWithType:
        CSharp: UITooltip.GoesOffLeftOfScreen()
        VB: UITooltip.GoesOffLeftOfScreen()
      qualifiedName:
        CSharp: UITooltip.GoesOffLeftOfScreen()
        VB: UITooltip.GoesOffLeftOfScreen()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GoesOffLeftOfScreen
        path: ''
        startLine: 19980
      syntax:
        content:
          CSharp: public bool GoesOffLeftOfScreen()
          VB: Public Function GoesOffLeftOfScreen() As Boolean
        return:
          type: System.Boolean
      overload: Global.UITooltip.GoesOffLeftOfScreen*
    - id: Global.UITooltip.GoesOffRightOfScreen
      commentId: M:Global.UITooltip.GoesOffRightOfScreen
      language: CSharp
      name:
        CSharp: GoesOffRightOfScreen()
        VB: GoesOffRightOfScreen()
      nameWithType:
        CSharp: UITooltip.GoesOffRightOfScreen()
        VB: UITooltip.GoesOffRightOfScreen()
      qualifiedName:
        CSharp: UITooltip.GoesOffRightOfScreen()
        VB: UITooltip.GoesOffRightOfScreen()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GoesOffRightOfScreen
        path: ''
        startLine: 19984
      syntax:
        content:
          CSharp: public bool GoesOffRightOfScreen()
          VB: Public Function GoesOffRightOfScreen() As Boolean
        return:
          type: System.Boolean
      overload: Global.UITooltip.GoesOffRightOfScreen*
    - id: Global.UITooltip.GoesOffBottomOfScreen
      commentId: M:Global.UITooltip.GoesOffBottomOfScreen
      language: CSharp
      name:
        CSharp: GoesOffBottomOfScreen()
        VB: GoesOffBottomOfScreen()
      nameWithType:
        CSharp: UITooltip.GoesOffBottomOfScreen()
        VB: UITooltip.GoesOffBottomOfScreen()
      qualifiedName:
        CSharp: UITooltip.GoesOffBottomOfScreen()
        VB: UITooltip.GoesOffBottomOfScreen()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GoesOffBottomOfScreen
        path: ''
        startLine: 19988
      syntax:
        content:
          CSharp: public bool GoesOffBottomOfScreen()
          VB: Public Function GoesOffBottomOfScreen() As Boolean
        return:
          type: System.Boolean
      overload: Global.UITooltip.GoesOffBottomOfScreen*
    - id: Global.UITooltip.GoesOffTopOfScreen
      commentId: M:Global.UITooltip.GoesOffTopOfScreen
      language: CSharp
      name:
        CSharp: GoesOffTopOfScreen()
        VB: GoesOffTopOfScreen()
      nameWithType:
        CSharp: UITooltip.GoesOffTopOfScreen()
        VB: UITooltip.GoesOffTopOfScreen()
      qualifiedName:
        CSharp: UITooltip.GoesOffTopOfScreen()
        VB: UITooltip.GoesOffTopOfScreen()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GoesOffTopOfScreen
        path: ''
        startLine: 19992
      syntax:
        content:
          CSharp: public bool GoesOffTopOfScreen()
          VB: Public Function GoesOffTopOfScreen() As Boolean
        return:
          type: System.Boolean
      overload: Global.UITooltip.GoesOffTopOfScreen*
  - id: Global.ViewportSide
    commentId: T:Global.ViewportSide
    language: CSharp
    name:
      CSharp: ViewportSide
      VB: ViewportSide
    nameWithType:
      CSharp: ViewportSide
      VB: ViewportSide
    qualifiedName:
      CSharp: ViewportSide
      VB: ViewportSide
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ViewportSide
      path: ''
      startLine: 20004
    syntax:
      content:
        CSharp: public enum ViewportSide
        VB: Public Enum ViewportSide
    items:
    - id: Global.ViewportSide.Negative
      commentId: F:Global.ViewportSide.Negative
      language: CSharp
      name:
        CSharp: Negative
        VB: Negative
      nameWithType:
        CSharp: ViewportSide.Negative
        VB: ViewportSide.Negative
      qualifiedName:
        CSharp: ViewportSide.Negative
        VB: ViewportSide.Negative
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Negative
        path: ''
        startLine: 20006
      syntax:
        content:
          CSharp: Negative = -1
          VB: Negative = -1
        return:
          type: Global.ViewportSide
    - id: Global.ViewportSide.Centre
      commentId: F:Global.ViewportSide.Centre
      language: CSharp
      name:
        CSharp: Centre
        VB: Centre
      nameWithType:
        CSharp: ViewportSide.Centre
        VB: ViewportSide.Centre
      qualifiedName:
        CSharp: ViewportSide.Centre
        VB: ViewportSide.Centre
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Centre
        path: ''
        startLine: 20007
      syntax:
        content:
          CSharp: Centre = 0
          VB: Centre = 0
        return:
          type: Global.ViewportSide
    - id: Global.ViewportSide.Positive
      commentId: F:Global.ViewportSide.Positive
      language: CSharp
      name:
        CSharp: Positive
        VB: Positive
      nameWithType:
        CSharp: ViewportSide.Positive
        VB: ViewportSide.Positive
      qualifiedName:
        CSharp: ViewportSide.Positive
        VB: ViewportSide.Positive
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Positive
        path: ''
        startLine: 20008
      syntax:
        content:
          CSharp: Positive = 1
          VB: Positive = 1
        return:
          type: Global.ViewportSide
  - id: Global.UIViewport
    commentId: T:Global.UIViewport
    language: CSharp
    name:
      CSharp: UIViewport
      VB: UIViewport
    nameWithType:
      CSharp: UIViewport
      VB: UIViewport
    qualifiedName:
      CSharp: UIViewport
      VB: UIViewport
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UIViewport
      path: ''
      startLine: 20011
    syntax:
      content:
        CSharp: 'public class UIViewport : MonoBehaviour'
        VB: Public Class UIViewport Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UIViewport.scrollAmount
      commentId: P:Global.UIViewport.scrollAmount
      language: CSharp
      name:
        CSharp: scrollAmount
        VB: scrollAmount
      nameWithType:
        CSharp: UIViewport.scrollAmount
        VB: UIViewport.scrollAmount
      qualifiedName:
        CSharp: UIViewport.scrollAmount
        VB: UIViewport.scrollAmount
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: scrollAmount
        path: ''
        startLine: 20018
      syntax:
        content:
          CSharp: public float scrollAmount { get; }
          VB: Public Property scrollAmount As Single
        parameters: []
        return:
          type: System.Single
      overload: Global.UIViewport.scrollAmount*
    - id: Global.UIViewport.scrollDirection
      commentId: F:Global.UIViewport.scrollDirection
      language: CSharp
      name:
        CSharp: scrollDirection
        VB: scrollDirection
      nameWithType:
        CSharp: UIViewport.scrollDirection
        VB: UIViewport.scrollDirection
      qualifiedName:
        CSharp: UIViewport.scrollDirection
        VB: UIViewport.scrollDirection
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: scrollDirection
        path: ''
        startLine: 20029
      syntax:
        content:
          CSharp: public ScrollDirection scrollDirection
          VB: Public scrollDirection As ScrollDirection
        return:
          type: Global.ScrollDirection
    - id: Global.UIViewport.maxScrollEnabled
      commentId: F:Global.UIViewport.maxScrollEnabled
      language: CSharp
      name:
        CSharp: maxScrollEnabled
        VB: maxScrollEnabled
      nameWithType:
        CSharp: UIViewport.maxScrollEnabled
        VB: UIViewport.maxScrollEnabled
      qualifiedName:
        CSharp: UIViewport.maxScrollEnabled
        VB: UIViewport.maxScrollEnabled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: maxScrollEnabled
        path: ''
        startLine: 20030
      syntax:
        content:
          CSharp: public bool maxScrollEnabled
          VB: Public maxScrollEnabled As Boolean
        return:
          type: System.Boolean
    - id: Global.UIViewport.maxScrollAmount
      commentId: F:Global.UIViewport.maxScrollAmount
      language: CSharp
      name:
        CSharp: maxScrollAmount
        VB: maxScrollAmount
      nameWithType:
        CSharp: UIViewport.maxScrollAmount
        VB: UIViewport.maxScrollAmount
      qualifiedName:
        CSharp: UIViewport.maxScrollAmount
        VB: UIViewport.maxScrollAmount
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: maxScrollAmount
        path: ''
        startLine: 20031
      syntax:
        content:
          CSharp: public float maxScrollAmount
          VB: Public maxScrollAmount As Single
        return:
          type: System.Single
    - id: Global.UIViewport.minScrollEnabled
      commentId: F:Global.UIViewport.minScrollEnabled
      language: CSharp
      name:
        CSharp: minScrollEnabled
        VB: minScrollEnabled
      nameWithType:
        CSharp: UIViewport.minScrollEnabled
        VB: UIViewport.minScrollEnabled
      qualifiedName:
        CSharp: UIViewport.minScrollEnabled
        VB: UIViewport.minScrollEnabled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: minScrollEnabled
        path: ''
        startLine: 20032
      syntax:
        content:
          CSharp: public bool minScrollEnabled
          VB: Public minScrollEnabled As Boolean
        return:
          type: System.Boolean
    - id: Global.UIViewport.minScrollAmount
      commentId: F:Global.UIViewport.minScrollAmount
      language: CSharp
      name:
        CSharp: minScrollAmount
        VB: minScrollAmount
      nameWithType:
        CSharp: UIViewport.minScrollAmount
        VB: UIViewport.minScrollAmount
      qualifiedName:
        CSharp: UIViewport.minScrollAmount
        VB: UIViewport.minScrollAmount
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: minScrollAmount
        path: ''
        startLine: 20033
      syntax:
        content:
          CSharp: public float minScrollAmount
          VB: Public minScrollAmount As Single
        return:
          type: System.Single
    - id: Global.UIViewport.boundScrollToContents
      commentId: F:Global.UIViewport.boundScrollToContents
      language: CSharp
      name:
        CSharp: boundScrollToContents
        VB: boundScrollToContents
      nameWithType:
        CSharp: UIViewport.boundScrollToContents
        VB: UIViewport.boundScrollToContents
      qualifiedName:
        CSharp: UIViewport.boundScrollToContents
        VB: UIViewport.boundScrollToContents
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: boundScrollToContents
        path: ''
        startLine: 20035
      syntax:
        content:
          CSharp: public bool boundScrollToContents
          VB: Public boundScrollToContents As Boolean
        return:
          type: System.Boolean
    - id: Global.UIViewport.defaultScrollSide
      commentId: P:Global.UIViewport.defaultScrollSide
      language: CSharp
      name:
        CSharp: defaultScrollSide
        VB: defaultScrollSide
      nameWithType:
        CSharp: UIViewport.defaultScrollSide
        VB: UIViewport.defaultScrollSide
      qualifiedName:
        CSharp: UIViewport.defaultScrollSide
        VB: UIViewport.defaultScrollSide
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: defaultScrollSide
        path: ''
        startLine: 20039
      syntax:
        content:
          CSharp: public ViewportSide defaultScrollSide { get; }
          VB: Public ReadOnly Property defaultScrollSide As ViewportSide
        parameters: []
        return:
          type: Global.ViewportSide
      overload: Global.UIViewport.defaultScrollSide*
    - id: Global.UIViewport.scrollingArea
      commentId: P:Global.UIViewport.scrollingArea
      language: CSharp
      name:
        CSharp: scrollingArea
        VB: scrollingArea
      nameWithType:
        CSharp: UIViewport.scrollingArea
        VB: UIViewport.scrollingArea
      qualifiedName:
        CSharp: UIViewport.scrollingArea
        VB: UIViewport.scrollingArea
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: scrollingArea
        path: ''
        startLine: 20051
      syntax:
        content:
          CSharp: public Transform scrollingArea { get; }
          VB: Public Property scrollingArea As Transform
        parameters: []
        return:
          type: Global.Transform
      overload: Global.UIViewport.scrollingArea*
    - id: Global.UIViewport.rectTransform
      commentId: P:Global.UIViewport.rectTransform
      language: CSharp
      name:
        CSharp: rectTransform
        VB: rectTransform
      nameWithType:
        CSharp: UIViewport.rectTransform
        VB: UIViewport.rectTransform
      qualifiedName:
        CSharp: UIViewport.rectTransform
        VB: UIViewport.rectTransform
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: rectTransform
        path: ''
        startLine: 20053
      syntax:
        content:
          CSharp: public RectTransform rectTransform { get; }
          VB: Public Property rectTransform As RectTransform
        parameters: []
        return:
          type: Global.RectTransform
      overload: Global.UIViewport.rectTransform*
    - id: Global.UIViewport.collider
      commentId: P:Global.UIViewport.collider
      language: CSharp
      name:
        CSharp: collider
        VB: collider
      nameWithType:
        CSharp: UIViewport.collider
        VB: UIViewport.collider
      qualifiedName:
        CSharp: UIViewport.collider
        VB: UIViewport.collider
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: collider
        path: ''
        startLine: 20054
      syntax:
        content:
          CSharp: public BoxCollider2D collider { get; }
          VB: Public Property collider As BoxCollider2D
        parameters: []
        return:
          type: Global.BoxCollider2D
      overload: Global.UIViewport.collider*
    - id: Global.UIViewport.RefreshViewport
      commentId: M:Global.UIViewport.RefreshViewport
      language: CSharp
      name:
        CSharp: RefreshViewport()
        VB: RefreshViewport()
      nameWithType:
        CSharp: UIViewport.RefreshViewport()
        VB: UIViewport.RefreshViewport()
      qualifiedName:
        CSharp: UIViewport.RefreshViewport()
        VB: UIViewport.RefreshViewport()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RefreshViewport
        path: ''
        startLine: 20080
      syntax:
        content:
          CSharp: public void RefreshViewport()
          VB: Public Sub RefreshViewport()
      overload: Global.UIViewport.RefreshViewport*
    - id: Global.UIViewport.AddScrollAmount(System.Single)
      commentId: M:Global.UIViewport.AddScrollAmount(System.Single)
      language: CSharp
      name:
        CSharp: AddScrollAmount(float)
        VB: AddScrollAmount(Single)
      nameWithType:
        CSharp: UIViewport.AddScrollAmount(float)
        VB: UIViewport.AddScrollAmount(Single)
      qualifiedName:
        CSharp: UIViewport.AddScrollAmount(float)
        VB: UIViewport.AddScrollAmount(Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddScrollAmount
        path: ''
        startLine: 20117
      syntax:
        content:
          CSharp: public void AddScrollAmount(float scrollAmount)
          VB: Public Sub AddScrollAmount(scrollAmount As Single)
        parameters:
        - id: scrollAmount
          type: System.Single
      overload: Global.UIViewport.AddScrollAmount*
    - id: Global.UIViewport.SetScrollAmount(System.Single)
      commentId: M:Global.UIViewport.SetScrollAmount(System.Single)
      language: CSharp
      name:
        CSharp: SetScrollAmount(float)
        VB: SetScrollAmount(Single)
      nameWithType:
        CSharp: UIViewport.SetScrollAmount(float)
        VB: UIViewport.SetScrollAmount(Single)
      qualifiedName:
        CSharp: UIViewport.SetScrollAmount(float)
        VB: UIViewport.SetScrollAmount(Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetScrollAmount
        path: ''
        startLine: 20121
      syntax:
        content:
          CSharp: public void SetScrollAmount(float scrollAmount)
          VB: Public Sub SetScrollAmount(scrollAmount As Single)
        parameters:
        - id: scrollAmount
          type: System.Single
      overload: Global.UIViewport.SetScrollAmount*
    - id: Global.UIViewport.GetScrollMinMaxY
      commentId: M:Global.UIViewport.GetScrollMinMaxY
      language: CSharp
      name:
        CSharp: GetScrollMinMaxY()
        VB: GetScrollMinMaxY()
      nameWithType:
        CSharp: UIViewport.GetScrollMinMaxY()
        VB: UIViewport.GetScrollMinMaxY()
      qualifiedName:
        CSharp: UIViewport.GetScrollMinMaxY()
        VB: UIViewport.GetScrollMinMaxY()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetScrollMinMaxY
        path: ''
        startLine: 20211
      summary: "\nGet the min and max y value of the space that the objects in this viewport&apos;s scroll area occupy. (Scaled to the scale of the viewport object.)\n"
      example: []
      syntax:
        content:
          CSharp: public Vector2 GetScrollMinMaxY()
          VB: Public Function GetScrollMinMaxY() As Vector2
        return:
          type: Global.Vector2
          description: (min y, max y)
      overload: Global.UIViewport.GetScrollMinMaxY*
    - id: Global.UIViewport.GetScrollMinMaxX
      commentId: M:Global.UIViewport.GetScrollMinMaxX
      language: CSharp
      name:
        CSharp: GetScrollMinMaxX()
        VB: GetScrollMinMaxX()
      nameWithType:
        CSharp: UIViewport.GetScrollMinMaxX()
        VB: UIViewport.GetScrollMinMaxX()
      qualifiedName:
        CSharp: UIViewport.GetScrollMinMaxX()
        VB: UIViewport.GetScrollMinMaxX()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetScrollMinMaxX
        path: ''
        startLine: 20273
      summary: "\nGet the min and max x value of the space that the objects in this viewport&apos;s scroll area occupy. (Scaled to the scale of the viewport object.)\n"
      example: []
      syntax:
        content:
          CSharp: public Vector2 GetScrollMinMaxX()
          VB: Public Function GetScrollMinMaxX() As Vector2
        return:
          type: Global.Vector2
          description: (min x, max x)
      overload: Global.UIViewport.GetScrollMinMaxX*
    - id: Global.UIViewport.SubscribeToRefresh(UnityAction)
      commentId: M:Global.UIViewport.SubscribeToRefresh(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToRefresh(UnityAction)
        VB: SubscribeToRefresh(UnityAction)
      nameWithType:
        CSharp: UIViewport.SubscribeToRefresh(UnityAction)
        VB: UIViewport.SubscribeToRefresh(UnityAction)
      qualifiedName:
        CSharp: UIViewport.SubscribeToRefresh(UnityAction)
        VB: UIViewport.SubscribeToRefresh(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToRefresh
        path: ''
        startLine: 20331
      syntax:
        content:
          CSharp: public void SubscribeToRefresh(UnityAction call)
          VB: Public Sub SubscribeToRefresh([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UIViewport.SubscribeToRefresh*
  - id: Global.UndoRedoManager
    commentId: T:Global.UndoRedoManager
    language: CSharp
    name:
      CSharp: UndoRedoManager
      VB: UndoRedoManager
    nameWithType:
      CSharp: UndoRedoManager
      VB: UndoRedoManager
    qualifiedName:
      CSharp: UndoRedoManager
      VB: UndoRedoManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UndoRedoManager
      path: ''
      startLine: 20342
    syntax:
      content:
        CSharp: 'public class UndoRedoManager : MonoBehaviour'
        VB: Public Class UndoRedoManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UndoRedoManager.AddUndoState(UndoRedoState,System.Int32)
      commentId: M:Global.UndoRedoManager.AddUndoState(UndoRedoState,System.Int32)
      language: CSharp
      name:
        CSharp: AddUndoState(UndoRedoState, int)
        VB: AddUndoState(UndoRedoState, Integer)
      nameWithType:
        CSharp: UndoRedoManager.AddUndoState(UndoRedoState, int)
        VB: UndoRedoManager.AddUndoState(UndoRedoState, Integer)
      qualifiedName:
        CSharp: UndoRedoManager.AddUndoState(UndoRedoState, int)
        VB: UndoRedoManager.AddUndoState(UndoRedoState, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AddUndoState
        path: ''
        startLine: 20378
      syntax:
        content:
          CSharp: public void AddUndoState(UndoRedoState undoState, int fileIndex)
          VB: Public Sub AddUndoState(undoState As UndoRedoState, fileIndex As Integer)
        parameters:
        - id: undoState
          type: Global.UndoRedoState
        - id: fileIndex
          type: System.Int32
      overload: Global.UndoRedoManager.AddUndoState*
    - id: Global.UndoRedoManager.SubscribeToUndo(UnityAction)
      commentId: M:Global.UndoRedoManager.SubscribeToUndo(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToUndo(UnityAction)
        VB: SubscribeToUndo(UnityAction)
      nameWithType:
        CSharp: UndoRedoManager.SubscribeToUndo(UnityAction)
        VB: UndoRedoManager.SubscribeToUndo(UnityAction)
      qualifiedName:
        CSharp: UndoRedoManager.SubscribeToUndo(UnityAction)
        VB: UndoRedoManager.SubscribeToUndo(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToUndo
        path: ''
        startLine: 20488
      syntax:
        content:
          CSharp: public void SubscribeToUndo(UnityAction call)
          VB: Public Sub SubscribeToUndo([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UndoRedoManager.SubscribeToUndo*
    - id: Global.UndoRedoManager.SubscribeToRedo(UnityAction)
      commentId: M:Global.UndoRedoManager.SubscribeToRedo(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToRedo(UnityAction)
        VB: SubscribeToRedo(UnityAction)
      nameWithType:
        CSharp: UndoRedoManager.SubscribeToRedo(UnityAction)
        VB: UndoRedoManager.SubscribeToRedo(UnityAction)
      qualifiedName:
        CSharp: UndoRedoManager.SubscribeToRedo(UnityAction)
        VB: UndoRedoManager.SubscribeToRedo(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToRedo
        path: ''
        startLine: 20492
      syntax:
        content:
          CSharp: public void SubscribeToRedo(UnityAction call)
          VB: Public Sub SubscribeToRedo([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UndoRedoManager.SubscribeToRedo*
    - id: Global.UndoRedoManager.SubscribeToUndoOrRedo(UnityAction)
      commentId: M:Global.UndoRedoManager.SubscribeToUndoOrRedo(UnityAction)
      language: CSharp
      name:
        CSharp: SubscribeToUndoOrRedo(UnityAction)
        VB: SubscribeToUndoOrRedo(UnityAction)
      nameWithType:
        CSharp: UndoRedoManager.SubscribeToUndoOrRedo(UnityAction)
        VB: UndoRedoManager.SubscribeToUndoOrRedo(UnityAction)
      qualifiedName:
        CSharp: UndoRedoManager.SubscribeToUndoOrRedo(UnityAction)
        VB: UndoRedoManager.SubscribeToUndoOrRedo(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SubscribeToUndoOrRedo
        path: ''
        startLine: 20496
      syntax:
        content:
          CSharp: public void SubscribeToUndoOrRedo(UnityAction call)
          VB: Public Sub SubscribeToUndoOrRedo([call] As UnityAction)
        parameters:
        - id: call
          type: Global.UnityAction
      overload: Global.UndoRedoManager.SubscribeToUndoOrRedo*
  - id: Global.UndoRedoAction
    commentId: T:Global.UndoRedoAction
    language: CSharp
    name:
      CSharp: UndoRedoAction
      VB: UndoRedoAction
    nameWithType:
      CSharp: UndoRedoAction
      VB: UndoRedoAction
    qualifiedName:
      CSharp: UndoRedoAction
      VB: UndoRedoAction
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UndoRedoAction
      path: ''
      startLine: 20506
    syntax:
      content:
        CSharp: public enum UndoRedoAction
        VB: Public Enum UndoRedoAction
    items:
    - id: Global.UndoRedoAction.None
      commentId: F:Global.UndoRedoAction.None
      language: CSharp
      name:
        CSharp: None
        VB: None
      nameWithType:
        CSharp: UndoRedoAction.None
        VB: UndoRedoAction.None
      qualifiedName:
        CSharp: UndoRedoAction.None
        VB: UndoRedoAction.None
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: None
        path: ''
        startLine: 20508
      syntax:
        content:
          CSharp: None = -1
          VB: None = -1
        return:
          type: Global.UndoRedoAction
    - id: Global.UndoRedoAction.Undefined
      commentId: F:Global.UndoRedoAction.Undefined
      language: CSharp
      name:
        CSharp: Undefined
        VB: Undefined
      nameWithType:
        CSharp: UndoRedoAction.Undefined
        VB: UndoRedoAction.Undefined
      qualifiedName:
        CSharp: UndoRedoAction.Undefined
        VB: UndoRedoAction.Undefined
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Undefined
        path: ''
        startLine: 20509
      syntax:
        content:
          CSharp: Undefined = 0
          VB: Undefined = 0
        return:
          type: Global.UndoRedoAction
    - id: Global.UndoRedoAction.Draw
      commentId: F:Global.UndoRedoAction.Draw
      language: CSharp
      name:
        CSharp: Draw
        VB: Draw
      nameWithType:
        CSharp: UndoRedoAction.Draw
        VB: UndoRedoAction.Draw
      qualifiedName:
        CSharp: UndoRedoAction.Draw
        VB: UndoRedoAction.Draw
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Draw
        path: ''
        startLine: 20510
      syntax:
        content:
          CSharp: Draw = 1
          VB: Draw = 1
        return:
          type: Global.UndoRedoAction
    - id: Global.UndoRedoAction.ReorderLayers
      commentId: F:Global.UndoRedoAction.ReorderLayers
      language: CSharp
      name:
        CSharp: ReorderLayers
        VB: ReorderLayers
      nameWithType:
        CSharp: UndoRedoAction.ReorderLayers
        VB: UndoRedoAction.ReorderLayers
      qualifiedName:
        CSharp: UndoRedoAction.ReorderLayers
        VB: UndoRedoAction.ReorderLayers
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ReorderLayers
        path: ''
        startLine: 20511
      syntax:
        content:
          CSharp: ReorderLayers = 2
          VB: ReorderLayers = 2
        return:
          type: Global.UndoRedoAction
  - id: Global.UndoRedoState
    commentId: T:Global.UndoRedoState
    language: CSharp
    name:
      CSharp: UndoRedoState
      VB: UndoRedoState
    nameWithType:
      CSharp: UndoRedoState
      VB: UndoRedoState
    qualifiedName:
      CSharp: UndoRedoState
      VB: UndoRedoState
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UndoRedoState
      path: ''
      startLine: 20514
    syntax:
      content:
        CSharp: public class UndoRedoState
        VB: Public Class UndoRedoState
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.UndoRedoState.action
      commentId: P:Global.UndoRedoState.action
      language: CSharp
      name:
        CSharp: action
        VB: action
      nameWithType:
        CSharp: UndoRedoState.action
        VB: UndoRedoState.action
      qualifiedName:
        CSharp: UndoRedoState.action
        VB: UndoRedoState.action
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: action
        path: ''
        startLine: 20516
      syntax:
        content:
          CSharp: public UndoRedoAction action { get; }
          VB: Public Property action As UndoRedoAction
        parameters: []
        return:
          type: Global.UndoRedoAction
      overload: Global.UndoRedoState.action*
    - id: Global.UndoRedoState.affectedLayers
      commentId: P:Global.UndoRedoState.affectedLayers
      language: CSharp
      name:
        CSharp: affectedLayers
        VB: affectedLayers
      nameWithType:
        CSharp: UndoRedoState.affectedLayers
        VB: UndoRedoState.affectedLayers
      qualifiedName:
        CSharp: UndoRedoState.affectedLayers
        VB: UndoRedoState.affectedLayers
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: affectedLayers
        path: ''
        startLine: 20517
      syntax:
        content:
          CSharp: public Layer[] affectedLayers { get; }
          VB: Public Property affectedLayers As Layer()
        parameters: []
        return:
          type: Global.Layer[]
      overload: Global.UndoRedoState.affectedLayers*
    - id: Global.UndoRedoState.affectedLayersIndices
      commentId: P:Global.UndoRedoState.affectedLayersIndices
      language: CSharp
      name:
        CSharp: affectedLayersIndices
        VB: affectedLayersIndices
      nameWithType:
        CSharp: UndoRedoState.affectedLayersIndices
        VB: UndoRedoState.affectedLayersIndices
      qualifiedName:
        CSharp: UndoRedoState.affectedLayersIndices
        VB: UndoRedoState.affectedLayersIndices
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: affectedLayersIndices
        path: ''
        startLine: 20518
      syntax:
        content:
          CSharp: public int[] affectedLayersIndices { get; }
          VB: Public Property affectedLayersIndices As Integer()
        parameters: []
        return:
          type: System.Int32[]
      overload: Global.UndoRedoState.affectedLayersIndices*
    - id: Global.UndoRedoState.#ctor(UndoRedoAction,Layer,System.Int32)
      commentId: M:Global.UndoRedoState.#ctor(UndoRedoAction,Layer,System.Int32)
      language: CSharp
      name:
        CSharp: UndoRedoState(UndoRedoAction, Layer, int)
        VB: New(UndoRedoAction, Layer, Integer)
      nameWithType:
        CSharp: UndoRedoState.UndoRedoState(UndoRedoAction, Layer, int)
        VB: UndoRedoState.New(UndoRedoAction, Layer, Integer)
      qualifiedName:
        CSharp: UndoRedoState.UndoRedoState(UndoRedoAction, Layer, int)
        VB: UndoRedoState.New(UndoRedoAction, Layer, Integer)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 20520
      syntax:
        content:
          CSharp: public UndoRedoState(UndoRedoAction action, Layer layer, int layerIndex)
          VB: Public Sub New(action As UndoRedoAction, layer As Layer, layerIndex As Integer)
        parameters:
        - id: action
          type: Global.UndoRedoAction
        - id: layer
          type: Global.Layer
        - id: layerIndex
          type: System.Int32
      overload: Global.UndoRedoState.#ctor*
    - id: Global.UndoRedoState.#ctor(UndoRedoAction,Layer[],System.Int32[])
      commentId: M:Global.UndoRedoState.#ctor(UndoRedoAction,Layer[],System.Int32[])
      language: CSharp
      name:
        CSharp: UndoRedoState(UndoRedoAction, Layer[], int[])
        VB: New(UndoRedoAction, Layer(), Integer())
      nameWithType:
        CSharp: UndoRedoState.UndoRedoState(UndoRedoAction, Layer[], int[])
        VB: UndoRedoState.New(UndoRedoAction, Layer(), Integer())
      qualifiedName:
        CSharp: UndoRedoState.UndoRedoState(UndoRedoAction, Layer[], int[])
        VB: UndoRedoState.New(UndoRedoAction, Layer(), Integer())
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 20522
      syntax:
        content:
          CSharp: public UndoRedoState(UndoRedoAction action, Layer[] affectedLayers, int[] affectedLayersIndices)
          VB: Public Sub New(action As UndoRedoAction, affectedLayers As Layer(), affectedLayersIndices As Integer())
        parameters:
        - id: action
          type: Global.UndoRedoAction
        - id: affectedLayers
          type: Global.Layer[]
        - id: affectedLayersIndices
          type: System.Int32[]
      overload: Global.UndoRedoState.#ctor*
references:
  Global.RotationAngle:
    name:
      CSharp:
      - id: Global.RotationAngle
        name: RotationAngle
      VB:
      - id: Global.RotationAngle
        name: RotationAngle
    nameWithType:
      CSharp:
      - id: Global.RotationAngle
        name: RotationAngle
      VB:
      - id: Global.RotationAngle
        name: RotationAngle
    qualifiedName:
      CSharp:
      - id: Global.RotationAngle
        name: RotationAngle
      VB:
      - id: Global.RotationAngle
        name: RotationAngle
    isDefinition: true
    commentId: T:Global.RotationAngle
  Global.FlipDirection:
    name:
      CSharp:
      - id: Global.FlipDirection
        name: FlipDirection
      VB:
      - id: Global.FlipDirection
        name: FlipDirection
    nameWithType:
      CSharp:
      - id: Global.FlipDirection
        name: FlipDirection
      VB:
      - id: Global.FlipDirection
        name: FlipDirection
    qualifiedName:
      CSharp:
      - id: Global.FlipDirection
        name: FlipDirection
      VB:
      - id: Global.FlipDirection
        name: FlipDirection
    isDefinition: true
    commentId: T:Global.FlipDirection
  System:
    name:
      CSharp:
      - id: System
        name: System
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
    nameWithType:
      CSharp:
      - id: System
        name: System
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.Equals(System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.Equals(System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.Equals(System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.Equals(System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.GetHashCode
        name: GetHashCode
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.GetHashCode
        name: GetHashCode
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.GetHashCode
        name: GetHashCode
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.GetHashCode
        name: GetHashCode
        isExternal: true
      - name: (
      - name: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object.GetType
        name: GetType
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.GetType
        name: GetType
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.GetType
        name: GetType
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.GetType
        name: GetType
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.GetType
        name: GetType
        isExternal: true
      - name: (
      - name: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        isExternal: true
      - name: (
      - name: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  Global.InputSystem:
    name:
      CSharp:
      - id: Global.InputSystem
        name: InputSystem
      VB:
      - id: Global.InputSystem
        name: InputSystem
    nameWithType:
      CSharp:
      - id: Global.InputSystem
        name: InputSystem
      VB:
      - id: Global.InputSystem
        name: InputSystem
    qualifiedName:
      CSharp:
      - id: Global.InputSystem
        name: InputSystem
      VB:
      - id: Global.InputSystem
        name: InputSystem
    isDefinition: true
    commentId: T:Global.InputSystem
  Global.Finder.inputSystem*:
    name:
      CSharp:
      - id: Global.Finder.inputSystem*
        name: inputSystem
      VB:
      - id: Global.Finder.inputSystem*
        name: inputSystem
    nameWithType:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.inputSystem*
        name: inputSystem
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.inputSystem*
        name: inputSystem
    qualifiedName:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.inputSystem*
        name: inputSystem
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.inputSystem*
        name: inputSystem
    isDefinition: true
    commentId: Overload:Global.Finder.inputSystem
  Global.Mouse:
    name:
      CSharp:
      - id: Global.Mouse
        name: Mouse
      VB:
      - id: Global.Mouse
        name: Mouse
    nameWithType:
      CSharp:
      - id: Global.Mouse
        name: Mouse
      VB:
      - id: Global.Mouse
        name: Mouse
    qualifiedName:
      CSharp:
      - id: Global.Mouse
        name: Mouse
      VB:
      - id: Global.Mouse
        name: Mouse
    isDefinition: true
    commentId: T:Global.Mouse
  Global.Finder.mouse*:
    name:
      CSharp:
      - id: Global.Finder.mouse*
        name: mouse
      VB:
      - id: Global.Finder.mouse*
        name: mouse
    nameWithType:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.mouse*
        name: mouse
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.mouse*
        name: mouse
    qualifiedName:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.mouse*
        name: mouse
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.mouse*
        name: mouse
    isDefinition: true
    commentId: Overload:Global.Finder.mouse
  Global.Keyboard:
    name:
      CSharp:
      - id: Global.Keyboard
        name: Keyboard
      VB:
      - id: Global.Keyboard
        name: Keyboard
    nameWithType:
      CSharp:
      - id: Global.Keyboard
        name: Keyboard
      VB:
      - id: Global.Keyboard
        name: Keyboard
    qualifiedName:
      CSharp:
      - id: Global.Keyboard
        name: Keyboard
      VB:
      - id: Global.Keyboard
        name: Keyboard
    isDefinition: true
    commentId: T:Global.Keyboard
  Global.Finder.keyboard*:
    name:
      CSharp:
      - id: Global.Finder.keyboard*
        name: keyboard
      VB:
      - id: Global.Finder.keyboard*
        name: keyboard
    nameWithType:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.keyboard*
        name: keyboard
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.keyboard*
        name: keyboard
    qualifiedName:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.keyboard*
        name: keyboard
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.keyboard*
        name: keyboard
    isDefinition: true
    commentId: Overload:Global.Finder.keyboard
  Global.FileManager:
    name:
      CSharp:
      - id: Global.FileManager
        name: FileManager
      VB:
      - id: Global.FileManager
        name: FileManager
    nameWithType:
      CSharp:
      - id: Global.FileManager
        name: FileManager
      VB:
      - id: Global.FileManager
        name: FileManager
    qualifiedName:
      CSharp:
      - id: Global.FileManager
        name: FileManager
      VB:
      - id: Global.FileManager
        name: FileManager
    isDefinition: true
    commentId: T:Global.FileManager
  Global.Finder.fileManager*:
    name:
      CSharp:
      - id: Global.Finder.fileManager*
        name: fileManager
      VB:
      - id: Global.Finder.fileManager*
        name: fileManager
    nameWithType:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.fileManager*
        name: fileManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.fileManager*
        name: fileManager
    qualifiedName:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.fileManager*
        name: fileManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.fileManager*
        name: fileManager
    isDefinition: true
    commentId: Overload:Global.Finder.fileManager
  Global.FileTabsManager:
    name:
      CSharp:
      - id: Global.FileTabsManager
        name: FileTabsManager
      VB:
      - id: Global.FileTabsManager
        name: FileTabsManager
    nameWithType:
      CSharp:
      - id: Global.FileTabsManager
        name: FileTabsManager
      VB:
      - id: Global.FileTabsManager
        name: FileTabsManager
    qualifiedName:
      CSharp:
      - id: Global.FileTabsManager
        name: FileTabsManager
      VB:
      - id: Global.FileTabsManager
        name: FileTabsManager
    isDefinition: true
    commentId: T:Global.FileTabsManager
  Global.Finder.fileTabsManager*:
    name:
      CSharp:
      - id: Global.Finder.fileTabsManager*
        name: fileTabsManager
      VB:
      - id: Global.Finder.fileTabsManager*
        name: fileTabsManager
    nameWithType:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.fileTabsManager*
        name: fileTabsManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.fileTabsManager*
        name: fileTabsManager
    qualifiedName:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.fileTabsManager*
        name: fileTabsManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.fileTabsManager*
        name: fileTabsManager
    isDefinition: true
    commentId: Overload:Global.Finder.fileTabsManager
  Global.LayerManager:
    name:
      CSharp:
      - id: Global.LayerManager
        name: LayerManager
      VB:
      - id: Global.LayerManager
        name: LayerManager
    nameWithType:
      CSharp:
      - id: Global.LayerManager
        name: LayerManager
      VB:
      - id: Global.LayerManager
        name: LayerManager
    qualifiedName:
      CSharp:
      - id: Global.LayerManager
        name: LayerManager
      VB:
      - id: Global.LayerManager
        name: LayerManager
    isDefinition: true
    commentId: T:Global.LayerManager
  Global.Finder.layerManager*:
    name:
      CSharp:
      - id: Global.Finder.layerManager*
        name: layerManager
      VB:
      - id: Global.Finder.layerManager*
        name: layerManager
    nameWithType:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.layerManager*
        name: layerManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.layerManager*
        name: layerManager
    qualifiedName:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.layerManager*
        name: layerManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.layerManager*
        name: layerManager
    isDefinition: true
    commentId: Overload:Global.Finder.layerManager
  Global.AnimationManager:
    name:
      CSharp:
      - id: Global.AnimationManager
        name: AnimationManager
      VB:
      - id: Global.AnimationManager
        name: AnimationManager
    nameWithType:
      CSharp:
      - id: Global.AnimationManager
        name: AnimationManager
      VB:
      - id: Global.AnimationManager
        name: AnimationManager
    qualifiedName:
      CSharp:
      - id: Global.AnimationManager
        name: AnimationManager
      VB:
      - id: Global.AnimationManager
        name: AnimationManager
    isDefinition: true
    commentId: T:Global.AnimationManager
  Global.Finder.animationManager*:
    name:
      CSharp:
      - id: Global.Finder.animationManager*
        name: animationManager
      VB:
      - id: Global.Finder.animationManager*
        name: animationManager
    nameWithType:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.animationManager*
        name: animationManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.animationManager*
        name: animationManager
    qualifiedName:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.animationManager*
        name: animationManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.animationManager*
        name: animationManager
    isDefinition: true
    commentId: Overload:Global.Finder.animationManager
  Global.DrawingArea:
    name:
      CSharp:
      - id: Global.DrawingArea
        name: DrawingArea
      VB:
      - id: Global.DrawingArea
        name: DrawingArea
    nameWithType:
      CSharp:
      - id: Global.DrawingArea
        name: DrawingArea
      VB:
      - id: Global.DrawingArea
        name: DrawingArea
    qualifiedName:
      CSharp:
      - id: Global.DrawingArea
        name: DrawingArea
      VB:
      - id: Global.DrawingArea
        name: DrawingArea
    isDefinition: true
    commentId: T:Global.DrawingArea
  Global.Finder.drawingArea*:
    name:
      CSharp:
      - id: Global.Finder.drawingArea*
        name: drawingArea
      VB:
      - id: Global.Finder.drawingArea*
        name: drawingArea
    nameWithType:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.drawingArea*
        name: drawingArea
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.drawingArea*
        name: drawingArea
    qualifiedName:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.drawingArea*
        name: drawingArea
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.drawingArea*
        name: drawingArea
    isDefinition: true
    commentId: Overload:Global.Finder.drawingArea
  Global.TilesetManager:
    name:
      CSharp:
      - id: Global.TilesetManager
        name: TilesetManager
      VB:
      - id: Global.TilesetManager
        name: TilesetManager
    nameWithType:
      CSharp:
      - id: Global.TilesetManager
        name: TilesetManager
      VB:
      - id: Global.TilesetManager
        name: TilesetManager
    qualifiedName:
      CSharp:
      - id: Global.TilesetManager
        name: TilesetManager
      VB:
      - id: Global.TilesetManager
        name: TilesetManager
    isDefinition: true
    commentId: T:Global.TilesetManager
  Global.Finder.tilesetManager*:
    name:
      CSharp:
      - id: Global.Finder.tilesetManager*
        name: tilesetManager
      VB:
      - id: Global.Finder.tilesetManager*
        name: tilesetManager
    nameWithType:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.tilesetManager*
        name: tilesetManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.tilesetManager*
        name: tilesetManager
    qualifiedName:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.tilesetManager*
        name: tilesetManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.tilesetManager*
        name: tilesetManager
    isDefinition: true
    commentId: Overload:Global.Finder.tilesetManager
  Global.TileOutlineManager:
    name:
      CSharp:
      - id: Global.TileOutlineManager
        name: TileOutlineManager
      VB:
      - id: Global.TileOutlineManager
        name: TileOutlineManager
    nameWithType:
      CSharp:
      - id: Global.TileOutlineManager
        name: TileOutlineManager
      VB:
      - id: Global.TileOutlineManager
        name: TileOutlineManager
    qualifiedName:
      CSharp:
      - id: Global.TileOutlineManager
        name: TileOutlineManager
      VB:
      - id: Global.TileOutlineManager
        name: TileOutlineManager
    isDefinition: true
    commentId: T:Global.TileOutlineManager
  Global.Finder.tileOutlineManager*:
    name:
      CSharp:
      - id: Global.Finder.tileOutlineManager*
        name: tileOutlineManager
      VB:
      - id: Global.Finder.tileOutlineManager*
        name: tileOutlineManager
    nameWithType:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.tileOutlineManager*
        name: tileOutlineManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.tileOutlineManager*
        name: tileOutlineManager
    qualifiedName:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.tileOutlineManager*
        name: tileOutlineManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.tileOutlineManager*
        name: tileOutlineManager
    isDefinition: true
    commentId: Overload:Global.Finder.tileOutlineManager
  Global.GlobalColourPicker:
    name:
      CSharp:
      - id: Global.GlobalColourPicker
        name: GlobalColourPicker
      VB:
      - id: Global.GlobalColourPicker
        name: GlobalColourPicker
    nameWithType:
      CSharp:
      - id: Global.GlobalColourPicker
        name: GlobalColourPicker
      VB:
      - id: Global.GlobalColourPicker
        name: GlobalColourPicker
    qualifiedName:
      CSharp:
      - id: Global.GlobalColourPicker
        name: GlobalColourPicker
      VB:
      - id: Global.GlobalColourPicker
        name: GlobalColourPicker
    isDefinition: true
    commentId: T:Global.GlobalColourPicker
  Global.Finder.colourPicker*:
    name:
      CSharp:
      - id: Global.Finder.colourPicker*
        name: colourPicker
      VB:
      - id: Global.Finder.colourPicker*
        name: colourPicker
    nameWithType:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.colourPicker*
        name: colourPicker
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.colourPicker*
        name: colourPicker
    qualifiedName:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.colourPicker*
        name: colourPicker
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.colourPicker*
        name: colourPicker
    isDefinition: true
    commentId: Overload:Global.Finder.colourPicker
  Global.Toolbar:
    name:
      CSharp:
      - id: Global.Toolbar
        name: Toolbar
      VB:
      - id: Global.Toolbar
        name: Toolbar
    nameWithType:
      CSharp:
      - id: Global.Toolbar
        name: Toolbar
      VB:
      - id: Global.Toolbar
        name: Toolbar
    qualifiedName:
      CSharp:
      - id: Global.Toolbar
        name: Toolbar
      VB:
      - id: Global.Toolbar
        name: Toolbar
    isDefinition: true
    commentId: T:Global.Toolbar
  Global.Finder.toolbar*:
    name:
      CSharp:
      - id: Global.Finder.toolbar*
        name: toolbar
      VB:
      - id: Global.Finder.toolbar*
        name: toolbar
    nameWithType:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.toolbar*
        name: toolbar
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.toolbar*
        name: toolbar
    qualifiedName:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.toolbar*
        name: toolbar
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.toolbar*
        name: toolbar
    isDefinition: true
    commentId: Overload:Global.Finder.toolbar
  Global.UIManager:
    name:
      CSharp:
      - id: Global.UIManager
        name: UIManager
      VB:
      - id: Global.UIManager
        name: UIManager
    nameWithType:
      CSharp:
      - id: Global.UIManager
        name: UIManager
      VB:
      - id: Global.UIManager
        name: UIManager
    qualifiedName:
      CSharp:
      - id: Global.UIManager
        name: UIManager
      VB:
      - id: Global.UIManager
        name: UIManager
    isDefinition: true
    commentId: T:Global.UIManager
  Global.Finder.uiManager*:
    name:
      CSharp:
      - id: Global.Finder.uiManager*
        name: uiManager
      VB:
      - id: Global.Finder.uiManager*
        name: uiManager
    nameWithType:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.uiManager*
        name: uiManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.uiManager*
        name: uiManager
    qualifiedName:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.uiManager*
        name: uiManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.uiManager*
        name: uiManager
    isDefinition: true
    commentId: Overload:Global.Finder.uiManager
  Global.ThemeManager:
    name:
      CSharp:
      - id: Global.ThemeManager
        name: ThemeManager
      VB:
      - id: Global.ThemeManager
        name: ThemeManager
    nameWithType:
      CSharp:
      - id: Global.ThemeManager
        name: ThemeManager
      VB:
      - id: Global.ThemeManager
        name: ThemeManager
    qualifiedName:
      CSharp:
      - id: Global.ThemeManager
        name: ThemeManager
      VB:
      - id: Global.ThemeManager
        name: ThemeManager
    isDefinition: true
    commentId: T:Global.ThemeManager
  Global.Finder.themeManager*:
    name:
      CSharp:
      - id: Global.Finder.themeManager*
        name: themeManager
      VB:
      - id: Global.Finder.themeManager*
        name: themeManager
    nameWithType:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.themeManager*
        name: themeManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.themeManager*
        name: themeManager
    qualifiedName:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.themeManager*
        name: themeManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.themeManager*
        name: themeManager
    isDefinition: true
    commentId: Overload:Global.Finder.themeManager
  Global.GridManager:
    name:
      CSharp:
      - id: Global.GridManager
        name: GridManager
      VB:
      - id: Global.GridManager
        name: GridManager
    nameWithType:
      CSharp:
      - id: Global.GridManager
        name: GridManager
      VB:
      - id: Global.GridManager
        name: GridManager
    qualifiedName:
      CSharp:
      - id: Global.GridManager
        name: GridManager
      VB:
      - id: Global.GridManager
        name: GridManager
    isDefinition: true
    commentId: T:Global.GridManager
  Global.Finder.gridManager*:
    name:
      CSharp:
      - id: Global.Finder.gridManager*
        name: gridManager
      VB:
      - id: Global.Finder.gridManager*
        name: gridManager
    nameWithType:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.gridManager*
        name: gridManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.gridManager*
        name: gridManager
    qualifiedName:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.gridManager*
        name: gridManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.gridManager*
        name: gridManager
    isDefinition: true
    commentId: Overload:Global.Finder.gridManager
  Global.UndoRedoManager:
    name:
      CSharp:
      - id: Global.UndoRedoManager
        name: UndoRedoManager
      VB:
      - id: Global.UndoRedoManager
        name: UndoRedoManager
    nameWithType:
      CSharp:
      - id: Global.UndoRedoManager
        name: UndoRedoManager
      VB:
      - id: Global.UndoRedoManager
        name: UndoRedoManager
    qualifiedName:
      CSharp:
      - id: Global.UndoRedoManager
        name: UndoRedoManager
      VB:
      - id: Global.UndoRedoManager
        name: UndoRedoManager
    isDefinition: true
    commentId: T:Global.UndoRedoManager
  Global.Finder.undoRedoManager*:
    name:
      CSharp:
      - id: Global.Finder.undoRedoManager*
        name: undoRedoManager
      VB:
      - id: Global.Finder.undoRedoManager*
        name: undoRedoManager
    nameWithType:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.undoRedoManager*
        name: undoRedoManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.undoRedoManager*
        name: undoRedoManager
    qualifiedName:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.undoRedoManager*
        name: undoRedoManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.undoRedoManager*
        name: undoRedoManager
    isDefinition: true
    commentId: Overload:Global.Finder.undoRedoManager
  Global.Clipboard:
    name:
      CSharp:
      - id: Global.Clipboard
        name: Clipboard
      VB:
      - id: Global.Clipboard
        name: Clipboard
    nameWithType:
      CSharp:
      - id: Global.Clipboard
        name: Clipboard
      VB:
      - id: Global.Clipboard
        name: Clipboard
    qualifiedName:
      CSharp:
      - id: Global.Clipboard
        name: Clipboard
      VB:
      - id: Global.Clipboard
        name: Clipboard
    isDefinition: true
    commentId: T:Global.Clipboard
  Global.Finder.clipboard*:
    name:
      CSharp:
      - id: Global.Finder.clipboard*
        name: clipboard
      VB:
      - id: Global.Finder.clipboard*
        name: clipboard
    nameWithType:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.clipboard*
        name: clipboard
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.clipboard*
        name: clipboard
    qualifiedName:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.clipboard*
        name: clipboard
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.clipboard*
        name: clipboard
    isDefinition: true
    commentId: Overload:Global.Finder.clipboard
  Global.ImageEditManager:
    name:
      CSharp:
      - id: Global.ImageEditManager
        name: ImageEditManager
      VB:
      - id: Global.ImageEditManager
        name: ImageEditManager
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager
        name: ImageEditManager
      VB:
      - id: Global.ImageEditManager
        name: ImageEditManager
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager
        name: ImageEditManager
      VB:
      - id: Global.ImageEditManager
        name: ImageEditManager
    isDefinition: true
    commentId: T:Global.ImageEditManager
  Global.Finder.imageEditManager*:
    name:
      CSharp:
      - id: Global.Finder.imageEditManager*
        name: imageEditManager
      VB:
      - id: Global.Finder.imageEditManager*
        name: imageEditManager
    nameWithType:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.imageEditManager*
        name: imageEditManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.imageEditManager*
        name: imageEditManager
    qualifiedName:
      CSharp:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.imageEditManager*
        name: imageEditManager
      VB:
      - id: Global.Finder*
        name: Finder
      - name: .
      - id: Global.Finder.imageEditManager*
        name: imageEditManager
    isDefinition: true
    commentId: Overload:Global.Finder.imageEditManager
  Global.Finder:
    name:
      CSharp:
      - id: Global.Finder
        name: Finder
      VB:
      - id: Global.Finder
        name: Finder
    nameWithType:
      CSharp:
      - id: Global.Finder
        name: Finder
      VB:
      - id: Global.Finder
        name: Finder
    qualifiedName:
      CSharp:
      - id: Global.Finder
        name: Finder
      VB:
      - id: Global.Finder
        name: Finder
    isDefinition: true
    commentId: T:Global.Finder
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: int
        isExternal: true
      VB:
      - id: System.Int32
        name: Integer
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.Int32
        name: int
        isExternal: true
      VB:
      - id: System.Int32
        name: Integer
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System.Int32
        name: int
        isExternal: true
      VB:
      - id: System.Int32
        name: Integer
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  Global.Functions.Mod*:
    name:
      CSharp:
      - id: Global.Functions.Mod*
        name: Mod
      VB:
      - id: Global.Functions.Mod*
        name: Mod
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.Mod*
        name: Mod
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.Mod*
        name: Mod
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.Mod*
        name: Mod
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.Mod*
        name: Mod
    isDefinition: true
    commentId: Overload:Global.Functions.Mod
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: float
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.Single
        name: float
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System.Single
        name: float
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  Global.Functions.RoundToMultiple*:
    name:
      CSharp:
      - id: Global.Functions.RoundToMultiple*
        name: RoundToMultiple
      VB:
      - id: Global.Functions.RoundToMultiple*
        name: RoundToMultiple
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.RoundToMultiple*
        name: RoundToMultiple
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.RoundToMultiple*
        name: RoundToMultiple
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.RoundToMultiple*
        name: RoundToMultiple
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.RoundToMultiple*
        name: RoundToMultiple
    isDefinition: true
    commentId: Overload:Global.Functions.RoundToMultiple
  Global.Functions.FloorToMultiple*:
    name:
      CSharp:
      - id: Global.Functions.FloorToMultiple*
        name: FloorToMultiple
      VB:
      - id: Global.Functions.FloorToMultiple*
        name: FloorToMultiple
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.FloorToMultiple*
        name: FloorToMultiple
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.FloorToMultiple*
        name: FloorToMultiple
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.FloorToMultiple*
        name: FloorToMultiple
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.FloorToMultiple*
        name: FloorToMultiple
    isDefinition: true
    commentId: Overload:Global.Functions.FloorToMultiple
  Global.Functions.CeilToMultiple*:
    name:
      CSharp:
      - id: Global.Functions.CeilToMultiple*
        name: CeilToMultiple
      VB:
      - id: Global.Functions.CeilToMultiple*
        name: CeilToMultiple
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.CeilToMultiple*
        name: CeilToMultiple
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.CeilToMultiple*
        name: CeilToMultiple
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.CeilToMultiple*
        name: CeilToMultiple
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.CeilToMultiple*
        name: CeilToMultiple
    isDefinition: true
    commentId: Overload:Global.Functions.CeilToMultiple
  Global.Vector2:
    name:
      CSharp:
      - id: Global.Vector2
        name: Vector2
        isExternal: true
      VB:
      - id: Global.Vector2
        name: Vector2
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Vector2
        name: Vector2
        isExternal: true
      VB:
      - id: Global.Vector2
        name: Vector2
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Vector2
        name: Vector2
        isExternal: true
      VB:
      - id: Global.Vector2
        name: Vector2
        isExternal: true
    isDefinition: true
  Global.Vector3:
    name:
      CSharp:
      - id: Global.Vector3
        name: Vector3
        isExternal: true
      VB:
      - id: Global.Vector3
        name: Vector3
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Vector3
        name: Vector3
        isExternal: true
      VB:
      - id: Global.Vector3
        name: Vector3
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Vector3
        name: Vector3
        isExternal: true
      VB:
      - id: Global.Vector3
        name: Vector3
        isExternal: true
    isDefinition: true
  Global.Functions.Vector3ToVector2*:
    name:
      CSharp:
      - id: Global.Functions.Vector3ToVector2*
        name: Vector3ToVector2
      VB:
      - id: Global.Functions.Vector3ToVector2*
        name: Vector3ToVector2
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.Vector3ToVector2*
        name: Vector3ToVector2
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.Vector3ToVector2*
        name: Vector3ToVector2
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.Vector3ToVector2*
        name: Vector3ToVector2
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.Vector3ToVector2*
        name: Vector3ToVector2
    isDefinition: true
    commentId: Overload:Global.Functions.Vector3ToVector2
  Global.Functions.Vector2ToVector3*:
    name:
      CSharp:
      - id: Global.Functions.Vector2ToVector3*
        name: Vector2ToVector3
      VB:
      - id: Global.Functions.Vector2ToVector3*
        name: Vector2ToVector3
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.Vector2ToVector3*
        name: Vector2ToVector3
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.Vector2ToVector3*
        name: Vector2ToVector3
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.Vector2ToVector3*
        name: Vector2ToVector3
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.Vector2ToVector3*
        name: Vector2ToVector3
    isDefinition: true
    commentId: Overload:Global.Functions.Vector2ToVector3
  System.String:
    name:
      CSharp:
      - id: System.String
        name: string
        isExternal: true
      VB:
      - id: System.String
        name: String
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.String
        name: string
        isExternal: true
      VB:
      - id: System.String
        name: String
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System.String
        name: string
        isExternal: true
      VB:
      - id: System.String
        name: String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  Global.Functions.FirstNChars*:
    name:
      CSharp:
      - id: Global.Functions.FirstNChars*
        name: FirstNChars
      VB:
      - id: Global.Functions.FirstNChars*
        name: FirstNChars
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.FirstNChars*
        name: FirstNChars
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.FirstNChars*
        name: FirstNChars
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.FirstNChars*
        name: FirstNChars
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.FirstNChars*
        name: FirstNChars
    isDefinition: true
    commentId: Overload:Global.Functions.FirstNChars
  Global.Functions.SymmetricFloor*:
    name:
      CSharp:
      - id: Global.Functions.SymmetricFloor*
        name: SymmetricFloor
      VB:
      - id: Global.Functions.SymmetricFloor*
        name: SymmetricFloor
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.SymmetricFloor*
        name: SymmetricFloor
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.SymmetricFloor*
        name: SymmetricFloor
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.SymmetricFloor*
        name: SymmetricFloor
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.SymmetricFloor*
        name: SymmetricFloor
    isDefinition: true
    commentId: Overload:Global.Functions.SymmetricFloor
  Global.Functions.SymmetricCeil*:
    name:
      CSharp:
      - id: Global.Functions.SymmetricCeil*
        name: SymmetricCeil
      VB:
      - id: Global.Functions.SymmetricCeil*
        name: SymmetricCeil
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.SymmetricCeil*
        name: SymmetricCeil
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.SymmetricCeil*
        name: SymmetricCeil
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.SymmetricCeil*
        name: SymmetricCeil
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.SymmetricCeil*
        name: SymmetricCeil
    isDefinition: true
    commentId: Overload:Global.Functions.SymmetricCeil
  Global.Functions.SymmetricFloorToInt*:
    name:
      CSharp:
      - id: Global.Functions.SymmetricFloorToInt*
        name: SymmetricFloorToInt
      VB:
      - id: Global.Functions.SymmetricFloorToInt*
        name: SymmetricFloorToInt
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.SymmetricFloorToInt*
        name: SymmetricFloorToInt
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.SymmetricFloorToInt*
        name: SymmetricFloorToInt
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.SymmetricFloorToInt*
        name: SymmetricFloorToInt
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.SymmetricFloorToInt*
        name: SymmetricFloorToInt
    isDefinition: true
    commentId: Overload:Global.Functions.SymmetricFloorToInt
  Global.Functions.SymmetricCeilToInt*:
    name:
      CSharp:
      - id: Global.Functions.SymmetricCeilToInt*
        name: SymmetricCeilToInt
      VB:
      - id: Global.Functions.SymmetricCeilToInt*
        name: SymmetricCeilToInt
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.SymmetricCeilToInt*
        name: SymmetricCeilToInt
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.SymmetricCeilToInt*
        name: SymmetricCeilToInt
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.SymmetricCeilToInt*
        name: SymmetricCeilToInt
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.SymmetricCeilToInt*
        name: SymmetricCeilToInt
    isDefinition: true
    commentId: Overload:Global.Functions.SymmetricCeilToInt
  Global.Functions.TruncateDecimalPlaces*:
    name:
      CSharp:
      - id: Global.Functions.TruncateDecimalPlaces*
        name: TruncateDecimalPlaces
      VB:
      - id: Global.Functions.TruncateDecimalPlaces*
        name: TruncateDecimalPlaces
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.TruncateDecimalPlaces*
        name: TruncateDecimalPlaces
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.TruncateDecimalPlaces*
        name: TruncateDecimalPlaces
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.TruncateDecimalPlaces*
        name: TruncateDecimalPlaces
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.TruncateDecimalPlaces*
        name: TruncateDecimalPlaces
    isDefinition: true
    commentId: Overload:Global.Functions.TruncateDecimalPlaces
  Global.Functions.RoundDecimalPlaces*:
    name:
      CSharp:
      - id: Global.Functions.RoundDecimalPlaces*
        name: RoundDecimalPlaces
      VB:
      - id: Global.Functions.RoundDecimalPlaces*
        name: RoundDecimalPlaces
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.RoundDecimalPlaces*
        name: RoundDecimalPlaces
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.RoundDecimalPlaces*
        name: RoundDecimalPlaces
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.RoundDecimalPlaces*
        name: RoundDecimalPlaces
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.RoundDecimalPlaces*
        name: RoundDecimalPlaces
    isDefinition: true
    commentId: Overload:Global.Functions.RoundDecimalPlaces
  '{T}[]':
    name:
      CSharp:
      - name: T
      - name: '['
      - name: ']'
      VB:
      - name: T
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - name: T
      - name: '['
      - name: ']'
      VB:
      - name: T
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - name: T
      - name: '['
      - name: ']'
      VB:
      - name: T
      - name: (
      - name: )
    isDefinition: false
  Global.Functions.ConcatArrays*:
    name:
      CSharp:
      - id: Global.Functions.ConcatArrays*
        name: ConcatArrays
      VB:
      - id: Global.Functions.ConcatArrays*
        name: ConcatArrays
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.ConcatArrays*
        name: ConcatArrays
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.ConcatArrays*
        name: ConcatArrays
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.ConcatArrays*
        name: ConcatArrays
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.ConcatArrays*
        name: ConcatArrays
    isDefinition: true
    commentId: Overload:Global.Functions.ConcatArrays
  Global.Functions.CopyArray*:
    name:
      CSharp:
      - id: Global.Functions.CopyArray*
        name: CopyArray
      VB:
      - id: Global.Functions.CopyArray*
        name: CopyArray
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.CopyArray*
        name: CopyArray
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.CopyArray*
        name: CopyArray
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.CopyArray*
        name: CopyArray
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.CopyArray*
        name: CopyArray
    isDefinition: true
    commentId: Overload:Global.Functions.CopyArray
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: bool
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.Boolean
        name: bool
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System.Boolean
        name: bool
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  Global.Functions.CompareArrays*:
    name:
      CSharp:
      - id: Global.Functions.CompareArrays*
        name: CompareArrays
      VB:
      - id: Global.Functions.CompareArrays*
        name: CompareArrays
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.CompareArrays*
        name: CompareArrays
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.CompareArrays*
        name: CompareArrays
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.CompareArrays*
        name: CompareArrays
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.CompareArrays*
        name: CompareArrays
    isDefinition: true
    commentId: Overload:Global.Functions.CompareArrays
  Global.Functions.ArrayToString*:
    name:
      CSharp:
      - id: Global.Functions.ArrayToString*
        name: ArrayToString
      VB:
      - id: Global.Functions.ArrayToString*
        name: ArrayToString
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.ArrayToString*
        name: ArrayToString
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.ArrayToString*
        name: ArrayToString
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.ArrayToString*
        name: ArrayToString
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.ArrayToString*
        name: ArrayToString
    isDefinition: true
    commentId: Overload:Global.Functions.ArrayToString
  System.Int32[]:
    name:
      CSharp:
      - id: System.Int32
        name: int
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.Int32
        name: int
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System.Int32
        name: int
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: (
      - name: )
    isDefinition: false
  Global.Functions.Range*:
    name:
      CSharp:
      - id: Global.Functions.Range*
        name: Range
      VB:
      - id: Global.Functions.Range*
        name: Range
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.Range*
        name: Range
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.Range*
        name: Range
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.Range*
        name: Range
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.Range*
        name: Range
    isDefinition: true
    commentId: Overload:Global.Functions.Range
  System.Collections.Generic.HashSet`1:
    name:
      CSharp:
      - id: System.Collections.Generic.HashSet`1
        name: HashSet
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.HashSet`1
        name: HashSet
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.HashSet`1
        name: HashSet
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.HashSet`1
        name: HashSet
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.HashSet`1
        name: HashSet
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.HashSet`1
        name: HashSet
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:System.Collections.Generic.HashSet`1
  System.Collections.Generic:
    name:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
    nameWithType:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.HashSet{{T}}:
    name:
      CSharp:
      - id: System.Collections.Generic.HashSet`1
        name: HashSet
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.HashSet`1
        name: HashSet
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.HashSet`1
        name: HashSet
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.HashSet`1
        name: HashSet
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.HashSet`1
        name: HashSet
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.HashSet`1
        name: HashSet
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.HashSet`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.HashSet{``0}
  Global.Functions.ToArray*:
    name:
      CSharp:
      - id: Global.Functions.ToArray*
        name: ToArray
      VB:
      - id: Global.Functions.ToArray*
        name: ToArray
    nameWithType:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.ToArray*
        name: ToArray
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.ToArray*
        name: ToArray
    qualifiedName:
      CSharp:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.ToArray*
        name: ToArray
      VB:
      - id: Global.Functions*
        name: Functions
      - name: .
      - id: Global.Functions.ToArray*
        name: ToArray
    isDefinition: true
    commentId: Overload:Global.Functions.ToArray
  Global.Functions:
    name:
      CSharp:
      - id: Global.Functions
        name: Functions
      VB:
      - id: Global.Functions
        name: Functions
    nameWithType:
      CSharp:
      - id: Global.Functions
        name: Functions
      VB:
      - id: Global.Functions
        name: Functions
    qualifiedName:
      CSharp:
      - id: Global.Functions
        name: Functions
      VB:
      - id: Global.Functions
        name: Functions
    isDefinition: true
    commentId: T:Global.Functions
  Global.ImageConverter:
    name:
      CSharp:
      - id: Global.ImageConverter
        name: ImageConverter
      VB:
      - id: Global.ImageConverter
        name: ImageConverter
    nameWithType:
      CSharp:
      - id: Global.ImageConverter
        name: ImageConverter
      VB:
      - id: Global.ImageConverter
        name: ImageConverter
    qualifiedName:
      CSharp:
      - id: Global.ImageConverter
        name: ImageConverter
      VB:
      - id: Global.ImageConverter
        name: ImageConverter
    isDefinition: true
    commentId: T:Global.ImageConverter
  Global.KeyCode:
    name:
      CSharp:
      - id: Global.KeyCode
        name: KeyCode
        isExternal: true
      VB:
      - id: Global.KeyCode
        name: KeyCode
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.KeyCode
        name: KeyCode
        isExternal: true
      VB:
      - id: Global.KeyCode
        name: KeyCode
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.KeyCode
        name: KeyCode
        isExternal: true
      VB:
      - id: Global.KeyCode
        name: KeyCode
        isExternal: true
    isDefinition: true
  Global.KeyCodeFunctions.StrToKeyCode*:
    name:
      CSharp:
      - id: Global.KeyCodeFunctions.StrToKeyCode*
        name: StrToKeyCode
      VB:
      - id: Global.KeyCodeFunctions.StrToKeyCode*
        name: StrToKeyCode
    nameWithType:
      CSharp:
      - id: Global.KeyCodeFunctions*
        name: KeyCodeFunctions
      - name: .
      - id: Global.KeyCodeFunctions.StrToKeyCode*
        name: StrToKeyCode
      VB:
      - id: Global.KeyCodeFunctions*
        name: KeyCodeFunctions
      - name: .
      - id: Global.KeyCodeFunctions.StrToKeyCode*
        name: StrToKeyCode
    qualifiedName:
      CSharp:
      - id: Global.KeyCodeFunctions*
        name: KeyCodeFunctions
      - name: .
      - id: Global.KeyCodeFunctions.StrToKeyCode*
        name: StrToKeyCode
      VB:
      - id: Global.KeyCodeFunctions*
        name: KeyCodeFunctions
      - name: .
      - id: Global.KeyCodeFunctions.StrToKeyCode*
        name: StrToKeyCode
    isDefinition: true
    commentId: Overload:Global.KeyCodeFunctions.StrToKeyCode
  Global.KeyCodeFunctions.IsDigit*:
    name:
      CSharp:
      - id: Global.KeyCodeFunctions.IsDigit*
        name: IsDigit
      VB:
      - id: Global.KeyCodeFunctions.IsDigit*
        name: IsDigit
    nameWithType:
      CSharp:
      - id: Global.KeyCodeFunctions*
        name: KeyCodeFunctions
      - name: .
      - id: Global.KeyCodeFunctions.IsDigit*
        name: IsDigit
      VB:
      - id: Global.KeyCodeFunctions*
        name: KeyCodeFunctions
      - name: .
      - id: Global.KeyCodeFunctions.IsDigit*
        name: IsDigit
    qualifiedName:
      CSharp:
      - id: Global.KeyCodeFunctions*
        name: KeyCodeFunctions
      - name: .
      - id: Global.KeyCodeFunctions.IsDigit*
        name: IsDigit
      VB:
      - id: Global.KeyCodeFunctions*
        name: KeyCodeFunctions
      - name: .
      - id: Global.KeyCodeFunctions.IsDigit*
        name: IsDigit
    isDefinition: true
    commentId: Overload:Global.KeyCodeFunctions.IsDigit
  Global.KeyCodeFunctions.IsAlpha*:
    name:
      CSharp:
      - id: Global.KeyCodeFunctions.IsAlpha*
        name: IsAlpha
      VB:
      - id: Global.KeyCodeFunctions.IsAlpha*
        name: IsAlpha
    nameWithType:
      CSharp:
      - id: Global.KeyCodeFunctions*
        name: KeyCodeFunctions
      - name: .
      - id: Global.KeyCodeFunctions.IsAlpha*
        name: IsAlpha
      VB:
      - id: Global.KeyCodeFunctions*
        name: KeyCodeFunctions
      - name: .
      - id: Global.KeyCodeFunctions.IsAlpha*
        name: IsAlpha
    qualifiedName:
      CSharp:
      - id: Global.KeyCodeFunctions*
        name: KeyCodeFunctions
      - name: .
      - id: Global.KeyCodeFunctions.IsAlpha*
        name: IsAlpha
      VB:
      - id: Global.KeyCodeFunctions*
        name: KeyCodeFunctions
      - name: .
      - id: Global.KeyCodeFunctions.IsAlpha*
        name: IsAlpha
    isDefinition: true
    commentId: Overload:Global.KeyCodeFunctions.IsAlpha
  Global.KeyCodeFunctions.IsAlphanumeric*:
    name:
      CSharp:
      - id: Global.KeyCodeFunctions.IsAlphanumeric*
        name: IsAlphanumeric
      VB:
      - id: Global.KeyCodeFunctions.IsAlphanumeric*
        name: IsAlphanumeric
    nameWithType:
      CSharp:
      - id: Global.KeyCodeFunctions*
        name: KeyCodeFunctions
      - name: .
      - id: Global.KeyCodeFunctions.IsAlphanumeric*
        name: IsAlphanumeric
      VB:
      - id: Global.KeyCodeFunctions*
        name: KeyCodeFunctions
      - name: .
      - id: Global.KeyCodeFunctions.IsAlphanumeric*
        name: IsAlphanumeric
    qualifiedName:
      CSharp:
      - id: Global.KeyCodeFunctions*
        name: KeyCodeFunctions
      - name: .
      - id: Global.KeyCodeFunctions.IsAlphanumeric*
        name: IsAlphanumeric
      VB:
      - id: Global.KeyCodeFunctions*
        name: KeyCodeFunctions
      - name: .
      - id: Global.KeyCodeFunctions.IsAlphanumeric*
        name: IsAlphanumeric
    isDefinition: true
    commentId: Overload:Global.KeyCodeFunctions.IsAlphanumeric
  Global.KeyCodeFunctions:
    name:
      CSharp:
      - id: Global.KeyCodeFunctions
        name: KeyCodeFunctions
      VB:
      - id: Global.KeyCodeFunctions
        name: KeyCodeFunctions
    nameWithType:
      CSharp:
      - id: Global.KeyCodeFunctions
        name: KeyCodeFunctions
      VB:
      - id: Global.KeyCodeFunctions
        name: KeyCodeFunctions
    qualifiedName:
      CSharp:
      - id: Global.KeyCodeFunctions
        name: KeyCodeFunctions
      VB:
      - id: Global.KeyCodeFunctions
        name: KeyCodeFunctions
    isDefinition: true
    commentId: T:Global.KeyCodeFunctions
  System.ValueType:
    name:
      CSharp:
      - id: System.ValueType
        name: ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.ValueType
        name: ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.ValueType
        name: ValueType
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.ValueType
        name: ValueType
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ValueType
  System.ValueType.Equals(System.Object):
    name:
      CSharp:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: System.ValueType
        name: ValueType
        isExternal: true
      - name: .
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.ValueType
        name: ValueType
        isExternal: true
      - name: .
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.ValueType
        name: ValueType
        isExternal: true
      - name: .
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.ValueType
        name: ValueType
        isExternal: true
      - name: .
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.Equals(System.Object)
  System.ValueType.GetHashCode:
    name:
      CSharp:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.ValueType
        name: ValueType
        isExternal: true
      - name: .
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.ValueType
        name: ValueType
        isExternal: true
      - name: .
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.ValueType
        name: ValueType
        isExternal: true
      - name: .
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.ValueType
        name: ValueType
        isExternal: true
      - name: .
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        isExternal: true
      - name: (
      - name: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.GetHashCode
  System.ValueType.ToString:
    name:
      CSharp:
      - id: System.ValueType.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.ValueType.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.ValueType
        name: ValueType
        isExternal: true
      - name: .
      - id: System.ValueType.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.ValueType
        name: ValueType
        isExternal: true
      - name: .
      - id: System.ValueType.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.ValueType
        name: ValueType
        isExternal: true
      - name: .
      - id: System.ValueType.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.ValueType
        name: ValueType
        isExternal: true
      - name: .
      - id: System.ValueType.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.ToString
  Global.OutlineSideFill.#ctor*:
    name:
      CSharp:
      - id: Global.OutlineSideFill.#ctor*
        name: OutlineSideFill
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.OutlineSideFill*
        name: OutlineSideFill
      - name: .
      - id: Global.OutlineSideFill.#ctor*
        name: OutlineSideFill
      VB:
      - id: Global.OutlineSideFill*
        name: OutlineSideFill
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.OutlineSideFill*
        name: OutlineSideFill
      - name: .
      - id: Global.OutlineSideFill.#ctor*
        name: OutlineSideFill
      VB:
      - id: Global.OutlineSideFill*
        name: OutlineSideFill
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.OutlineSideFill.#ctor
  Global.OutlineSideFill:
    name:
      CSharp:
      - id: Global.OutlineSideFill
        name: OutlineSideFill
      VB:
      - id: Global.OutlineSideFill
        name: OutlineSideFill
    nameWithType:
      CSharp:
      - id: Global.OutlineSideFill
        name: OutlineSideFill
      VB:
      - id: Global.OutlineSideFill
        name: OutlineSideFill
    qualifiedName:
      CSharp:
      - id: Global.OutlineSideFill
        name: OutlineSideFill
      VB:
      - id: Global.OutlineSideFill
        name: OutlineSideFill
    isDefinition: true
    commentId: T:Global.OutlineSideFill
  Global.Sprite:
    name:
      CSharp:
      - id: Global.Sprite
        name: Sprite
        isExternal: true
      VB:
      - id: Global.Sprite
        name: Sprite
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Sprite
        name: Sprite
        isExternal: true
      VB:
      - id: Global.Sprite
        name: Sprite
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Sprite
        name: Sprite
        isExternal: true
      VB:
      - id: Global.Sprite
        name: Sprite
        isExternal: true
    isDefinition: true
  Global.Texture2D:
    name:
      CSharp:
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      VB:
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      VB:
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      VB:
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
    isDefinition: true
  Global.Tex2DSprite.Tex2DToSprite*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.Tex2DToSprite*
        name: Tex2DToSprite
      VB:
      - id: Global.Tex2DSprite.Tex2DToSprite*
        name: Tex2DToSprite
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Tex2DToSprite*
        name: Tex2DToSprite
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Tex2DToSprite*
        name: Tex2DToSprite
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Tex2DToSprite*
        name: Tex2DToSprite
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Tex2DToSprite*
        name: Tex2DToSprite
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.Tex2DToSprite
  Global.Tex2DSprite.BlankTexture*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.BlankTexture*
        name: BlankTexture
      VB:
      - id: Global.Tex2DSprite.BlankTexture*
        name: BlankTexture
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.BlankTexture*
        name: BlankTexture
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.BlankTexture*
        name: BlankTexture
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.BlankTexture*
        name: BlankTexture
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.BlankTexture*
        name: BlankTexture
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.BlankTexture
  Global.Color:
    name:
      CSharp:
      - id: Global.Color
        name: Color
        isExternal: true
      VB:
      - id: Global.Color
        name: Color
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Color
        name: Color
        isExternal: true
      VB:
      - id: Global.Color
        name: Color
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Color
        name: Color
        isExternal: true
      VB:
      - id: Global.Color
        name: Color
        isExternal: true
    isDefinition: true
  Global.Tex2DSprite.SolidTexture*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.SolidTexture*
        name: SolidTexture
      VB:
      - id: Global.Tex2DSprite.SolidTexture*
        name: SolidTexture
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.SolidTexture*
        name: SolidTexture
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.SolidTexture*
        name: SolidTexture
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.SolidTexture*
        name: SolidTexture
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.SolidTexture*
        name: SolidTexture
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.SolidTexture
  Global.Tex2DSprite.CheckerboardBackground*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.CheckerboardBackground*
        name: CheckerboardBackground
      VB:
      - id: Global.Tex2DSprite.CheckerboardBackground*
        name: CheckerboardBackground
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.CheckerboardBackground*
        name: CheckerboardBackground
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.CheckerboardBackground*
        name: CheckerboardBackground
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.CheckerboardBackground*
        name: CheckerboardBackground
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.CheckerboardBackground*
        name: CheckerboardBackground
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.CheckerboardBackground
  Global.Tex2DSprite.HSLHueSaturationGrid*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.HSLHueSaturationGrid*
        name: HSLHueSaturationGrid
      VB:
      - id: Global.Tex2DSprite.HSLHueSaturationGrid*
        name: HSLHueSaturationGrid
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.HSLHueSaturationGrid*
        name: HSLHueSaturationGrid
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.HSLHueSaturationGrid*
        name: HSLHueSaturationGrid
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.HSLHueSaturationGrid*
        name: HSLHueSaturationGrid
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.HSLHueSaturationGrid*
        name: HSLHueSaturationGrid
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.HSLHueSaturationGrid
  Global.Tex2DSprite.Flip*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.Flip*
        name: Flip
      VB:
      - id: Global.Tex2DSprite.Flip*
        name: Flip
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Flip*
        name: Flip
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Flip*
        name: Flip
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Flip*
        name: Flip
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Flip*
        name: Flip
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.Flip
  Global.Tex2DSprite.FlipX*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.FlipX*
        name: FlipX
      VB:
      - id: Global.Tex2DSprite.FlipX*
        name: FlipX
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.FlipX*
        name: FlipX
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.FlipX*
        name: FlipX
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.FlipX*
        name: FlipX
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.FlipX*
        name: FlipX
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.FlipX
  Global.Tex2DSprite.FlipY*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.FlipY*
        name: FlipY
      VB:
      - id: Global.Tex2DSprite.FlipY*
        name: FlipY
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.FlipY*
        name: FlipY
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.FlipY*
        name: FlipY
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.FlipY*
        name: FlipY
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.FlipY*
        name: FlipY
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.FlipY
  Global.Tex2DSprite.Rotate*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.Rotate*
        name: Rotate
      VB:
      - id: Global.Tex2DSprite.Rotate*
        name: Rotate
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Rotate*
        name: Rotate
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Rotate*
        name: Rotate
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Rotate*
        name: Rotate
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Rotate*
        name: Rotate
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.Rotate
  Global.Tex2DSprite.Rotate90*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.Rotate90*
        name: Rotate90
      VB:
      - id: Global.Tex2DSprite.Rotate90*
        name: Rotate90
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Rotate90*
        name: Rotate90
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Rotate90*
        name: Rotate90
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Rotate90*
        name: Rotate90
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Rotate90*
        name: Rotate90
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.Rotate90
  Global.Tex2DSprite.RotateMinus90*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.RotateMinus90*
        name: RotateMinus90
      VB:
      - id: Global.Tex2DSprite.RotateMinus90*
        name: RotateMinus90
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.RotateMinus90*
        name: RotateMinus90
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.RotateMinus90*
        name: RotateMinus90
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.RotateMinus90*
        name: RotateMinus90
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.RotateMinus90*
        name: RotateMinus90
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.RotateMinus90
  Global.Tex2DSprite.Rotate180*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.Rotate180*
        name: Rotate180
      VB:
      - id: Global.Tex2DSprite.Rotate180*
        name: Rotate180
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Rotate180*
        name: Rotate180
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Rotate180*
        name: Rotate180
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Rotate180*
        name: Rotate180
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Rotate180*
        name: Rotate180
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.Rotate180
  Global.IntVector2:
    name:
      CSharp:
      - id: Global.IntVector2
        name: IntVector2
      VB:
      - id: Global.IntVector2
        name: IntVector2
    nameWithType:
      CSharp:
      - id: Global.IntVector2
        name: IntVector2
      VB:
      - id: Global.IntVector2
        name: IntVector2
    qualifiedName:
      CSharp:
      - id: Global.IntVector2
        name: IntVector2
      VB:
      - id: Global.IntVector2
        name: IntVector2
    isDefinition: true
    commentId: T:Global.IntVector2
  Global.Tex2DSprite.Offset*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.Offset*
        name: Offset
      VB:
      - id: Global.Tex2DSprite.Offset*
        name: Offset
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Offset*
        name: Offset
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Offset*
        name: Offset
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Offset*
        name: Offset
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Offset*
        name: Offset
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.Offset
  Global.Tex2DSprite.Extend*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.Extend*
        name: Extend
      VB:
      - id: Global.Tex2DSprite.Extend*
        name: Extend
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Extend*
        name: Extend
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Extend*
        name: Extend
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Extend*
        name: Extend
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Extend*
        name: Extend
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.Extend
  Global.IntRect:
    name:
      CSharp:
      - id: Global.IntRect
        name: IntRect
      VB:
      - id: Global.IntRect
        name: IntRect
    nameWithType:
      CSharp:
      - id: Global.IntRect
        name: IntRect
      VB:
      - id: Global.IntRect
        name: IntRect
    qualifiedName:
      CSharp:
      - id: Global.IntRect
        name: IntRect
      VB:
      - id: Global.IntRect
        name: IntRect
    isDefinition: true
    commentId: T:Global.IntRect
  Global.Tex2DSprite.ChangeRect*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.ChangeRect*
        name: ChangeRect
      VB:
      - id: Global.Tex2DSprite.ChangeRect*
        name: ChangeRect
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.ChangeRect*
        name: ChangeRect
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.ChangeRect*
        name: ChangeRect
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.ChangeRect*
        name: ChangeRect
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.ChangeRect*
        name: ChangeRect
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.ChangeRect
  Global.BlendMode:
    name:
      CSharp:
      - id: Global.BlendMode
        name: BlendMode
      VB:
      - id: Global.BlendMode
        name: BlendMode
    nameWithType:
      CSharp:
      - id: Global.BlendMode
        name: BlendMode
      VB:
      - id: Global.BlendMode
        name: BlendMode
    qualifiedName:
      CSharp:
      - id: Global.BlendMode
        name: BlendMode
      VB:
      - id: Global.BlendMode
        name: BlendMode
    isDefinition: true
    commentId: T:Global.BlendMode
  Global.Tex2DSprite.Blend*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.Blend*
        name: Blend
      VB:
      - id: Global.Tex2DSprite.Blend*
        name: Blend
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Blend*
        name: Blend
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Blend*
        name: Blend
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Blend*
        name: Blend
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Blend*
        name: Blend
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.Blend
  Global.Tex2DSprite.Overlay*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.Overlay*
        name: Overlay
      VB:
      - id: Global.Tex2DSprite.Overlay*
        name: Overlay
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Overlay*
        name: Overlay
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Overlay*
        name: Overlay
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Overlay*
        name: Overlay
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Overlay*
        name: Overlay
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.Overlay
  Global.Tex2DSprite.Multiply*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.Multiply*
        name: Multiply
      VB:
      - id: Global.Tex2DSprite.Multiply*
        name: Multiply
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Multiply*
        name: Multiply
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Multiply*
        name: Multiply
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Multiply*
        name: Multiply
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Multiply*
        name: Multiply
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.Multiply
  Global.Tex2DSprite.Scale*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.Scale*
        name: Scale
      VB:
      - id: Global.Tex2DSprite.Scale*
        name: Scale
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Scale*
        name: Scale
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Scale*
        name: Scale
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Scale*
        name: Scale
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Scale*
        name: Scale
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.Scale
  Global.Tex2DSprite.Subtract*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.Subtract*
        name: Subtract
      VB:
      - id: Global.Tex2DSprite.Subtract*
        name: Subtract
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Subtract*
        name: Subtract
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Subtract*
        name: Subtract
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Subtract*
        name: Subtract
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Subtract*
        name: Subtract
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.Subtract
  Global.Tex2DSprite.ApplyMask*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.ApplyMask*
        name: ApplyMask
      VB:
      - id: Global.Tex2DSprite.ApplyMask*
        name: ApplyMask
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.ApplyMask*
        name: ApplyMask
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.ApplyMask*
        name: ApplyMask
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.ApplyMask*
        name: ApplyMask
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.ApplyMask*
        name: ApplyMask
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.ApplyMask
  Global.IntVector2[]:
    name:
      CSharp:
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      VB:
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      VB:
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      VB:
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
    isDefinition: false
  Global.Tex2DSprite.Fill*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.Fill*
        name: Fill
      VB:
      - id: Global.Tex2DSprite.Fill*
        name: Fill
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Fill*
        name: Fill
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Fill*
        name: Fill
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Fill*
        name: Fill
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Fill*
        name: Fill
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.Fill
  Global.Tex2DSprite.GetFillMask*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.GetFillMask*
        name: GetFillMask
      VB:
      - id: Global.Tex2DSprite.GetFillMask*
        name: GetFillMask
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.GetFillMask*
        name: GetFillMask
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.GetFillMask*
        name: GetFillMask
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.GetFillMask*
        name: GetFillMask
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.GetFillMask*
        name: GetFillMask
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.GetFillMask
  Global.Tex2DSprite.GetPixelsToFill*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.GetPixelsToFill*
        name: GetPixelsToFill
      VB:
      - id: Global.Tex2DSprite.GetPixelsToFill*
        name: GetPixelsToFill
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.GetPixelsToFill*
        name: GetPixelsToFill
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.GetPixelsToFill*
        name: GetPixelsToFill
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.GetPixelsToFill*
        name: GetPixelsToFill
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.GetPixelsToFill*
        name: GetPixelsToFill
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.GetPixelsToFill
  Global.Tex2DSprite.Copy*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.Copy*
        name: Copy
      VB:
      - id: Global.Tex2DSprite.Copy*
        name: Copy
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Copy*
        name: Copy
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Copy*
        name: Copy
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Copy*
        name: Copy
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Copy*
        name: Copy
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.Copy
  Global.Tex2DSprite.LoadFromFile*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.LoadFromFile*
        name: LoadFromFile
      VB:
      - id: Global.Tex2DSprite.LoadFromFile*
        name: LoadFromFile
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.LoadFromFile*
        name: LoadFromFile
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.LoadFromFile*
        name: LoadFromFile
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.LoadFromFile*
        name: LoadFromFile
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.LoadFromFile*
        name: LoadFromFile
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.LoadFromFile
  Global.Tex2DSprite.Outline*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.Outline*
        name: Outline
      VB:
      - id: Global.Tex2DSprite.Outline*
        name: Outline
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Outline*
        name: Outline
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Outline*
        name: Outline
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Outline*
        name: Outline
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.Outline*
        name: Outline
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.Outline
  Global.Tex2DSprite.ReplaceColour*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.ReplaceColour*
        name: ReplaceColour
      VB:
      - id: Global.Tex2DSprite.ReplaceColour*
        name: ReplaceColour
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.ReplaceColour*
        name: ReplaceColour
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.ReplaceColour*
        name: ReplaceColour
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.ReplaceColour*
        name: ReplaceColour
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.ReplaceColour*
        name: ReplaceColour
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.ReplaceColour
  Global.Tex2DSprite.ContainsPixel*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.ContainsPixel*
        name: ContainsPixel
      VB:
      - id: Global.Tex2DSprite.ContainsPixel*
        name: ContainsPixel
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.ContainsPixel*
        name: ContainsPixel
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.ContainsPixel*
        name: ContainsPixel
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.ContainsPixel*
        name: ContainsPixel
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.ContainsPixel*
        name: ContainsPixel
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.ContainsPixel
  Global.Tex2DSprite.SetPixel*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.SetPixel*
        name: SetPixel
      VB:
      - id: Global.Tex2DSprite.SetPixel*
        name: SetPixel
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.SetPixel*
        name: SetPixel
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.SetPixel*
        name: SetPixel
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.SetPixel*
        name: SetPixel
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.SetPixel*
        name: SetPixel
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.SetPixel
  Global.Tex2DSprite.GetPixel*:
    name:
      CSharp:
      - id: Global.Tex2DSprite.GetPixel*
        name: GetPixel
      VB:
      - id: Global.Tex2DSprite.GetPixel*
        name: GetPixel
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.GetPixel*
        name: GetPixel
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.GetPixel*
        name: GetPixel
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.GetPixel*
        name: GetPixel
      VB:
      - id: Global.Tex2DSprite*
        name: Tex2DSprite
      - name: .
      - id: Global.Tex2DSprite.GetPixel*
        name: GetPixel
    isDefinition: true
    commentId: Overload:Global.Tex2DSprite.GetPixel
  Global.Tex2DSprite:
    name:
      CSharp:
      - id: Global.Tex2DSprite
        name: Tex2DSprite
      VB:
      - id: Global.Tex2DSprite
        name: Tex2DSprite
    nameWithType:
      CSharp:
      - id: Global.Tex2DSprite
        name: Tex2DSprite
      VB:
      - id: Global.Tex2DSprite
        name: Tex2DSprite
    qualifiedName:
      CSharp:
      - id: Global.Tex2DSprite
        name: Tex2DSprite
      VB:
      - id: Global.Tex2DSprite
        name: Tex2DSprite
    isDefinition: true
    commentId: T:Global.Tex2DSprite
  Global.IJSONable:
    name:
      CSharp:
      - id: Global.IJSONable
        name: IJSONable
      VB:
      - id: Global.IJSONable
        name: IJSONable
    nameWithType:
      CSharp:
      - id: Global.IJSONable
        name: IJSONable
      VB:
      - id: Global.IJSONable
        name: IJSONable
    qualifiedName:
      CSharp:
      - id: Global.IJSONable
        name: IJSONable
      VB:
      - id: Global.IJSONable
        name: IJSONable
    isDefinition: true
    commentId: T:Global.IJSONable
  Global.AnimationKeyFrame.#ctor*:
    name:
      CSharp:
      - id: Global.AnimationKeyFrame.#ctor*
        name: AnimationKeyFrame
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.AnimationKeyFrame*
        name: AnimationKeyFrame
      - name: .
      - id: Global.AnimationKeyFrame.#ctor*
        name: AnimationKeyFrame
      VB:
      - id: Global.AnimationKeyFrame*
        name: AnimationKeyFrame
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.AnimationKeyFrame*
        name: AnimationKeyFrame
      - name: .
      - id: Global.AnimationKeyFrame.#ctor*
        name: AnimationKeyFrame
      VB:
      - id: Global.AnimationKeyFrame*
        name: AnimationKeyFrame
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.AnimationKeyFrame.#ctor
  Global.AnimationKeyFrame:
    name:
      CSharp:
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      VB:
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
    nameWithType:
      CSharp:
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      VB:
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
    qualifiedName:
      CSharp:
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      VB:
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
    isDefinition: true
    commentId: T:Global.AnimationKeyFrame
  Global.AnimationKeyFrame.DeepCopy*:
    name:
      CSharp:
      - id: Global.AnimationKeyFrame.DeepCopy*
        name: DeepCopy
      VB:
      - id: Global.AnimationKeyFrame.DeepCopy*
        name: DeepCopy
    nameWithType:
      CSharp:
      - id: Global.AnimationKeyFrame*
        name: AnimationKeyFrame
      - name: .
      - id: Global.AnimationKeyFrame.DeepCopy*
        name: DeepCopy
      VB:
      - id: Global.AnimationKeyFrame*
        name: AnimationKeyFrame
      - name: .
      - id: Global.AnimationKeyFrame.DeepCopy*
        name: DeepCopy
    qualifiedName:
      CSharp:
      - id: Global.AnimationKeyFrame*
        name: AnimationKeyFrame
      - name: .
      - id: Global.AnimationKeyFrame.DeepCopy*
        name: DeepCopy
      VB:
      - id: Global.AnimationKeyFrame*
        name: AnimationKeyFrame
      - name: .
      - id: Global.AnimationKeyFrame.DeepCopy*
        name: DeepCopy
    isDefinition: true
    commentId: Overload:Global.AnimationKeyFrame.DeepCopy
  Global.JSON:
    name:
      CSharp:
      - id: Global.JSON
        name: JSON
      VB:
      - id: Global.JSON
        name: JSON
    nameWithType:
      CSharp:
      - id: Global.JSON
        name: JSON
      VB:
      - id: Global.JSON
        name: JSON
    qualifiedName:
      CSharp:
      - id: Global.JSON
        name: JSON
      VB:
      - id: Global.JSON
        name: JSON
    isDefinition: true
    commentId: T:Global.JSON
  Global.AnimationKeyFrame.ToJSON*:
    name:
      CSharp:
      - id: Global.AnimationKeyFrame.ToJSON*
        name: ToJSON
      VB:
      - id: Global.AnimationKeyFrame.ToJSON*
        name: ToJSON
    nameWithType:
      CSharp:
      - id: Global.AnimationKeyFrame*
        name: AnimationKeyFrame
      - name: .
      - id: Global.AnimationKeyFrame.ToJSON*
        name: ToJSON
      VB:
      - id: Global.AnimationKeyFrame*
        name: AnimationKeyFrame
      - name: .
      - id: Global.AnimationKeyFrame.ToJSON*
        name: ToJSON
    qualifiedName:
      CSharp:
      - id: Global.AnimationKeyFrame*
        name: AnimationKeyFrame
      - name: .
      - id: Global.AnimationKeyFrame.ToJSON*
        name: ToJSON
      VB:
      - id: Global.AnimationKeyFrame*
        name: AnimationKeyFrame
      - name: .
      - id: Global.AnimationKeyFrame.ToJSON*
        name: ToJSON
    isDefinition: true
    commentId: Overload:Global.AnimationKeyFrame.ToJSON
  Global.IJSONable.ToJSON:
    name:
      CSharp:
      - id: Global.IJSONable.ToJSON
        name: ToJSON
      - name: (
      - name: )
      VB:
      - id: Global.IJSONable.ToJSON
        name: ToJSON
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: Global.IJSONable
        name: IJSONable
      - name: .
      - id: Global.IJSONable.ToJSON
        name: ToJSON
      - name: (
      - name: )
      VB:
      - id: Global.IJSONable
        name: IJSONable
      - name: .
      - id: Global.IJSONable.ToJSON
        name: ToJSON
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.IJSONable
        name: IJSONable
      - name: .
      - id: Global.IJSONable.ToJSON
        name: ToJSON
      - name: (
      - name: )
      VB:
      - id: Global.IJSONable
        name: IJSONable
      - name: .
      - id: Global.IJSONable.ToJSON
        name: ToJSON
      - name: (
      - name: )
    isDefinition: true
    parent: Global.IJSONable
    commentId: M:Global.IJSONable.ToJSON
  Global.AnimationKeyFrame.FromJSON*:
    name:
      CSharp:
      - id: Global.AnimationKeyFrame.FromJSON*
        name: FromJSON
      VB:
      - id: Global.AnimationKeyFrame.FromJSON*
        name: FromJSON
    nameWithType:
      CSharp:
      - id: Global.AnimationKeyFrame*
        name: AnimationKeyFrame
      - name: .
      - id: Global.AnimationKeyFrame.FromJSON*
        name: FromJSON
      VB:
      - id: Global.AnimationKeyFrame*
        name: AnimationKeyFrame
      - name: .
      - id: Global.AnimationKeyFrame.FromJSON*
        name: FromJSON
    qualifiedName:
      CSharp:
      - id: Global.AnimationKeyFrame*
        name: AnimationKeyFrame
      - name: .
      - id: Global.AnimationKeyFrame.FromJSON*
        name: FromJSON
      VB:
      - id: Global.AnimationKeyFrame*
        name: AnimationKeyFrame
      - name: .
      - id: Global.AnimationKeyFrame.FromJSON*
        name: FromJSON
    isDefinition: true
    commentId: Overload:Global.AnimationKeyFrame.FromJSON
  Global.AnimationManager.currentFrameIndex*:
    name:
      CSharp:
      - id: Global.AnimationManager.currentFrameIndex*
        name: currentFrameIndex
      VB:
      - id: Global.AnimationManager.currentFrameIndex*
        name: currentFrameIndex
    nameWithType:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.currentFrameIndex*
        name: currentFrameIndex
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.currentFrameIndex*
        name: currentFrameIndex
    qualifiedName:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.currentFrameIndex*
        name: currentFrameIndex
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.currentFrameIndex*
        name: currentFrameIndex
    isDefinition: true
    commentId: Overload:Global.AnimationManager.currentFrameIndex
  Global.AnimationManager.Play*:
    name:
      CSharp:
      - id: Global.AnimationManager.Play*
        name: Play
      VB:
      - id: Global.AnimationManager.Play*
        name: Play
    nameWithType:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.Play*
        name: Play
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.Play*
        name: Play
    qualifiedName:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.Play*
        name: Play
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.Play*
        name: Play
    isDefinition: true
    commentId: Overload:Global.AnimationManager.Play
  Global.AnimationManager.Pause*:
    name:
      CSharp:
      - id: Global.AnimationManager.Pause*
        name: Pause
      VB:
      - id: Global.AnimationManager.Pause*
        name: Pause
    nameWithType:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.Pause*
        name: Pause
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.Pause*
        name: Pause
    qualifiedName:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.Pause*
        name: Pause
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.Pause*
        name: Pause
    isDefinition: true
    commentId: Overload:Global.AnimationManager.Pause
  Global.AnimationManager.Stop*:
    name:
      CSharp:
      - id: Global.AnimationManager.Stop*
        name: Stop
      VB:
      - id: Global.AnimationManager.Stop*
        name: Stop
    nameWithType:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.Stop*
        name: Stop
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.Stop*
        name: Stop
    qualifiedName:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.Stop*
        name: Stop
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.Stop*
        name: Stop
    isDefinition: true
    commentId: Overload:Global.AnimationManager.Stop
  Global.AnimationManager.AddKeyFrame*:
    name:
      CSharp:
      - id: Global.AnimationManager.AddKeyFrame*
        name: AddKeyFrame
      VB:
      - id: Global.AnimationManager.AddKeyFrame*
        name: AddKeyFrame
    nameWithType:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.AddKeyFrame*
        name: AddKeyFrame
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.AddKeyFrame*
        name: AddKeyFrame
    qualifiedName:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.AddKeyFrame*
        name: AddKeyFrame
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.AddKeyFrame*
        name: AddKeyFrame
    isDefinition: true
    commentId: Overload:Global.AnimationManager.AddKeyFrame
  Global.AnimationManager.RemoveKeyFrame*:
    name:
      CSharp:
      - id: Global.AnimationManager.RemoveKeyFrame*
        name: RemoveKeyFrame
      VB:
      - id: Global.AnimationManager.RemoveKeyFrame*
        name: RemoveKeyFrame
    nameWithType:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.RemoveKeyFrame*
        name: RemoveKeyFrame
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.RemoveKeyFrame*
        name: RemoveKeyFrame
    qualifiedName:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.RemoveKeyFrame*
        name: RemoveKeyFrame
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.RemoveKeyFrame*
        name: RemoveKeyFrame
    isDefinition: true
    commentId: Overload:Global.AnimationManager.RemoveKeyFrame
  Global.AnimationManager.DeleteSelectedKeyFrame*:
    name:
      CSharp:
      - id: Global.AnimationManager.DeleteSelectedKeyFrame*
        name: DeleteSelectedKeyFrame
      VB:
      - id: Global.AnimationManager.DeleteSelectedKeyFrame*
        name: DeleteSelectedKeyFrame
    nameWithType:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.DeleteSelectedKeyFrame*
        name: DeleteSelectedKeyFrame
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.DeleteSelectedKeyFrame*
        name: DeleteSelectedKeyFrame
    qualifiedName:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.DeleteSelectedKeyFrame*
        name: DeleteSelectedKeyFrame
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.DeleteSelectedKeyFrame*
        name: DeleteSelectedKeyFrame
    isDefinition: true
    commentId: Overload:Global.AnimationManager.DeleteSelectedKeyFrame
  Global.AnimationManager.DebugLogKeyFrames*:
    name:
      CSharp:
      - id: Global.AnimationManager.DebugLogKeyFrames*
        name: DebugLogKeyFrames
      VB:
      - id: Global.AnimationManager.DebugLogKeyFrames*
        name: DebugLogKeyFrames
    nameWithType:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.DebugLogKeyFrames*
        name: DebugLogKeyFrames
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.DebugLogKeyFrames*
        name: DebugLogKeyFrames
    qualifiedName:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.DebugLogKeyFrames*
        name: DebugLogKeyFrames
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.DebugLogKeyFrames*
        name: DebugLogKeyFrames
    isDefinition: true
    commentId: Overload:Global.AnimationManager.DebugLogKeyFrames
  Global.UnityAction:
    name:
      CSharp:
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      VB:
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      VB:
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      VB:
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
    isDefinition: true
  Global.AnimationManager.SubscribeToOnCurrentFrameIndexChange*:
    name:
      CSharp:
      - id: Global.AnimationManager.SubscribeToOnCurrentFrameIndexChange*
        name: SubscribeToOnCurrentFrameIndexChange
      VB:
      - id: Global.AnimationManager.SubscribeToOnCurrentFrameIndexChange*
        name: SubscribeToOnCurrentFrameIndexChange
    nameWithType:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.SubscribeToOnCurrentFrameIndexChange*
        name: SubscribeToOnCurrentFrameIndexChange
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.SubscribeToOnCurrentFrameIndexChange*
        name: SubscribeToOnCurrentFrameIndexChange
    qualifiedName:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.SubscribeToOnCurrentFrameIndexChange*
        name: SubscribeToOnCurrentFrameIndexChange
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.SubscribeToOnCurrentFrameIndexChange*
        name: SubscribeToOnCurrentFrameIndexChange
    isDefinition: true
    commentId: Overload:Global.AnimationManager.SubscribeToOnCurrentFrameIndexChange
  Global.AnimationManager.SubscribeToOnKeyFrameAdded*:
    name:
      CSharp:
      - id: Global.AnimationManager.SubscribeToOnKeyFrameAdded*
        name: SubscribeToOnKeyFrameAdded
      VB:
      - id: Global.AnimationManager.SubscribeToOnKeyFrameAdded*
        name: SubscribeToOnKeyFrameAdded
    nameWithType:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.SubscribeToOnKeyFrameAdded*
        name: SubscribeToOnKeyFrameAdded
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.SubscribeToOnKeyFrameAdded*
        name: SubscribeToOnKeyFrameAdded
    qualifiedName:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.SubscribeToOnKeyFrameAdded*
        name: SubscribeToOnKeyFrameAdded
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.SubscribeToOnKeyFrameAdded*
        name: SubscribeToOnKeyFrameAdded
    isDefinition: true
    commentId: Overload:Global.AnimationManager.SubscribeToOnKeyFrameAdded
  Global.AnimationManager.SubscribeToOnKeyFrameDeleted*:
    name:
      CSharp:
      - id: Global.AnimationManager.SubscribeToOnKeyFrameDeleted*
        name: SubscribeToOnKeyFrameDeleted
      VB:
      - id: Global.AnimationManager.SubscribeToOnKeyFrameDeleted*
        name: SubscribeToOnKeyFrameDeleted
    nameWithType:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.SubscribeToOnKeyFrameDeleted*
        name: SubscribeToOnKeyFrameDeleted
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.SubscribeToOnKeyFrameDeleted*
        name: SubscribeToOnKeyFrameDeleted
    qualifiedName:
      CSharp:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.SubscribeToOnKeyFrameDeleted*
        name: SubscribeToOnKeyFrameDeleted
      VB:
      - id: Global.AnimationManager*
        name: AnimationManager
      - name: .
      - id: Global.AnimationManager.SubscribeToOnKeyFrameDeleted*
        name: SubscribeToOnKeyFrameDeleted
    isDefinition: true
    commentId: Overload:Global.AnimationManager.SubscribeToOnKeyFrameDeleted
  Global.FrameNotch.frameNum*:
    name:
      CSharp:
      - id: Global.FrameNotch.frameNum*
        name: frameNum
      VB:
      - id: Global.FrameNotch.frameNum*
        name: frameNum
    nameWithType:
      CSharp:
      - id: Global.FrameNotch*
        name: FrameNotch
      - name: .
      - id: Global.FrameNotch.frameNum*
        name: frameNum
      VB:
      - id: Global.FrameNotch*
        name: FrameNotch
      - name: .
      - id: Global.FrameNotch.frameNum*
        name: frameNum
    qualifiedName:
      CSharp:
      - id: Global.FrameNotch*
        name: FrameNotch
      - name: .
      - id: Global.FrameNotch.frameNum*
        name: frameNum
      VB:
      - id: Global.FrameNotch*
        name: FrameNotch
      - name: .
      - id: Global.FrameNotch.frameNum*
        name: frameNum
    isDefinition: true
    commentId: Overload:Global.FrameNotch.frameNum
  Global.FrameNotch.SetFrameNumber*:
    name:
      CSharp:
      - id: Global.FrameNotch.SetFrameNumber*
        name: SetFrameNumber
      VB:
      - id: Global.FrameNotch.SetFrameNumber*
        name: SetFrameNumber
    nameWithType:
      CSharp:
      - id: Global.FrameNotch*
        name: FrameNotch
      - name: .
      - id: Global.FrameNotch.SetFrameNumber*
        name: SetFrameNumber
      VB:
      - id: Global.FrameNotch*
        name: FrameNotch
      - name: .
      - id: Global.FrameNotch.SetFrameNumber*
        name: SetFrameNumber
    qualifiedName:
      CSharp:
      - id: Global.FrameNotch*
        name: FrameNotch
      - name: .
      - id: Global.FrameNotch.SetFrameNumber*
        name: SetFrameNumber
      VB:
      - id: Global.FrameNotch*
        name: FrameNotch
      - name: .
      - id: Global.FrameNotch.SetFrameNumber*
        name: SetFrameNumber
    isDefinition: true
    commentId: Overload:Global.FrameNotch.SetFrameNumber
  Global.FrameNotch:
    name:
      CSharp:
      - id: Global.FrameNotch
        name: FrameNotch
      VB:
      - id: Global.FrameNotch
        name: FrameNotch
    nameWithType:
      CSharp:
      - id: Global.FrameNotch
        name: FrameNotch
      VB:
      - id: Global.FrameNotch
        name: FrameNotch
    qualifiedName:
      CSharp:
      - id: Global.FrameNotch
        name: FrameNotch
      VB:
      - id: Global.FrameNotch
        name: FrameNotch
    isDefinition: true
    commentId: T:Global.FrameNotch
  Global.KeyFrameIcon:
    name:
      CSharp:
      - id: Global.KeyFrameIcon
        name: KeyFrameIcon
      VB:
      - id: Global.KeyFrameIcon
        name: KeyFrameIcon
    nameWithType:
      CSharp:
      - id: Global.KeyFrameIcon
        name: KeyFrameIcon
      VB:
      - id: Global.KeyFrameIcon
        name: KeyFrameIcon
    qualifiedName:
      CSharp:
      - id: Global.KeyFrameIcon
        name: KeyFrameIcon
      VB:
      - id: Global.KeyFrameIcon
        name: KeyFrameIcon
    isDefinition: true
    commentId: T:Global.KeyFrameIcon
  Global.LayerAnimation.width*:
    name:
      CSharp:
      - id: Global.LayerAnimation.width*
        name: width
      VB:
      - id: Global.LayerAnimation.width*
        name: width
    nameWithType:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.width*
        name: width
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.width*
        name: width
    qualifiedName:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.width*
        name: width
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.width*
        name: width
    isDefinition: true
    commentId: Overload:Global.LayerAnimation.width
  Global.LayerAnimation.height*:
    name:
      CSharp:
      - id: Global.LayerAnimation.height*
        name: height
      VB:
      - id: Global.LayerAnimation.height*
        name: height
    nameWithType:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.height*
        name: height
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.height*
        name: height
    qualifiedName:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.height*
        name: height
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.height*
        name: height
    isDefinition: true
    commentId: Overload:Global.LayerAnimation.height
  Global.LayerAnimation.numOfFrames*:
    name:
      CSharp:
      - id: Global.LayerAnimation.numOfFrames*
        name: numOfFrames
      VB:
      - id: Global.LayerAnimation.numOfFrames*
        name: numOfFrames
    nameWithType:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.numOfFrames*
        name: numOfFrames
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.numOfFrames*
        name: numOfFrames
    qualifiedName:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.numOfFrames*
        name: numOfFrames
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.numOfFrames*
        name: numOfFrames
    isDefinition: true
    commentId: Overload:Global.LayerAnimation.numOfFrames
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic.List{AnimationKeyFrame}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{AnimationKeyFrame}
  Global.LayerAnimation.keyFrames*:
    name:
      CSharp:
      - id: Global.LayerAnimation.keyFrames*
        name: keyFrames
      VB:
      - id: Global.LayerAnimation.keyFrames*
        name: keyFrames
    nameWithType:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.keyFrames*
        name: keyFrames
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.keyFrames*
        name: keyFrames
    qualifiedName:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.keyFrames*
        name: keyFrames
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.keyFrames*
        name: keyFrames
    isDefinition: true
    commentId: Overload:Global.LayerAnimation.keyFrames
  Global.LayerAnimation.keyFrameCount*:
    name:
      CSharp:
      - id: Global.LayerAnimation.keyFrameCount*
        name: keyFrameCount
      VB:
      - id: Global.LayerAnimation.keyFrameCount*
        name: keyFrameCount
    nameWithType:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.keyFrameCount*
        name: keyFrameCount
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.keyFrameCount*
        name: keyFrameCount
    qualifiedName:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.keyFrameCount*
        name: keyFrameCount
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.keyFrameCount*
        name: keyFrameCount
    isDefinition: true
    commentId: Overload:Global.LayerAnimation.keyFrameCount
  Global.LayerAnimation.keyFrameIndices*:
    name:
      CSharp:
      - id: Global.LayerAnimation.keyFrameIndices*
        name: keyFrameIndices
      VB:
      - id: Global.LayerAnimation.keyFrameIndices*
        name: keyFrameIndices
    nameWithType:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.keyFrameIndices*
        name: keyFrameIndices
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.keyFrameIndices*
        name: keyFrameIndices
    qualifiedName:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.keyFrameIndices*
        name: keyFrameIndices
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.keyFrameIndices*
        name: keyFrameIndices
    isDefinition: true
    commentId: Overload:Global.LayerAnimation.keyFrameIndices
  Global.LayerAnimation.#ctor*:
    name:
      CSharp:
      - id: Global.LayerAnimation.#ctor*
        name: LayerAnimation
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.#ctor*
        name: LayerAnimation
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.#ctor*
        name: LayerAnimation
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.LayerAnimation.#ctor
  Global.LayerAnimation:
    name:
      CSharp:
      - id: Global.LayerAnimation
        name: LayerAnimation
      VB:
      - id: Global.LayerAnimation
        name: LayerAnimation
    nameWithType:
      CSharp:
      - id: Global.LayerAnimation
        name: LayerAnimation
      VB:
      - id: Global.LayerAnimation
        name: LayerAnimation
    qualifiedName:
      CSharp:
      - id: Global.LayerAnimation
        name: LayerAnimation
      VB:
      - id: Global.LayerAnimation
        name: LayerAnimation
    isDefinition: true
    commentId: T:Global.LayerAnimation
  Global.LayerAnimation.Item*:
    name:
      CSharp:
      - name: this
      VB:
      - id: Global.LayerAnimation.Item*
        name: this[]
    nameWithType:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - name: this
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.Item*
        name: this[]
    qualifiedName:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - name: this
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.Item*
        name: this[]
    isDefinition: true
    commentId: Overload:Global.LayerAnimation.Item
  Global.LayerAnimation.GetKeyFrame*:
    name:
      CSharp:
      - id: Global.LayerAnimation.GetKeyFrame*
        name: GetKeyFrame
      VB:
      - id: Global.LayerAnimation.GetKeyFrame*
        name: GetKeyFrame
    nameWithType:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.GetKeyFrame*
        name: GetKeyFrame
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.GetKeyFrame*
        name: GetKeyFrame
    qualifiedName:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.GetKeyFrame*
        name: GetKeyFrame
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.GetKeyFrame*
        name: GetKeyFrame
    isDefinition: true
    commentId: Overload:Global.LayerAnimation.GetKeyFrame
  Global.LayerAnimation.HasKeyFrameAt*:
    name:
      CSharp:
      - id: Global.LayerAnimation.HasKeyFrameAt*
        name: HasKeyFrameAt
      VB:
      - id: Global.LayerAnimation.HasKeyFrameAt*
        name: HasKeyFrameAt
    nameWithType:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.HasKeyFrameAt*
        name: HasKeyFrameAt
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.HasKeyFrameAt*
        name: HasKeyFrameAt
    qualifiedName:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.HasKeyFrameAt*
        name: HasKeyFrameAt
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.HasKeyFrameAt*
        name: HasKeyFrameAt
    isDefinition: true
    commentId: Overload:Global.LayerAnimation.HasKeyFrameAt
  Global.LayerAnimation.DeleteMostRecentKeyFrame*:
    name:
      CSharp:
      - id: Global.LayerAnimation.DeleteMostRecentKeyFrame*
        name: DeleteMostRecentKeyFrame
      VB:
      - id: Global.LayerAnimation.DeleteMostRecentKeyFrame*
        name: DeleteMostRecentKeyFrame
    nameWithType:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.DeleteMostRecentKeyFrame*
        name: DeleteMostRecentKeyFrame
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.DeleteMostRecentKeyFrame*
        name: DeleteMostRecentKeyFrame
    qualifiedName:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.DeleteMostRecentKeyFrame*
        name: DeleteMostRecentKeyFrame
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.DeleteMostRecentKeyFrame*
        name: DeleteMostRecentKeyFrame
    isDefinition: true
    commentId: Overload:Global.LayerAnimation.DeleteMostRecentKeyFrame
  Global.LayerAnimation.DeleteKeyFrame*:
    name:
      CSharp:
      - id: Global.LayerAnimation.DeleteKeyFrame*
        name: DeleteKeyFrame
      VB:
      - id: Global.LayerAnimation.DeleteKeyFrame*
        name: DeleteKeyFrame
    nameWithType:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.DeleteKeyFrame*
        name: DeleteKeyFrame
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.DeleteKeyFrame*
        name: DeleteKeyFrame
    qualifiedName:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.DeleteKeyFrame*
        name: DeleteKeyFrame
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.DeleteKeyFrame*
        name: DeleteKeyFrame
    isDefinition: true
    commentId: Overload:Global.LayerAnimation.DeleteKeyFrame
  Global.LayerAnimation.Clear*:
    name:
      CSharp:
      - id: Global.LayerAnimation.Clear*
        name: Clear
      VB:
      - id: Global.LayerAnimation.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.Clear*
        name: Clear
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.Clear*
        name: Clear
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:Global.LayerAnimation.Clear
  Global.LayerAnimation.AddKeyFrame*:
    name:
      CSharp:
      - id: Global.LayerAnimation.AddKeyFrame*
        name: AddKeyFrame
      VB:
      - id: Global.LayerAnimation.AddKeyFrame*
        name: AddKeyFrame
    nameWithType:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.AddKeyFrame*
        name: AddKeyFrame
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.AddKeyFrame*
        name: AddKeyFrame
    qualifiedName:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.AddKeyFrame*
        name: AddKeyFrame
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.AddKeyFrame*
        name: AddKeyFrame
    isDefinition: true
    commentId: Overload:Global.LayerAnimation.AddKeyFrame
  Global.LayerAnimation.ToJSON*:
    name:
      CSharp:
      - id: Global.LayerAnimation.ToJSON*
        name: ToJSON
      VB:
      - id: Global.LayerAnimation.ToJSON*
        name: ToJSON
    nameWithType:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.ToJSON*
        name: ToJSON
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.ToJSON*
        name: ToJSON
    qualifiedName:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.ToJSON*
        name: ToJSON
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.ToJSON*
        name: ToJSON
    isDefinition: true
    commentId: Overload:Global.LayerAnimation.ToJSON
  Global.LayerAnimation.FromJSON*:
    name:
      CSharp:
      - id: Global.LayerAnimation.FromJSON*
        name: FromJSON
      VB:
      - id: Global.LayerAnimation.FromJSON*
        name: FromJSON
    nameWithType:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.FromJSON*
        name: FromJSON
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.FromJSON*
        name: FromJSON
    qualifiedName:
      CSharp:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.FromJSON*
        name: FromJSON
      VB:
      - id: Global.LayerAnimation*
        name: LayerAnimation
      - name: .
      - id: Global.LayerAnimation.FromJSON*
        name: FromJSON
    isDefinition: true
    commentId: Overload:Global.LayerAnimation.FromJSON
  System.SerializableAttribute:
    name:
      CSharp:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
      VB:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
      VB:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.SerializableAttribute
  System.SerializableAttribute.#ctor:
    name:
      CSharp:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        isExternal: true
      - name: (
      - name: )
      VB:
      - name: New
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
      - name: .
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
      - name: .
      - name: New
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
      - name: .
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
      - name: .
      - name: New
      - name: (
      - name: )
    isDefinition: true
    parent: System.SerializableAttribute
    commentId: M:System.SerializableAttribute.#ctor
  System.ObsoleteAttribute:
    name:
      CSharp:
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        isExternal: true
      VB:
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        isExternal: true
      VB:
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ObsoleteAttribute
  System.ObsoleteAttribute.#ctor(System.String):
    name:
      CSharp:
      - id: System.ObsoleteAttribute.#ctor(System.String)
        name: ObsoleteAttribute
        isExternal: true
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - name: New
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        isExternal: true
      - name: .
      - id: System.ObsoleteAttribute.#ctor(System.String)
        name: ObsoleteAttribute
        isExternal: true
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        isExternal: true
      - name: .
      - name: New
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        isExternal: true
      - name: .
      - id: System.ObsoleteAttribute.#ctor(System.String)
        name: ObsoleteAttribute
        isExternal: true
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        isExternal: true
      - name: .
      - name: New
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    isDefinition: true
    parent: System.ObsoleteAttribute
    commentId: M:System.ObsoleteAttribute.#ctor(System.String)
  Global.Clipboard.Cut*:
    name:
      CSharp:
      - id: Global.Clipboard.Cut*
        name: Cut
      VB:
      - id: Global.Clipboard.Cut*
        name: Cut
    nameWithType:
      CSharp:
      - id: Global.Clipboard*
        name: Clipboard
      - name: .
      - id: Global.Clipboard.Cut*
        name: Cut
      VB:
      - id: Global.Clipboard*
        name: Clipboard
      - name: .
      - id: Global.Clipboard.Cut*
        name: Cut
    qualifiedName:
      CSharp:
      - id: Global.Clipboard*
        name: Clipboard
      - name: .
      - id: Global.Clipboard.Cut*
        name: Cut
      VB:
      - id: Global.Clipboard*
        name: Clipboard
      - name: .
      - id: Global.Clipboard.Cut*
        name: Cut
    isDefinition: true
    commentId: Overload:Global.Clipboard.Cut
  Global.Clipboard.Copy*:
    name:
      CSharp:
      - id: Global.Clipboard.Copy*
        name: Copy
      VB:
      - id: Global.Clipboard.Copy*
        name: Copy
    nameWithType:
      CSharp:
      - id: Global.Clipboard*
        name: Clipboard
      - name: .
      - id: Global.Clipboard.Copy*
        name: Copy
      VB:
      - id: Global.Clipboard*
        name: Clipboard
      - name: .
      - id: Global.Clipboard.Copy*
        name: Copy
    qualifiedName:
      CSharp:
      - id: Global.Clipboard*
        name: Clipboard
      - name: .
      - id: Global.Clipboard.Copy*
        name: Copy
      VB:
      - id: Global.Clipboard*
        name: Clipboard
      - name: .
      - id: Global.Clipboard.Copy*
        name: Copy
    isDefinition: true
    commentId: Overload:Global.Clipboard.Copy
  Global.Clipboard.Paste*:
    name:
      CSharp:
      - id: Global.Clipboard.Paste*
        name: Paste
      VB:
      - id: Global.Clipboard.Paste*
        name: Paste
    nameWithType:
      CSharp:
      - id: Global.Clipboard*
        name: Clipboard
      - name: .
      - id: Global.Clipboard.Paste*
        name: Paste
      VB:
      - id: Global.Clipboard*
        name: Clipboard
      - name: .
      - id: Global.Clipboard.Paste*
        name: Paste
    qualifiedName:
      CSharp:
      - id: Global.Clipboard*
        name: Clipboard
      - name: .
      - id: Global.Clipboard.Paste*
        name: Paste
      VB:
      - id: Global.Clipboard*
        name: Clipboard
      - name: .
      - id: Global.Clipboard.Paste*
        name: Paste
    isDefinition: true
    commentId: Overload:Global.Clipboard.Paste
  Global.BlendMode[]:
    name:
      CSharp:
      - id: Global.BlendMode
        name: BlendMode
      - name: '['
      - name: ']'
      VB:
      - id: Global.BlendMode
        name: BlendMode
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: Global.BlendMode
        name: BlendMode
      - name: '['
      - name: ']'
      VB:
      - id: Global.BlendMode
        name: BlendMode
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.BlendMode
        name: BlendMode
      - name: '['
      - name: ']'
      VB:
      - id: Global.BlendMode
        name: BlendMode
      - name: (
      - name: )
    isDefinition: false
  Global.BlendMode.op_Equality*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.BlendMode.op_Equality*
        name: ==
      VB:
      - name: =
    nameWithType:
      CSharp:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - name: operator
      - name: " "
      - id: Global.BlendMode.op_Equality*
        name: ==
      VB:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - name: =
    qualifiedName:
      CSharp:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - name: operator
      - name: " "
      - id: Global.BlendMode.op_Equality*
        name: ==
      VB:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - name: =
    isDefinition: true
    commentId: Overload:Global.BlendMode.op_Equality
  Global.BlendMode.op_Inequality*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.BlendMode.op_Inequality*
        name: '!='
      VB:
      - name: <>
    nameWithType:
      CSharp:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - name: operator
      - name: " "
      - id: Global.BlendMode.op_Inequality*
        name: '!='
      VB:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - name: <>
    qualifiedName:
      CSharp:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - name: operator
      - name: " "
      - id: Global.BlendMode.op_Inequality*
        name: '!='
      VB:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - name: <>
    isDefinition: true
    commentId: Overload:Global.BlendMode.op_Inequality
  Global.BlendMode.Equals*:
    name:
      CSharp:
      - id: Global.BlendMode.Equals*
        name: Equals
      VB:
      - id: Global.BlendMode.Equals*
        name: Equals
    nameWithType:
      CSharp:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.Equals*
        name: Equals
      VB:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.Equals*
        name: Equals
    qualifiedName:
      CSharp:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.Equals*
        name: Equals
      VB:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.Equals*
        name: Equals
    isDefinition: true
    commentId: Overload:Global.BlendMode.Equals
  Global.BlendMode.GetHashCode*:
    name:
      CSharp:
      - id: Global.BlendMode.GetHashCode*
        name: GetHashCode
      VB:
      - id: Global.BlendMode.GetHashCode*
        name: GetHashCode
    nameWithType:
      CSharp:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.GetHashCode*
        name: GetHashCode
      VB:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.GetHashCode*
        name: GetHashCode
    qualifiedName:
      CSharp:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.GetHashCode*
        name: GetHashCode
      VB:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.GetHashCode*
        name: GetHashCode
    isDefinition: true
    commentId: Overload:Global.BlendMode.GetHashCode
  Global.BlendMode.ToString*:
    name:
      CSharp:
      - id: Global.BlendMode.ToString*
        name: ToString
      VB:
      - id: Global.BlendMode.ToString*
        name: ToString
    nameWithType:
      CSharp:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.ToString*
        name: ToString
      VB:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.ToString*
        name: ToString
    qualifiedName:
      CSharp:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.ToString*
        name: ToString
      VB:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.ToString*
        name: ToString
    isDefinition: true
    commentId: Overload:Global.BlendMode.ToString
  Global.BlendMode.Blend*:
    name:
      CSharp:
      - id: Global.BlendMode.Blend*
        name: Blend
      VB:
      - id: Global.BlendMode.Blend*
        name: Blend
    nameWithType:
      CSharp:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.Blend*
        name: Blend
      VB:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.Blend*
        name: Blend
    qualifiedName:
      CSharp:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.Blend*
        name: Blend
      VB:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.Blend*
        name: Blend
    isDefinition: true
    commentId: Overload:Global.BlendMode.Blend
  Global.BlendMode.MultiplyColours*:
    name:
      CSharp:
      - id: Global.BlendMode.MultiplyColours*
        name: MultiplyColours
      VB:
      - id: Global.BlendMode.MultiplyColours*
        name: MultiplyColours
    nameWithType:
      CSharp:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.MultiplyColours*
        name: MultiplyColours
      VB:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.MultiplyColours*
        name: MultiplyColours
    qualifiedName:
      CSharp:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.MultiplyColours*
        name: MultiplyColours
      VB:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.MultiplyColours*
        name: MultiplyColours
    isDefinition: true
    commentId: Overload:Global.BlendMode.MultiplyColours
  Global.BlendMode.StringToBlendMode*:
    name:
      CSharp:
      - id: Global.BlendMode.StringToBlendMode*
        name: StringToBlendMode
      VB:
      - id: Global.BlendMode.StringToBlendMode*
        name: StringToBlendMode
    nameWithType:
      CSharp:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.StringToBlendMode*
        name: StringToBlendMode
      VB:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.StringToBlendMode*
        name: StringToBlendMode
    qualifiedName:
      CSharp:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.StringToBlendMode*
        name: StringToBlendMode
      VB:
      - id: Global.BlendMode*
        name: BlendMode
      - name: .
      - id: Global.BlendMode.StringToBlendMode*
        name: StringToBlendMode
    isDefinition: true
    commentId: Overload:Global.BlendMode.StringToBlendMode
  Global.ColorExtensions.Invert*:
    name:
      CSharp:
      - id: Global.ColorExtensions.Invert*
        name: Invert
      VB:
      - id: Global.ColorExtensions.Invert*
        name: Invert
    nameWithType:
      CSharp:
      - id: Global.ColorExtensions*
        name: ColorExtensions
      - name: .
      - id: Global.ColorExtensions.Invert*
        name: Invert
      VB:
      - id: Global.ColorExtensions*
        name: ColorExtensions
      - name: .
      - id: Global.ColorExtensions.Invert*
        name: Invert
    qualifiedName:
      CSharp:
      - id: Global.ColorExtensions*
        name: ColorExtensions
      - name: .
      - id: Global.ColorExtensions.Invert*
        name: Invert
      VB:
      - id: Global.ColorExtensions*
        name: ColorExtensions
      - name: .
      - id: Global.ColorExtensions.Invert*
        name: Invert
    isDefinition: true
    commentId: Overload:Global.ColorExtensions.Invert
  Global.HSV:
    name:
      CSharp:
      - id: Global.HSV
        name: HSV
      VB:
      - id: Global.HSV
        name: HSV
    nameWithType:
      CSharp:
      - id: Global.HSV
        name: HSV
      VB:
      - id: Global.HSV
        name: HSV
    qualifiedName:
      CSharp:
      - id: Global.HSV
        name: HSV
      VB:
      - id: Global.HSV
        name: HSV
    isDefinition: true
    commentId: T:Global.HSV
  Global.ColorExtensions.ToHSV*:
    name:
      CSharp:
      - id: Global.ColorExtensions.ToHSV*
        name: ToHSV
      VB:
      - id: Global.ColorExtensions.ToHSV*
        name: ToHSV
    nameWithType:
      CSharp:
      - id: Global.ColorExtensions*
        name: ColorExtensions
      - name: .
      - id: Global.ColorExtensions.ToHSV*
        name: ToHSV
      VB:
      - id: Global.ColorExtensions*
        name: ColorExtensions
      - name: .
      - id: Global.ColorExtensions.ToHSV*
        name: ToHSV
    qualifiedName:
      CSharp:
      - id: Global.ColorExtensions*
        name: ColorExtensions
      - name: .
      - id: Global.ColorExtensions.ToHSV*
        name: ToHSV
      VB:
      - id: Global.ColorExtensions*
        name: ColorExtensions
      - name: .
      - id: Global.ColorExtensions.ToHSV*
        name: ToHSV
    isDefinition: true
    commentId: Overload:Global.ColorExtensions.ToHSV
  Global.HSL:
    name:
      CSharp:
      - id: Global.HSL
        name: HSL
      VB:
      - id: Global.HSL
        name: HSL
    nameWithType:
      CSharp:
      - id: Global.HSL
        name: HSL
      VB:
      - id: Global.HSL
        name: HSL
    qualifiedName:
      CSharp:
      - id: Global.HSL
        name: HSL
      VB:
      - id: Global.HSL
        name: HSL
    isDefinition: true
    commentId: T:Global.HSL
  Global.ColorExtensions.ToHSL*:
    name:
      CSharp:
      - id: Global.ColorExtensions.ToHSL*
        name: ToHSL
      VB:
      - id: Global.ColorExtensions.ToHSL*
        name: ToHSL
    nameWithType:
      CSharp:
      - id: Global.ColorExtensions*
        name: ColorExtensions
      - name: .
      - id: Global.ColorExtensions.ToHSL*
        name: ToHSL
      VB:
      - id: Global.ColorExtensions*
        name: ColorExtensions
      - name: .
      - id: Global.ColorExtensions.ToHSL*
        name: ToHSL
    qualifiedName:
      CSharp:
      - id: Global.ColorExtensions*
        name: ColorExtensions
      - name: .
      - id: Global.ColorExtensions.ToHSL*
        name: ToHSL
      VB:
      - id: Global.ColorExtensions*
        name: ColorExtensions
      - name: .
      - id: Global.ColorExtensions.ToHSL*
        name: ToHSL
    isDefinition: true
    commentId: Overload:Global.ColorExtensions.ToHSL
  Global.ColorExtensions:
    name:
      CSharp:
      - id: Global.ColorExtensions
        name: ColorExtensions
      VB:
      - id: Global.ColorExtensions
        name: ColorExtensions
    nameWithType:
      CSharp:
      - id: Global.ColorExtensions
        name: ColorExtensions
      VB:
      - id: Global.ColorExtensions
        name: ColorExtensions
    qualifiedName:
      CSharp:
      - id: Global.ColorExtensions
        name: ColorExtensions
      VB:
      - id: Global.ColorExtensions
        name: ColorExtensions
    isDefinition: true
    commentId: T:Global.ColorExtensions
  Global.HSL.h*:
    name:
      CSharp:
      - id: Global.HSL.h*
        name: h
      VB:
      - id: Global.HSL.h*
        name: h
    nameWithType:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.h*
        name: h
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.h*
        name: h
    qualifiedName:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.h*
        name: h
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.h*
        name: h
    isDefinition: true
    commentId: Overload:Global.HSL.h
  Global.HSL.s*:
    name:
      CSharp:
      - id: Global.HSL.s*
        name: s
      VB:
      - id: Global.HSL.s*
        name: s
    nameWithType:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.s*
        name: s
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.s*
        name: s
    qualifiedName:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.s*
        name: s
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.s*
        name: s
    isDefinition: true
    commentId: Overload:Global.HSL.s
  Global.HSL.l*:
    name:
      CSharp:
      - id: Global.HSL.l*
        name: l
      VB:
      - id: Global.HSL.l*
        name: l
    nameWithType:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.l*
        name: l
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.l*
        name: l
    qualifiedName:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.l*
        name: l
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.l*
        name: l
    isDefinition: true
    commentId: Overload:Global.HSL.l
  Global.HSL.a*:
    name:
      CSharp:
      - id: Global.HSL.a*
        name: a
      VB:
      - id: Global.HSL.a*
        name: a
    nameWithType:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.a*
        name: a
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.a*
        name: a
    qualifiedName:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.a*
        name: a
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.a*
        name: a
    isDefinition: true
    commentId: Overload:Global.HSL.a
  Global.HSL.hsv*:
    name:
      CSharp:
      - id: Global.HSL.hsv*
        name: hsv
      VB:
      - id: Global.HSL.hsv*
        name: hsv
    nameWithType:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.hsv*
        name: hsv
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.hsv*
        name: hsv
    qualifiedName:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.hsv*
        name: hsv
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.hsv*
        name: hsv
    isDefinition: true
    commentId: Overload:Global.HSL.hsv
  Global.HSL.color*:
    name:
      CSharp:
      - id: Global.HSL.color*
        name: color
      VB:
      - id: Global.HSL.color*
        name: color
    nameWithType:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.color*
        name: color
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.color*
        name: color
    qualifiedName:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.color*
        name: color
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.color*
        name: color
    isDefinition: true
    commentId: Overload:Global.HSL.color
  Global.HSL.#ctor*:
    name:
      CSharp:
      - id: Global.HSL.#ctor*
        name: HSL
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.#ctor*
        name: HSL
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.#ctor*
        name: HSL
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.HSL.#ctor
  Global.HSL.ToHSV*:
    name:
      CSharp:
      - id: Global.HSL.ToHSV*
        name: ToHSV
      VB:
      - id: Global.HSL.ToHSV*
        name: ToHSV
    nameWithType:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.ToHSV*
        name: ToHSV
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.ToHSV*
        name: ToHSV
    qualifiedName:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.ToHSV*
        name: ToHSV
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.ToHSV*
        name: ToHSV
    isDefinition: true
    commentId: Overload:Global.HSL.ToHSV
  Global.HSL.ToColor*:
    name:
      CSharp:
      - id: Global.HSL.ToColor*
        name: ToColor
      VB:
      - id: Global.HSL.ToColor*
        name: ToColor
    nameWithType:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.ToColor*
        name: ToColor
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.ToColor*
        name: ToColor
    qualifiedName:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.ToColor*
        name: ToColor
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.ToColor*
        name: ToColor
    isDefinition: true
    commentId: Overload:Global.HSL.ToColor
  Global.HSL.op_Explicit*:
    name:
      CSharp:
      - name: explicit
      - name: " "
      - name: operator
      - name: " "
      - id: Global.HSV*
        name: HSV
      VB:
      - name: CType
    nameWithType:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - name: explicit
      - name: " "
      - name: operator
      - name: " "
      - id: Global.HSV*
        name: HSV
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - name: CType
    qualifiedName:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - name: explicit
      - name: " "
      - name: operator
      - name: " "
      - id: Global.HSV*
        name: HSV
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - name: CType
    isDefinition: true
    commentId: Overload:Global.HSL.op_Explicit
  Global.HSL.ToString*:
    name:
      CSharp:
      - id: Global.HSL.ToString*
        name: ToString
      VB:
      - id: Global.HSL.ToString*
        name: ToString
    nameWithType:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.ToString*
        name: ToString
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.ToString*
        name: ToString
    qualifiedName:
      CSharp:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.ToString*
        name: ToString
      VB:
      - id: Global.HSL*
        name: HSL
      - name: .
      - id: Global.HSL.ToString*
        name: ToString
    isDefinition: true
    commentId: Overload:Global.HSL.ToString
  Global.HSV.h*:
    name:
      CSharp:
      - id: Global.HSV.h*
        name: h
      VB:
      - id: Global.HSV.h*
        name: h
    nameWithType:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.h*
        name: h
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.h*
        name: h
    qualifiedName:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.h*
        name: h
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.h*
        name: h
    isDefinition: true
    commentId: Overload:Global.HSV.h
  Global.HSV.s*:
    name:
      CSharp:
      - id: Global.HSV.s*
        name: s
      VB:
      - id: Global.HSV.s*
        name: s
    nameWithType:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.s*
        name: s
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.s*
        name: s
    qualifiedName:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.s*
        name: s
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.s*
        name: s
    isDefinition: true
    commentId: Overload:Global.HSV.s
  Global.HSV.v*:
    name:
      CSharp:
      - id: Global.HSV.v*
        name: v
      VB:
      - id: Global.HSV.v*
        name: v
    nameWithType:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.v*
        name: v
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.v*
        name: v
    qualifiedName:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.v*
        name: v
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.v*
        name: v
    isDefinition: true
    commentId: Overload:Global.HSV.v
  Global.HSV.a*:
    name:
      CSharp:
      - id: Global.HSV.a*
        name: a
      VB:
      - id: Global.HSV.a*
        name: a
    nameWithType:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.a*
        name: a
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.a*
        name: a
    qualifiedName:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.a*
        name: a
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.a*
        name: a
    isDefinition: true
    commentId: Overload:Global.HSV.a
  Global.HSV.hsl*:
    name:
      CSharp:
      - id: Global.HSV.hsl*
        name: hsl
      VB:
      - id: Global.HSV.hsl*
        name: hsl
    nameWithType:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.hsl*
        name: hsl
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.hsl*
        name: hsl
    qualifiedName:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.hsl*
        name: hsl
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.hsl*
        name: hsl
    isDefinition: true
    commentId: Overload:Global.HSV.hsl
  Global.HSV.color*:
    name:
      CSharp:
      - id: Global.HSV.color*
        name: color
      VB:
      - id: Global.HSV.color*
        name: color
    nameWithType:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.color*
        name: color
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.color*
        name: color
    qualifiedName:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.color*
        name: color
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.color*
        name: color
    isDefinition: true
    commentId: Overload:Global.HSV.color
  Global.HSV.#ctor*:
    name:
      CSharp:
      - id: Global.HSV.#ctor*
        name: HSV
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.#ctor*
        name: HSV
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.#ctor*
        name: HSV
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.HSV.#ctor
  Global.HSV.ToHSL*:
    name:
      CSharp:
      - id: Global.HSV.ToHSL*
        name: ToHSL
      VB:
      - id: Global.HSV.ToHSL*
        name: ToHSL
    nameWithType:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.ToHSL*
        name: ToHSL
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.ToHSL*
        name: ToHSL
    qualifiedName:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.ToHSL*
        name: ToHSL
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.ToHSL*
        name: ToHSL
    isDefinition: true
    commentId: Overload:Global.HSV.ToHSL
  Global.HSV.ToColor*:
    name:
      CSharp:
      - id: Global.HSV.ToColor*
        name: ToColor
      VB:
      - id: Global.HSV.ToColor*
        name: ToColor
    nameWithType:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.ToColor*
        name: ToColor
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.ToColor*
        name: ToColor
    qualifiedName:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.ToColor*
        name: ToColor
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.ToColor*
        name: ToColor
    isDefinition: true
    commentId: Overload:Global.HSV.ToColor
  Global.HSV.op_Explicit*:
    name:
      CSharp:
      - name: explicit
      - name: " "
      - name: operator
      - name: " "
      - id: Global.HSL*
        name: HSL
      VB:
      - name: CType
    nameWithType:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - name: explicit
      - name: " "
      - name: operator
      - name: " "
      - id: Global.HSL*
        name: HSL
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - name: CType
    qualifiedName:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - name: explicit
      - name: " "
      - name: operator
      - name: " "
      - id: Global.HSL*
        name: HSL
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - name: CType
    isDefinition: true
    commentId: Overload:Global.HSV.op_Explicit
  Global.HSV.ToString*:
    name:
      CSharp:
      - id: Global.HSV.ToString*
        name: ToString
      VB:
      - id: Global.HSV.ToString*
        name: ToString
    nameWithType:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.ToString*
        name: ToString
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.ToString*
        name: ToString
    qualifiedName:
      CSharp:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.ToString*
        name: ToString
      VB:
      - id: Global.HSV*
        name: HSV
      - name: .
      - id: Global.HSV.ToString*
        name: ToString
    isDefinition: true
    commentId: Overload:Global.HSV.ToString
  Global.ColourPreview.colour*:
    name:
      CSharp:
      - id: Global.ColourPreview.colour*
        name: colour
      VB:
      - id: Global.ColourPreview.colour*
        name: colour
    nameWithType:
      CSharp:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.colour*
        name: colour
      VB:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.colour*
        name: colour
    qualifiedName:
      CSharp:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.colour*
        name: colour
      VB:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.colour*
        name: colour
    isDefinition: true
    commentId: Overload:Global.ColourPreview.colour
  Global.ColourPreview.outlineThickness*:
    name:
      CSharp:
      - id: Global.ColourPreview.outlineThickness*
        name: outlineThickness
      VB:
      - id: Global.ColourPreview.outlineThickness*
        name: outlineThickness
    nameWithType:
      CSharp:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.outlineThickness*
        name: outlineThickness
      VB:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.outlineThickness*
        name: outlineThickness
    qualifiedName:
      CSharp:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.outlineThickness*
        name: outlineThickness
      VB:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.outlineThickness*
        name: outlineThickness
    isDefinition: true
    commentId: Overload:Global.ColourPreview.outlineThickness
  Global.ColourPreview.SetColour*:
    name:
      CSharp:
      - id: Global.ColourPreview.SetColour*
        name: SetColour
      VB:
      - id: Global.ColourPreview.SetColour*
        name: SetColour
    nameWithType:
      CSharp:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.SetColour*
        name: SetColour
      VB:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.SetColour*
        name: SetColour
    qualifiedName:
      CSharp:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.SetColour*
        name: SetColour
      VB:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.SetColour*
        name: SetColour
    isDefinition: true
    commentId: Overload:Global.ColourPreview.SetColour
  Global.ColourPreview.SubscribeToOnSelect*:
    name:
      CSharp:
      - id: Global.ColourPreview.SubscribeToOnSelect*
        name: SubscribeToOnSelect
      VB:
      - id: Global.ColourPreview.SubscribeToOnSelect*
        name: SubscribeToOnSelect
    nameWithType:
      CSharp:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.SubscribeToOnSelect*
        name: SubscribeToOnSelect
      VB:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.SubscribeToOnSelect*
        name: SubscribeToOnSelect
    qualifiedName:
      CSharp:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.SubscribeToOnSelect*
        name: SubscribeToOnSelect
      VB:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.SubscribeToOnSelect*
        name: SubscribeToOnSelect
    isDefinition: true
    commentId: Overload:Global.ColourPreview.SubscribeToOnSelect
  Global.ColourPreview.SubscribeToOnDeselect*:
    name:
      CSharp:
      - id: Global.ColourPreview.SubscribeToOnDeselect*
        name: SubscribeToOnDeselect
      VB:
      - id: Global.ColourPreview.SubscribeToOnDeselect*
        name: SubscribeToOnDeselect
    nameWithType:
      CSharp:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.SubscribeToOnDeselect*
        name: SubscribeToOnDeselect
      VB:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.SubscribeToOnDeselect*
        name: SubscribeToOnDeselect
    qualifiedName:
      CSharp:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.SubscribeToOnDeselect*
        name: SubscribeToOnDeselect
      VB:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.SubscribeToOnDeselect*
        name: SubscribeToOnDeselect
    isDefinition: true
    commentId: Overload:Global.ColourPreview.SubscribeToOnDeselect
  Global.ColourPreview.SubscribeToOnToggle*:
    name:
      CSharp:
      - id: Global.ColourPreview.SubscribeToOnToggle*
        name: SubscribeToOnToggle
      VB:
      - id: Global.ColourPreview.SubscribeToOnToggle*
        name: SubscribeToOnToggle
    nameWithType:
      CSharp:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.SubscribeToOnToggle*
        name: SubscribeToOnToggle
      VB:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.SubscribeToOnToggle*
        name: SubscribeToOnToggle
    qualifiedName:
      CSharp:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.SubscribeToOnToggle*
        name: SubscribeToOnToggle
      VB:
      - id: Global.ColourPreview*
        name: ColourPreview
      - name: .
      - id: Global.ColourPreview.SubscribeToOnToggle*
        name: SubscribeToOnToggle
    isDefinition: true
    commentId: Overload:Global.ColourPreview.SubscribeToOnToggle
  Global.ColourPreview:
    name:
      CSharp:
      - id: Global.ColourPreview
        name: ColourPreview
      VB:
      - id: Global.ColourPreview
        name: ColourPreview
    nameWithType:
      CSharp:
      - id: Global.ColourPreview
        name: ColourPreview
      VB:
      - id: Global.ColourPreview
        name: ColourPreview
    qualifiedName:
      CSharp:
      - id: Global.ColourPreview
        name: ColourPreview
      VB:
      - id: Global.ColourPreview
        name: ColourPreview
    isDefinition: true
    commentId: T:Global.ColourPreview
  Global.GlobalColourPicker.colour*:
    name:
      CSharp:
      - id: Global.GlobalColourPicker.colour*
        name: colour
      VB:
      - id: Global.GlobalColourPicker.colour*
        name: colour
    nameWithType:
      CSharp:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.colour*
        name: colour
      VB:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.colour*
        name: colour
    qualifiedName:
      CSharp:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.colour*
        name: colour
      VB:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.colour*
        name: colour
    isDefinition: true
    commentId: Overload:Global.GlobalColourPicker.colour
  Global.GlobalColourPicker.primaryColour*:
    name:
      CSharp:
      - id: Global.GlobalColourPicker.primaryColour*
        name: primaryColour
      VB:
      - id: Global.GlobalColourPicker.primaryColour*
        name: primaryColour
    nameWithType:
      CSharp:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.primaryColour*
        name: primaryColour
      VB:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.primaryColour*
        name: primaryColour
    qualifiedName:
      CSharp:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.primaryColour*
        name: primaryColour
      VB:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.primaryColour*
        name: primaryColour
    isDefinition: true
    commentId: Overload:Global.GlobalColourPicker.primaryColour
  Global.GlobalColourPicker.secondaryColour*:
    name:
      CSharp:
      - id: Global.GlobalColourPicker.secondaryColour*
        name: secondaryColour
      VB:
      - id: Global.GlobalColourPicker.secondaryColour*
        name: secondaryColour
    nameWithType:
      CSharp:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.secondaryColour*
        name: secondaryColour
      VB:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.secondaryColour*
        name: secondaryColour
    qualifiedName:
      CSharp:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.secondaryColour*
        name: secondaryColour
      VB:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.secondaryColour*
        name: secondaryColour
    isDefinition: true
    commentId: Overload:Global.GlobalColourPicker.secondaryColour
  Global.GlobalColourPicker.numOfColourPreviews*:
    name:
      CSharp:
      - id: Global.GlobalColourPicker.numOfColourPreviews*
        name: numOfColourPreviews
      VB:
      - id: Global.GlobalColourPicker.numOfColourPreviews*
        name: numOfColourPreviews
    nameWithType:
      CSharp:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.numOfColourPreviews*
        name: numOfColourPreviews
      VB:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.numOfColourPreviews*
        name: numOfColourPreviews
    qualifiedName:
      CSharp:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.numOfColourPreviews*
        name: numOfColourPreviews
      VB:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.numOfColourPreviews*
        name: numOfColourPreviews
    isDefinition: true
    commentId: Overload:Global.GlobalColourPicker.numOfColourPreviews
  Global.GlobalColourPicker.SetColour*:
    name:
      CSharp:
      - id: Global.GlobalColourPicker.SetColour*
        name: SetColour
      VB:
      - id: Global.GlobalColourPicker.SetColour*
        name: SetColour
    nameWithType:
      CSharp:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.SetColour*
        name: SetColour
      VB:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.SetColour*
        name: SetColour
    qualifiedName:
      CSharp:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.SetColour*
        name: SetColour
      VB:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.SetColour*
        name: SetColour
    isDefinition: true
    commentId: Overload:Global.GlobalColourPicker.SetColour
  Global.GlobalColourPicker.GetColour*:
    name:
      CSharp:
      - id: Global.GlobalColourPicker.GetColour*
        name: GetColour
      VB:
      - id: Global.GlobalColourPicker.GetColour*
        name: GetColour
    nameWithType:
      CSharp:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.GetColour*
        name: GetColour
      VB:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.GetColour*
        name: GetColour
    qualifiedName:
      CSharp:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.GetColour*
        name: GetColour
      VB:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.GetColour*
        name: GetColour
    isDefinition: true
    commentId: Overload:Global.GlobalColourPicker.GetColour
  Global.GlobalColourPicker.SubscribeToOnColourChange*:
    name:
      CSharp:
      - id: Global.GlobalColourPicker.SubscribeToOnColourChange*
        name: SubscribeToOnColourChange
      VB:
      - id: Global.GlobalColourPicker.SubscribeToOnColourChange*
        name: SubscribeToOnColourChange
    nameWithType:
      CSharp:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.SubscribeToOnColourChange*
        name: SubscribeToOnColourChange
      VB:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.SubscribeToOnColourChange*
        name: SubscribeToOnColourChange
    qualifiedName:
      CSharp:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.SubscribeToOnColourChange*
        name: SubscribeToOnColourChange
      VB:
      - id: Global.GlobalColourPicker*
        name: GlobalColourPicker
      - name: .
      - id: Global.GlobalColourPicker.SubscribeToOnColourChange*
        name: SubscribeToOnColourChange
    isDefinition: true
    commentId: Overload:Global.GlobalColourPicker.SubscribeToOnColourChange
  Global.HSLColourPicker.mouseSensitivity*:
    name:
      CSharp:
      - id: Global.HSLColourPicker.mouseSensitivity*
        name: mouseSensitivity
      VB:
      - id: Global.HSLColourPicker.mouseSensitivity*
        name: mouseSensitivity
    nameWithType:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.mouseSensitivity*
        name: mouseSensitivity
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.mouseSensitivity*
        name: mouseSensitivity
    qualifiedName:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.mouseSensitivity*
        name: mouseSensitivity
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.mouseSensitivity*
        name: mouseSensitivity
    isDefinition: true
    commentId: Overload:Global.HSLColourPicker.mouseSensitivity
  Global.HSLColourPicker.slowSensitivityScalar*:
    name:
      CSharp:
      - id: Global.HSLColourPicker.slowSensitivityScalar*
        name: slowSensitivityScalar
      VB:
      - id: Global.HSLColourPicker.slowSensitivityScalar*
        name: slowSensitivityScalar
    nameWithType:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.slowSensitivityScalar*
        name: slowSensitivityScalar
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.slowSensitivityScalar*
        name: slowSensitivityScalar
    qualifiedName:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.slowSensitivityScalar*
        name: slowSensitivityScalar
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.slowSensitivityScalar*
        name: slowSensitivityScalar
    isDefinition: true
    commentId: Overload:Global.HSLColourPicker.slowSensitivityScalar
  Global.HSLColourPicker.hue*:
    name:
      CSharp:
      - id: Global.HSLColourPicker.hue*
        name: hue
      VB:
      - id: Global.HSLColourPicker.hue*
        name: hue
    nameWithType:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.hue*
        name: hue
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.hue*
        name: hue
    qualifiedName:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.hue*
        name: hue
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.hue*
        name: hue
    isDefinition: true
    commentId: Overload:Global.HSLColourPicker.hue
  Global.HSLColourPicker.saturation*:
    name:
      CSharp:
      - id: Global.HSLColourPicker.saturation*
        name: saturation
      VB:
      - id: Global.HSLColourPicker.saturation*
        name: saturation
    nameWithType:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.saturation*
        name: saturation
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.saturation*
        name: saturation
    qualifiedName:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.saturation*
        name: saturation
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.saturation*
        name: saturation
    isDefinition: true
    commentId: Overload:Global.HSLColourPicker.saturation
  Global.HSLColourPicker.lightness*:
    name:
      CSharp:
      - id: Global.HSLColourPicker.lightness*
        name: lightness
      VB:
      - id: Global.HSLColourPicker.lightness*
        name: lightness
    nameWithType:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.lightness*
        name: lightness
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.lightness*
        name: lightness
    qualifiedName:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.lightness*
        name: lightness
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.lightness*
        name: lightness
    isDefinition: true
    commentId: Overload:Global.HSLColourPicker.lightness
  Global.HSLColourPicker.alpha*:
    name:
      CSharp:
      - id: Global.HSLColourPicker.alpha*
        name: alpha
      VB:
      - id: Global.HSLColourPicker.alpha*
        name: alpha
    nameWithType:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.alpha*
        name: alpha
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.alpha*
        name: alpha
    qualifiedName:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.alpha*
        name: alpha
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.alpha*
        name: alpha
    isDefinition: true
    commentId: Overload:Global.HSLColourPicker.alpha
  Global.HSLColourPicker.color*:
    name:
      CSharp:
      - id: Global.HSLColourPicker.color*
        name: color
      VB:
      - id: Global.HSLColourPicker.color*
        name: color
    nameWithType:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.color*
        name: color
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.color*
        name: color
    qualifiedName:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.color*
        name: color
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.color*
        name: color
    isDefinition: true
    commentId: Overload:Global.HSLColourPicker.color
  Global.HSLColourPicker.hsl*:
    name:
      CSharp:
      - id: Global.HSLColourPicker.hsl*
        name: hsl
      VB:
      - id: Global.HSLColourPicker.hsl*
        name: hsl
    nameWithType:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.hsl*
        name: hsl
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.hsl*
        name: hsl
    qualifiedName:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.hsl*
        name: hsl
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.hsl*
        name: hsl
    isDefinition: true
    commentId: Overload:Global.HSLColourPicker.hsl
  Global.HSLColourPicker.UpdateColour*:
    name:
      CSharp:
      - id: Global.HSLColourPicker.UpdateColour*
        name: UpdateColour
      VB:
      - id: Global.HSLColourPicker.UpdateColour*
        name: UpdateColour
    nameWithType:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.UpdateColour*
        name: UpdateColour
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.UpdateColour*
        name: UpdateColour
    qualifiedName:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.UpdateColour*
        name: UpdateColour
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.UpdateColour*
        name: UpdateColour
    isDefinition: true
    commentId: Overload:Global.HSLColourPicker.UpdateColour
  Global.HSLColourPicker.SetColour*:
    name:
      CSharp:
      - id: Global.HSLColourPicker.SetColour*
        name: SetColour
      VB:
      - id: Global.HSLColourPicker.SetColour*
        name: SetColour
    nameWithType:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.SetColour*
        name: SetColour
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.SetColour*
        name: SetColour
    qualifiedName:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.SetColour*
        name: SetColour
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.SetColour*
        name: SetColour
    isDefinition: true
    commentId: Overload:Global.HSLColourPicker.SetColour
  Global.HSLColourPicker.SubscribeToOnColourChange*:
    name:
      CSharp:
      - id: Global.HSLColourPicker.SubscribeToOnColourChange*
        name: SubscribeToOnColourChange
      VB:
      - id: Global.HSLColourPicker.SubscribeToOnColourChange*
        name: SubscribeToOnColourChange
    nameWithType:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.SubscribeToOnColourChange*
        name: SubscribeToOnColourChange
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.SubscribeToOnColourChange*
        name: SubscribeToOnColourChange
    qualifiedName:
      CSharp:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.SubscribeToOnColourChange*
        name: SubscribeToOnColourChange
      VB:
      - id: Global.HSLColourPicker*
        name: HSLColourPicker
      - name: .
      - id: Global.HSLColourPicker.SubscribeToOnColourChange*
        name: SubscribeToOnColourChange
    isDefinition: true
    commentId: Overload:Global.HSLColourPicker.SubscribeToOnColourChange
  Global.HSLColourPicker:
    name:
      CSharp:
      - id: Global.HSLColourPicker
        name: HSLColourPicker
      VB:
      - id: Global.HSLColourPicker
        name: HSLColourPicker
    nameWithType:
      CSharp:
      - id: Global.HSLColourPicker
        name: HSLColourPicker
      VB:
      - id: Global.HSLColourPicker
        name: HSLColourPicker
    qualifiedName:
      CSharp:
      - id: Global.HSLColourPicker
        name: HSLColourPicker
      VB:
      - id: Global.HSLColourPicker
        name: HSLColourPicker
    isDefinition: true
    commentId: T:Global.HSLColourPicker
  Global.HSLHueSaturationBox.hue*:
    name:
      CSharp:
      - id: Global.HSLHueSaturationBox.hue*
        name: hue
      VB:
      - id: Global.HSLHueSaturationBox.hue*
        name: hue
    nameWithType:
      CSharp:
      - id: Global.HSLHueSaturationBox*
        name: HSLHueSaturationBox
      - name: .
      - id: Global.HSLHueSaturationBox.hue*
        name: hue
      VB:
      - id: Global.HSLHueSaturationBox*
        name: HSLHueSaturationBox
      - name: .
      - id: Global.HSLHueSaturationBox.hue*
        name: hue
    qualifiedName:
      CSharp:
      - id: Global.HSLHueSaturationBox*
        name: HSLHueSaturationBox
      - name: .
      - id: Global.HSLHueSaturationBox.hue*
        name: hue
      VB:
      - id: Global.HSLHueSaturationBox*
        name: HSLHueSaturationBox
      - name: .
      - id: Global.HSLHueSaturationBox.hue*
        name: hue
    isDefinition: true
    commentId: Overload:Global.HSLHueSaturationBox.hue
  Global.HSLHueSaturationBox.saturation*:
    name:
      CSharp:
      - id: Global.HSLHueSaturationBox.saturation*
        name: saturation
      VB:
      - id: Global.HSLHueSaturationBox.saturation*
        name: saturation
    nameWithType:
      CSharp:
      - id: Global.HSLHueSaturationBox*
        name: HSLHueSaturationBox
      - name: .
      - id: Global.HSLHueSaturationBox.saturation*
        name: saturation
      VB:
      - id: Global.HSLHueSaturationBox*
        name: HSLHueSaturationBox
      - name: .
      - id: Global.HSLHueSaturationBox.saturation*
        name: saturation
    qualifiedName:
      CSharp:
      - id: Global.HSLHueSaturationBox*
        name: HSLHueSaturationBox
      - name: .
      - id: Global.HSLHueSaturationBox.saturation*
        name: saturation
      VB:
      - id: Global.HSLHueSaturationBox*
        name: HSLHueSaturationBox
      - name: .
      - id: Global.HSLHueSaturationBox.saturation*
        name: saturation
    isDefinition: true
    commentId: Overload:Global.HSLHueSaturationBox.saturation
  Global.HSLHueSaturationBox.SetHue*:
    name:
      CSharp:
      - id: Global.HSLHueSaturationBox.SetHue*
        name: SetHue
      VB:
      - id: Global.HSLHueSaturationBox.SetHue*
        name: SetHue
    nameWithType:
      CSharp:
      - id: Global.HSLHueSaturationBox*
        name: HSLHueSaturationBox
      - name: .
      - id: Global.HSLHueSaturationBox.SetHue*
        name: SetHue
      VB:
      - id: Global.HSLHueSaturationBox*
        name: HSLHueSaturationBox
      - name: .
      - id: Global.HSLHueSaturationBox.SetHue*
        name: SetHue
    qualifiedName:
      CSharp:
      - id: Global.HSLHueSaturationBox*
        name: HSLHueSaturationBox
      - name: .
      - id: Global.HSLHueSaturationBox.SetHue*
        name: SetHue
      VB:
      - id: Global.HSLHueSaturationBox*
        name: HSLHueSaturationBox
      - name: .
      - id: Global.HSLHueSaturationBox.SetHue*
        name: SetHue
    isDefinition: true
    commentId: Overload:Global.HSLHueSaturationBox.SetHue
  Global.HSLHueSaturationBox.SetSaturation*:
    name:
      CSharp:
      - id: Global.HSLHueSaturationBox.SetSaturation*
        name: SetSaturation
      VB:
      - id: Global.HSLHueSaturationBox.SetSaturation*
        name: SetSaturation
    nameWithType:
      CSharp:
      - id: Global.HSLHueSaturationBox*
        name: HSLHueSaturationBox
      - name: .
      - id: Global.HSLHueSaturationBox.SetSaturation*
        name: SetSaturation
      VB:
      - id: Global.HSLHueSaturationBox*
        name: HSLHueSaturationBox
      - name: .
      - id: Global.HSLHueSaturationBox.SetSaturation*
        name: SetSaturation
    qualifiedName:
      CSharp:
      - id: Global.HSLHueSaturationBox*
        name: HSLHueSaturationBox
      - name: .
      - id: Global.HSLHueSaturationBox.SetSaturation*
        name: SetSaturation
      VB:
      - id: Global.HSLHueSaturationBox*
        name: HSLHueSaturationBox
      - name: .
      - id: Global.HSLHueSaturationBox.SetSaturation*
        name: SetSaturation
    isDefinition: true
    commentId: Overload:Global.HSLHueSaturationBox.SetSaturation
  Global.HSLHueSaturationBox:
    name:
      CSharp:
      - id: Global.HSLHueSaturationBox
        name: HSLHueSaturationBox
      VB:
      - id: Global.HSLHueSaturationBox
        name: HSLHueSaturationBox
    nameWithType:
      CSharp:
      - id: Global.HSLHueSaturationBox
        name: HSLHueSaturationBox
      VB:
      - id: Global.HSLHueSaturationBox
        name: HSLHueSaturationBox
    qualifiedName:
      CSharp:
      - id: Global.HSLHueSaturationBox
        name: HSLHueSaturationBox
      VB:
      - id: Global.HSLHueSaturationBox
        name: HSLHueSaturationBox
    isDefinition: true
    commentId: T:Global.HSLHueSaturationBox
  Global.HSLLightnessSlider.lightness*:
    name:
      CSharp:
      - id: Global.HSLLightnessSlider.lightness*
        name: lightness
      VB:
      - id: Global.HSLLightnessSlider.lightness*
        name: lightness
    nameWithType:
      CSharp:
      - id: Global.HSLLightnessSlider*
        name: HSLLightnessSlider
      - name: .
      - id: Global.HSLLightnessSlider.lightness*
        name: lightness
      VB:
      - id: Global.HSLLightnessSlider*
        name: HSLLightnessSlider
      - name: .
      - id: Global.HSLLightnessSlider.lightness*
        name: lightness
    qualifiedName:
      CSharp:
      - id: Global.HSLLightnessSlider*
        name: HSLLightnessSlider
      - name: .
      - id: Global.HSLLightnessSlider.lightness*
        name: lightness
      VB:
      - id: Global.HSLLightnessSlider*
        name: HSLLightnessSlider
      - name: .
      - id: Global.HSLLightnessSlider.lightness*
        name: lightness
    isDefinition: true
    commentId: Overload:Global.HSLLightnessSlider.lightness
  Global.HSLLightnessSlider.SetLightness*:
    name:
      CSharp:
      - id: Global.HSLLightnessSlider.SetLightness*
        name: SetLightness
      VB:
      - id: Global.HSLLightnessSlider.SetLightness*
        name: SetLightness
    nameWithType:
      CSharp:
      - id: Global.HSLLightnessSlider*
        name: HSLLightnessSlider
      - name: .
      - id: Global.HSLLightnessSlider.SetLightness*
        name: SetLightness
      VB:
      - id: Global.HSLLightnessSlider*
        name: HSLLightnessSlider
      - name: .
      - id: Global.HSLLightnessSlider.SetLightness*
        name: SetLightness
    qualifiedName:
      CSharp:
      - id: Global.HSLLightnessSlider*
        name: HSLLightnessSlider
      - name: .
      - id: Global.HSLLightnessSlider.SetLightness*
        name: SetLightness
      VB:
      - id: Global.HSLLightnessSlider*
        name: HSLLightnessSlider
      - name: .
      - id: Global.HSLLightnessSlider.SetLightness*
        name: SetLightness
    isDefinition: true
    commentId: Overload:Global.HSLLightnessSlider.SetLightness
  Global.HSLLightnessSlider.SetDisplayHueSaturation*:
    name:
      CSharp:
      - id: Global.HSLLightnessSlider.SetDisplayHueSaturation*
        name: SetDisplayHueSaturation
      VB:
      - id: Global.HSLLightnessSlider.SetDisplayHueSaturation*
        name: SetDisplayHueSaturation
    nameWithType:
      CSharp:
      - id: Global.HSLLightnessSlider*
        name: HSLLightnessSlider
      - name: .
      - id: Global.HSLLightnessSlider.SetDisplayHueSaturation*
        name: SetDisplayHueSaturation
      VB:
      - id: Global.HSLLightnessSlider*
        name: HSLLightnessSlider
      - name: .
      - id: Global.HSLLightnessSlider.SetDisplayHueSaturation*
        name: SetDisplayHueSaturation
    qualifiedName:
      CSharp:
      - id: Global.HSLLightnessSlider*
        name: HSLLightnessSlider
      - name: .
      - id: Global.HSLLightnessSlider.SetDisplayHueSaturation*
        name: SetDisplayHueSaturation
      VB:
      - id: Global.HSLLightnessSlider*
        name: HSLLightnessSlider
      - name: .
      - id: Global.HSLLightnessSlider.SetDisplayHueSaturation*
        name: SetDisplayHueSaturation
    isDefinition: true
    commentId: Overload:Global.HSLLightnessSlider.SetDisplayHueSaturation
  Global.HSLLightnessSlider:
    name:
      CSharp:
      - id: Global.HSLLightnessSlider
        name: HSLLightnessSlider
      VB:
      - id: Global.HSLLightnessSlider
        name: HSLLightnessSlider
    nameWithType:
      CSharp:
      - id: Global.HSLLightnessSlider
        name: HSLLightnessSlider
      VB:
      - id: Global.HSLLightnessSlider
        name: HSLLightnessSlider
    qualifiedName:
      CSharp:
      - id: Global.HSLLightnessSlider
        name: HSLLightnessSlider
      VB:
      - id: Global.HSLLightnessSlider
        name: HSLLightnessSlider
    isDefinition: true
    commentId: T:Global.HSLLightnessSlider
  Global.CustomStack`1.Count*:
    name:
      CSharp:
      - id: Global.CustomStack`1.Count*
        name: Count
      VB:
      - id: Global.CustomStack`1.Count*
        name: Count
    nameWithType:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.Count*
        name: Count
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.Count*
        name: Count
    qualifiedName:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.Count*
        name: Count
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.Count*
        name: Count
    isDefinition: true
    commentId: Overload:Global.CustomStack`1.Count
  T:
    name:
      CSharp:
      - name: T
      VB:
      - name: T
    nameWithType:
      CSharp:
      - name: T
      VB:
      - name: T
    qualifiedName:
      CSharp:
      - name: T
      VB:
      - name: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
      VB:
      - name: T
    nameWithType:
      CSharp:
      - name: T
      VB:
      - name: T
    qualifiedName:
      CSharp:
      - name: T
      VB:
      - name: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  Global.CustomStack`1.Push*:
    name:
      CSharp:
      - id: Global.CustomStack`1.Push*
        name: Push
      VB:
      - id: Global.CustomStack`1.Push*
        name: Push
    nameWithType:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.Push*
        name: Push
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.Push*
        name: Push
    qualifiedName:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.Push*
        name: Push
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.Push*
        name: Push
    isDefinition: true
    commentId: Overload:Global.CustomStack`1.Push
  Global.CustomStack`1.Peek*:
    name:
      CSharp:
      - id: Global.CustomStack`1.Peek*
        name: Peek
      VB:
      - id: Global.CustomStack`1.Peek*
        name: Peek
    nameWithType:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.Peek*
        name: Peek
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.Peek*
        name: Peek
    qualifiedName:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.Peek*
        name: Peek
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.Peek*
        name: Peek
    isDefinition: true
    commentId: Overload:Global.CustomStack`1.Peek
  Global.CustomStack`1.Pop*:
    name:
      CSharp:
      - id: Global.CustomStack`1.Pop*
        name: Pop
      VB:
      - id: Global.CustomStack`1.Pop*
        name: Pop
    nameWithType:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.Pop*
        name: Pop
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.Pop*
        name: Pop
    qualifiedName:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.Pop*
        name: Pop
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.Pop*
        name: Pop
    isDefinition: true
    commentId: Overload:Global.CustomStack`1.Pop
  Global.CustomStack`1.RemoveAt*:
    name:
      CSharp:
      - id: Global.CustomStack`1.RemoveAt*
        name: RemoveAt
      VB:
      - id: Global.CustomStack`1.RemoveAt*
        name: RemoveAt
    nameWithType:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.RemoveAt*
        name: RemoveAt
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.RemoveAt*
        name: RemoveAt
    qualifiedName:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.RemoveAt*
        name: RemoveAt
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.RemoveAt*
        name: RemoveAt
    isDefinition: true
    commentId: Overload:Global.CustomStack`1.RemoveAt
  Global.CustomStack`1.Remove*:
    name:
      CSharp:
      - id: Global.CustomStack`1.Remove*
        name: Remove
      VB:
      - id: Global.CustomStack`1.Remove*
        name: Remove
    nameWithType:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.Remove*
        name: Remove
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.Remove*
        name: Remove
    qualifiedName:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.Remove*
        name: Remove
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.Remove*
        name: Remove
    isDefinition: true
    commentId: Overload:Global.CustomStack`1.Remove
  Global.CustomStack`1.RemoveAll*:
    name:
      CSharp:
      - id: Global.CustomStack`1.RemoveAll*
        name: RemoveAll
      VB:
      - id: Global.CustomStack`1.RemoveAll*
        name: RemoveAll
    nameWithType:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.RemoveAll*
        name: RemoveAll
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.RemoveAll*
        name: RemoveAll
    qualifiedName:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.RemoveAll*
        name: RemoveAll
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.RemoveAll*
        name: RemoveAll
    isDefinition: true
    commentId: Overload:Global.CustomStack`1.RemoveAll
  Global.CustomStack`1.Clear*:
    name:
      CSharp:
      - id: Global.CustomStack`1.Clear*
        name: Clear
      VB:
      - id: Global.CustomStack`1.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.Clear*
        name: Clear
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.Clear*
        name: Clear
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:Global.CustomStack`1.Clear
  System.Collections.Generic.List{{T}}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{`0}
  Global.CustomStack`1.ToList*:
    name:
      CSharp:
      - id: Global.CustomStack`1.ToList*
        name: ToList
      VB:
      - id: Global.CustomStack`1.ToList*
        name: ToList
    nameWithType:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.ToList*
        name: ToList
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.ToList*
        name: ToList
    qualifiedName:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.ToList*
        name: ToList
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.ToList*
        name: ToList
    isDefinition: true
    commentId: Overload:Global.CustomStack`1.ToList
  Global.CustomStack`1.ToArray*:
    name:
      CSharp:
      - id: Global.CustomStack`1.ToArray*
        name: ToArray
      VB:
      - id: Global.CustomStack`1.ToArray*
        name: ToArray
    nameWithType:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.ToArray*
        name: ToArray
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.ToArray*
        name: ToArray
    qualifiedName:
      CSharp:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: Global.CustomStack`1.ToArray*
        name: ToArray
      VB:
      - id: Global.CustomStack`1*
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: Global.CustomStack`1.ToArray*
        name: ToArray
    isDefinition: true
    commentId: Overload:Global.CustomStack`1.ToArray
  Global.CustomStack`1:
    name:
      CSharp:
      - id: Global.CustomStack`1
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: Global.CustomStack`1
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: Global.CustomStack`1
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: Global.CustomStack`1
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.CustomStack`1
        name: CustomStack
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: Global.CustomStack`1
        name: CustomStack
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:Global.CustomStack`1
  System.Collections:
    name:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
    nameWithType:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
    isDefinition: true
    commentId: N:System.Collections
  System.Collections.IEnumerable:
    name:
      CSharp:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        isExternal: true
      VB:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        isExternal: true
      VB:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.IEnumerable
        name: IEnumerable
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.IEnumerable
        name: IEnumerable
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.IEnumerable
  Global.IntRect.bottomLeft*:
    name:
      CSharp:
      - id: Global.IntRect.bottomLeft*
        name: bottomLeft
      VB:
      - id: Global.IntRect.bottomLeft*
        name: bottomLeft
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.bottomLeft*
        name: bottomLeft
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.bottomLeft*
        name: bottomLeft
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.bottomLeft*
        name: bottomLeft
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.bottomLeft*
        name: bottomLeft
    isDefinition: true
    commentId: Overload:Global.IntRect.bottomLeft
  Global.IntRect.topRight*:
    name:
      CSharp:
      - id: Global.IntRect.topRight*
        name: topRight
      VB:
      - id: Global.IntRect.topRight*
        name: topRight
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.topRight*
        name: topRight
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.topRight*
        name: topRight
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.topRight*
        name: topRight
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.topRight*
        name: topRight
    isDefinition: true
    commentId: Overload:Global.IntRect.topRight
  Global.IntRect.bottomRight*:
    name:
      CSharp:
      - id: Global.IntRect.bottomRight*
        name: bottomRight
      VB:
      - id: Global.IntRect.bottomRight*
        name: bottomRight
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.bottomRight*
        name: bottomRight
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.bottomRight*
        name: bottomRight
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.bottomRight*
        name: bottomRight
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.bottomRight*
        name: bottomRight
    isDefinition: true
    commentId: Overload:Global.IntRect.bottomRight
  Global.IntRect.topLeft*:
    name:
      CSharp:
      - id: Global.IntRect.topLeft*
        name: topLeft
      VB:
      - id: Global.IntRect.topLeft*
        name: topLeft
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.topLeft*
        name: topLeft
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.topLeft*
        name: topLeft
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.topLeft*
        name: topLeft
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.topLeft*
        name: topLeft
    isDefinition: true
    commentId: Overload:Global.IntRect.topLeft
  Global.IntRect.centre*:
    name:
      CSharp:
      - id: Global.IntRect.centre*
        name: centre
      VB:
      - id: Global.IntRect.centre*
        name: centre
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.centre*
        name: centre
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.centre*
        name: centre
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.centre*
        name: centre
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.centre*
        name: centre
    isDefinition: true
    commentId: Overload:Global.IntRect.centre
  Global.IntRect.points*:
    name:
      CSharp:
      - id: Global.IntRect.points*
        name: points
      VB:
      - id: Global.IntRect.points*
        name: points
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.points*
        name: points
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.points*
        name: points
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.points*
        name: points
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.points*
        name: points
    isDefinition: true
    commentId: Overload:Global.IntRect.points
  Global.IntRect.width*:
    name:
      CSharp:
      - id: Global.IntRect.width*
        name: width
      VB:
      - id: Global.IntRect.width*
        name: width
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.width*
        name: width
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.width*
        name: width
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.width*
        name: width
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.width*
        name: width
    isDefinition: true
    commentId: Overload:Global.IntRect.width
  Global.IntRect.height*:
    name:
      CSharp:
      - id: Global.IntRect.height*
        name: height
      VB:
      - id: Global.IntRect.height*
        name: height
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.height*
        name: height
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.height*
        name: height
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.height*
        name: height
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.height*
        name: height
    isDefinition: true
    commentId: Overload:Global.IntRect.height
  Global.IntRect.area*:
    name:
      CSharp:
      - id: Global.IntRect.area*
        name: area
      VB:
      - id: Global.IntRect.area*
        name: area
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.area*
        name: area
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.area*
        name: area
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.area*
        name: area
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.area*
        name: area
    isDefinition: true
    commentId: Overload:Global.IntRect.area
  Global.IntRect.isSquare*:
    name:
      CSharp:
      - id: Global.IntRect.isSquare*
        name: isSquare
      VB:
      - id: Global.IntRect.isSquare*
        name: isSquare
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.isSquare*
        name: isSquare
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.isSquare*
        name: isSquare
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.isSquare*
        name: isSquare
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.isSquare*
        name: isSquare
    isDefinition: true
    commentId: Overload:Global.IntRect.isSquare
  Global.IntRect.#ctor*:
    name:
      CSharp:
      - id: Global.IntRect.#ctor*
        name: IntRect
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.#ctor*
        name: IntRect
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.#ctor*
        name: IntRect
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.IntRect.#ctor
  Global.IntRect.op_Equality*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.IntRect.op_Equality*
        name: ==
      VB:
      - name: =
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntRect.op_Equality*
        name: ==
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: =
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntRect.op_Equality*
        name: ==
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: =
    isDefinition: true
    commentId: Overload:Global.IntRect.op_Equality
  Global.IntRect.op_Inequality*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.IntRect.op_Inequality*
        name: '!='
      VB:
      - name: <>
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntRect.op_Inequality*
        name: '!='
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: <>
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntRect.op_Inequality*
        name: '!='
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: <>
    isDefinition: true
    commentId: Overload:Global.IntRect.op_Inequality
  Global.IntRect.Equals*:
    name:
      CSharp:
      - id: Global.IntRect.Equals*
        name: Equals
      VB:
      - id: Global.IntRect.Equals*
        name: Equals
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Equals*
        name: Equals
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Equals*
        name: Equals
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Equals*
        name: Equals
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Equals*
        name: Equals
    isDefinition: true
    commentId: Overload:Global.IntRect.Equals
  Global.IntRect.GetHashCode*:
    name:
      CSharp:
      - id: Global.IntRect.GetHashCode*
        name: GetHashCode
      VB:
      - id: Global.IntRect.GetHashCode*
        name: GetHashCode
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.GetHashCode*
        name: GetHashCode
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.GetHashCode*
        name: GetHashCode
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.GetHashCode*
        name: GetHashCode
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.GetHashCode*
        name: GetHashCode
    isDefinition: true
    commentId: Overload:Global.IntRect.GetHashCode
  Global.IntRect.ToString*:
    name:
      CSharp:
      - id: Global.IntRect.ToString*
        name: ToString
      VB:
      - id: Global.IntRect.ToString*
        name: ToString
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.ToString*
        name: ToString
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.ToString*
        name: ToString
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.ToString*
        name: ToString
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.ToString*
        name: ToString
    isDefinition: true
    commentId: Overload:Global.IntRect.ToString
  Global.IntRect.op_Addition*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.IntRect.op_Addition*
        name: +
      VB:
      - name: +
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntRect.op_Addition*
        name: +
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: +
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntRect.op_Addition*
        name: +
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: +
    isDefinition: true
    commentId: Overload:Global.IntRect.op_Addition
  Global.IntRect.op_Subtraction*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.IntRect.op_Subtraction*
        name: '-'
      VB:
      - name: '-'
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntRect.op_Subtraction*
        name: '-'
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: '-'
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntRect.op_Subtraction*
        name: '-'
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: '-'
    isDefinition: true
    commentId: Overload:Global.IntRect.op_Subtraction
  Global.Rect:
    name:
      CSharp:
      - id: Global.Rect
        name: Rect
        isExternal: true
      VB:
      - id: Global.Rect
        name: Rect
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Rect
        name: Rect
        isExternal: true
      VB:
      - id: Global.Rect
        name: Rect
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Rect
        name: Rect
        isExternal: true
      VB:
      - id: Global.Rect
        name: Rect
        isExternal: true
    isDefinition: true
  Global.IntRect.op_Explicit*:
    name:
      CSharp:
      - name: explicit
      - name: " "
      - name: operator
      - name: " "
      - id: Global.Rect*
        name: Rect
        isExternal: true
      VB:
      - name: CType
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: explicit
      - name: " "
      - name: operator
      - name: " "
      - id: Global.Rect*
        name: Rect
        isExternal: true
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: CType
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: explicit
      - name: " "
      - name: operator
      - name: " "
      - id: Global.Rect*
        name: Rect
        isExternal: true
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - name: CType
    isDefinition: true
    commentId: Overload:Global.IntRect.op_Explicit
  Global.IntRect.ToRect*:
    name:
      CSharp:
      - id: Global.IntRect.ToRect*
        name: ToRect
      VB:
      - id: Global.IntRect.ToRect*
        name: ToRect
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.ToRect*
        name: ToRect
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.ToRect*
        name: ToRect
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.ToRect*
        name: ToRect
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.ToRect*
        name: ToRect
    isDefinition: true
    commentId: Overload:Global.IntRect.ToRect
  Global.IntRect.IsSquare*:
    name:
      CSharp:
      - id: Global.IntRect.IsSquare*
        name: IsSquare
      VB:
      - id: Global.IntRect.IsSquare*
        name: IsSquare
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.IsSquare*
        name: IsSquare
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.IsSquare*
        name: IsSquare
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.IsSquare*
        name: IsSquare
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.IsSquare*
        name: IsSquare
    isDefinition: true
    commentId: Overload:Global.IntRect.IsSquare
  Global.IntRect.Area*:
    name:
      CSharp:
      - id: Global.IntRect.Area*
        name: Area
      VB:
      - id: Global.IntRect.Area*
        name: Area
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Area*
        name: Area
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Area*
        name: Area
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Area*
        name: Area
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Area*
        name: Area
    isDefinition: true
    commentId: Overload:Global.IntRect.Area
  Global.IntRect.Contains*:
    name:
      CSharp:
      - id: Global.IntRect.Contains*
        name: Contains
      VB:
      - id: Global.IntRect.Contains*
        name: Contains
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Contains*
        name: Contains
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Contains*
        name: Contains
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Contains*
        name: Contains
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Contains*
        name: Contains
    isDefinition: true
    commentId: Overload:Global.IntRect.Contains
  Global.IntRect.IsContainedIn*:
    name:
      CSharp:
      - id: Global.IntRect.IsContainedIn*
        name: IsContainedIn
      VB:
      - id: Global.IntRect.IsContainedIn*
        name: IsContainedIn
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.IsContainedIn*
        name: IsContainedIn
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.IsContainedIn*
        name: IsContainedIn
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.IsContainedIn*
        name: IsContainedIn
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.IsContainedIn*
        name: IsContainedIn
    isDefinition: true
    commentId: Overload:Global.IntRect.IsContainedIn
  Global.IntRect.Overlap*:
    name:
      CSharp:
      - id: Global.IntRect.Overlap*
        name: Overlap
      VB:
      - id: Global.IntRect.Overlap*
        name: Overlap
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Overlap*
        name: Overlap
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Overlap*
        name: Overlap
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Overlap*
        name: Overlap
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Overlap*
        name: Overlap
    isDefinition: true
    commentId: Overload:Global.IntRect.Overlap
  Global.IntRect.Overlaps*:
    name:
      CSharp:
      - id: Global.IntRect.Overlaps*
        name: Overlaps
      VB:
      - id: Global.IntRect.Overlaps*
        name: Overlaps
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Overlaps*
        name: Overlaps
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Overlaps*
        name: Overlaps
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Overlaps*
        name: Overlaps
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Overlaps*
        name: Overlaps
    isDefinition: true
    commentId: Overload:Global.IntRect.Overlaps
  Global.IntRect.Clamp*:
    name:
      CSharp:
      - id: Global.IntRect.Clamp*
        name: Clamp
      VB:
      - id: Global.IntRect.Clamp*
        name: Clamp
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Clamp*
        name: Clamp
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Clamp*
        name: Clamp
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Clamp*
        name: Clamp
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.Clamp*
        name: Clamp
    isDefinition: true
    commentId: Overload:Global.IntRect.Clamp
  Global.IntRect.FilterPointsInside*:
    name:
      CSharp:
      - id: Global.IntRect.FilterPointsInside*
        name: FilterPointsInside
      VB:
      - id: Global.IntRect.FilterPointsInside*
        name: FilterPointsInside
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.FilterPointsInside*
        name: FilterPointsInside
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.FilterPointsInside*
        name: FilterPointsInside
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.FilterPointsInside*
        name: FilterPointsInside
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.FilterPointsInside*
        name: FilterPointsInside
    isDefinition: true
    commentId: Overload:Global.IntRect.FilterPointsInside
  Global.IntRect.FilterPointsOutside*:
    name:
      CSharp:
      - id: Global.IntRect.FilterPointsOutside*
        name: FilterPointsOutside
      VB:
      - id: Global.IntRect.FilterPointsOutside*
        name: FilterPointsOutside
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.FilterPointsOutside*
        name: FilterPointsOutside
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.FilterPointsOutside*
        name: FilterPointsOutside
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.FilterPointsOutside*
        name: FilterPointsOutside
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.FilterPointsOutside*
        name: FilterPointsOutside
    isDefinition: true
    commentId: Overload:Global.IntRect.FilterPointsOutside
  System.Collections.IEnumerator:
    name:
      CSharp:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
      VB:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
      VB:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.IEnumerator
  Global.IntRect.GetEnumerator*:
    name:
      CSharp:
      - id: Global.IntRect.GetEnumerator*
        name: GetEnumerator
      VB:
      - id: Global.IntRect.GetEnumerator*
        name: GetEnumerator
    nameWithType:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.GetEnumerator*
        name: GetEnumerator
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.GetEnumerator*
        name: GetEnumerator
    qualifiedName:
      CSharp:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.GetEnumerator*
        name: GetEnumerator
      VB:
      - id: Global.IntRect*
        name: IntRect
      - name: .
      - id: Global.IntRect.GetEnumerator*
        name: GetEnumerator
    isDefinition: true
    commentId: Overload:Global.IntRect.GetEnumerator
  System.Collections.IEnumerable.GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.IEnumerable.GetEnumerator
        name: GetEnumerator
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Collections.IEnumerable.GetEnumerator
        name: GetEnumerator
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        isExternal: true
      - name: .
      - id: System.Collections.IEnumerable.GetEnumerator
        name: GetEnumerator
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        isExternal: true
      - name: .
      - id: System.Collections.IEnumerable.GetEnumerator
        name: GetEnumerator
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.IEnumerable
        name: IEnumerable
        isExternal: true
      - name: .
      - id: System.Collections.IEnumerable.GetEnumerator
        name: GetEnumerator
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.IEnumerable
        name: IEnumerable
        isExternal: true
      - name: .
      - id: System.Collections.IEnumerable.GetEnumerator
        name: GetEnumerator
        isExternal: true
      - name: (
      - name: )
    isDefinition: true
    parent: System.Collections.IEnumerable
    commentId: M:System.Collections.IEnumerable.GetEnumerator
  Global.IntVector2.magnitude*:
    name:
      CSharp:
      - id: Global.IntVector2.magnitude*
        name: magnitude
      VB:
      - id: Global.IntVector2.magnitude*
        name: magnitude
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.magnitude*
        name: magnitude
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.magnitude*
        name: magnitude
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.magnitude*
        name: magnitude
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.magnitude*
        name: magnitude
    isDefinition: true
    commentId: Overload:Global.IntVector2.magnitude
  Global.IntVector2.squaredMagnitude*:
    name:
      CSharp:
      - id: Global.IntVector2.squaredMagnitude*
        name: squaredMagnitude
      VB:
      - id: Global.IntVector2.squaredMagnitude*
        name: squaredMagnitude
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.squaredMagnitude*
        name: squaredMagnitude
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.squaredMagnitude*
        name: squaredMagnitude
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.squaredMagnitude*
        name: squaredMagnitude
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.squaredMagnitude*
        name: squaredMagnitude
    isDefinition: true
    commentId: Overload:Global.IntVector2.squaredMagnitude
  Global.IntVector2.#ctor*:
    name:
      CSharp:
      - id: Global.IntVector2.#ctor*
        name: IntVector2
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.#ctor*
        name: IntVector2
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.#ctor*
        name: IntVector2
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.IntVector2.#ctor
  Global.IntVector2.op_Equality*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_Equality*
        name: ==
      VB:
      - name: =
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_Equality*
        name: ==
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: =
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_Equality*
        name: ==
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: =
    isDefinition: true
    commentId: Overload:Global.IntVector2.op_Equality
  Global.IntVector2.op_Inequality*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_Inequality*
        name: '!='
      VB:
      - name: <>
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_Inequality*
        name: '!='
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: <>
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_Inequality*
        name: '!='
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: <>
    isDefinition: true
    commentId: Overload:Global.IntVector2.op_Inequality
  Global.IntVector2.Equals*:
    name:
      CSharp:
      - id: Global.IntVector2.Equals*
        name: Equals
      VB:
      - id: Global.IntVector2.Equals*
        name: Equals
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Equals*
        name: Equals
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Equals*
        name: Equals
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Equals*
        name: Equals
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Equals*
        name: Equals
    isDefinition: true
    commentId: Overload:Global.IntVector2.Equals
  Global.IntVector2.GetHashCode*:
    name:
      CSharp:
      - id: Global.IntVector2.GetHashCode*
        name: GetHashCode
      VB:
      - id: Global.IntVector2.GetHashCode*
        name: GetHashCode
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.GetHashCode*
        name: GetHashCode
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.GetHashCode*
        name: GetHashCode
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.GetHashCode*
        name: GetHashCode
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.GetHashCode*
        name: GetHashCode
    isDefinition: true
    commentId: Overload:Global.IntVector2.GetHashCode
  Global.IntVector2.ToString*:
    name:
      CSharp:
      - id: Global.IntVector2.ToString*
        name: ToString
      VB:
      - id: Global.IntVector2.ToString*
        name: ToString
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.ToString*
        name: ToString
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.ToString*
        name: ToString
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.ToString*
        name: ToString
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.ToString*
        name: ToString
    isDefinition: true
    commentId: Overload:Global.IntVector2.ToString
  Global.IntVector2.op_LessThan*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_LessThan*
        name: <
      VB:
      - name: <
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_LessThan*
        name: <
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: <
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_LessThan*
        name: <
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: <
    isDefinition: true
    commentId: Overload:Global.IntVector2.op_LessThan
  Global.IntVector2.op_GreaterThan*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_GreaterThan*
        name: '>'
      VB:
      - name: '>'
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_GreaterThan*
        name: '>'
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: '>'
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_GreaterThan*
        name: '>'
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: '>'
    isDefinition: true
    commentId: Overload:Global.IntVector2.op_GreaterThan
  Global.IntVector2.op_LessThanOrEqual*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_LessThanOrEqual*
        name: <=
      VB:
      - name: <=
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_LessThanOrEqual*
        name: <=
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: <=
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_LessThanOrEqual*
        name: <=
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: <=
    isDefinition: true
    commentId: Overload:Global.IntVector2.op_LessThanOrEqual
  Global.IntVector2.op_GreaterThanOrEqual*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_GreaterThanOrEqual*
        name: '>='
      VB:
      - name: '>='
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_GreaterThanOrEqual*
        name: '>='
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: '>='
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_GreaterThanOrEqual*
        name: '>='
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: '>='
    isDefinition: true
    commentId: Overload:Global.IntVector2.op_GreaterThanOrEqual
  Global.IntVector2.op_Addition*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_Addition*
        name: +
      VB:
      - name: +
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_Addition*
        name: +
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: +
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_Addition*
        name: +
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: +
    isDefinition: true
    commentId: Overload:Global.IntVector2.op_Addition
  Global.IntVector2.op_Subtraction*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_Subtraction*
        name: '-'
      VB:
      - name: '-'
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_Subtraction*
        name: '-'
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: '-'
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_Subtraction*
        name: '-'
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: '-'
    isDefinition: true
    commentId: Overload:Global.IntVector2.op_Subtraction
  Global.IntVector2.op_UnaryNegation*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_UnaryNegation*
        name: '-'
      VB:
      - name: '-'
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_UnaryNegation*
        name: '-'
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: '-'
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_UnaryNegation*
        name: '-'
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: '-'
    isDefinition: true
    commentId: Overload:Global.IntVector2.op_UnaryNegation
  Global.IntVector2.op_Multiply*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_Multiply*
        name: '*'
      VB:
      - name: '*'
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_Multiply*
        name: '*'
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: '*'
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_Multiply*
        name: '*'
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: '*'
    isDefinition: true
    commentId: Overload:Global.IntVector2.op_Multiply
  Global.IntVector2.op_Division*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_Division*
        name: /
      VB:
      - name: /
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_Division*
        name: /
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: /
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: operator
      - name: " "
      - id: Global.IntVector2.op_Division*
        name: /
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: /
    isDefinition: true
    commentId: Overload:Global.IntVector2.op_Division
  Global.IntVector2.op_Implicit*:
    name:
      CSharp:
      - name: implicit
      - name: " "
      - name: operator
      - name: " "
      - id: Global.Vector2*
        name: Vector2
        isExternal: true
      VB:
      - name: CType
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: implicit
      - name: " "
      - name: operator
      - name: " "
      - id: Global.Vector2*
        name: Vector2
        isExternal: true
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: CType
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: implicit
      - name: " "
      - name: operator
      - name: " "
      - id: Global.Vector2*
        name: Vector2
        isExternal: true
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - name: CType
    isDefinition: true
    commentId: Overload:Global.IntVector2.op_Implicit
  Global.IntVector2.ToVector2*:
    name:
      CSharp:
      - id: Global.IntVector2.ToVector2*
        name: ToVector2
      VB:
      - id: Global.IntVector2.ToVector2*
        name: ToVector2
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.ToVector2*
        name: ToVector2
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.ToVector2*
        name: ToVector2
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.ToVector2*
        name: ToVector2
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.ToVector2*
        name: ToVector2
    isDefinition: true
    commentId: Overload:Global.IntVector2.ToVector2
  Global.IntVector2.ToVector3*:
    name:
      CSharp:
      - id: Global.IntVector2.ToVector3*
        name: ToVector3
      VB:
      - id: Global.IntVector2.ToVector3*
        name: ToVector3
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.ToVector3*
        name: ToVector3
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.ToVector3*
        name: ToVector3
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.ToVector3*
        name: ToVector3
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.ToVector3*
        name: ToVector3
    isDefinition: true
    commentId: Overload:Global.IntVector2.ToVector3
  Global.IntVector2.FloorToIntVector2*:
    name:
      CSharp:
      - id: Global.IntVector2.FloorToIntVector2*
        name: FloorToIntVector2
      VB:
      - id: Global.IntVector2.FloorToIntVector2*
        name: FloorToIntVector2
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.FloorToIntVector2*
        name: FloorToIntVector2
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.FloorToIntVector2*
        name: FloorToIntVector2
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.FloorToIntVector2*
        name: FloorToIntVector2
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.FloorToIntVector2*
        name: FloorToIntVector2
    isDefinition: true
    commentId: Overload:Global.IntVector2.FloorToIntVector2
  Global.IntVector2.CeilToIntVector2*:
    name:
      CSharp:
      - id: Global.IntVector2.CeilToIntVector2*
        name: CeilToIntVector2
      VB:
      - id: Global.IntVector2.CeilToIntVector2*
        name: CeilToIntVector2
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.CeilToIntVector2*
        name: CeilToIntVector2
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.CeilToIntVector2*
        name: CeilToIntVector2
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.CeilToIntVector2*
        name: CeilToIntVector2
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.CeilToIntVector2*
        name: CeilToIntVector2
    isDefinition: true
    commentId: Overload:Global.IntVector2.CeilToIntVector2
  Global.IntVector2.RoundToIntVector2*:
    name:
      CSharp:
      - id: Global.IntVector2.RoundToIntVector2*
        name: RoundToIntVector2
      VB:
      - id: Global.IntVector2.RoundToIntVector2*
        name: RoundToIntVector2
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.RoundToIntVector2*
        name: RoundToIntVector2
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.RoundToIntVector2*
        name: RoundToIntVector2
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.RoundToIntVector2*
        name: RoundToIntVector2
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.RoundToIntVector2*
        name: RoundToIntVector2
    isDefinition: true
    commentId: Overload:Global.IntVector2.RoundToIntVector2
  Global.IntVector2.Dot*:
    name:
      CSharp:
      - id: Global.IntVector2.Dot*
        name: Dot
      VB:
      - id: Global.IntVector2.Dot*
        name: Dot
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Dot*
        name: Dot
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Dot*
        name: Dot
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Dot*
        name: Dot
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Dot*
        name: Dot
    isDefinition: true
    commentId: Overload:Global.IntVector2.Dot
  Global.IntVector2.Distance*:
    name:
      CSharp:
      - id: Global.IntVector2.Distance*
        name: Distance
      VB:
      - id: Global.IntVector2.Distance*
        name: Distance
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Distance*
        name: Distance
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Distance*
        name: Distance
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Distance*
        name: Distance
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Distance*
        name: Distance
    isDefinition: true
    commentId: Overload:Global.IntVector2.Distance
  Global.IntVector2.SqrDistance*:
    name:
      CSharp:
      - id: Global.IntVector2.SqrDistance*
        name: SqrDistance
      VB:
      - id: Global.IntVector2.SqrDistance*
        name: SqrDistance
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.SqrDistance*
        name: SqrDistance
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.SqrDistance*
        name: SqrDistance
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.SqrDistance*
        name: SqrDistance
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.SqrDistance*
        name: SqrDistance
    isDefinition: true
    commentId: Overload:Global.IntVector2.SqrDistance
  Global.IntVector2.Magnitude*:
    name:
      CSharp:
      - id: Global.IntVector2.Magnitude*
        name: Magnitude
      VB:
      - id: Global.IntVector2.Magnitude*
        name: Magnitude
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Magnitude*
        name: Magnitude
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Magnitude*
        name: Magnitude
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Magnitude*
        name: Magnitude
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Magnitude*
        name: Magnitude
    isDefinition: true
    commentId: Overload:Global.IntVector2.Magnitude
  Global.IntVector2.SqrMagnitude*:
    name:
      CSharp:
      - id: Global.IntVector2.SqrMagnitude*
        name: SqrMagnitude
      VB:
      - id: Global.IntVector2.SqrMagnitude*
        name: SqrMagnitude
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.SqrMagnitude*
        name: SqrMagnitude
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.SqrMagnitude*
        name: SqrMagnitude
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.SqrMagnitude*
        name: SqrMagnitude
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.SqrMagnitude*
        name: SqrMagnitude
    isDefinition: true
    commentId: Overload:Global.IntVector2.SqrMagnitude
  Global.IntVector2.Max*:
    name:
      CSharp:
      - id: Global.IntVector2.Max*
        name: Max
      VB:
      - id: Global.IntVector2.Max*
        name: Max
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Max*
        name: Max
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Max*
        name: Max
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Max*
        name: Max
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Max*
        name: Max
    isDefinition: true
    commentId: Overload:Global.IntVector2.Max
  Global.IntVector2.Min*:
    name:
      CSharp:
      - id: Global.IntVector2.Min*
        name: Min
      VB:
      - id: Global.IntVector2.Min*
        name: Min
    nameWithType:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Min*
        name: Min
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Min*
        name: Min
    qualifiedName:
      CSharp:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Min*
        name: Min
      VB:
      - id: Global.IntVector2*
        name: IntVector2
      - name: .
      - id: Global.IntVector2.Min*
        name: Min
    isDefinition: true
    commentId: Overload:Global.IntVector2.Min
  Global.DrawingArea.scrollSpeed*:
    name:
      CSharp:
      - id: Global.DrawingArea.scrollSpeed*
        name: scrollSpeed
      VB:
      - id: Global.DrawingArea.scrollSpeed*
        name: scrollSpeed
    nameWithType:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.scrollSpeed*
        name: scrollSpeed
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.scrollSpeed*
        name: scrollSpeed
    qualifiedName:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.scrollSpeed*
        name: scrollSpeed
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.scrollSpeed*
        name: scrollSpeed
    isDefinition: true
    commentId: Overload:Global.DrawingArea.scrollSpeed
  Global.DrawingArea.zoomScrollSpeed*:
    name:
      CSharp:
      - id: Global.DrawingArea.zoomScrollSpeed*
        name: zoomScrollSpeed
      VB:
      - id: Global.DrawingArea.zoomScrollSpeed*
        name: zoomScrollSpeed
    nameWithType:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.zoomScrollSpeed*
        name: zoomScrollSpeed
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.zoomScrollSpeed*
        name: zoomScrollSpeed
    qualifiedName:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.zoomScrollSpeed*
        name: zoomScrollSpeed
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.zoomScrollSpeed*
        name: zoomScrollSpeed
    isDefinition: true
    commentId: Overload:Global.DrawingArea.zoomScrollSpeed
  Global.File:
    name:
      CSharp:
      - id: Global.File
        name: File
      VB:
      - id: Global.File
        name: File
    nameWithType:
      CSharp:
      - id: Global.File
        name: File
      VB:
      - id: Global.File
        name: File
    qualifiedName:
      CSharp:
      - id: Global.File
        name: File
      VB:
      - id: Global.File
        name: File
    isDefinition: true
    commentId: T:Global.File
  Global.DrawingArea.file*:
    name:
      CSharp:
      - id: Global.DrawingArea.file*
        name: file
      VB:
      - id: Global.DrawingArea.file*
        name: file
    nameWithType:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.file*
        name: file
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.file*
        name: file
    qualifiedName:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.file*
        name: file
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.file*
        name: file
    isDefinition: true
    commentId: Overload:Global.DrawingArea.file
  Global.DrawingArea.pixelsPerUnit*:
    name:
      CSharp:
      - id: Global.DrawingArea.pixelsPerUnit*
        name: pixelsPerUnit
      VB:
      - id: Global.DrawingArea.pixelsPerUnit*
        name: pixelsPerUnit
    nameWithType:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.pixelsPerUnit*
        name: pixelsPerUnit
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.pixelsPerUnit*
        name: pixelsPerUnit
    qualifiedName:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.pixelsPerUnit*
        name: pixelsPerUnit
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.pixelsPerUnit*
        name: pixelsPerUnit
    isDefinition: true
    commentId: Overload:Global.DrawingArea.pixelsPerUnit
  Global.DrawingArea.selectionMask*:
    name:
      CSharp:
      - id: Global.DrawingArea.selectionMask*
        name: selectionMask
      VB:
      - id: Global.DrawingArea.selectionMask*
        name: selectionMask
    nameWithType:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.selectionMask*
        name: selectionMask
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.selectionMask*
        name: selectionMask
    qualifiedName:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.selectionMask*
        name: selectionMask
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.selectionMask*
        name: selectionMask
    isDefinition: true
    commentId: Overload:Global.DrawingArea.selectionMask
  Global.DrawingArea.hasSelection*:
    name:
      CSharp:
      - id: Global.DrawingArea.hasSelection*
        name: hasSelection
      VB:
      - id: Global.DrawingArea.hasSelection*
        name: hasSelection
    nameWithType:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.hasSelection*
        name: hasSelection
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.hasSelection*
        name: hasSelection
    qualifiedName:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.hasSelection*
        name: hasSelection
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.hasSelection*
        name: hasSelection
    isDefinition: true
    commentId: Overload:Global.DrawingArea.hasSelection
  Global.DrawingArea.selectionRect*:
    name:
      CSharp:
      - id: Global.DrawingArea.selectionRect*
        name: selectionRect
      VB:
      - id: Global.DrawingArea.selectionRect*
        name: selectionRect
    nameWithType:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.selectionRect*
        name: selectionRect
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.selectionRect*
        name: selectionRect
    qualifiedName:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.selectionRect*
        name: selectionRect
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.selectionRect*
        name: selectionRect
    isDefinition: true
    commentId: Overload:Global.DrawingArea.selectionRect
  Global.DrawingArea.UpdateDrawing*:
    name:
      CSharp:
      - id: Global.DrawingArea.UpdateDrawing*
        name: UpdateDrawing
      VB:
      - id: Global.DrawingArea.UpdateDrawing*
        name: UpdateDrawing
    nameWithType:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.UpdateDrawing*
        name: UpdateDrawing
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.UpdateDrawing*
        name: UpdateDrawing
    qualifiedName:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.UpdateDrawing*
        name: UpdateDrawing
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.UpdateDrawing*
        name: UpdateDrawing
    isDefinition: true
    commentId: Overload:Global.DrawingArea.UpdateDrawing
  Global.GradientMode:
    name:
      CSharp:
      - id: Global.GradientMode
        name: GradientMode
      VB:
      - id: Global.GradientMode
        name: GradientMode
    nameWithType:
      CSharp:
      - id: Global.GradientMode
        name: GradientMode
      VB:
      - id: Global.GradientMode
        name: GradientMode
    qualifiedName:
      CSharp:
      - id: Global.GradientMode
        name: GradientMode
      VB:
      - id: Global.GradientMode
        name: GradientMode
    isDefinition: true
    commentId: T:Global.GradientMode
  Global.DrawingArea.PreviewGradient*:
    name:
      CSharp:
      - id: Global.DrawingArea.PreviewGradient*
        name: PreviewGradient
      VB:
      - id: Global.DrawingArea.PreviewGradient*
        name: PreviewGradient
    nameWithType:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.PreviewGradient*
        name: PreviewGradient
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.PreviewGradient*
        name: PreviewGradient
    qualifiedName:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.PreviewGradient*
        name: PreviewGradient
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.PreviewGradient*
        name: PreviewGradient
    isDefinition: true
    commentId: Overload:Global.DrawingArea.PreviewGradient
  Global.DrawingArea.DeleteSelection*:
    name:
      CSharp:
      - id: Global.DrawingArea.DeleteSelection*
        name: DeleteSelection
      VB:
      - id: Global.DrawingArea.DeleteSelection*
        name: DeleteSelection
    nameWithType:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.DeleteSelection*
        name: DeleteSelection
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.DeleteSelection*
        name: DeleteSelection
    qualifiedName:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.DeleteSelection*
        name: DeleteSelection
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.DeleteSelection*
        name: DeleteSelection
    isDefinition: true
    commentId: Overload:Global.DrawingArea.DeleteSelection
  Global.DrawingArea.WorldPosToPixels*:
    name:
      CSharp:
      - id: Global.DrawingArea.WorldPosToPixels*
        name: WorldPosToPixels
      VB:
      - id: Global.DrawingArea.WorldPosToPixels*
        name: WorldPosToPixels
    nameWithType:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.WorldPosToPixels*
        name: WorldPosToPixels
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.WorldPosToPixels*
        name: WorldPosToPixels
    qualifiedName:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.WorldPosToPixels*
        name: WorldPosToPixels
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.WorldPosToPixels*
        name: WorldPosToPixels
    isDefinition: true
    commentId: Overload:Global.DrawingArea.WorldPosToPixels
  Global.DrawingArea.WorldPosToPixel*:
    name:
      CSharp:
      - id: Global.DrawingArea.WorldPosToPixel*
        name: WorldPosToPixel
      VB:
      - id: Global.DrawingArea.WorldPosToPixel*
        name: WorldPosToPixel
    nameWithType:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.WorldPosToPixel*
        name: WorldPosToPixel
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.WorldPosToPixel*
        name: WorldPosToPixel
    qualifiedName:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.WorldPosToPixel*
        name: WorldPosToPixel
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.WorldPosToPixel*
        name: WorldPosToPixel
    isDefinition: true
    commentId: Overload:Global.DrawingArea.WorldPosToPixel
  Global.DrawingArea.PixelsToWorldPos*:
    name:
      CSharp:
      - id: Global.DrawingArea.PixelsToWorldPos*
        name: PixelsToWorldPos
      VB:
      - id: Global.DrawingArea.PixelsToWorldPos*
        name: PixelsToWorldPos
    nameWithType:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.PixelsToWorldPos*
        name: PixelsToWorldPos
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.PixelsToWorldPos*
        name: PixelsToWorldPos
    qualifiedName:
      CSharp:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.PixelsToWorldPos*
        name: PixelsToWorldPos
      VB:
      - id: Global.DrawingArea*
        name: DrawingArea
      - name: .
      - id: Global.DrawingArea.PixelsToWorldPos*
        name: PixelsToWorldPos
    isDefinition: true
    commentId: Overload:Global.DrawingArea.PixelsToWorldPos
  Global.GridManager.width*:
    name:
      CSharp:
      - id: Global.GridManager.width*
        name: width
      VB:
      - id: Global.GridManager.width*
        name: width
    nameWithType:
      CSharp:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.width*
        name: width
      VB:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.width*
        name: width
    qualifiedName:
      CSharp:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.width*
        name: width
      VB:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.width*
        name: width
    isDefinition: true
    commentId: Overload:Global.GridManager.width
  Global.GridManager.height*:
    name:
      CSharp:
      - id: Global.GridManager.height*
        name: height
      VB:
      - id: Global.GridManager.height*
        name: height
    nameWithType:
      CSharp:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.height*
        name: height
      VB:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.height*
        name: height
    qualifiedName:
      CSharp:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.height*
        name: height
      VB:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.height*
        name: height
    isDefinition: true
    commentId: Overload:Global.GridManager.height
  Global.GridManager.xOffset*:
    name:
      CSharp:
      - id: Global.GridManager.xOffset*
        name: xOffset
      VB:
      - id: Global.GridManager.xOffset*
        name: xOffset
    nameWithType:
      CSharp:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.xOffset*
        name: xOffset
      VB:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.xOffset*
        name: xOffset
    qualifiedName:
      CSharp:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.xOffset*
        name: xOffset
      VB:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.xOffset*
        name: xOffset
    isDefinition: true
    commentId: Overload:Global.GridManager.xOffset
  Global.GridManager.yOffset*:
    name:
      CSharp:
      - id: Global.GridManager.yOffset*
        name: yOffset
      VB:
      - id: Global.GridManager.yOffset*
        name: yOffset
    nameWithType:
      CSharp:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.yOffset*
        name: yOffset
      VB:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.yOffset*
        name: yOffset
    qualifiedName:
      CSharp:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.yOffset*
        name: yOffset
      VB:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.yOffset*
        name: yOffset
    isDefinition: true
    commentId: Overload:Global.GridManager.yOffset
  Global.GridManager.on*:
    name:
      CSharp:
      - id: Global.GridManager.on*
        name: on
      VB:
      - id: Global.GridManager.on*
        name: on
    nameWithType:
      CSharp:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.on*
        name: on
      VB:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.on*
        name: on
    qualifiedName:
      CSharp:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.on*
        name: on
      VB:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.on*
        name: on
    isDefinition: true
    commentId: Overload:Global.GridManager.on
  Global.GridManager.SetGrid*:
    name:
      CSharp:
      - id: Global.GridManager.SetGrid*
        name: SetGrid
      VB:
      - id: Global.GridManager.SetGrid*
        name: SetGrid
    nameWithType:
      CSharp:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.SetGrid*
        name: SetGrid
      VB:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.SetGrid*
        name: SetGrid
    qualifiedName:
      CSharp:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.SetGrid*
        name: SetGrid
      VB:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.SetGrid*
        name: SetGrid
    isDefinition: true
    commentId: Overload:Global.GridManager.SetGrid
  Global.GridManager.SetOnOff*:
    name:
      CSharp:
      - id: Global.GridManager.SetOnOff*
        name: SetOnOff
      VB:
      - id: Global.GridManager.SetOnOff*
        name: SetOnOff
    nameWithType:
      CSharp:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.SetOnOff*
        name: SetOnOff
      VB:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.SetOnOff*
        name: SetOnOff
    qualifiedName:
      CSharp:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.SetOnOff*
        name: SetOnOff
      VB:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.SetOnOff*
        name: SetOnOff
    isDefinition: true
    commentId: Overload:Global.GridManager.SetOnOff
  Global.GridManager.SetOnOffNoDisplayUpdate*:
    name:
      CSharp:
      - id: Global.GridManager.SetOnOffNoDisplayUpdate*
        name: SetOnOffNoDisplayUpdate
      VB:
      - id: Global.GridManager.SetOnOffNoDisplayUpdate*
        name: SetOnOffNoDisplayUpdate
    nameWithType:
      CSharp:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.SetOnOffNoDisplayUpdate*
        name: SetOnOffNoDisplayUpdate
      VB:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.SetOnOffNoDisplayUpdate*
        name: SetOnOffNoDisplayUpdate
    qualifiedName:
      CSharp:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.SetOnOffNoDisplayUpdate*
        name: SetOnOffNoDisplayUpdate
      VB:
      - id: Global.GridManager*
        name: GridManager
      - name: .
      - id: Global.GridManager.SetOnOffNoDisplayUpdate*
        name: SetOnOffNoDisplayUpdate
    isDefinition: true
    commentId: Overload:Global.GridManager.SetOnOffNoDisplayUpdate
  Global.Shapes.LineCoords*:
    name:
      CSharp:
      - id: Global.Shapes.LineCoords*
        name: LineCoords
      VB:
      - id: Global.Shapes.LineCoords*
        name: LineCoords
    nameWithType:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.LineCoords*
        name: LineCoords
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.LineCoords*
        name: LineCoords
    qualifiedName:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.LineCoords*
        name: LineCoords
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.LineCoords*
        name: LineCoords
    isDefinition: true
    commentId: Overload:Global.Shapes.LineCoords
  Global.Shapes.Line*:
    name:
      CSharp:
      - id: Global.Shapes.Line*
        name: Line
      VB:
      - id: Global.Shapes.Line*
        name: Line
    nameWithType:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Line*
        name: Line
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Line*
        name: Line
    qualifiedName:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Line*
        name: Line
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Line*
        name: Line
    isDefinition: true
    commentId: Overload:Global.Shapes.Line
  Global.Shapes.Rectangle*:
    name:
      CSharp:
      - id: Global.Shapes.Rectangle*
        name: Rectangle
      VB:
      - id: Global.Shapes.Rectangle*
        name: Rectangle
    nameWithType:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Rectangle*
        name: Rectangle
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Rectangle*
        name: Rectangle
    qualifiedName:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Rectangle*
        name: Rectangle
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Rectangle*
        name: Rectangle
    isDefinition: true
    commentId: Overload:Global.Shapes.Rectangle
  Global.Shapes.Square*:
    name:
      CSharp:
      - id: Global.Shapes.Square*
        name: Square
      VB:
      - id: Global.Shapes.Square*
        name: Square
    nameWithType:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Square*
        name: Square
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Square*
        name: Square
    qualifiedName:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Square*
        name: Square
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Square*
        name: Square
    isDefinition: true
    commentId: Overload:Global.Shapes.Square
  Global.Shapes.SnapEndCoordToSquare*:
    name:
      CSharp:
      - id: Global.Shapes.SnapEndCoordToSquare*
        name: SnapEndCoordToSquare
      VB:
      - id: Global.Shapes.SnapEndCoordToSquare*
        name: SnapEndCoordToSquare
    nameWithType:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.SnapEndCoordToSquare*
        name: SnapEndCoordToSquare
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.SnapEndCoordToSquare*
        name: SnapEndCoordToSquare
    qualifiedName:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.SnapEndCoordToSquare*
        name: SnapEndCoordToSquare
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.SnapEndCoordToSquare*
        name: SnapEndCoordToSquare
    isDefinition: true
    commentId: Overload:Global.Shapes.SnapEndCoordToSquare
  Global.Shapes.Ellipse*:
    name:
      CSharp:
      - id: Global.Shapes.Ellipse*
        name: Ellipse
      VB:
      - id: Global.Shapes.Ellipse*
        name: Ellipse
    nameWithType:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Ellipse*
        name: Ellipse
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Ellipse*
        name: Ellipse
    qualifiedName:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Ellipse*
        name: Ellipse
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Ellipse*
        name: Ellipse
    isDefinition: true
    commentId: Overload:Global.Shapes.Ellipse
  Global.Shapes.Circle*:
    name:
      CSharp:
      - id: Global.Shapes.Circle*
        name: Circle
      VB:
      - id: Global.Shapes.Circle*
        name: Circle
    nameWithType:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Circle*
        name: Circle
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Circle*
        name: Circle
    qualifiedName:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Circle*
        name: Circle
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Circle*
        name: Circle
    isDefinition: true
    commentId: Overload:Global.Shapes.Circle
  Global.Shapes.RightTriangle*:
    name:
      CSharp:
      - id: Global.Shapes.RightTriangle*
        name: RightTriangle
      VB:
      - id: Global.Shapes.RightTriangle*
        name: RightTriangle
    nameWithType:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.RightTriangle*
        name: RightTriangle
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.RightTriangle*
        name: RightTriangle
    qualifiedName:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.RightTriangle*
        name: RightTriangle
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.RightTriangle*
        name: RightTriangle
    isDefinition: true
    commentId: Overload:Global.Shapes.RightTriangle
  Global.Shapes.Diamond*:
    name:
      CSharp:
      - id: Global.Shapes.Diamond*
        name: Diamond
      VB:
      - id: Global.Shapes.Diamond*
        name: Diamond
    nameWithType:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Diamond*
        name: Diamond
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Diamond*
        name: Diamond
    qualifiedName:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Diamond*
        name: Diamond
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Diamond*
        name: Diamond
    isDefinition: true
    commentId: Overload:Global.Shapes.Diamond
  Global.Shapes.IsoRectangle*:
    name:
      CSharp:
      - id: Global.Shapes.IsoRectangle*
        name: IsoRectangle
      VB:
      - id: Global.Shapes.IsoRectangle*
        name: IsoRectangle
    nameWithType:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.IsoRectangle*
        name: IsoRectangle
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.IsoRectangle*
        name: IsoRectangle
    qualifiedName:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.IsoRectangle*
        name: IsoRectangle
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.IsoRectangle*
        name: IsoRectangle
    isDefinition: true
    commentId: Overload:Global.Shapes.IsoRectangle
  Global.Shapes.IsoBox*:
    name:
      CSharp:
      - id: Global.Shapes.IsoBox*
        name: IsoBox
      VB:
      - id: Global.Shapes.IsoBox*
        name: IsoBox
    nameWithType:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.IsoBox*
        name: IsoBox
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.IsoBox*
        name: IsoBox
    qualifiedName:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.IsoBox*
        name: IsoBox
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.IsoBox*
        name: IsoBox
    isDefinition: true
    commentId: Overload:Global.Shapes.IsoBox
  Global.Shapes.Gradient*:
    name:
      CSharp:
      - id: Global.Shapes.Gradient*
        name: Gradient
      VB:
      - id: Global.Shapes.Gradient*
        name: Gradient
    nameWithType:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Gradient*
        name: Gradient
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Gradient*
        name: Gradient
    qualifiedName:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Gradient*
        name: Gradient
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.Gradient*
        name: Gradient
    isDefinition: true
    commentId: Overload:Global.Shapes.Gradient
  Global.Shapes.GradientLinear*:
    name:
      CSharp:
      - id: Global.Shapes.GradientLinear*
        name: GradientLinear
      VB:
      - id: Global.Shapes.GradientLinear*
        name: GradientLinear
    nameWithType:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.GradientLinear*
        name: GradientLinear
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.GradientLinear*
        name: GradientLinear
    qualifiedName:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.GradientLinear*
        name: GradientLinear
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.GradientLinear*
        name: GradientLinear
    isDefinition: true
    commentId: Overload:Global.Shapes.GradientLinear
  Global.Shapes.GradientRadial*:
    name:
      CSharp:
      - id: Global.Shapes.GradientRadial*
        name: GradientRadial
      VB:
      - id: Global.Shapes.GradientRadial*
        name: GradientRadial
    nameWithType:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.GradientRadial*
        name: GradientRadial
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.GradientRadial*
        name: GradientRadial
    qualifiedName:
      CSharp:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.GradientRadial*
        name: GradientRadial
      VB:
      - id: Global.Shapes*
        name: Shapes
      - name: .
      - id: Global.Shapes.GradientRadial*
        name: GradientRadial
    isDefinition: true
    commentId: Overload:Global.Shapes.GradientRadial
  Global.Shapes:
    name:
      CSharp:
      - id: Global.Shapes
        name: Shapes
      VB:
      - id: Global.Shapes
        name: Shapes
    nameWithType:
      CSharp:
      - id: Global.Shapes
        name: Shapes
      VB:
      - id: Global.Shapes
        name: Shapes
    qualifiedName:
      CSharp:
      - id: Global.Shapes
        name: Shapes
      VB:
      - id: Global.Shapes
        name: Shapes
    isDefinition: true
    commentId: T:Global.Shapes
  Global.Tool.name*:
    name:
      CSharp:
      - id: Global.Tool.name*
        name: name
      VB:
      - id: Global.Tool.name*
        name: name
    nameWithType:
      CSharp:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.name*
        name: name
      VB:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.name*
        name: name
    qualifiedName:
      CSharp:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.name*
        name: name
      VB:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.name*
        name: name
    isDefinition: true
    commentId: Overload:Global.Tool.name
  Global.Tool.useMovementInterpolation*:
    name:
      CSharp:
      - id: Global.Tool.useMovementInterpolation*
        name: useMovementInterpolation
      VB:
      - id: Global.Tool.useMovementInterpolation*
        name: useMovementInterpolation
    nameWithType:
      CSharp:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.useMovementInterpolation*
        name: useMovementInterpolation
      VB:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.useMovementInterpolation*
        name: useMovementInterpolation
    qualifiedName:
      CSharp:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.useMovementInterpolation*
        name: useMovementInterpolation
      VB:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.useMovementInterpolation*
        name: useMovementInterpolation
    isDefinition: true
    commentId: Overload:Global.Tool.useMovementInterpolation
  Global.Tool.showBrushBorder*:
    name:
      CSharp:
      - id: Global.Tool.showBrushBorder*
        name: showBrushBorder
      VB:
      - id: Global.Tool.showBrushBorder*
        name: showBrushBorder
    nameWithType:
      CSharp:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.showBrushBorder*
        name: showBrushBorder
      VB:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.showBrushBorder*
        name: showBrushBorder
    qualifiedName:
      CSharp:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.showBrushBorder*
        name: showBrushBorder
      VB:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.showBrushBorder*
        name: showBrushBorder
    isDefinition: true
    commentId: Overload:Global.Tool.showBrushBorder
  Global.MouseTargetDeselectMode:
    name:
      CSharp:
      - id: Global.MouseTargetDeselectMode
        name: MouseTargetDeselectMode
      VB:
      - id: Global.MouseTargetDeselectMode
        name: MouseTargetDeselectMode
    nameWithType:
      CSharp:
      - id: Global.MouseTargetDeselectMode
        name: MouseTargetDeselectMode
      VB:
      - id: Global.MouseTargetDeselectMode
        name: MouseTargetDeselectMode
    qualifiedName:
      CSharp:
      - id: Global.MouseTargetDeselectMode
        name: MouseTargetDeselectMode
      VB:
      - id: Global.MouseTargetDeselectMode
        name: MouseTargetDeselectMode
    isDefinition: true
    commentId: T:Global.MouseTargetDeselectMode
  Global.Tool.finishMode*:
    name:
      CSharp:
      - id: Global.Tool.finishMode*
        name: finishMode
      VB:
      - id: Global.Tool.finishMode*
        name: finishMode
    nameWithType:
      CSharp:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.finishMode*
        name: finishMode
      VB:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.finishMode*
        name: finishMode
    qualifiedName:
      CSharp:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.finishMode*
        name: finishMode
      VB:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.finishMode*
        name: finishMode
    isDefinition: true
    commentId: Overload:Global.Tool.finishMode
  Global.Tool:
    name:
      CSharp:
      - id: Global.Tool
        name: Tool
      VB:
      - id: Global.Tool
        name: Tool
    nameWithType:
      CSharp:
      - id: Global.Tool
        name: Tool
      VB:
      - id: Global.Tool
        name: Tool
    qualifiedName:
      CSharp:
      - id: Global.Tool
        name: Tool
      VB:
      - id: Global.Tool
        name: Tool
    isDefinition: true
    commentId: T:Global.Tool
  Global.Tool[]:
    name:
      CSharp:
      - id: Global.Tool
        name: Tool
      - name: '['
      - name: ']'
      VB:
      - id: Global.Tool
        name: Tool
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Tool
        name: Tool
      - name: '['
      - name: ']'
      VB:
      - id: Global.Tool
        name: Tool
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Tool
        name: Tool
      - name: '['
      - name: ']'
      VB:
      - id: Global.Tool
        name: Tool
      - name: (
      - name: )
    isDefinition: false
  Global.Tool.StringToTool*:
    name:
      CSharp:
      - id: Global.Tool.StringToTool*
        name: StringToTool
      VB:
      - id: Global.Tool.StringToTool*
        name: StringToTool
    nameWithType:
      CSharp:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.StringToTool*
        name: StringToTool
      VB:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.StringToTool*
        name: StringToTool
    qualifiedName:
      CSharp:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.StringToTool*
        name: StringToTool
      VB:
      - id: Global.Tool*
        name: Tool
      - name: .
      - id: Global.Tool.StringToTool*
        name: StringToTool
    isDefinition: true
    commentId: Overload:Global.Tool.StringToTool
  Global.Shape:
    name:
      CSharp:
      - id: Global.Shape
        name: Shape
      VB:
      - id: Global.Shape
        name: Shape
    nameWithType:
      CSharp:
      - id: Global.Shape
        name: Shape
      VB:
      - id: Global.Shape
        name: Shape
    qualifiedName:
      CSharp:
      - id: Global.Shape
        name: Shape
      VB:
      - id: Global.Shape
        name: Shape
    isDefinition: true
    commentId: T:Global.Shape
  Global.SelectionMode:
    name:
      CSharp:
      - id: Global.SelectionMode
        name: SelectionMode
      VB:
      - id: Global.SelectionMode
        name: SelectionMode
    nameWithType:
      CSharp:
      - id: Global.SelectionMode
        name: SelectionMode
      VB:
      - id: Global.SelectionMode
        name: SelectionMode
    qualifiedName:
      CSharp:
      - id: Global.SelectionMode
        name: SelectionMode
      VB:
      - id: Global.SelectionMode
        name: SelectionMode
    isDefinition: true
    commentId: T:Global.SelectionMode
  Global.BrushShape:
    name:
      CSharp:
      - id: Global.BrushShape
        name: BrushShape
      VB:
      - id: Global.BrushShape
        name: BrushShape
    nameWithType:
      CSharp:
      - id: Global.BrushShape
        name: BrushShape
      VB:
      - id: Global.BrushShape
        name: BrushShape
    qualifiedName:
      CSharp:
      - id: Global.BrushShape
        name: BrushShape
      VB:
      - id: Global.BrushShape
        name: BrushShape
    isDefinition: true
    commentId: T:Global.BrushShape
  Global.Toolbar.maxBrushSize*:
    name:
      CSharp:
      - id: Global.Toolbar.maxBrushSize*
        name: maxBrushSize
      VB:
      - id: Global.Toolbar.maxBrushSize*
        name: maxBrushSize
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.maxBrushSize*
        name: maxBrushSize
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.maxBrushSize*
        name: maxBrushSize
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.maxBrushSize*
        name: maxBrushSize
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.maxBrushSize*
        name: maxBrushSize
    isDefinition: true
    commentId: Overload:Global.Toolbar.maxBrushSize
  Global.Toolbar.brushSize*:
    name:
      CSharp:
      - id: Global.Toolbar.brushSize*
        name: brushSize
      VB:
      - id: Global.Toolbar.brushSize*
        name: brushSize
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushSize*
        name: brushSize
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushSize*
        name: brushSize
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushSize*
        name: brushSize
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushSize*
        name: brushSize
    isDefinition: true
    commentId: Overload:Global.Toolbar.brushSize
  Global.Toolbar.lineSmoothingTime*:
    name:
      CSharp:
      - id: Global.Toolbar.lineSmoothingTime*
        name: lineSmoothingTime
      VB:
      - id: Global.Toolbar.lineSmoothingTime*
        name: lineSmoothingTime
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.lineSmoothingTime*
        name: lineSmoothingTime
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.lineSmoothingTime*
        name: lineSmoothingTime
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.lineSmoothingTime*
        name: lineSmoothingTime
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.lineSmoothingTime*
        name: lineSmoothingTime
    isDefinition: true
    commentId: Overload:Global.Toolbar.lineSmoothingTime
  Global.Toolbar.selectedTool*:
    name:
      CSharp:
      - id: Global.Toolbar.selectedTool*
        name: selectedTool
      VB:
      - id: Global.Toolbar.selectedTool*
        name: selectedTool
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.selectedTool*
        name: selectedTool
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.selectedTool*
        name: selectedTool
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.selectedTool*
        name: selectedTool
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.selectedTool*
        name: selectedTool
    isDefinition: true
    commentId: Overload:Global.Toolbar.selectedTool
  Global.Toolbar.previousTool*:
    name:
      CSharp:
      - id: Global.Toolbar.previousTool*
        name: previousTool
      VB:
      - id: Global.Toolbar.previousTool*
        name: previousTool
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.previousTool*
        name: previousTool
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.previousTool*
        name: previousTool
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.previousTool*
        name: previousTool
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.previousTool*
        name: previousTool
    isDefinition: true
    commentId: Overload:Global.Toolbar.previousTool
  Global.Toolbar.brushShape*:
    name:
      CSharp:
      - id: Global.Toolbar.brushShape*
        name: brushShape
      VB:
      - id: Global.Toolbar.brushShape*
        name: brushShape
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushShape*
        name: brushShape
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushShape*
        name: brushShape
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushShape*
        name: brushShape
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushShape*
        name: brushShape
    isDefinition: true
    commentId: Overload:Global.Toolbar.brushShape
  Global.Toolbar.shapeToolShape*:
    name:
      CSharp:
      - id: Global.Toolbar.shapeToolShape*
        name: shapeToolShape
      VB:
      - id: Global.Toolbar.shapeToolShape*
        name: shapeToolShape
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.shapeToolShape*
        name: shapeToolShape
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.shapeToolShape*
        name: shapeToolShape
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.shapeToolShape*
        name: shapeToolShape
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.shapeToolShape*
        name: shapeToolShape
    isDefinition: true
    commentId: Overload:Global.Toolbar.shapeToolShape
  Global.Toolbar.gradientMode*:
    name:
      CSharp:
      - id: Global.Toolbar.gradientMode*
        name: gradientMode
      VB:
      - id: Global.Toolbar.gradientMode*
        name: gradientMode
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.gradientMode*
        name: gradientMode
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.gradientMode*
        name: gradientMode
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.gradientMode*
        name: gradientMode
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.gradientMode*
        name: gradientMode
    isDefinition: true
    commentId: Overload:Global.Toolbar.gradientMode
  Global.Toolbar.selectionMode*:
    name:
      CSharp:
      - id: Global.Toolbar.selectionMode*
        name: selectionMode
      VB:
      - id: Global.Toolbar.selectionMode*
        name: selectionMode
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.selectionMode*
        name: selectionMode
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.selectionMode*
        name: selectionMode
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.selectionMode*
        name: selectionMode
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.selectionMode*
        name: selectionMode
    isDefinition: true
    commentId: Overload:Global.Toolbar.selectionMode
  Global.Toolbar.brushPixels*:
    name:
      CSharp:
      - id: Global.Toolbar.brushPixels*
        name: brushPixels
      VB:
      - id: Global.Toolbar.brushPixels*
        name: brushPixels
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixels*
        name: brushPixels
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixels*
        name: brushPixels
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixels*
        name: brushPixels
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixels*
        name: brushPixels
    isDefinition: true
    commentId: Overload:Global.Toolbar.brushPixels
  Global.Toolbar.brushTexture*:
    name:
      CSharp:
      - id: Global.Toolbar.brushTexture*
        name: brushTexture
      VB:
      - id: Global.Toolbar.brushTexture*
        name: brushTexture
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushTexture*
        name: brushTexture
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushTexture*
        name: brushTexture
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushTexture*
        name: brushTexture
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushTexture*
        name: brushTexture
    isDefinition: true
    commentId: Overload:Global.Toolbar.brushTexture
  Global.Toolbar.brushPixelsWidth*:
    name:
      CSharp:
      - id: Global.Toolbar.brushPixelsWidth*
        name: brushPixelsWidth
      VB:
      - id: Global.Toolbar.brushPixelsWidth*
        name: brushPixelsWidth
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixelsWidth*
        name: brushPixelsWidth
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixelsWidth*
        name: brushPixelsWidth
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixelsWidth*
        name: brushPixelsWidth
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixelsWidth*
        name: brushPixelsWidth
    isDefinition: true
    commentId: Overload:Global.Toolbar.brushPixelsWidth
  Global.Toolbar.brushPixelsHeight*:
    name:
      CSharp:
      - id: Global.Toolbar.brushPixelsHeight*
        name: brushPixelsHeight
      VB:
      - id: Global.Toolbar.brushPixelsHeight*
        name: brushPixelsHeight
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixelsHeight*
        name: brushPixelsHeight
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixelsHeight*
        name: brushPixelsHeight
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixelsHeight*
        name: brushPixelsHeight
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixelsHeight*
        name: brushPixelsHeight
    isDefinition: true
    commentId: Overload:Global.Toolbar.brushPixelsHeight
  Global.Toolbar.brushPixelsIsEmpty*:
    name:
      CSharp:
      - id: Global.Toolbar.brushPixelsIsEmpty*
        name: brushPixelsIsEmpty
      VB:
      - id: Global.Toolbar.brushPixelsIsEmpty*
        name: brushPixelsIsEmpty
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixelsIsEmpty*
        name: brushPixelsIsEmpty
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixelsIsEmpty*
        name: brushPixelsIsEmpty
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixelsIsEmpty*
        name: brushPixelsIsEmpty
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixelsIsEmpty*
        name: brushPixelsIsEmpty
    isDefinition: true
    commentId: Overload:Global.Toolbar.brushPixelsIsEmpty
  Global.Toolbar.brushPixelsIsSingleCentralPixel*:
    name:
      CSharp:
      - id: Global.Toolbar.brushPixelsIsSingleCentralPixel*
        name: brushPixelsIsSingleCentralPixel
      VB:
      - id: Global.Toolbar.brushPixelsIsSingleCentralPixel*
        name: brushPixelsIsSingleCentralPixel
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixelsIsSingleCentralPixel*
        name: brushPixelsIsSingleCentralPixel
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixelsIsSingleCentralPixel*
        name: brushPixelsIsSingleCentralPixel
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixelsIsSingleCentralPixel*
        name: brushPixelsIsSingleCentralPixel
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.brushPixelsIsSingleCentralPixel*
        name: brushPixelsIsSingleCentralPixel
    isDefinition: true
    commentId: Overload:Global.Toolbar.brushPixelsIsSingleCentralPixel
  Global.Toolbar.SetBrushSize*:
    name:
      CSharp:
      - id: Global.Toolbar.SetBrushSize*
        name: SetBrushSize
      VB:
      - id: Global.Toolbar.SetBrushSize*
        name: SetBrushSize
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SetBrushSize*
        name: SetBrushSize
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SetBrushSize*
        name: SetBrushSize
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SetBrushSize*
        name: SetBrushSize
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SetBrushSize*
        name: SetBrushSize
    isDefinition: true
    commentId: Overload:Global.Toolbar.SetBrushSize
  Global.Toolbar.SelectGlobalEyeDropper*:
    name:
      CSharp:
      - id: Global.Toolbar.SelectGlobalEyeDropper*
        name: SelectGlobalEyeDropper
      VB:
      - id: Global.Toolbar.SelectGlobalEyeDropper*
        name: SelectGlobalEyeDropper
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SelectGlobalEyeDropper*
        name: SelectGlobalEyeDropper
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SelectGlobalEyeDropper*
        name: SelectGlobalEyeDropper
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SelectGlobalEyeDropper*
        name: SelectGlobalEyeDropper
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SelectGlobalEyeDropper*
        name: SelectGlobalEyeDropper
    isDefinition: true
    commentId: Overload:Global.Toolbar.SelectGlobalEyeDropper
  Global.Toolbar.DeselectGlobalEyeDropper*:
    name:
      CSharp:
      - id: Global.Toolbar.DeselectGlobalEyeDropper*
        name: DeselectGlobalEyeDropper
      VB:
      - id: Global.Toolbar.DeselectGlobalEyeDropper*
        name: DeselectGlobalEyeDropper
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.DeselectGlobalEyeDropper*
        name: DeselectGlobalEyeDropper
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.DeselectGlobalEyeDropper*
        name: DeselectGlobalEyeDropper
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.DeselectGlobalEyeDropper*
        name: DeselectGlobalEyeDropper
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.DeselectGlobalEyeDropper*
        name: DeselectGlobalEyeDropper
    isDefinition: true
    commentId: Overload:Global.Toolbar.DeselectGlobalEyeDropper
  Global.Toolbar.LoadCustomBrush*:
    name:
      CSharp:
      - id: Global.Toolbar.LoadCustomBrush*
        name: LoadCustomBrush
      VB:
      - id: Global.Toolbar.LoadCustomBrush*
        name: LoadCustomBrush
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.LoadCustomBrush*
        name: LoadCustomBrush
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.LoadCustomBrush*
        name: LoadCustomBrush
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.LoadCustomBrush*
        name: LoadCustomBrush
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.LoadCustomBrush*
        name: LoadCustomBrush
    isDefinition: true
    commentId: Overload:Global.Toolbar.LoadCustomBrush
  Global.Toolbar.SubscribeToOnToolChanged*:
    name:
      CSharp:
      - id: Global.Toolbar.SubscribeToOnToolChanged*
        name: SubscribeToOnToolChanged
      VB:
      - id: Global.Toolbar.SubscribeToOnToolChanged*
        name: SubscribeToOnToolChanged
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SubscribeToOnToolChanged*
        name: SubscribeToOnToolChanged
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SubscribeToOnToolChanged*
        name: SubscribeToOnToolChanged
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SubscribeToOnToolChanged*
        name: SubscribeToOnToolChanged
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SubscribeToOnToolChanged*
        name: SubscribeToOnToolChanged
    isDefinition: true
    commentId: Overload:Global.Toolbar.SubscribeToOnToolChanged
  Global.Toolbar.SubscribeToOnBrushSizeChanged*:
    name:
      CSharp:
      - id: Global.Toolbar.SubscribeToOnBrushSizeChanged*
        name: SubscribeToOnBrushSizeChanged
      VB:
      - id: Global.Toolbar.SubscribeToOnBrushSizeChanged*
        name: SubscribeToOnBrushSizeChanged
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SubscribeToOnBrushSizeChanged*
        name: SubscribeToOnBrushSizeChanged
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SubscribeToOnBrushSizeChanged*
        name: SubscribeToOnBrushSizeChanged
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SubscribeToOnBrushSizeChanged*
        name: SubscribeToOnBrushSizeChanged
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SubscribeToOnBrushSizeChanged*
        name: SubscribeToOnBrushSizeChanged
    isDefinition: true
    commentId: Overload:Global.Toolbar.SubscribeToOnBrushSizeChanged
  Global.Toolbar.SubscribeToOnBrushPixelsChanged*:
    name:
      CSharp:
      - id: Global.Toolbar.SubscribeToOnBrushPixelsChanged*
        name: SubscribeToOnBrushPixelsChanged
      VB:
      - id: Global.Toolbar.SubscribeToOnBrushPixelsChanged*
        name: SubscribeToOnBrushPixelsChanged
    nameWithType:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SubscribeToOnBrushPixelsChanged*
        name: SubscribeToOnBrushPixelsChanged
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SubscribeToOnBrushPixelsChanged*
        name: SubscribeToOnBrushPixelsChanged
    qualifiedName:
      CSharp:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SubscribeToOnBrushPixelsChanged*
        name: SubscribeToOnBrushPixelsChanged
      VB:
      - id: Global.Toolbar*
        name: Toolbar
      - name: .
      - id: Global.Toolbar.SubscribeToOnBrushPixelsChanged*
        name: SubscribeToOnBrushPixelsChanged
    isDefinition: true
    commentId: Overload:Global.Toolbar.SubscribeToOnBrushPixelsChanged
  Global.Tools.UsePencil*:
    name:
      CSharp:
      - id: Global.Tools.UsePencil*
        name: UsePencil
      VB:
      - id: Global.Tools.UsePencil*
        name: UsePencil
    nameWithType:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UsePencil*
        name: UsePencil
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UsePencil*
        name: UsePencil
    qualifiedName:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UsePencil*
        name: UsePencil
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UsePencil*
        name: UsePencil
    isDefinition: true
    commentId: Overload:Global.Tools.UsePencil
  Global.Tools.PencilLineSmoothing*:
    name:
      CSharp:
      - id: Global.Tools.PencilLineSmoothing*
        name: PencilLineSmoothing
      VB:
      - id: Global.Tools.PencilLineSmoothing*
        name: PencilLineSmoothing
    nameWithType:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.PencilLineSmoothing*
        name: PencilLineSmoothing
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.PencilLineSmoothing*
        name: PencilLineSmoothing
    qualifiedName:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.PencilLineSmoothing*
        name: PencilLineSmoothing
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.PencilLineSmoothing*
        name: PencilLineSmoothing
    isDefinition: true
    commentId: Overload:Global.Tools.PencilLineSmoothing
  Global.Tools.UseBrush*:
    name:
      CSharp:
      - id: Global.Tools.UseBrush*
        name: UseBrush
      VB:
      - id: Global.Tools.UseBrush*
        name: UseBrush
    nameWithType:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseBrush*
        name: UseBrush
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseBrush*
        name: UseBrush
    qualifiedName:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseBrush*
        name: UseBrush
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseBrush*
        name: UseBrush
    isDefinition: true
    commentId: Overload:Global.Tools.UseBrush
  Global.Tools.UseRubber*:
    name:
      CSharp:
      - id: Global.Tools.UseRubber*
        name: UseRubber
      VB:
      - id: Global.Tools.UseRubber*
        name: UseRubber
    nameWithType:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseRubber*
        name: UseRubber
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseRubber*
        name: UseRubber
    qualifiedName:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseRubber*
        name: UseRubber
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseRubber*
        name: UseRubber
    isDefinition: true
    commentId: Overload:Global.Tools.UseRubber
  Global.Tools.UseEyeDropper*:
    name:
      CSharp:
      - id: Global.Tools.UseEyeDropper*
        name: UseEyeDropper
      VB:
      - id: Global.Tools.UseEyeDropper*
        name: UseEyeDropper
    nameWithType:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseEyeDropper*
        name: UseEyeDropper
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseEyeDropper*
        name: UseEyeDropper
    qualifiedName:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseEyeDropper*
        name: UseEyeDropper
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseEyeDropper*
        name: UseEyeDropper
    isDefinition: true
    commentId: Overload:Global.Tools.UseEyeDropper
  Global.Tools.UseFill*:
    name:
      CSharp:
      - id: Global.Tools.UseFill*
        name: UseFill
      VB:
      - id: Global.Tools.UseFill*
        name: UseFill
    nameWithType:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseFill*
        name: UseFill
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseFill*
        name: UseFill
    qualifiedName:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseFill*
        name: UseFill
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseFill*
        name: UseFill
    isDefinition: true
    commentId: Overload:Global.Tools.UseFill
  Global.Tools.UseLine*:
    name:
      CSharp:
      - id: Global.Tools.UseLine*
        name: UseLine
      VB:
      - id: Global.Tools.UseLine*
        name: UseLine
    nameWithType:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseLine*
        name: UseLine
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseLine*
        name: UseLine
    qualifiedName:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseLine*
        name: UseLine
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseLine*
        name: UseLine
    isDefinition: true
    commentId: Overload:Global.Tools.UseLine
  Global.Tools.UseSquare*:
    name:
      CSharp:
      - id: Global.Tools.UseSquare*
        name: UseSquare
      VB:
      - id: Global.Tools.UseSquare*
        name: UseSquare
    nameWithType:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseSquare*
        name: UseSquare
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseSquare*
        name: UseSquare
    qualifiedName:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseSquare*
        name: UseSquare
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseSquare*
        name: UseSquare
    isDefinition: true
    commentId: Overload:Global.Tools.UseSquare
  Global.Tools.UseRectangle*:
    name:
      CSharp:
      - id: Global.Tools.UseRectangle*
        name: UseRectangle
      VB:
      - id: Global.Tools.UseRectangle*
        name: UseRectangle
    nameWithType:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseRectangle*
        name: UseRectangle
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseRectangle*
        name: UseRectangle
    qualifiedName:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseRectangle*
        name: UseRectangle
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseRectangle*
        name: UseRectangle
    isDefinition: true
    commentId: Overload:Global.Tools.UseRectangle
  Global.Tools.UseCircle*:
    name:
      CSharp:
      - id: Global.Tools.UseCircle*
        name: UseCircle
      VB:
      - id: Global.Tools.UseCircle*
        name: UseCircle
    nameWithType:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseCircle*
        name: UseCircle
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseCircle*
        name: UseCircle
    qualifiedName:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseCircle*
        name: UseCircle
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseCircle*
        name: UseCircle
    isDefinition: true
    commentId: Overload:Global.Tools.UseCircle
  Global.Tools.UseEllipse*:
    name:
      CSharp:
      - id: Global.Tools.UseEllipse*
        name: UseEllipse
      VB:
      - id: Global.Tools.UseEllipse*
        name: UseEllipse
    nameWithType:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseEllipse*
        name: UseEllipse
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseEllipse*
        name: UseEllipse
    qualifiedName:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseEllipse*
        name: UseEllipse
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseEllipse*
        name: UseEllipse
    isDefinition: true
    commentId: Overload:Global.Tools.UseEllipse
  Global.Tools.UseRightTriangle*:
    name:
      CSharp:
      - id: Global.Tools.UseRightTriangle*
        name: UseRightTriangle
      VB:
      - id: Global.Tools.UseRightTriangle*
        name: UseRightTriangle
    nameWithType:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseRightTriangle*
        name: UseRightTriangle
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseRightTriangle*
        name: UseRightTriangle
    qualifiedName:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseRightTriangle*
        name: UseRightTriangle
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseRightTriangle*
        name: UseRightTriangle
    isDefinition: true
    commentId: Overload:Global.Tools.UseRightTriangle
  Global.Tools.UseIsoRectangle*:
    name:
      CSharp:
      - id: Global.Tools.UseIsoRectangle*
        name: UseIsoRectangle
      VB:
      - id: Global.Tools.UseIsoRectangle*
        name: UseIsoRectangle
    nameWithType:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseIsoRectangle*
        name: UseIsoRectangle
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseIsoRectangle*
        name: UseIsoRectangle
    qualifiedName:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseIsoRectangle*
        name: UseIsoRectangle
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseIsoRectangle*
        name: UseIsoRectangle
    isDefinition: true
    commentId: Overload:Global.Tools.UseIsoRectangle
  Global.Tools.UseIsoBox*:
    name:
      CSharp:
      - id: Global.Tools.UseIsoBox*
        name: UseIsoBox
      VB:
      - id: Global.Tools.UseIsoBox*
        name: UseIsoBox
    nameWithType:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseIsoBox*
        name: UseIsoBox
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseIsoBox*
        name: UseIsoBox
    qualifiedName:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseIsoBox*
        name: UseIsoBox
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseIsoBox*
        name: UseIsoBox
    isDefinition: true
    commentId: Overload:Global.Tools.UseIsoBox
  Global.Tools.UseGradient*:
    name:
      CSharp:
      - id: Global.Tools.UseGradient*
        name: UseGradient
      VB:
      - id: Global.Tools.UseGradient*
        name: UseGradient
    nameWithType:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseGradient*
        name: UseGradient
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseGradient*
        name: UseGradient
    qualifiedName:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseGradient*
        name: UseGradient
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseGradient*
        name: UseGradient
    isDefinition: true
    commentId: Overload:Global.Tools.UseGradient
  Global.Tools.UseGradientLinear*:
    name:
      CSharp:
      - id: Global.Tools.UseGradientLinear*
        name: UseGradientLinear
      VB:
      - id: Global.Tools.UseGradientLinear*
        name: UseGradientLinear
    nameWithType:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseGradientLinear*
        name: UseGradientLinear
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseGradientLinear*
        name: UseGradientLinear
    qualifiedName:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseGradientLinear*
        name: UseGradientLinear
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseGradientLinear*
        name: UseGradientLinear
    isDefinition: true
    commentId: Overload:Global.Tools.UseGradientLinear
  Global.Tools.UseGradientRadial*:
    name:
      CSharp:
      - id: Global.Tools.UseGradientRadial*
        name: UseGradientRadial
      VB:
      - id: Global.Tools.UseGradientRadial*
        name: UseGradientRadial
    nameWithType:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseGradientRadial*
        name: UseGradientRadial
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseGradientRadial*
        name: UseGradientRadial
    qualifiedName:
      CSharp:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseGradientRadial*
        name: UseGradientRadial
      VB:
      - id: Global.Tools*
        name: Tools
      - name: .
      - id: Global.Tools.UseGradientRadial*
        name: UseGradientRadial
    isDefinition: true
    commentId: Overload:Global.Tools.UseGradientRadial
  Global.Tools:
    name:
      CSharp:
      - id: Global.Tools
        name: Tools
      VB:
      - id: Global.Tools
        name: Tools
    nameWithType:
      CSharp:
      - id: Global.Tools
        name: Tools
      VB:
      - id: Global.Tools
        name: Tools
    qualifiedName:
      CSharp:
      - id: Global.Tools
        name: Tools
      VB:
      - id: Global.Tools
        name: Tools
    isDefinition: true
    commentId: T:Global.Tools
  Global.File.name*:
    name:
      CSharp:
      - id: Global.File.name*
        name: name
      VB:
      - id: Global.File.name*
        name: name
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.name*
        name: name
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.name*
        name: name
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.name*
        name: name
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.name*
        name: name
    isDefinition: true
    commentId: Overload:Global.File.name
  Global.File.mostRecentSavePath*:
    name:
      CSharp:
      - id: Global.File.mostRecentSavePath*
        name: mostRecentSavePath
      VB:
      - id: Global.File.mostRecentSavePath*
        name: mostRecentSavePath
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.mostRecentSavePath*
        name: mostRecentSavePath
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.mostRecentSavePath*
        name: mostRecentSavePath
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.mostRecentSavePath*
        name: mostRecentSavePath
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.mostRecentSavePath*
        name: mostRecentSavePath
    isDefinition: true
    commentId: Overload:Global.File.mostRecentSavePath
  Global.File.savedSinceLastEdit*:
    name:
      CSharp:
      - id: Global.File.savedSinceLastEdit*
        name: savedSinceLastEdit
      VB:
      - id: Global.File.savedSinceLastEdit*
        name: savedSinceLastEdit
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.savedSinceLastEdit*
        name: savedSinceLastEdit
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.savedSinceLastEdit*
        name: savedSinceLastEdit
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.savedSinceLastEdit*
        name: savedSinceLastEdit
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.savedSinceLastEdit*
        name: savedSinceLastEdit
    isDefinition: true
    commentId: Overload:Global.File.savedSinceLastEdit
  Global.File.width*:
    name:
      CSharp:
      - id: Global.File.width*
        name: width
      VB:
      - id: Global.File.width*
        name: width
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.width*
        name: width
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.width*
        name: width
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.width*
        name: width
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.width*
        name: width
    isDefinition: true
    commentId: Overload:Global.File.width
  Global.File.height*:
    name:
      CSharp:
      - id: Global.File.height*
        name: height
      VB:
      - id: Global.File.height*
        name: height
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.height*
        name: height
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.height*
        name: height
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.height*
        name: height
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.height*
        name: height
    isDefinition: true
    commentId: Overload:Global.File.height
  Global.File.rect*:
    name:
      CSharp:
      - id: Global.File.rect*
        name: rect
      VB:
      - id: Global.File.rect*
        name: rect
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.rect*
        name: rect
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.rect*
        name: rect
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.rect*
        name: rect
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.rect*
        name: rect
    isDefinition: true
    commentId: Overload:Global.File.rect
  System.Collections.Generic.List{Layer}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Layer
        name: Layer
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Layer
        name: Layer
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Layer
        name: Layer
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Layer
        name: Layer
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Layer
        name: Layer
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Layer
        name: Layer
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Layer}
  Global.File.layers*:
    name:
      CSharp:
      - id: Global.File.layers*
        name: layers
      VB:
      - id: Global.File.layers*
        name: layers
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.layers*
        name: layers
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.layers*
        name: layers
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.layers*
        name: layers
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.layers*
        name: layers
    isDefinition: true
    commentId: Overload:Global.File.layers
  Global.File.numOfFrames*:
    name:
      CSharp:
      - id: Global.File.numOfFrames*
        name: numOfFrames
      VB:
      - id: Global.File.numOfFrames*
        name: numOfFrames
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.numOfFrames*
        name: numOfFrames
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.numOfFrames*
        name: numOfFrames
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.numOfFrames*
        name: numOfFrames
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.numOfFrames*
        name: numOfFrames
    isDefinition: true
    commentId: Overload:Global.File.numOfFrames
  Global.File.keyFrameIndices*:
    name:
      CSharp:
      - id: Global.File.keyFrameIndices*
        name: keyFrameIndices
      VB:
      - id: Global.File.keyFrameIndices*
        name: keyFrameIndices
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.keyFrameIndices*
        name: keyFrameIndices
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.keyFrameIndices*
        name: keyFrameIndices
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.keyFrameIndices*
        name: keyFrameIndices
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.keyFrameIndices*
        name: keyFrameIndices
    isDefinition: true
    commentId: Overload:Global.File.keyFrameIndices
  Global.File.liveRender*:
    name:
      CSharp:
      - id: Global.File.liveRender*
        name: liveRender
      VB:
      - id: Global.File.liveRender*
        name: liveRender
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.liveRender*
        name: liveRender
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.liveRender*
        name: liveRender
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.liveRender*
        name: liveRender
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.liveRender*
        name: liveRender
    isDefinition: true
    commentId: Overload:Global.File.liveRender
  Global.Tile[]:
    name:
      CSharp:
      - id: Global.Tile
        name: Tile
      - name: '['
      - name: ']'
      VB:
      - id: Global.Tile
        name: Tile
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Tile
        name: Tile
      - name: '['
      - name: ']'
      VB:
      - id: Global.Tile
        name: Tile
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Tile
        name: Tile
      - name: '['
      - name: ']'
      VB:
      - id: Global.Tile
        name: Tile
      - name: (
      - name: )
    isDefinition: false
  Global.File.tiles*:
    name:
      CSharp:
      - id: Global.File.tiles*
        name: tiles
      VB:
      - id: Global.File.tiles*
        name: tiles
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.tiles*
        name: tiles
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.tiles*
        name: tiles
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.tiles*
        name: tiles
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.tiles*
        name: tiles
    isDefinition: true
    commentId: Overload:Global.File.tiles
  Global.File.#ctor*:
    name:
      CSharp:
      - id: Global.File.#ctor*
        name: File
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.#ctor*
        name: File
      VB:
      - id: Global.File*
        name: File
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.#ctor*
        name: File
      VB:
      - id: Global.File*
        name: File
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.File.#ctor
  Global.File.DeepCopy*:
    name:
      CSharp:
      - id: Global.File.DeepCopy*
        name: DeepCopy
      VB:
      - id: Global.File.DeepCopy*
        name: DeepCopy
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.DeepCopy*
        name: DeepCopy
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.DeepCopy*
        name: DeepCopy
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.DeepCopy*
        name: DeepCopy
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.DeepCopy*
        name: DeepCopy
    isDefinition: true
    commentId: Overload:Global.File.DeepCopy
  Global.File.OpenFile*:
    name:
      CSharp:
      - id: Global.File.OpenFile*
        name: OpenFile
      VB:
      - id: Global.File.OpenFile*
        name: OpenFile
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenFile*
        name: OpenFile
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenFile*
        name: OpenFile
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenFile*
        name: OpenFile
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenFile*
        name: OpenFile
    isDefinition: true
    commentId: Overload:Global.File.OpenFile
  Global.File.OpenPNG*:
    name:
      CSharp:
      - id: Global.File.OpenPNG*
        name: OpenPNG
      VB:
      - id: Global.File.OpenPNG*
        name: OpenPNG
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenPNG*
        name: OpenPNG
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenPNG*
        name: OpenPNG
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenPNG*
        name: OpenPNG
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenPNG*
        name: OpenPNG
    isDefinition: true
    commentId: Overload:Global.File.OpenPNG
  Global.File.OpenJPEG*:
    name:
      CSharp:
      - id: Global.File.OpenJPEG*
        name: OpenJPEG
      VB:
      - id: Global.File.OpenJPEG*
        name: OpenJPEG
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenJPEG*
        name: OpenJPEG
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenJPEG*
        name: OpenJPEG
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenJPEG*
        name: OpenJPEG
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenJPEG*
        name: OpenJPEG
    isDefinition: true
    commentId: Overload:Global.File.OpenJPEG
  Global.File.OpenImage*:
    name:
      CSharp:
      - id: Global.File.OpenImage*
        name: OpenImage
      VB:
      - id: Global.File.OpenImage*
        name: OpenImage
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenImage*
        name: OpenImage
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenImage*
        name: OpenImage
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenImage*
        name: OpenImage
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenImage*
        name: OpenImage
    isDefinition: true
    commentId: Overload:Global.File.OpenImage
  Global.File.OpenPAC*:
    name:
      CSharp:
      - id: Global.File.OpenPAC*
        name: OpenPAC
      VB:
      - id: Global.File.OpenPAC*
        name: OpenPAC
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenPAC*
        name: OpenPAC
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenPAC*
        name: OpenPAC
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenPAC*
        name: OpenPAC
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.OpenPAC*
        name: OpenPAC
    isDefinition: true
    commentId: Overload:Global.File.OpenPAC
  Global.File.ImportImage*:
    name:
      CSharp:
      - id: Global.File.ImportImage*
        name: ImportImage
      VB:
      - id: Global.File.ImportImage*
        name: ImportImage
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ImportImage*
        name: ImportImage
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ImportImage*
        name: ImportImage
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ImportImage*
        name: ImportImage
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ImportImage*
        name: ImportImage
    isDefinition: true
    commentId: Overload:Global.File.ImportImage
  Global.File.SavePAC*:
    name:
      CSharp:
      - id: Global.File.SavePAC*
        name: SavePAC
      VB:
      - id: Global.File.SavePAC*
        name: SavePAC
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SavePAC*
        name: SavePAC
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SavePAC*
        name: SavePAC
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SavePAC*
        name: SavePAC
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SavePAC*
        name: SavePAC
    isDefinition: true
    commentId: Overload:Global.File.SavePAC
  Global.File.SaveAsPAC*:
    name:
      CSharp:
      - id: Global.File.SaveAsPAC*
        name: SaveAsPAC
      VB:
      - id: Global.File.SaveAsPAC*
        name: SaveAsPAC
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SaveAsPAC*
        name: SaveAsPAC
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SaveAsPAC*
        name: SaveAsPAC
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SaveAsPAC*
        name: SaveAsPAC
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SaveAsPAC*
        name: SaveAsPAC
    isDefinition: true
    commentId: Overload:Global.File.SaveAsPAC
  Global.File.ToJSON*:
    name:
      CSharp:
      - id: Global.File.ToJSON*
        name: ToJSON
      VB:
      - id: Global.File.ToJSON*
        name: ToJSON
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ToJSON*
        name: ToJSON
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ToJSON*
        name: ToJSON
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ToJSON*
        name: ToJSON
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ToJSON*
        name: ToJSON
    isDefinition: true
    commentId: Overload:Global.File.ToJSON
  Global.File.FromJSON*:
    name:
      CSharp:
      - id: Global.File.FromJSON*
        name: FromJSON
      VB:
      - id: Global.File.FromJSON*
        name: FromJSON
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.FromJSON*
        name: FromJSON
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.FromJSON*
        name: FromJSON
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.FromJSON*
        name: FromJSON
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.FromJSON*
        name: FromJSON
    isDefinition: true
    commentId: Overload:Global.File.FromJSON
  Global.File.ExportFrame*:
    name:
      CSharp:
      - id: Global.File.ExportFrame*
        name: ExportFrame
      VB:
      - id: Global.File.ExportFrame*
        name: ExportFrame
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ExportFrame*
        name: ExportFrame
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ExportFrame*
        name: ExportFrame
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ExportFrame*
        name: ExportFrame
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ExportFrame*
        name: ExportFrame
    isDefinition: true
    commentId: Overload:Global.File.ExportFrame
  Global.File.ExportAnimation*:
    name:
      CSharp:
      - id: Global.File.ExportAnimation*
        name: ExportAnimation
      VB:
      - id: Global.File.ExportAnimation*
        name: ExportAnimation
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ExportAnimation*
        name: ExportAnimation
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ExportAnimation*
        name: ExportAnimation
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ExportAnimation*
        name: ExportAnimation
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ExportAnimation*
        name: ExportAnimation
    isDefinition: true
    commentId: Overload:Global.File.ExportAnimation
  Global.File.IsBlank*:
    name:
      CSharp:
      - id: Global.File.IsBlank*
        name: IsBlank
      VB:
      - id: Global.File.IsBlank*
        name: IsBlank
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.IsBlank*
        name: IsBlank
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.IsBlank*
        name: IsBlank
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.IsBlank*
        name: IsBlank
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.IsBlank*
        name: IsBlank
    isDefinition: true
    commentId: Overload:Global.File.IsBlank
  Global.Layer:
    name:
      CSharp:
      - id: Global.Layer
        name: Layer
      VB:
      - id: Global.Layer
        name: Layer
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      VB:
      - id: Global.Layer
        name: Layer
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      VB:
      - id: Global.Layer
        name: Layer
    isDefinition: true
    commentId: T:Global.Layer
  Global.File.IndexOfLayer*:
    name:
      CSharp:
      - id: Global.File.IndexOfLayer*
        name: IndexOfLayer
      VB:
      - id: Global.File.IndexOfLayer*
        name: IndexOfLayer
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.IndexOfLayer*
        name: IndexOfLayer
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.IndexOfLayer*
        name: IndexOfLayer
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.IndexOfLayer*
        name: IndexOfLayer
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.IndexOfLayer*
        name: IndexOfLayer
    isDefinition: true
    commentId: Overload:Global.File.IndexOfLayer
  Global.File.AddLayer*:
    name:
      CSharp:
      - id: Global.File.AddLayer*
        name: AddLayer
      VB:
      - id: Global.File.AddLayer*
        name: AddLayer
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddLayer*
        name: AddLayer
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddLayer*
        name: AddLayer
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddLayer*
        name: AddLayer
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddLayer*
        name: AddLayer
    isDefinition: true
    commentId: Overload:Global.File.AddLayer
  Global.Layer[]:
    name:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: '['
      - name: ']'
      VB:
      - id: Global.Layer
        name: Layer
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: '['
      - name: ']'
      VB:
      - id: Global.Layer
        name: Layer
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: '['
      - name: ']'
      VB:
      - id: Global.Layer
        name: Layer
      - name: (
      - name: )
    isDefinition: false
  Global.File.AddLayers*:
    name:
      CSharp:
      - id: Global.File.AddLayers*
        name: AddLayers
      VB:
      - id: Global.File.AddLayers*
        name: AddLayers
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddLayers*
        name: AddLayers
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddLayers*
        name: AddLayers
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddLayers*
        name: AddLayers
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddLayers*
        name: AddLayers
    isDefinition: true
    commentId: Overload:Global.File.AddLayers
  Global.File.ImportLayers*:
    name:
      CSharp:
      - id: Global.File.ImportLayers*
        name: ImportLayers
      VB:
      - id: Global.File.ImportLayers*
        name: ImportLayers
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ImportLayers*
        name: ImportLayers
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ImportLayers*
        name: ImportLayers
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ImportLayers*
        name: ImportLayers
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ImportLayers*
        name: ImportLayers
    isDefinition: true
    commentId: Overload:Global.File.ImportLayers
  Global.File.AddNormalLayer*:
    name:
      CSharp:
      - id: Global.File.AddNormalLayer*
        name: AddNormalLayer
      VB:
      - id: Global.File.AddNormalLayer*
        name: AddNormalLayer
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddNormalLayer*
        name: AddNormalLayer
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddNormalLayer*
        name: AddNormalLayer
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddNormalLayer*
        name: AddNormalLayer
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddNormalLayer*
        name: AddNormalLayer
    isDefinition: true
    commentId: Overload:Global.File.AddNormalLayer
  Global.File.AddTileLayer*:
    name:
      CSharp:
      - id: Global.File.AddTileLayer*
        name: AddTileLayer
      VB:
      - id: Global.File.AddTileLayer*
        name: AddTileLayer
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddTileLayer*
        name: AddTileLayer
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddTileLayer*
        name: AddTileLayer
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddTileLayer*
        name: AddTileLayer
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddTileLayer*
        name: AddTileLayer
    isDefinition: true
    commentId: Overload:Global.File.AddTileLayer
  Global.File.RemoveLayer*:
    name:
      CSharp:
      - id: Global.File.RemoveLayer*
        name: RemoveLayer
      VB:
      - id: Global.File.RemoveLayer*
        name: RemoveLayer
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RemoveLayer*
        name: RemoveLayer
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RemoveLayer*
        name: RemoveLayer
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RemoveLayer*
        name: RemoveLayer
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RemoveLayer*
        name: RemoveLayer
    isDefinition: true
    commentId: Overload:Global.File.RemoveLayer
  Global.File.RemoveLayers*:
    name:
      CSharp:
      - id: Global.File.RemoveLayers*
        name: RemoveLayers
      VB:
      - id: Global.File.RemoveLayers*
        name: RemoveLayers
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RemoveLayers*
        name: RemoveLayers
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RemoveLayers*
        name: RemoveLayers
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RemoveLayers*
        name: RemoveLayers
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RemoveLayers*
        name: RemoveLayers
    isDefinition: true
    commentId: Overload:Global.File.RemoveLayers
  Global.File.RemoveAllLayers*:
    name:
      CSharp:
      - id: Global.File.RemoveAllLayers*
        name: RemoveAllLayers
      VB:
      - id: Global.File.RemoveAllLayers*
        name: RemoveAllLayers
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RemoveAllLayers*
        name: RemoveAllLayers
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RemoveAllLayers*
        name: RemoveAllLayers
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RemoveAllLayers*
        name: RemoveAllLayers
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RemoveAllLayers*
        name: RemoveAllLayers
    isDefinition: true
    commentId: Overload:Global.File.RemoveAllLayers
  Global.File.ReplaceLayer*:
    name:
      CSharp:
      - id: Global.File.ReplaceLayer*
        name: ReplaceLayer
      VB:
      - id: Global.File.ReplaceLayer*
        name: ReplaceLayer
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ReplaceLayer*
        name: ReplaceLayer
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ReplaceLayer*
        name: ReplaceLayer
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ReplaceLayer*
        name: ReplaceLayer
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ReplaceLayer*
        name: ReplaceLayer
    isDefinition: true
    commentId: Overload:Global.File.ReplaceLayer
  Global.File.MoveLayer*:
    name:
      CSharp:
      - id: Global.File.MoveLayer*
        name: MoveLayer
      VB:
      - id: Global.File.MoveLayer*
        name: MoveLayer
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.MoveLayer*
        name: MoveLayer
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.MoveLayer*
        name: MoveLayer
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.MoveLayer*
        name: MoveLayer
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.MoveLayer*
        name: MoveLayer
    isDefinition: true
    commentId: Overload:Global.File.MoveLayer
  Global.File.Render*:
    name:
      CSharp:
      - id: Global.File.Render*
        name: Render
      VB:
      - id: Global.File.Render*
        name: Render
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Render*
        name: Render
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Render*
        name: Render
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Render*
        name: Render
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Render*
        name: Render
    isDefinition: true
    commentId: Overload:Global.File.Render
  Global.File.RenderLayers*:
    name:
      CSharp:
      - id: Global.File.RenderLayers*
        name: RenderLayers
      VB:
      - id: Global.File.RenderLayers*
        name: RenderLayers
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RenderLayers*
        name: RenderLayers
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RenderLayers*
        name: RenderLayers
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RenderLayers*
        name: RenderLayers
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RenderLayers*
        name: RenderLayers
    isDefinition: true
    commentId: Overload:Global.File.RenderLayers
  Global.File.RenderLayersAbove*:
    name:
      CSharp:
      - id: Global.File.RenderLayersAbove*
        name: RenderLayersAbove
      VB:
      - id: Global.File.RenderLayersAbove*
        name: RenderLayersAbove
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RenderLayersAbove*
        name: RenderLayersAbove
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RenderLayersAbove*
        name: RenderLayersAbove
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RenderLayersAbove*
        name: RenderLayersAbove
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RenderLayersAbove*
        name: RenderLayersAbove
    isDefinition: true
    commentId: Overload:Global.File.RenderLayersAbove
  Global.File.RenderLayersBelow*:
    name:
      CSharp:
      - id: Global.File.RenderLayersBelow*
        name: RenderLayersBelow
      VB:
      - id: Global.File.RenderLayersBelow*
        name: RenderLayersBelow
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RenderLayersBelow*
        name: RenderLayersBelow
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RenderLayersBelow*
        name: RenderLayersBelow
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RenderLayersBelow*
        name: RenderLayersBelow
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RenderLayersBelow*
        name: RenderLayersBelow
    isDefinition: true
    commentId: Overload:Global.File.RenderLayersBelow
  Global.File.RenderPixel*:
    name:
      CSharp:
      - id: Global.File.RenderPixel*
        name: RenderPixel
      VB:
      - id: Global.File.RenderPixel*
        name: RenderPixel
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RenderPixel*
        name: RenderPixel
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RenderPixel*
        name: RenderPixel
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RenderPixel*
        name: RenderPixel
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RenderPixel*
        name: RenderPixel
    isDefinition: true
    commentId: Overload:Global.File.RenderPixel
  Global.File.SetLiveRenderFrame*:
    name:
      CSharp:
      - id: Global.File.SetLiveRenderFrame*
        name: SetLiveRenderFrame
      VB:
      - id: Global.File.SetLiveRenderFrame*
        name: SetLiveRenderFrame
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SetLiveRenderFrame*
        name: SetLiveRenderFrame
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SetLiveRenderFrame*
        name: SetLiveRenderFrame
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SetLiveRenderFrame*
        name: SetLiveRenderFrame
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SetLiveRenderFrame*
        name: SetLiveRenderFrame
    isDefinition: true
    commentId: Overload:Global.File.SetLiveRenderFrame
  Global.File.Flip*:
    name:
      CSharp:
      - id: Global.File.Flip*
        name: Flip
      VB:
      - id: Global.File.Flip*
        name: Flip
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Flip*
        name: Flip
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Flip*
        name: Flip
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Flip*
        name: Flip
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Flip*
        name: Flip
    isDefinition: true
    commentId: Overload:Global.File.Flip
  Global.File.Rotate*:
    name:
      CSharp:
      - id: Global.File.Rotate*
        name: Rotate
      VB:
      - id: Global.File.Rotate*
        name: Rotate
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Rotate*
        name: Rotate
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Rotate*
        name: Rotate
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Rotate*
        name: Rotate
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Rotate*
        name: Rotate
    isDefinition: true
    commentId: Overload:Global.File.Rotate
  Global.File.Extend*:
    name:
      CSharp:
      - id: Global.File.Extend*
        name: Extend
      VB:
      - id: Global.File.Extend*
        name: Extend
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Extend*
        name: Extend
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Extend*
        name: Extend
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Extend*
        name: Extend
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Extend*
        name: Extend
    isDefinition: true
    commentId: Overload:Global.File.Extend
  Global.File.Scale*:
    name:
      CSharp:
      - id: Global.File.Scale*
        name: Scale
      VB:
      - id: Global.File.Scale*
        name: Scale
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Scale*
        name: Scale
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Scale*
        name: Scale
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Scale*
        name: Scale
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.Scale*
        name: Scale
    isDefinition: true
    commentId: Overload:Global.File.Scale
  Global.File.AddTile*:
    name:
      CSharp:
      - id: Global.File.AddTile*
        name: AddTile
      VB:
      - id: Global.File.AddTile*
        name: AddTile
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddTile*
        name: AddTile
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddTile*
        name: AddTile
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddTile*
        name: AddTile
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.AddTile*
        name: AddTile
    isDefinition: true
    commentId: Overload:Global.File.AddTile
  Global.Tile:
    name:
      CSharp:
      - id: Global.Tile
        name: Tile
      VB:
      - id: Global.Tile
        name: Tile
    nameWithType:
      CSharp:
      - id: Global.Tile
        name: Tile
      VB:
      - id: Global.Tile
        name: Tile
    qualifiedName:
      CSharp:
      - id: Global.Tile
        name: Tile
      VB:
      - id: Global.Tile
        name: Tile
    isDefinition: true
    commentId: T:Global.Tile
  Global.File.RemoveTile*:
    name:
      CSharp:
      - id: Global.File.RemoveTile*
        name: RemoveTile
      VB:
      - id: Global.File.RemoveTile*
        name: RemoveTile
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RemoveTile*
        name: RemoveTile
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RemoveTile*
        name: RemoveTile
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RemoveTile*
        name: RemoveTile
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.RemoveTile*
        name: RemoveTile
    isDefinition: true
    commentId: Overload:Global.File.RemoveTile
  Global.File.ContainsTile*:
    name:
      CSharp:
      - id: Global.File.ContainsTile*
        name: ContainsTile
      VB:
      - id: Global.File.ContainsTile*
        name: ContainsTile
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ContainsTile*
        name: ContainsTile
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ContainsTile*
        name: ContainsTile
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ContainsTile*
        name: ContainsTile
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.ContainsTile*
        name: ContainsTile
    isDefinition: true
    commentId: Overload:Global.File.ContainsTile
  Global.UnityAction`3:
    name:
      CSharp:
      - id: Global.UnityAction`3
        name: UnityAction
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.UnityAction`3
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UnityAction`3
        name: UnityAction
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.UnityAction`3
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UnityAction`3
        name: UnityAction
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.UnityAction`3
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    isDefinition: true
    commentId: '!:Global.UnityAction`3'
  Global.UnityAction{IntVector2[],Layer[],System.Int32[]}:
    name:
      CSharp:
      - id: Global.UnityAction`3
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: Global.Layer
        name: Layer
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: '['
      - name: ']'
      - name: '>'
      VB:
      - id: Global.UnityAction`3
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: Global.Layer
        name: Layer
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: (
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UnityAction`3
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: Global.Layer
        name: Layer
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: '['
      - name: ']'
      - name: '>'
      VB:
      - id: Global.UnityAction`3
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: Global.Layer
        name: Layer
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: (
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UnityAction`3
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: Global.Layer
        name: Layer
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: '['
      - name: ']'
      - name: '>'
      VB:
      - id: Global.UnityAction`3
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: Global.Layer
        name: Layer
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: (
      - name: )
      - name: )
    isDefinition: false
    definition: Global.UnityAction`3
    commentId: '!:Global.UnityAction{IntVector2[],Layer[],System.Int32[]}'
  Global.File.SubscribeToOnPixelsChanged*:
    name:
      CSharp:
      - id: Global.File.SubscribeToOnPixelsChanged*
        name: SubscribeToOnPixelsChanged
      VB:
      - id: Global.File.SubscribeToOnPixelsChanged*
        name: SubscribeToOnPixelsChanged
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SubscribeToOnPixelsChanged*
        name: SubscribeToOnPixelsChanged
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SubscribeToOnPixelsChanged*
        name: SubscribeToOnPixelsChanged
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SubscribeToOnPixelsChanged*
        name: SubscribeToOnPixelsChanged
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SubscribeToOnPixelsChanged*
        name: SubscribeToOnPixelsChanged
    isDefinition: true
    commentId: Overload:Global.File.SubscribeToOnPixelsChanged
  Global.File.SubscribeToOnTileAdded*:
    name:
      CSharp:
      - id: Global.File.SubscribeToOnTileAdded*
        name: SubscribeToOnTileAdded
      VB:
      - id: Global.File.SubscribeToOnTileAdded*
        name: SubscribeToOnTileAdded
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SubscribeToOnTileAdded*
        name: SubscribeToOnTileAdded
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SubscribeToOnTileAdded*
        name: SubscribeToOnTileAdded
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SubscribeToOnTileAdded*
        name: SubscribeToOnTileAdded
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SubscribeToOnTileAdded*
        name: SubscribeToOnTileAdded
    isDefinition: true
    commentId: Overload:Global.File.SubscribeToOnTileAdded
  Global.File.SubscribeToOnTileRemoved*:
    name:
      CSharp:
      - id: Global.File.SubscribeToOnTileRemoved*
        name: SubscribeToOnTileRemoved
      VB:
      - id: Global.File.SubscribeToOnTileRemoved*
        name: SubscribeToOnTileRemoved
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SubscribeToOnTileRemoved*
        name: SubscribeToOnTileRemoved
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SubscribeToOnTileRemoved*
        name: SubscribeToOnTileRemoved
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SubscribeToOnTileRemoved*
        name: SubscribeToOnTileRemoved
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SubscribeToOnTileRemoved*
        name: SubscribeToOnTileRemoved
    isDefinition: true
    commentId: Overload:Global.File.SubscribeToOnTileRemoved
  Global.File.SubscribeToOnSavedSinceEditChanged*:
    name:
      CSharp:
      - id: Global.File.SubscribeToOnSavedSinceEditChanged*
        name: SubscribeToOnSavedSinceEditChanged
      VB:
      - id: Global.File.SubscribeToOnSavedSinceEditChanged*
        name: SubscribeToOnSavedSinceEditChanged
    nameWithType:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SubscribeToOnSavedSinceEditChanged*
        name: SubscribeToOnSavedSinceEditChanged
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SubscribeToOnSavedSinceEditChanged*
        name: SubscribeToOnSavedSinceEditChanged
    qualifiedName:
      CSharp:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SubscribeToOnSavedSinceEditChanged*
        name: SubscribeToOnSavedSinceEditChanged
      VB:
      - id: Global.File*
        name: File
      - name: .
      - id: Global.File.SubscribeToOnSavedSinceEditChanged*
        name: SubscribeToOnSavedSinceEditChanged
    isDefinition: true
    commentId: Overload:Global.File.SubscribeToOnSavedSinceEditChanged
  System.Collections.Generic.List{File}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.File
        name: File
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.File
        name: File
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.File
        name: File
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.File
        name: File
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.File
        name: File
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.File
        name: File
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{File}
  Global.FileManager.files*:
    name:
      CSharp:
      - id: Global.FileManager.files*
        name: files
      VB:
      - id: Global.FileManager.files*
        name: files
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.files*
        name: files
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.files*
        name: files
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.files*
        name: files
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.files*
        name: files
    isDefinition: true
    commentId: Overload:Global.FileManager.files
  Global.FileManager.currentFileIndex*:
    name:
      CSharp:
      - id: Global.FileManager.currentFileIndex*
        name: currentFileIndex
      VB:
      - id: Global.FileManager.currentFileIndex*
        name: currentFileIndex
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.currentFileIndex*
        name: currentFileIndex
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.currentFileIndex*
        name: currentFileIndex
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.currentFileIndex*
        name: currentFileIndex
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.currentFileIndex*
        name: currentFileIndex
    isDefinition: true
    commentId: Overload:Global.FileManager.currentFileIndex
  Global.FileManager.currentFile*:
    name:
      CSharp:
      - id: Global.FileManager.currentFile*
        name: currentFile
      VB:
      - id: Global.FileManager.currentFile*
        name: currentFile
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.currentFile*
        name: currentFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.currentFile*
        name: currentFile
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.currentFile*
        name: currentFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.currentFile*
        name: currentFile
    isDefinition: true
    commentId: Overload:Global.FileManager.currentFile
  Global.FileManager.AddFile*:
    name:
      CSharp:
      - id: Global.FileManager.AddFile*
        name: AddFile
      VB:
      - id: Global.FileManager.AddFile*
        name: AddFile
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.AddFile*
        name: AddFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.AddFile*
        name: AddFile
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.AddFile*
        name: AddFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.AddFile*
        name: AddFile
    isDefinition: true
    commentId: Overload:Global.FileManager.AddFile
  Global.FileManager.TryCloseFile*:
    name:
      CSharp:
      - id: Global.FileManager.TryCloseFile*
        name: TryCloseFile
      VB:
      - id: Global.FileManager.TryCloseFile*
        name: TryCloseFile
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.TryCloseFile*
        name: TryCloseFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.TryCloseFile*
        name: TryCloseFile
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.TryCloseFile*
        name: TryCloseFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.TryCloseFile*
        name: TryCloseFile
    isDefinition: true
    commentId: Overload:Global.FileManager.TryCloseFile
  Global.FileManager.CloseFile*:
    name:
      CSharp:
      - id: Global.FileManager.CloseFile*
        name: CloseFile
      VB:
      - id: Global.FileManager.CloseFile*
        name: CloseFile
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.CloseFile*
        name: CloseFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.CloseFile*
        name: CloseFile
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.CloseFile*
        name: CloseFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.CloseFile*
        name: CloseFile
    isDefinition: true
    commentId: Overload:Global.FileManager.CloseFile
  Global.FileManager.NewFile*:
    name:
      CSharp:
      - id: Global.FileManager.NewFile*
        name: NewFile
      VB:
      - id: Global.FileManager.NewFile*
        name: NewFile
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.NewFile*
        name: NewFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.NewFile*
        name: NewFile
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.NewFile*
        name: NewFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.NewFile*
        name: NewFile
    isDefinition: true
    commentId: Overload:Global.FileManager.NewFile
  Global.FileManager.OpenFileDialog*:
    name:
      CSharp:
      - id: Global.FileManager.OpenFileDialog*
        name: OpenFileDialog
      VB:
      - id: Global.FileManager.OpenFileDialog*
        name: OpenFileDialog
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.OpenFileDialog*
        name: OpenFileDialog
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.OpenFileDialog*
        name: OpenFileDialog
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.OpenFileDialog*
        name: OpenFileDialog
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.OpenFileDialog*
        name: OpenFileDialog
    isDefinition: true
    commentId: Overload:Global.FileManager.OpenFileDialog
  Global.FileManager.OpenFile*:
    name:
      CSharp:
      - id: Global.FileManager.OpenFile*
        name: OpenFile
      VB:
      - id: Global.FileManager.OpenFile*
        name: OpenFile
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.OpenFile*
        name: OpenFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.OpenFile*
        name: OpenFile
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.OpenFile*
        name: OpenFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.OpenFile*
        name: OpenFile
    isDefinition: true
    commentId: Overload:Global.FileManager.OpenFile
  Global.FileManager.ImportDialog*:
    name:
      CSharp:
      - id: Global.FileManager.ImportDialog*
        name: ImportDialog
      VB:
      - id: Global.FileManager.ImportDialog*
        name: ImportDialog
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ImportDialog*
        name: ImportDialog
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ImportDialog*
        name: ImportDialog
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ImportDialog*
        name: ImportDialog
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ImportDialog*
        name: ImportDialog
    isDefinition: true
    commentId: Overload:Global.FileManager.ImportDialog
  Global.FileManager.ExportCurrentFrameDialog*:
    name:
      CSharp:
      - id: Global.FileManager.ExportCurrentFrameDialog*
        name: ExportCurrentFrameDialog
      VB:
      - id: Global.FileManager.ExportCurrentFrameDialog*
        name: ExportCurrentFrameDialog
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportCurrentFrameDialog*
        name: ExportCurrentFrameDialog
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportCurrentFrameDialog*
        name: ExportCurrentFrameDialog
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportCurrentFrameDialog*
        name: ExportCurrentFrameDialog
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportCurrentFrameDialog*
        name: ExportCurrentFrameDialog
    isDefinition: true
    commentId: Overload:Global.FileManager.ExportCurrentFrameDialog
  Global.FileManager.ExportCurrentFrame*:
    name:
      CSharp:
      - id: Global.FileManager.ExportCurrentFrame*
        name: ExportCurrentFrame
      VB:
      - id: Global.FileManager.ExportCurrentFrame*
        name: ExportCurrentFrame
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportCurrentFrame*
        name: ExportCurrentFrame
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportCurrentFrame*
        name: ExportCurrentFrame
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportCurrentFrame*
        name: ExportCurrentFrame
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportCurrentFrame*
        name: ExportCurrentFrame
    isDefinition: true
    commentId: Overload:Global.FileManager.ExportCurrentFrame
  Global.FileManager.ExportFrame*:
    name:
      CSharp:
      - id: Global.FileManager.ExportFrame*
        name: ExportFrame
      VB:
      - id: Global.FileManager.ExportFrame*
        name: ExportFrame
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportFrame*
        name: ExportFrame
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportFrame*
        name: ExportFrame
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportFrame*
        name: ExportFrame
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportFrame*
        name: ExportFrame
    isDefinition: true
    commentId: Overload:Global.FileManager.ExportFrame
  Global.FileManager.ExportCurrentAnimationDialog*:
    name:
      CSharp:
      - id: Global.FileManager.ExportCurrentAnimationDialog*
        name: ExportCurrentAnimationDialog
      VB:
      - id: Global.FileManager.ExportCurrentAnimationDialog*
        name: ExportCurrentAnimationDialog
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportCurrentAnimationDialog*
        name: ExportCurrentAnimationDialog
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportCurrentAnimationDialog*
        name: ExportCurrentAnimationDialog
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportCurrentAnimationDialog*
        name: ExportCurrentAnimationDialog
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportCurrentAnimationDialog*
        name: ExportCurrentAnimationDialog
    isDefinition: true
    commentId: Overload:Global.FileManager.ExportCurrentAnimationDialog
  Global.FileManager.ExportCurrentAnimation*:
    name:
      CSharp:
      - id: Global.FileManager.ExportCurrentAnimation*
        name: ExportCurrentAnimation
      VB:
      - id: Global.FileManager.ExportCurrentAnimation*
        name: ExportCurrentAnimation
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportCurrentAnimation*
        name: ExportCurrentAnimation
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportCurrentAnimation*
        name: ExportCurrentAnimation
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportCurrentAnimation*
        name: ExportCurrentAnimation
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportCurrentAnimation*
        name: ExportCurrentAnimation
    isDefinition: true
    commentId: Overload:Global.FileManager.ExportCurrentAnimation
  Global.FileManager.ExportAnimation*:
    name:
      CSharp:
      - id: Global.FileManager.ExportAnimation*
        name: ExportAnimation
      VB:
      - id: Global.FileManager.ExportAnimation*
        name: ExportAnimation
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportAnimation*
        name: ExportAnimation
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportAnimation*
        name: ExportAnimation
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportAnimation*
        name: ExportAnimation
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ExportAnimation*
        name: ExportAnimation
    isDefinition: true
    commentId: Overload:Global.FileManager.ExportAnimation
  Global.FileManager.SaveCurrentFileDialog*:
    name:
      CSharp:
      - id: Global.FileManager.SaveCurrentFileDialog*
        name: SaveCurrentFileDialog
      VB:
      - id: Global.FileManager.SaveCurrentFileDialog*
        name: SaveCurrentFileDialog
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveCurrentFileDialog*
        name: SaveCurrentFileDialog
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveCurrentFileDialog*
        name: SaveCurrentFileDialog
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveCurrentFileDialog*
        name: SaveCurrentFileDialog
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveCurrentFileDialog*
        name: SaveCurrentFileDialog
    isDefinition: true
    commentId: Overload:Global.FileManager.SaveCurrentFileDialog
  Global.FileManager.SaveFileDialog*:
    name:
      CSharp:
      - id: Global.FileManager.SaveFileDialog*
        name: SaveFileDialog
      VB:
      - id: Global.FileManager.SaveFileDialog*
        name: SaveFileDialog
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveFileDialog*
        name: SaveFileDialog
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveFileDialog*
        name: SaveFileDialog
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveFileDialog*
        name: SaveFileDialog
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveFileDialog*
        name: SaveFileDialog
    isDefinition: true
    commentId: Overload:Global.FileManager.SaveFileDialog
  Global.FileManager.SaveAsCurrentFileDialog*:
    name:
      CSharp:
      - id: Global.FileManager.SaveAsCurrentFileDialog*
        name: SaveAsCurrentFileDialog
      VB:
      - id: Global.FileManager.SaveAsCurrentFileDialog*
        name: SaveAsCurrentFileDialog
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveAsCurrentFileDialog*
        name: SaveAsCurrentFileDialog
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveAsCurrentFileDialog*
        name: SaveAsCurrentFileDialog
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveAsCurrentFileDialog*
        name: SaveAsCurrentFileDialog
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveAsCurrentFileDialog*
        name: SaveAsCurrentFileDialog
    isDefinition: true
    commentId: Overload:Global.FileManager.SaveAsCurrentFileDialog
  Global.FileManager.SaveAsFileDialog*:
    name:
      CSharp:
      - id: Global.FileManager.SaveAsFileDialog*
        name: SaveAsFileDialog
      VB:
      - id: Global.FileManager.SaveAsFileDialog*
        name: SaveAsFileDialog
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveAsFileDialog*
        name: SaveAsFileDialog
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveAsFileDialog*
        name: SaveAsFileDialog
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveAsFileDialog*
        name: SaveAsFileDialog
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveAsFileDialog*
        name: SaveAsFileDialog
    isDefinition: true
    commentId: Overload:Global.FileManager.SaveAsFileDialog
  Global.FileManager.SaveAsCurrentFile*:
    name:
      CSharp:
      - id: Global.FileManager.SaveAsCurrentFile*
        name: SaveAsCurrentFile
      VB:
      - id: Global.FileManager.SaveAsCurrentFile*
        name: SaveAsCurrentFile
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveAsCurrentFile*
        name: SaveAsCurrentFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveAsCurrentFile*
        name: SaveAsCurrentFile
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveAsCurrentFile*
        name: SaveAsCurrentFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveAsCurrentFile*
        name: SaveAsCurrentFile
    isDefinition: true
    commentId: Overload:Global.FileManager.SaveAsCurrentFile
  Global.FileManager.SaveAsFile*:
    name:
      CSharp:
      - id: Global.FileManager.SaveAsFile*
        name: SaveAsFile
      VB:
      - id: Global.FileManager.SaveAsFile*
        name: SaveAsFile
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveAsFile*
        name: SaveAsFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveAsFile*
        name: SaveAsFile
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveAsFile*
        name: SaveAsFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SaveAsFile*
        name: SaveAsFile
    isDefinition: true
    commentId: Overload:Global.FileManager.SaveAsFile
  Global.FileManager.ReloadFile*:
    name:
      CSharp:
      - id: Global.FileManager.ReloadFile*
        name: ReloadFile
      VB:
      - id: Global.FileManager.ReloadFile*
        name: ReloadFile
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ReloadFile*
        name: ReloadFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ReloadFile*
        name: ReloadFile
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ReloadFile*
        name: ReloadFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.ReloadFile*
        name: ReloadFile
    isDefinition: true
    commentId: Overload:Global.FileManager.ReloadFile
  Global.FileManager.SwitchToFile*:
    name:
      CSharp:
      - id: Global.FileManager.SwitchToFile*
        name: SwitchToFile
      VB:
      - id: Global.FileManager.SwitchToFile*
        name: SwitchToFile
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SwitchToFile*
        name: SwitchToFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SwitchToFile*
        name: SwitchToFile
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SwitchToFile*
        name: SwitchToFile
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SwitchToFile*
        name: SwitchToFile
    isDefinition: true
    commentId: Overload:Global.FileManager.SwitchToFile
  Global.FileManager.SubscribeToFileSwitched*:
    name:
      CSharp:
      - id: Global.FileManager.SubscribeToFileSwitched*
        name: SubscribeToFileSwitched
      VB:
      - id: Global.FileManager.SubscribeToFileSwitched*
        name: SubscribeToFileSwitched
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SubscribeToFileSwitched*
        name: SubscribeToFileSwitched
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SubscribeToFileSwitched*
        name: SubscribeToFileSwitched
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SubscribeToFileSwitched*
        name: SubscribeToFileSwitched
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SubscribeToFileSwitched*
        name: SubscribeToFileSwitched
    isDefinition: true
    commentId: Overload:Global.FileManager.SubscribeToFileSwitched
  Global.FileManager.SubscribeToFilesChanged*:
    name:
      CSharp:
      - id: Global.FileManager.SubscribeToFilesChanged*
        name: SubscribeToFilesChanged
      VB:
      - id: Global.FileManager.SubscribeToFilesChanged*
        name: SubscribeToFilesChanged
    nameWithType:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SubscribeToFilesChanged*
        name: SubscribeToFilesChanged
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SubscribeToFilesChanged*
        name: SubscribeToFilesChanged
    qualifiedName:
      CSharp:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SubscribeToFilesChanged*
        name: SubscribeToFilesChanged
      VB:
      - id: Global.FileManager*
        name: FileManager
      - name: .
      - id: Global.FileManager.SubscribeToFilesChanged*
        name: SubscribeToFilesChanged
    isDefinition: true
    commentId: Overload:Global.FileManager.SubscribeToFilesChanged
  Global.FileTab.file*:
    name:
      CSharp:
      - id: Global.FileTab.file*
        name: file
      VB:
      - id: Global.FileTab.file*
        name: file
    nameWithType:
      CSharp:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.file*
        name: file
      VB:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.file*
        name: file
    qualifiedName:
      CSharp:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.file*
        name: file
      VB:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.file*
        name: file
    isDefinition: true
    commentId: Overload:Global.FileTab.file
  Global.FileTab.selected*:
    name:
      CSharp:
      - id: Global.FileTab.selected*
        name: selected
      VB:
      - id: Global.FileTab.selected*
        name: selected
    nameWithType:
      CSharp:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.selected*
        name: selected
      VB:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.selected*
        name: selected
    qualifiedName:
      CSharp:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.selected*
        name: selected
      VB:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.selected*
        name: selected
    isDefinition: true
    commentId: Overload:Global.FileTab.selected
  Global.UIToggleButton:
    name:
      CSharp:
      - id: Global.UIToggleButton
        name: UIToggleButton
      VB:
      - id: Global.UIToggleButton
        name: UIToggleButton
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton
        name: UIToggleButton
      VB:
      - id: Global.UIToggleButton
        name: UIToggleButton
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton
        name: UIToggleButton
      VB:
      - id: Global.UIToggleButton
        name: UIToggleButton
    isDefinition: true
    commentId: T:Global.UIToggleButton
  Global.FileTab.tileToggle*:
    name:
      CSharp:
      - id: Global.FileTab.tileToggle*
        name: tileToggle
      VB:
      - id: Global.FileTab.tileToggle*
        name: tileToggle
    nameWithType:
      CSharp:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.tileToggle*
        name: tileToggle
      VB:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.tileToggle*
        name: tileToggle
    qualifiedName:
      CSharp:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.tileToggle*
        name: tileToggle
      VB:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.tileToggle*
        name: tileToggle
    isDefinition: true
    commentId: Overload:Global.FileTab.tileToggle
  Global.FileTab.closed*:
    name:
      CSharp:
      - id: Global.FileTab.closed*
        name: closed
      VB:
      - id: Global.FileTab.closed*
        name: closed
    nameWithType:
      CSharp:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.closed*
        name: closed
      VB:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.closed*
        name: closed
    qualifiedName:
      CSharp:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.closed*
        name: closed
      VB:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.closed*
        name: closed
    isDefinition: true
    commentId: Overload:Global.FileTab.closed
  Global.FileTab.SetFile*:
    name:
      CSharp:
      - id: Global.FileTab.SetFile*
        name: SetFile
      VB:
      - id: Global.FileTab.SetFile*
        name: SetFile
    nameWithType:
      CSharp:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.SetFile*
        name: SetFile
      VB:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.SetFile*
        name: SetFile
    qualifiedName:
      CSharp:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.SetFile*
        name: SetFile
      VB:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.SetFile*
        name: SetFile
    isDefinition: true
    commentId: Overload:Global.FileTab.SetFile
  Global.FileTab.SubscribeToSelect*:
    name:
      CSharp:
      - id: Global.FileTab.SubscribeToSelect*
        name: SubscribeToSelect
      VB:
      - id: Global.FileTab.SubscribeToSelect*
        name: SubscribeToSelect
    nameWithType:
      CSharp:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.SubscribeToSelect*
        name: SubscribeToSelect
      VB:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.SubscribeToSelect*
        name: SubscribeToSelect
    qualifiedName:
      CSharp:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.SubscribeToSelect*
        name: SubscribeToSelect
      VB:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.SubscribeToSelect*
        name: SubscribeToSelect
    isDefinition: true
    commentId: Overload:Global.FileTab.SubscribeToSelect
  Global.FileTab.SubscribeToClose*:
    name:
      CSharp:
      - id: Global.FileTab.SubscribeToClose*
        name: SubscribeToClose
      VB:
      - id: Global.FileTab.SubscribeToClose*
        name: SubscribeToClose
    nameWithType:
      CSharp:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.SubscribeToClose*
        name: SubscribeToClose
      VB:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.SubscribeToClose*
        name: SubscribeToClose
    qualifiedName:
      CSharp:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.SubscribeToClose*
        name: SubscribeToClose
      VB:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.SubscribeToClose*
        name: SubscribeToClose
    isDefinition: true
    commentId: Overload:Global.FileTab.SubscribeToClose
  Global.FileTab.SubscribeToNameChange*:
    name:
      CSharp:
      - id: Global.FileTab.SubscribeToNameChange*
        name: SubscribeToNameChange
      VB:
      - id: Global.FileTab.SubscribeToNameChange*
        name: SubscribeToNameChange
    nameWithType:
      CSharp:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.SubscribeToNameChange*
        name: SubscribeToNameChange
      VB:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.SubscribeToNameChange*
        name: SubscribeToNameChange
    qualifiedName:
      CSharp:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.SubscribeToNameChange*
        name: SubscribeToNameChange
      VB:
      - id: Global.FileTab*
        name: FileTab
      - name: .
      - id: Global.FileTab.SubscribeToNameChange*
        name: SubscribeToNameChange
    isDefinition: true
    commentId: Overload:Global.FileTab.SubscribeToNameChange
  Global.FileTab:
    name:
      CSharp:
      - id: Global.FileTab
        name: FileTab
      VB:
      - id: Global.FileTab
        name: FileTab
    nameWithType:
      CSharp:
      - id: Global.FileTab
        name: FileTab
      VB:
      - id: Global.FileTab
        name: FileTab
    qualifiedName:
      CSharp:
      - id: Global.FileTab
        name: FileTab
      VB:
      - id: Global.FileTab
        name: FileTab
    isDefinition: true
    commentId: T:Global.FileTab
  Global.FileTabsManager.selectedFileIndex*:
    name:
      CSharp:
      - id: Global.FileTabsManager.selectedFileIndex*
        name: selectedFileIndex
      VB:
      - id: Global.FileTabsManager.selectedFileIndex*
        name: selectedFileIndex
    nameWithType:
      CSharp:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.selectedFileIndex*
        name: selectedFileIndex
      VB:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.selectedFileIndex*
        name: selectedFileIndex
    qualifiedName:
      CSharp:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.selectedFileIndex*
        name: selectedFileIndex
      VB:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.selectedFileIndex*
        name: selectedFileIndex
    isDefinition: true
    commentId: Overload:Global.FileTabsManager.selectedFileIndex
  Global.FileTabsManager.selectedFile*:
    name:
      CSharp:
      - id: Global.FileTabsManager.selectedFile*
        name: selectedFile
      VB:
      - id: Global.FileTabsManager.selectedFile*
        name: selectedFile
    nameWithType:
      CSharp:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.selectedFile*
        name: selectedFile
      VB:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.selectedFile*
        name: selectedFile
    qualifiedName:
      CSharp:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.selectedFile*
        name: selectedFile
      VB:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.selectedFile*
        name: selectedFile
    isDefinition: true
    commentId: Overload:Global.FileTabsManager.selectedFile
  Global.FileTabsManager.OnFilesChanged*:
    name:
      CSharp:
      - id: Global.FileTabsManager.OnFilesChanged*
        name: OnFilesChanged
      VB:
      - id: Global.FileTabsManager.OnFilesChanged*
        name: OnFilesChanged
    nameWithType:
      CSharp:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.OnFilesChanged*
        name: OnFilesChanged
      VB:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.OnFilesChanged*
        name: OnFilesChanged
    qualifiedName:
      CSharp:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.OnFilesChanged*
        name: OnFilesChanged
      VB:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.OnFilesChanged*
        name: OnFilesChanged
    isDefinition: true
    commentId: Overload:Global.FileTabsManager.OnFilesChanged
  Global.FileTabsManager.SelectFile*:
    name:
      CSharp:
      - id: Global.FileTabsManager.SelectFile*
        name: SelectFile
      VB:
      - id: Global.FileTabsManager.SelectFile*
        name: SelectFile
    nameWithType:
      CSharp:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.SelectFile*
        name: SelectFile
      VB:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.SelectFile*
        name: SelectFile
    qualifiedName:
      CSharp:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.SelectFile*
        name: SelectFile
      VB:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.SelectFile*
        name: SelectFile
    isDefinition: true
    commentId: Overload:Global.FileTabsManager.SelectFile
  Global.FileTabsManager.CloseFile*:
    name:
      CSharp:
      - id: Global.FileTabsManager.CloseFile*
        name: CloseFile
      VB:
      - id: Global.FileTabsManager.CloseFile*
        name: CloseFile
    nameWithType:
      CSharp:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.CloseFile*
        name: CloseFile
      VB:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.CloseFile*
        name: CloseFile
    qualifiedName:
      CSharp:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.CloseFile*
        name: CloseFile
      VB:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.CloseFile*
        name: CloseFile
    isDefinition: true
    commentId: Overload:Global.FileTabsManager.CloseFile
  Global.FileTabsManager.SubscribeToOnFilesChanged*:
    name:
      CSharp:
      - id: Global.FileTabsManager.SubscribeToOnFilesChanged*
        name: SubscribeToOnFilesChanged
      VB:
      - id: Global.FileTabsManager.SubscribeToOnFilesChanged*
        name: SubscribeToOnFilesChanged
    nameWithType:
      CSharp:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.SubscribeToOnFilesChanged*
        name: SubscribeToOnFilesChanged
      VB:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.SubscribeToOnFilesChanged*
        name: SubscribeToOnFilesChanged
    qualifiedName:
      CSharp:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.SubscribeToOnFilesChanged*
        name: SubscribeToOnFilesChanged
      VB:
      - id: Global.FileTabsManager*
        name: FileTabsManager
      - name: .
      - id: Global.FileTabsManager.SubscribeToOnFilesChanged*
        name: SubscribeToOnFilesChanged
    isDefinition: true
    commentId: Overload:Global.FileTabsManager.SubscribeToOnFilesChanged
  Global.ImageEditManager.FlipSelectedLayers*:
    name:
      CSharp:
      - id: Global.ImageEditManager.FlipSelectedLayers*
        name: FlipSelectedLayers
      VB:
      - id: Global.ImageEditManager.FlipSelectedLayers*
        name: FlipSelectedLayers
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipSelectedLayers*
        name: FlipSelectedLayers
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipSelectedLayers*
        name: FlipSelectedLayers
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipSelectedLayers*
        name: FlipSelectedLayers
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipSelectedLayers*
        name: FlipSelectedLayers
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.FlipSelectedLayers
  Global.ImageEditManager.FlipSelectedLayersX*:
    name:
      CSharp:
      - id: Global.ImageEditManager.FlipSelectedLayersX*
        name: FlipSelectedLayersX
      VB:
      - id: Global.ImageEditManager.FlipSelectedLayersX*
        name: FlipSelectedLayersX
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipSelectedLayersX*
        name: FlipSelectedLayersX
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipSelectedLayersX*
        name: FlipSelectedLayersX
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipSelectedLayersX*
        name: FlipSelectedLayersX
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipSelectedLayersX*
        name: FlipSelectedLayersX
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.FlipSelectedLayersX
  Global.ImageEditManager.FlipSelectedLayersY*:
    name:
      CSharp:
      - id: Global.ImageEditManager.FlipSelectedLayersY*
        name: FlipSelectedLayersY
      VB:
      - id: Global.ImageEditManager.FlipSelectedLayersY*
        name: FlipSelectedLayersY
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipSelectedLayersY*
        name: FlipSelectedLayersY
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipSelectedLayersY*
        name: FlipSelectedLayersY
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipSelectedLayersY*
        name: FlipSelectedLayersY
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipSelectedLayersY*
        name: FlipSelectedLayersY
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.FlipSelectedLayersY
  Global.ImageEditManager.FlipFile*:
    name:
      CSharp:
      - id: Global.ImageEditManager.FlipFile*
        name: FlipFile
      VB:
      - id: Global.ImageEditManager.FlipFile*
        name: FlipFile
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipFile*
        name: FlipFile
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipFile*
        name: FlipFile
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipFile*
        name: FlipFile
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipFile*
        name: FlipFile
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.FlipFile
  Global.ImageEditManager.FlipFileX*:
    name:
      CSharp:
      - id: Global.ImageEditManager.FlipFileX*
        name: FlipFileX
      VB:
      - id: Global.ImageEditManager.FlipFileX*
        name: FlipFileX
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipFileX*
        name: FlipFileX
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipFileX*
        name: FlipFileX
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipFileX*
        name: FlipFileX
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipFileX*
        name: FlipFileX
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.FlipFileX
  Global.ImageEditManager.FlipFileY*:
    name:
      CSharp:
      - id: Global.ImageEditManager.FlipFileY*
        name: FlipFileY
      VB:
      - id: Global.ImageEditManager.FlipFileY*
        name: FlipFileY
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipFileY*
        name: FlipFileY
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipFileY*
        name: FlipFileY
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipFileY*
        name: FlipFileY
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.FlipFileY*
        name: FlipFileY
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.FlipFileY
  Global.ImageEditManager.RotateFile*:
    name:
      CSharp:
      - id: Global.ImageEditManager.RotateFile*
        name: RotateFile
      VB:
      - id: Global.ImageEditManager.RotateFile*
        name: RotateFile
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateFile*
        name: RotateFile
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateFile*
        name: RotateFile
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateFile*
        name: RotateFile
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateFile*
        name: RotateFile
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.RotateFile
  Global.ImageEditManager.RotateSelectedLayers*:
    name:
      CSharp:
      - id: Global.ImageEditManager.RotateSelectedLayers*
        name: RotateSelectedLayers
      VB:
      - id: Global.ImageEditManager.RotateSelectedLayers*
        name: RotateSelectedLayers
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateSelectedLayers*
        name: RotateSelectedLayers
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateSelectedLayers*
        name: RotateSelectedLayers
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateSelectedLayers*
        name: RotateSelectedLayers
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateSelectedLayers*
        name: RotateSelectedLayers
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.RotateSelectedLayers
  Global.ImageEditManager.RotateSelectedLayers90*:
    name:
      CSharp:
      - id: Global.ImageEditManager.RotateSelectedLayers90*
        name: RotateSelectedLayers90
      VB:
      - id: Global.ImageEditManager.RotateSelectedLayers90*
        name: RotateSelectedLayers90
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateSelectedLayers90*
        name: RotateSelectedLayers90
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateSelectedLayers90*
        name: RotateSelectedLayers90
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateSelectedLayers90*
        name: RotateSelectedLayers90
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateSelectedLayers90*
        name: RotateSelectedLayers90
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.RotateSelectedLayers90
  Global.ImageEditManager.RotateSelectedLayersMinus90*:
    name:
      CSharp:
      - id: Global.ImageEditManager.RotateSelectedLayersMinus90*
        name: RotateSelectedLayersMinus90
      VB:
      - id: Global.ImageEditManager.RotateSelectedLayersMinus90*
        name: RotateSelectedLayersMinus90
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateSelectedLayersMinus90*
        name: RotateSelectedLayersMinus90
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateSelectedLayersMinus90*
        name: RotateSelectedLayersMinus90
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateSelectedLayersMinus90*
        name: RotateSelectedLayersMinus90
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateSelectedLayersMinus90*
        name: RotateSelectedLayersMinus90
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.RotateSelectedLayersMinus90
  Global.ImageEditManager.RotateSelectedLayers180*:
    name:
      CSharp:
      - id: Global.ImageEditManager.RotateSelectedLayers180*
        name: RotateSelectedLayers180
      VB:
      - id: Global.ImageEditManager.RotateSelectedLayers180*
        name: RotateSelectedLayers180
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateSelectedLayers180*
        name: RotateSelectedLayers180
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateSelectedLayers180*
        name: RotateSelectedLayers180
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateSelectedLayers180*
        name: RotateSelectedLayers180
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.RotateSelectedLayers180*
        name: RotateSelectedLayers180
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.RotateSelectedLayers180
  Global.ImageEditManager.ExtendFile*:
    name:
      CSharp:
      - id: Global.ImageEditManager.ExtendFile*
        name: ExtendFile
      VB:
      - id: Global.ImageEditManager.ExtendFile*
        name: ExtendFile
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFile*
        name: ExtendFile
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFile*
        name: ExtendFile
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFile*
        name: ExtendFile
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFile*
        name: ExtendFile
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.ExtendFile
  Global.ImageEditManager.ExtendFileLeft*:
    name:
      CSharp:
      - id: Global.ImageEditManager.ExtendFileLeft*
        name: ExtendFileLeft
      VB:
      - id: Global.ImageEditManager.ExtendFileLeft*
        name: ExtendFileLeft
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFileLeft*
        name: ExtendFileLeft
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFileLeft*
        name: ExtendFileLeft
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFileLeft*
        name: ExtendFileLeft
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFileLeft*
        name: ExtendFileLeft
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.ExtendFileLeft
  Global.ImageEditManager.ExtendFileRight*:
    name:
      CSharp:
      - id: Global.ImageEditManager.ExtendFileRight*
        name: ExtendFileRight
      VB:
      - id: Global.ImageEditManager.ExtendFileRight*
        name: ExtendFileRight
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFileRight*
        name: ExtendFileRight
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFileRight*
        name: ExtendFileRight
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFileRight*
        name: ExtendFileRight
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFileRight*
        name: ExtendFileRight
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.ExtendFileRight
  Global.ImageEditManager.ExtendFileUp*:
    name:
      CSharp:
      - id: Global.ImageEditManager.ExtendFileUp*
        name: ExtendFileUp
      VB:
      - id: Global.ImageEditManager.ExtendFileUp*
        name: ExtendFileUp
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFileUp*
        name: ExtendFileUp
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFileUp*
        name: ExtendFileUp
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFileUp*
        name: ExtendFileUp
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFileUp*
        name: ExtendFileUp
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.ExtendFileUp
  Global.ImageEditManager.ExtendFileDown*:
    name:
      CSharp:
      - id: Global.ImageEditManager.ExtendFileDown*
        name: ExtendFileDown
      VB:
      - id: Global.ImageEditManager.ExtendFileDown*
        name: ExtendFileDown
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFileDown*
        name: ExtendFileDown
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFileDown*
        name: ExtendFileDown
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFileDown*
        name: ExtendFileDown
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ExtendFileDown*
        name: ExtendFileDown
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.ExtendFileDown
  Global.ImageEditManager.ScaleFile*:
    name:
      CSharp:
      - id: Global.ImageEditManager.ScaleFile*
        name: ScaleFile
      VB:
      - id: Global.ImageEditManager.ScaleFile*
        name: ScaleFile
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ScaleFile*
        name: ScaleFile
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ScaleFile*
        name: ScaleFile
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ScaleFile*
        name: ScaleFile
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.ScaleFile*
        name: ScaleFile
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.ScaleFile
  Global.ImageEditManager.SubscribeToEdit*:
    name:
      CSharp:
      - id: Global.ImageEditManager.SubscribeToEdit*
        name: SubscribeToEdit
      VB:
      - id: Global.ImageEditManager.SubscribeToEdit*
        name: SubscribeToEdit
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.SubscribeToEdit*
        name: SubscribeToEdit
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.SubscribeToEdit*
        name: SubscribeToEdit
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.SubscribeToEdit*
        name: SubscribeToEdit
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.SubscribeToEdit*
        name: SubscribeToEdit
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.SubscribeToEdit
  Global.ImageEditManager.SubscribeToImageSizeChanged*:
    name:
      CSharp:
      - id: Global.ImageEditManager.SubscribeToImageSizeChanged*
        name: SubscribeToImageSizeChanged
      VB:
      - id: Global.ImageEditManager.SubscribeToImageSizeChanged*
        name: SubscribeToImageSizeChanged
    nameWithType:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.SubscribeToImageSizeChanged*
        name: SubscribeToImageSizeChanged
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.SubscribeToImageSizeChanged*
        name: SubscribeToImageSizeChanged
    qualifiedName:
      CSharp:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.SubscribeToImageSizeChanged*
        name: SubscribeToImageSizeChanged
      VB:
      - id: Global.ImageEditManager*
        name: ImageEditManager
      - name: .
      - id: Global.ImageEditManager.SubscribeToImageSizeChanged*
        name: SubscribeToImageSizeChanged
    isDefinition: true
    commentId: Overload:Global.ImageEditManager.SubscribeToImageSizeChanged
  Global.InputSystem.mouse*:
    name:
      CSharp:
      - id: Global.InputSystem.mouse*
        name: mouse
      VB:
      - id: Global.InputSystem.mouse*
        name: mouse
    nameWithType:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.mouse*
        name: mouse
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.mouse*
        name: mouse
    qualifiedName:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.mouse*
        name: mouse
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.mouse*
        name: mouse
    isDefinition: true
    commentId: Overload:Global.InputSystem.mouse
  Global.InputSystem.keyboard*:
    name:
      CSharp:
      - id: Global.InputSystem.keyboard*
        name: keyboard
      VB:
      - id: Global.InputSystem.keyboard*
        name: keyboard
    nameWithType:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.keyboard*
        name: keyboard
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.keyboard*
        name: keyboard
    qualifiedName:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.keyboard*
        name: keyboard
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.keyboard*
        name: keyboard
    isDefinition: true
    commentId: Overload:Global.InputSystem.keyboard
  Global.InputTarget:
    name:
      CSharp:
      - id: Global.InputTarget
        name: InputTarget
      VB:
      - id: Global.InputTarget
        name: InputTarget
    nameWithType:
      CSharp:
      - id: Global.InputTarget
        name: InputTarget
      VB:
      - id: Global.InputTarget
        name: InputTarget
    qualifiedName:
      CSharp:
      - id: Global.InputTarget
        name: InputTarget
      VB:
      - id: Global.InputTarget
        name: InputTarget
    isDefinition: true
    commentId: T:Global.InputTarget
  Global.InputSystem.inputTarget*:
    name:
      CSharp:
      - id: Global.InputSystem.inputTarget*
        name: inputTarget
      VB:
      - id: Global.InputSystem.inputTarget*
        name: inputTarget
    nameWithType:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.inputTarget*
        name: inputTarget
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.inputTarget*
        name: inputTarget
    qualifiedName:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.inputTarget*
        name: inputTarget
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.inputTarget*
        name: inputTarget
    isDefinition: true
    commentId: Overload:Global.InputSystem.inputTarget
  Global.InputSystem.hasInputTarget*:
    name:
      CSharp:
      - id: Global.InputSystem.hasInputTarget*
        name: hasInputTarget
      VB:
      - id: Global.InputSystem.hasInputTarget*
        name: hasInputTarget
    nameWithType:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.hasInputTarget*
        name: hasInputTarget
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.hasInputTarget*
        name: hasInputTarget
    qualifiedName:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.hasInputTarget*
        name: hasInputTarget
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.hasInputTarget*
        name: hasInputTarget
    isDefinition: true
    commentId: Overload:Global.InputSystem.hasInputTarget
  Global.InputSystem.globalInputTarget*:
    name:
      CSharp:
      - id: Global.InputSystem.globalInputTarget*
        name: globalInputTarget
      VB:
      - id: Global.InputSystem.globalInputTarget*
        name: globalInputTarget
    nameWithType:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.globalInputTarget*
        name: globalInputTarget
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.globalInputTarget*
        name: globalInputTarget
    qualifiedName:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.globalInputTarget*
        name: globalInputTarget
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.globalInputTarget*
        name: globalInputTarget
    isDefinition: true
    commentId: Overload:Global.InputSystem.globalInputTarget
  Global.MouseTarget:
    name:
      CSharp:
      - id: Global.MouseTarget
        name: MouseTarget
      VB:
      - id: Global.MouseTarget
        name: MouseTarget
    nameWithType:
      CSharp:
      - id: Global.MouseTarget
        name: MouseTarget
      VB:
      - id: Global.MouseTarget
        name: MouseTarget
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget
        name: MouseTarget
      VB:
      - id: Global.MouseTarget
        name: MouseTarget
    isDefinition: true
    commentId: T:Global.MouseTarget
  Global.InputSystem.globalMouseTarget*:
    name:
      CSharp:
      - id: Global.InputSystem.globalMouseTarget*
        name: globalMouseTarget
      VB:
      - id: Global.InputSystem.globalMouseTarget*
        name: globalMouseTarget
    nameWithType:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.globalMouseTarget*
        name: globalMouseTarget
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.globalMouseTarget*
        name: globalMouseTarget
    qualifiedName:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.globalMouseTarget*
        name: globalMouseTarget
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.globalMouseTarget*
        name: globalMouseTarget
    isDefinition: true
    commentId: Overload:Global.InputSystem.globalMouseTarget
  Global.KeyboardTarget:
    name:
      CSharp:
      - id: Global.KeyboardTarget
        name: KeyboardTarget
      VB:
      - id: Global.KeyboardTarget
        name: KeyboardTarget
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget
        name: KeyboardTarget
      VB:
      - id: Global.KeyboardTarget
        name: KeyboardTarget
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget
        name: KeyboardTarget
      VB:
      - id: Global.KeyboardTarget
        name: KeyboardTarget
    isDefinition: true
    commentId: T:Global.KeyboardTarget
  Global.InputSystem.globalKeyboardTarget*:
    name:
      CSharp:
      - id: Global.InputSystem.globalKeyboardTarget*
        name: globalKeyboardTarget
      VB:
      - id: Global.InputSystem.globalKeyboardTarget*
        name: globalKeyboardTarget
    nameWithType:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.globalKeyboardTarget*
        name: globalKeyboardTarget
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.globalKeyboardTarget*
        name: globalKeyboardTarget
    qualifiedName:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.globalKeyboardTarget*
        name: globalKeyboardTarget
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.globalKeyboardTarget*
        name: globalKeyboardTarget
    isDefinition: true
    commentId: Overload:Global.InputSystem.globalKeyboardTarget
  Global.InputSystem.Target*:
    name:
      CSharp:
      - id: Global.InputSystem.Target*
        name: Target
      VB:
      - id: Global.InputSystem.Target*
        name: Target
    nameWithType:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.Target*
        name: Target
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.Target*
        name: Target
    qualifiedName:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.Target*
        name: Target
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.Target*
        name: Target
    isDefinition: true
    commentId: Overload:Global.InputSystem.Target
  Global.InputSystem.Untarget*:
    name:
      CSharp:
      - id: Global.InputSystem.Untarget*
        name: Untarget
      VB:
      - id: Global.InputSystem.Untarget*
        name: Untarget
    nameWithType:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.Untarget*
        name: Untarget
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.Untarget*
        name: Untarget
    qualifiedName:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.Untarget*
        name: Untarget
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.Untarget*
        name: Untarget
    isDefinition: true
    commentId: Overload:Global.InputSystem.Untarget
  Global.InputSystem.LockForAFrame*:
    name:
      CSharp:
      - id: Global.InputSystem.LockForAFrame*
        name: LockForAFrame
      VB:
      - id: Global.InputSystem.LockForAFrame*
        name: LockForAFrame
    nameWithType:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.LockForAFrame*
        name: LockForAFrame
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.LockForAFrame*
        name: LockForAFrame
    qualifiedName:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.LockForAFrame*
        name: LockForAFrame
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.LockForAFrame*
        name: LockForAFrame
    isDefinition: true
    commentId: Overload:Global.InputSystem.LockForAFrame
  Global.InputSystem.SubscribeToGlobalKeyboard*:
    name:
      CSharp:
      - id: Global.InputSystem.SubscribeToGlobalKeyboard*
        name: SubscribeToGlobalKeyboard
      VB:
      - id: Global.InputSystem.SubscribeToGlobalKeyboard*
        name: SubscribeToGlobalKeyboard
    nameWithType:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.SubscribeToGlobalKeyboard*
        name: SubscribeToGlobalKeyboard
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.SubscribeToGlobalKeyboard*
        name: SubscribeToGlobalKeyboard
    qualifiedName:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.SubscribeToGlobalKeyboard*
        name: SubscribeToGlobalKeyboard
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.SubscribeToGlobalKeyboard*
        name: SubscribeToGlobalKeyboard
    isDefinition: true
    commentId: Overload:Global.InputSystem.SubscribeToGlobalKeyboard
  Global.InputSystem.SubscribeToGlobalMouseScroll*:
    name:
      CSharp:
      - id: Global.InputSystem.SubscribeToGlobalMouseScroll*
        name: SubscribeToGlobalMouseScroll
      VB:
      - id: Global.InputSystem.SubscribeToGlobalMouseScroll*
        name: SubscribeToGlobalMouseScroll
    nameWithType:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.SubscribeToGlobalMouseScroll*
        name: SubscribeToGlobalMouseScroll
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.SubscribeToGlobalMouseScroll*
        name: SubscribeToGlobalMouseScroll
    qualifiedName:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.SubscribeToGlobalMouseScroll*
        name: SubscribeToGlobalMouseScroll
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.SubscribeToGlobalMouseScroll*
        name: SubscribeToGlobalMouseScroll
    isDefinition: true
    commentId: Overload:Global.InputSystem.SubscribeToGlobalMouseScroll
  Global.InputSystem.SubscribeToGlobalLeftClick*:
    name:
      CSharp:
      - id: Global.InputSystem.SubscribeToGlobalLeftClick*
        name: SubscribeToGlobalLeftClick
      VB:
      - id: Global.InputSystem.SubscribeToGlobalLeftClick*
        name: SubscribeToGlobalLeftClick
    nameWithType:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.SubscribeToGlobalLeftClick*
        name: SubscribeToGlobalLeftClick
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.SubscribeToGlobalLeftClick*
        name: SubscribeToGlobalLeftClick
    qualifiedName:
      CSharp:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.SubscribeToGlobalLeftClick*
        name: SubscribeToGlobalLeftClick
      VB:
      - id: Global.InputSystem*
        name: InputSystem
      - name: .
      - id: Global.InputSystem.SubscribeToGlobalLeftClick*
        name: SubscribeToGlobalLeftClick
    isDefinition: true
    commentId: Overload:Global.InputSystem.SubscribeToGlobalLeftClick
  Global.UIElement:
    name:
      CSharp:
      - id: Global.UIElement
        name: UIElement
      VB:
      - id: Global.UIElement
        name: UIElement
    nameWithType:
      CSharp:
      - id: Global.UIElement
        name: UIElement
      VB:
      - id: Global.UIElement
        name: UIElement
    qualifiedName:
      CSharp:
      - id: Global.UIElement
        name: UIElement
      VB:
      - id: Global.UIElement
        name: UIElement
    isDefinition: true
    commentId: T:Global.UIElement
  Global.InputTarget.targetName*:
    name:
      CSharp:
      - id: Global.InputTarget.targetName*
        name: targetName
      VB:
      - id: Global.InputTarget.targetName*
        name: targetName
    nameWithType:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.targetName*
        name: targetName
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.targetName*
        name: targetName
    qualifiedName:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.targetName*
        name: targetName
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.targetName*
        name: targetName
    isDefinition: true
    commentId: Overload:Global.InputTarget.targetName
  Global.InputTarget.targetTag*:
    name:
      CSharp:
      - id: Global.InputTarget.targetTag*
        name: targetTag
      VB:
      - id: Global.InputTarget.targetTag*
        name: targetTag
    nameWithType:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.targetTag*
        name: targetTag
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.targetTag*
        name: targetTag
    qualifiedName:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.targetTag*
        name: targetTag
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.targetTag*
        name: targetTag
    isDefinition: true
    commentId: Overload:Global.InputTarget.targetTag
  Global.CursorState:
    name:
      CSharp:
      - id: Global.CursorState
        name: CursorState
      VB:
      - id: Global.CursorState
        name: CursorState
    nameWithType:
      CSharp:
      - id: Global.CursorState
        name: CursorState
      VB:
      - id: Global.CursorState
        name: CursorState
    qualifiedName:
      CSharp:
      - id: Global.CursorState
        name: CursorState
      VB:
      - id: Global.CursorState
        name: CursorState
    isDefinition: true
    commentId: T:Global.CursorState
  Global.InputTarget.cursorScroll*:
    name:
      CSharp:
      - id: Global.InputTarget.cursorScroll*
        name: cursorScroll
      VB:
      - id: Global.InputTarget.cursorScroll*
        name: cursorScroll
    nameWithType:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.cursorScroll*
        name: cursorScroll
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.cursorScroll*
        name: cursorScroll
    qualifiedName:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.cursorScroll*
        name: cursorScroll
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.cursorScroll*
        name: cursorScroll
    isDefinition: true
    commentId: Overload:Global.InputTarget.cursorScroll
  Global.InputTarget.mouseTarget*:
    name:
      CSharp:
      - id: Global.InputTarget.mouseTarget*
        name: mouseTarget
      VB:
      - id: Global.InputTarget.mouseTarget*
        name: mouseTarget
    nameWithType:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.mouseTarget*
        name: mouseTarget
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.mouseTarget*
        name: mouseTarget
    qualifiedName:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.mouseTarget*
        name: mouseTarget
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.mouseTarget*
        name: mouseTarget
    isDefinition: true
    commentId: Overload:Global.InputTarget.mouseTarget
  Global.InputTarget.keyboardTarget*:
    name:
      CSharp:
      - id: Global.InputTarget.keyboardTarget*
        name: keyboardTarget
      VB:
      - id: Global.InputTarget.keyboardTarget*
        name: keyboardTarget
    nameWithType:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.keyboardTarget*
        name: keyboardTarget
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.keyboardTarget*
        name: keyboardTarget
    qualifiedName:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.keyboardTarget*
        name: keyboardTarget
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.keyboardTarget*
        name: keyboardTarget
    isDefinition: true
    commentId: Overload:Global.InputTarget.keyboardTarget
  Global.UIViewport:
    name:
      CSharp:
      - id: Global.UIViewport
        name: UIViewport
      VB:
      - id: Global.UIViewport
        name: UIViewport
    nameWithType:
      CSharp:
      - id: Global.UIViewport
        name: UIViewport
      VB:
      - id: Global.UIViewport
        name: UIViewport
    qualifiedName:
      CSharp:
      - id: Global.UIViewport
        name: UIViewport
      VB:
      - id: Global.UIViewport
        name: UIViewport
    isDefinition: true
    commentId: T:Global.UIViewport
  Global.Collider2D:
    name:
      CSharp:
      - id: Global.Collider2D
        name: Collider2D
        isExternal: true
      VB:
      - id: Global.Collider2D
        name: Collider2D
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Collider2D
        name: Collider2D
        isExternal: true
      VB:
      - id: Global.Collider2D
        name: Collider2D
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Collider2D
        name: Collider2D
        isExternal: true
      VB:
      - id: Global.Collider2D
        name: Collider2D
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Collider2D'
  Global.InputTarget.collider*:
    name:
      CSharp:
      - id: Global.InputTarget.collider*
        name: collider
      VB:
      - id: Global.InputTarget.collider*
        name: collider
    nameWithType:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.collider*
        name: collider
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.collider*
        name: collider
    qualifiedName:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.collider*
        name: collider
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.collider*
        name: collider
    isDefinition: true
    commentId: Overload:Global.InputTarget.collider
  Global.InputTarget.Target*:
    name:
      CSharp:
      - id: Global.InputTarget.Target*
        name: Target
      VB:
      - id: Global.InputTarget.Target*
        name: Target
    nameWithType:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.Target*
        name: Target
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.Target*
        name: Target
    qualifiedName:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.Target*
        name: Target
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.Target*
        name: Target
    isDefinition: true
    commentId: Overload:Global.InputTarget.Target
  Global.InputTarget.Untarget*:
    name:
      CSharp:
      - id: Global.InputTarget.Untarget*
        name: Untarget
      VB:
      - id: Global.InputTarget.Untarget*
        name: Untarget
    nameWithType:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.Untarget*
        name: Untarget
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.Untarget*
        name: Untarget
    qualifiedName:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.Untarget*
        name: Untarget
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.Untarget*
        name: Untarget
    isDefinition: true
    commentId: Overload:Global.InputTarget.Untarget
  Global.InputTarget.GetUntargeted*:
    name:
      CSharp:
      - id: Global.InputTarget.GetUntargeted*
        name: GetUntargeted
      VB:
      - id: Global.InputTarget.GetUntargeted*
        name: GetUntargeted
    nameWithType:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.GetUntargeted*
        name: GetUntargeted
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.GetUntargeted*
        name: GetUntargeted
    qualifiedName:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.GetUntargeted*
        name: GetUntargeted
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.GetUntargeted*
        name: GetUntargeted
    isDefinition: true
    commentId: Overload:Global.InputTarget.GetUntargeted
  Global.InputTarget.SubscribeToTarget*:
    name:
      CSharp:
      - id: Global.InputTarget.SubscribeToTarget*
        name: SubscribeToTarget
      VB:
      - id: Global.InputTarget.SubscribeToTarget*
        name: SubscribeToTarget
    nameWithType:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.SubscribeToTarget*
        name: SubscribeToTarget
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.SubscribeToTarget*
        name: SubscribeToTarget
    qualifiedName:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.SubscribeToTarget*
        name: SubscribeToTarget
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.SubscribeToTarget*
        name: SubscribeToTarget
    isDefinition: true
    commentId: Overload:Global.InputTarget.SubscribeToTarget
  Global.InputTarget.SubscribeToUntarget*:
    name:
      CSharp:
      - id: Global.InputTarget.SubscribeToUntarget*
        name: SubscribeToUntarget
      VB:
      - id: Global.InputTarget.SubscribeToUntarget*
        name: SubscribeToUntarget
    nameWithType:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.SubscribeToUntarget*
        name: SubscribeToUntarget
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.SubscribeToUntarget*
        name: SubscribeToUntarget
    qualifiedName:
      CSharp:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.SubscribeToUntarget*
        name: SubscribeToUntarget
      VB:
      - id: Global.InputTarget*
        name: InputTarget
      - name: .
      - id: Global.InputTarget.SubscribeToUntarget*
        name: SubscribeToUntarget
    isDefinition: true
    commentId: Overload:Global.InputTarget.SubscribeToUntarget
  Global.CustomKeyCode[]:
    name:
      CSharp:
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      - name: '['
      - name: ']'
      VB:
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      - name: '['
      - name: ']'
      VB:
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      - name: '['
      - name: ']'
      VB:
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      - name: (
      - name: )
    isDefinition: false
  Global.KeyboardTarget.keysHeld*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.keysHeld*
        name: keysHeld
      VB:
      - id: Global.KeyboardTarget.keysHeld*
        name: keysHeld
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.keysHeld*
        name: keysHeld
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.keysHeld*
        name: keysHeld
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.keysHeld*
        name: keysHeld
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.keysHeld*
        name: keysHeld
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.keysHeld
  Global.KeyboardTarget.keysPressed*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.keysPressed*
        name: keysPressed
      VB:
      - id: Global.KeyboardTarget.keysPressed*
        name: keysPressed
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.keysPressed*
        name: keysPressed
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.keysPressed*
        name: keysPressed
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.keysPressed*
        name: keysPressed
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.keysPressed*
        name: keysPressed
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.keysPressed
  Global.KeyboardTarget.inputThisFrame*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.inputThisFrame*
        name: inputThisFrame
      VB:
      - id: Global.KeyboardTarget.inputThisFrame*
        name: inputThisFrame
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.inputThisFrame*
        name: inputThisFrame
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.inputThisFrame*
        name: inputThisFrame
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.inputThisFrame*
        name: inputThisFrame
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.inputThisFrame*
        name: inputThisFrame
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.inputThisFrame
  Global.KeyboardTarget.#ctor*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.#ctor*
        name: KeyboardTarget
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.#ctor*
        name: KeyboardTarget
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.#ctor*
        name: KeyboardTarget
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.#ctor
  Global.KeyboardTarget.ManualUpdate*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.ManualUpdate*
        name: ManualUpdate
      VB:
      - id: Global.KeyboardTarget.ManualUpdate*
        name: ManualUpdate
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.ManualUpdate*
        name: ManualUpdate
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.ManualUpdate*
        name: ManualUpdate
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.ManualUpdate*
        name: ManualUpdate
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.ManualUpdate*
        name: ManualUpdate
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.ManualUpdate
  Global.CustomKeyCode:
    name:
      CSharp:
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      VB:
      - id: Global.CustomKeyCode
        name: CustomKeyCode
    nameWithType:
      CSharp:
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      VB:
      - id: Global.CustomKeyCode
        name: CustomKeyCode
    qualifiedName:
      CSharp:
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      VB:
      - id: Global.CustomKeyCode
        name: CustomKeyCode
    isDefinition: true
    commentId: T:Global.CustomKeyCode
  Global.KeyboardTarget.KeyDownNoSpamReset*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.KeyDownNoSpamReset*
        name: KeyDownNoSpamReset
      VB:
      - id: Global.KeyboardTarget.KeyDownNoSpamReset*
        name: KeyDownNoSpamReset
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeyDownNoSpamReset*
        name: KeyDownNoSpamReset
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeyDownNoSpamReset*
        name: KeyDownNoSpamReset
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeyDownNoSpamReset*
        name: KeyDownNoSpamReset
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeyDownNoSpamReset*
        name: KeyDownNoSpamReset
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.KeyDownNoSpamReset
  Global.KeyboardTarget.KeysDownNoSpamReset*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.KeysDownNoSpamReset*
        name: KeysDownNoSpamReset
      VB:
      - id: Global.KeyboardTarget.KeysDownNoSpamReset*
        name: KeysDownNoSpamReset
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeysDownNoSpamReset*
        name: KeysDownNoSpamReset
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeysDownNoSpamReset*
        name: KeysDownNoSpamReset
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeysDownNoSpamReset*
        name: KeysDownNoSpamReset
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeysDownNoSpamReset*
        name: KeysDownNoSpamReset
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.KeysDownNoSpamReset
  Global.KeyboardTarget.KeyDown*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.KeyDown*
        name: KeyDown
      VB:
      - id: Global.KeyboardTarget.KeyDown*
        name: KeyDown
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeyDown*
        name: KeyDown
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeyDown*
        name: KeyDown
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeyDown*
        name: KeyDown
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeyDown*
        name: KeyDown
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.KeyDown
  Global.KeyboardTarget.KeysDown*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.KeysDown*
        name: KeysDown
      VB:
      - id: Global.KeyboardTarget.KeysDown*
        name: KeysDown
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeysDown*
        name: KeysDown
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeysDown*
        name: KeysDown
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeysDown*
        name: KeysDown
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeysDown*
        name: KeysDown
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.KeysDown
  Global.KeyboardTarget.KeyUp*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.KeyUp*
        name: KeyUp
      VB:
      - id: Global.KeyboardTarget.KeyUp*
        name: KeyUp
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeyUp*
        name: KeyUp
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeyUp*
        name: KeyUp
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeyUp*
        name: KeyUp
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeyUp*
        name: KeyUp
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.KeyUp
  Global.KeyboardTarget.KeysUp*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.KeysUp*
        name: KeysUp
      VB:
      - id: Global.KeyboardTarget.KeysUp*
        name: KeysUp
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeysUp*
        name: KeysUp
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeysUp*
        name: KeysUp
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeysUp*
        name: KeysUp
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.KeysUp*
        name: KeysUp
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.KeysUp
  Global.KeyboardTarget.IsPressed*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.IsPressed*
        name: IsPressed
      VB:
      - id: Global.KeyboardTarget.IsPressed*
        name: IsPressed
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.IsPressed*
        name: IsPressed
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.IsPressed*
        name: IsPressed
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.IsPressed*
        name: IsPressed
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.IsPressed*
        name: IsPressed
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.IsPressed
  Global.KeyboardShortcut:
    name:
      CSharp:
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      VB:
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      VB:
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      VB:
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
    isDefinition: true
    commentId: T:Global.KeyboardShortcut
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic.IEnumerable{KeyboardShortcut}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{KeyboardShortcut}
  Global.KeyboardTarget.OneIsPressed*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.OneIsPressed*
        name: OneIsPressed
      VB:
      - id: Global.KeyboardTarget.OneIsPressed*
        name: OneIsPressed
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.OneIsPressed*
        name: OneIsPressed
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.OneIsPressed*
        name: OneIsPressed
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.OneIsPressed*
        name: OneIsPressed
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.OneIsPressed*
        name: OneIsPressed
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.OneIsPressed
  Global.KeyboardTarget.IsHeld*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.IsHeld*
        name: IsHeld
      VB:
      - id: Global.KeyboardTarget.IsHeld*
        name: IsHeld
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.IsHeld*
        name: IsHeld
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.IsHeld*
        name: IsHeld
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.IsHeld*
        name: IsHeld
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.IsHeld*
        name: IsHeld
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.IsHeld
  Global.KeyboardTarget.OneIsHeld*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.OneIsHeld*
        name: OneIsHeld
      VB:
      - id: Global.KeyboardTarget.OneIsHeld*
        name: OneIsHeld
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.OneIsHeld*
        name: OneIsHeld
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.OneIsHeld*
        name: OneIsHeld
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.OneIsHeld*
        name: OneIsHeld
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.OneIsHeld*
        name: OneIsHeld
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.OneIsHeld
  Global.KeyboardTarget.IsHeldExactly*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.IsHeldExactly*
        name: IsHeldExactly
      VB:
      - id: Global.KeyboardTarget.IsHeldExactly*
        name: IsHeldExactly
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.IsHeldExactly*
        name: IsHeldExactly
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.IsHeldExactly*
        name: IsHeldExactly
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.IsHeldExactly*
        name: IsHeldExactly
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.IsHeldExactly*
        name: IsHeldExactly
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.IsHeldExactly
  Global.KeyboardTarget.OneIsHeldExactly*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.OneIsHeldExactly*
        name: OneIsHeldExactly
      VB:
      - id: Global.KeyboardTarget.OneIsHeldExactly*
        name: OneIsHeldExactly
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.OneIsHeldExactly*
        name: OneIsHeldExactly
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.OneIsHeldExactly*
        name: OneIsHeldExactly
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.OneIsHeldExactly*
        name: OneIsHeldExactly
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.OneIsHeldExactly*
        name: OneIsHeldExactly
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.OneIsHeldExactly
  Global.KeyboardTarget.Untarget*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.Untarget*
        name: Untarget
      VB:
      - id: Global.KeyboardTarget.Untarget*
        name: Untarget
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.Untarget*
        name: Untarget
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.Untarget*
        name: Untarget
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.Untarget*
        name: Untarget
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.Untarget*
        name: Untarget
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.Untarget
  Global.KeyboardTarget.SubscribeToOnInput*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.SubscribeToOnInput*
        name: SubscribeToOnInput
      VB:
      - id: Global.KeyboardTarget.SubscribeToOnInput*
        name: SubscribeToOnInput
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.SubscribeToOnInput*
        name: SubscribeToOnInput
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.SubscribeToOnInput*
        name: SubscribeToOnInput
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.SubscribeToOnInput*
        name: SubscribeToOnInput
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.SubscribeToOnInput*
        name: SubscribeToOnInput
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.SubscribeToOnInput
  Global.UnityAction`1:
    name:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - name: ''
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - name: ''
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - name: ''
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: )
    isDefinition: true
  Global.UnityAction{CustomKeyCode}:
    name:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      - name: )
    isDefinition: false
    definition: Global.UnityAction`1
    commentId: '!:Global.UnityAction{CustomKeyCode}'
  Global.KeyboardTarget.SubscribeToOnKeyDown*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.SubscribeToOnKeyDown*
        name: SubscribeToOnKeyDown
      VB:
      - id: Global.KeyboardTarget.SubscribeToOnKeyDown*
        name: SubscribeToOnKeyDown
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.SubscribeToOnKeyDown*
        name: SubscribeToOnKeyDown
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.SubscribeToOnKeyDown*
        name: SubscribeToOnKeyDown
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.SubscribeToOnKeyDown*
        name: SubscribeToOnKeyDown
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.SubscribeToOnKeyDown*
        name: SubscribeToOnKeyDown
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.SubscribeToOnKeyDown
  Global.KeyboardTarget.SubscribeToOnKeyUp*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.SubscribeToOnKeyUp*
        name: SubscribeToOnKeyUp
      VB:
      - id: Global.KeyboardTarget.SubscribeToOnKeyUp*
        name: SubscribeToOnKeyUp
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.SubscribeToOnKeyUp*
        name: SubscribeToOnKeyUp
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.SubscribeToOnKeyUp*
        name: SubscribeToOnKeyUp
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.SubscribeToOnKeyUp*
        name: SubscribeToOnKeyUp
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.SubscribeToOnKeyUp*
        name: SubscribeToOnKeyUp
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.SubscribeToOnKeyUp
  Global.KeyboardTarget.SubscribeToUntarget*:
    name:
      CSharp:
      - id: Global.KeyboardTarget.SubscribeToUntarget*
        name: SubscribeToUntarget
      VB:
      - id: Global.KeyboardTarget.SubscribeToUntarget*
        name: SubscribeToUntarget
    nameWithType:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.SubscribeToUntarget*
        name: SubscribeToUntarget
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.SubscribeToUntarget*
        name: SubscribeToUntarget
    qualifiedName:
      CSharp:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.SubscribeToUntarget*
        name: SubscribeToUntarget
      VB:
      - id: Global.KeyboardTarget*
        name: KeyboardTarget
      - name: .
      - id: Global.KeyboardTarget.SubscribeToUntarget*
        name: SubscribeToUntarget
    isDefinition: true
    commentId: Overload:Global.KeyboardTarget.SubscribeToUntarget
  Global.MouseButton:
    name:
      CSharp:
      - id: Global.MouseButton
        name: MouseButton
      VB:
      - id: Global.MouseButton
        name: MouseButton
    nameWithType:
      CSharp:
      - id: Global.MouseButton
        name: MouseButton
      VB:
      - id: Global.MouseButton
        name: MouseButton
    qualifiedName:
      CSharp:
      - id: Global.MouseButton
        name: MouseButton
      VB:
      - id: Global.MouseButton
        name: MouseButton
    isDefinition: true
    commentId: T:Global.MouseButton
  Global.Mouse.scrollCursorDisplayTime*:
    name:
      CSharp:
      - id: Global.Mouse.scrollCursorDisplayTime*
        name: scrollCursorDisplayTime
      VB:
      - id: Global.Mouse.scrollCursorDisplayTime*
        name: scrollCursorDisplayTime
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.scrollCursorDisplayTime*
        name: scrollCursorDisplayTime
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.scrollCursorDisplayTime*
        name: scrollCursorDisplayTime
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.scrollCursorDisplayTime*
        name: scrollCursorDisplayTime
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.scrollCursorDisplayTime*
        name: scrollCursorDisplayTime
    isDefinition: true
    commentId: Overload:Global.Mouse.scrollCursorDisplayTime
  Global.Mouse.leftClick*:
    name:
      CSharp:
      - id: Global.Mouse.leftClick*
        name: leftClick
      VB:
      - id: Global.Mouse.leftClick*
        name: leftClick
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.leftClick*
        name: leftClick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.leftClick*
        name: leftClick
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.leftClick*
        name: leftClick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.leftClick*
        name: leftClick
    isDefinition: true
    commentId: Overload:Global.Mouse.leftClick
  Global.Mouse.leftUnclick*:
    name:
      CSharp:
      - id: Global.Mouse.leftUnclick*
        name: leftUnclick
      VB:
      - id: Global.Mouse.leftUnclick*
        name: leftUnclick
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.leftUnclick*
        name: leftUnclick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.leftUnclick*
        name: leftUnclick
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.leftUnclick*
        name: leftUnclick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.leftUnclick*
        name: leftUnclick
    isDefinition: true
    commentId: Overload:Global.Mouse.leftUnclick
  Global.Mouse.leftHold*:
    name:
      CSharp:
      - id: Global.Mouse.leftHold*
        name: leftHold
      VB:
      - id: Global.Mouse.leftHold*
        name: leftHold
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.leftHold*
        name: leftHold
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.leftHold*
        name: leftHold
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.leftHold*
        name: leftHold
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.leftHold*
        name: leftHold
    isDefinition: true
    commentId: Overload:Global.Mouse.leftHold
  Global.Mouse.rightClick*:
    name:
      CSharp:
      - id: Global.Mouse.rightClick*
        name: rightClick
      VB:
      - id: Global.Mouse.rightClick*
        name: rightClick
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.rightClick*
        name: rightClick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.rightClick*
        name: rightClick
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.rightClick*
        name: rightClick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.rightClick*
        name: rightClick
    isDefinition: true
    commentId: Overload:Global.Mouse.rightClick
  Global.Mouse.rightUnclick*:
    name:
      CSharp:
      - id: Global.Mouse.rightUnclick*
        name: rightUnclick
      VB:
      - id: Global.Mouse.rightUnclick*
        name: rightUnclick
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.rightUnclick*
        name: rightUnclick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.rightUnclick*
        name: rightUnclick
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.rightUnclick*
        name: rightUnclick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.rightUnclick*
        name: rightUnclick
    isDefinition: true
    commentId: Overload:Global.Mouse.rightUnclick
  Global.Mouse.rightHold*:
    name:
      CSharp:
      - id: Global.Mouse.rightHold*
        name: rightHold
      VB:
      - id: Global.Mouse.rightHold*
        name: rightHold
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.rightHold*
        name: rightHold
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.rightHold*
        name: rightHold
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.rightHold*
        name: rightHold
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.rightHold*
        name: rightHold
    isDefinition: true
    commentId: Overload:Global.Mouse.rightHold
  Global.Mouse.middleClick*:
    name:
      CSharp:
      - id: Global.Mouse.middleClick*
        name: middleClick
      VB:
      - id: Global.Mouse.middleClick*
        name: middleClick
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.middleClick*
        name: middleClick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.middleClick*
        name: middleClick
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.middleClick*
        name: middleClick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.middleClick*
        name: middleClick
    isDefinition: true
    commentId: Overload:Global.Mouse.middleClick
  Global.Mouse.middleUnclick*:
    name:
      CSharp:
      - id: Global.Mouse.middleUnclick*
        name: middleUnclick
      VB:
      - id: Global.Mouse.middleUnclick*
        name: middleUnclick
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.middleUnclick*
        name: middleUnclick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.middleUnclick*
        name: middleUnclick
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.middleUnclick*
        name: middleUnclick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.middleUnclick*
        name: middleUnclick
    isDefinition: true
    commentId: Overload:Global.Mouse.middleUnclick
  Global.Mouse.middleHold*:
    name:
      CSharp:
      - id: Global.Mouse.middleHold*
        name: middleHold
      VB:
      - id: Global.Mouse.middleHold*
        name: middleHold
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.middleHold*
        name: middleHold
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.middleHold*
        name: middleHold
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.middleHold*
        name: middleHold
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.middleHold*
        name: middleHold
    isDefinition: true
    commentId: Overload:Global.Mouse.middleHold
  Global.Mouse.click*:
    name:
      CSharp:
      - id: Global.Mouse.click*
        name: click
      VB:
      - id: Global.Mouse.click*
        name: click
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.click*
        name: click
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.click*
        name: click
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.click*
        name: click
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.click*
        name: click
    isDefinition: true
    commentId: Overload:Global.Mouse.click
  Global.Mouse.unclick*:
    name:
      CSharp:
      - id: Global.Mouse.unclick*
        name: unclick
      VB:
      - id: Global.Mouse.unclick*
        name: unclick
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.unclick*
        name: unclick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.unclick*
        name: unclick
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.unclick*
        name: unclick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.unclick*
        name: unclick
    isDefinition: true
    commentId: Overload:Global.Mouse.unclick
  Global.Mouse.held*:
    name:
      CSharp:
      - id: Global.Mouse.held*
        name: held
      VB:
      - id: Global.Mouse.held*
        name: held
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.held*
        name: held
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.held*
        name: held
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.held*
        name: held
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.held*
        name: held
    isDefinition: true
    commentId: Overload:Global.Mouse.held
  Global.Mouse.nothingClick*:
    name:
      CSharp:
      - id: Global.Mouse.nothingClick*
        name: nothingClick
      VB:
      - id: Global.Mouse.nothingClick*
        name: nothingClick
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.nothingClick*
        name: nothingClick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.nothingClick*
        name: nothingClick
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.nothingClick*
        name: nothingClick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.nothingClick*
        name: nothingClick
    isDefinition: true
    commentId: Overload:Global.Mouse.nothingClick
  Global.Mouse.nothingHeld*:
    name:
      CSharp:
      - id: Global.Mouse.nothingHeld*
        name: nothingHeld
      VB:
      - id: Global.Mouse.nothingHeld*
        name: nothingHeld
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.nothingHeld*
        name: nothingHeld
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.nothingHeld*
        name: nothingHeld
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.nothingHeld*
        name: nothingHeld
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.nothingHeld*
        name: nothingHeld
    isDefinition: true
    commentId: Overload:Global.Mouse.nothingHeld
  Global.Mouse.numButtonsHeld*:
    name:
      CSharp:
      - id: Global.Mouse.numButtonsHeld*
        name: numButtonsHeld
      VB:
      - id: Global.Mouse.numButtonsHeld*
        name: numButtonsHeld
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.numButtonsHeld*
        name: numButtonsHeld
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.numButtonsHeld*
        name: numButtonsHeld
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.numButtonsHeld*
        name: numButtonsHeld
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.numButtonsHeld*
        name: numButtonsHeld
    isDefinition: true
    commentId: Overload:Global.Mouse.numButtonsHeld
  Global.Mouse.worldPos*:
    name:
      CSharp:
      - id: Global.Mouse.worldPos*
        name: worldPos
      VB:
      - id: Global.Mouse.worldPos*
        name: worldPos
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.worldPos*
        name: worldPos
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.worldPos*
        name: worldPos
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.worldPos*
        name: worldPos
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.worldPos*
        name: worldPos
    isDefinition: true
    commentId: Overload:Global.Mouse.worldPos
  Global.Mouse.scrollDelta*:
    name:
      CSharp:
      - id: Global.Mouse.scrollDelta*
        name: scrollDelta
      VB:
      - id: Global.Mouse.scrollDelta*
        name: scrollDelta
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.scrollDelta*
        name: scrollDelta
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.scrollDelta*
        name: scrollDelta
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.scrollDelta*
        name: scrollDelta
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.scrollDelta*
        name: scrollDelta
    isDefinition: true
    commentId: Overload:Global.Mouse.scrollDelta
  Global.Mouse.hoverTarget*:
    name:
      CSharp:
      - id: Global.Mouse.hoverTarget*
        name: hoverTarget
      VB:
      - id: Global.Mouse.hoverTarget*
        name: hoverTarget
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.hoverTarget*
        name: hoverTarget
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.hoverTarget*
        name: hoverTarget
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.hoverTarget*
        name: hoverTarget
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.hoverTarget*
        name: hoverTarget
    isDefinition: true
    commentId: Overload:Global.Mouse.hoverTarget
  Global.Mouse.hasHoverTrigger*:
    name:
      CSharp:
      - id: Global.Mouse.hasHoverTrigger*
        name: hasHoverTrigger
      VB:
      - id: Global.Mouse.hasHoverTrigger*
        name: hasHoverTrigger
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.hasHoverTrigger*
        name: hasHoverTrigger
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.hasHoverTrigger*
        name: hasHoverTrigger
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.hasHoverTrigger*
        name: hasHoverTrigger
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.hasHoverTrigger*
        name: hasHoverTrigger
    isDefinition: true
    commentId: Overload:Global.Mouse.hasHoverTrigger
  Global.Mouse.cursorState*:
    name:
      CSharp:
      - id: Global.Mouse.cursorState*
        name: cursorState
      VB:
      - id: Global.Mouse.cursorState*
        name: cursorState
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.cursorState*
        name: cursorState
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.cursorState*
        name: cursorState
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.cursorState*
        name: cursorState
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.cursorState*
        name: cursorState
    isDefinition: true
    commentId: Overload:Global.Mouse.cursorState
  Global.Mouse.SetCursorState*:
    name:
      CSharp:
      - id: Global.Mouse.SetCursorState*
        name: SetCursorState
      VB:
      - id: Global.Mouse.SetCursorState*
        name: SetCursorState
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SetCursorState*
        name: SetCursorState
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SetCursorState*
        name: SetCursorState
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SetCursorState*
        name: SetCursorState
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SetCursorState*
        name: SetCursorState
    isDefinition: true
    commentId: Overload:Global.Mouse.SetCursorState
  Global.Mouse.SetCursorSprite*:
    name:
      CSharp:
      - id: Global.Mouse.SetCursorSprite*
        name: SetCursorSprite
      VB:
      - id: Global.Mouse.SetCursorSprite*
        name: SetCursorSprite
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SetCursorSprite*
        name: SetCursorSprite
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SetCursorSprite*
        name: SetCursorSprite
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SetCursorSprite*
        name: SetCursorSprite
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SetCursorSprite*
        name: SetCursorSprite
    isDefinition: true
    commentId: Overload:Global.Mouse.SetCursorSprite
  Global.Mouse.IsClicked*:
    name:
      CSharp:
      - id: Global.Mouse.IsClicked*
        name: IsClicked
      VB:
      - id: Global.Mouse.IsClicked*
        name: IsClicked
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.IsClicked*
        name: IsClicked
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.IsClicked*
        name: IsClicked
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.IsClicked*
        name: IsClicked
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.IsClicked*
        name: IsClicked
    isDefinition: true
    commentId: Overload:Global.Mouse.IsClicked
  Global.Mouse.IsUnclicked*:
    name:
      CSharp:
      - id: Global.Mouse.IsUnclicked*
        name: IsUnclicked
      VB:
      - id: Global.Mouse.IsUnclicked*
        name: IsUnclicked
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.IsUnclicked*
        name: IsUnclicked
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.IsUnclicked*
        name: IsUnclicked
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.IsUnclicked*
        name: IsUnclicked
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.IsUnclicked*
        name: IsUnclicked
    isDefinition: true
    commentId: Overload:Global.Mouse.IsUnclicked
  Global.Mouse.IsHeld*:
    name:
      CSharp:
      - id: Global.Mouse.IsHeld*
        name: IsHeld
      VB:
      - id: Global.Mouse.IsHeld*
        name: IsHeld
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.IsHeld*
        name: IsHeld
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.IsHeld*
        name: IsHeld
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.IsHeld*
        name: IsHeld
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.IsHeld*
        name: IsHeld
    isDefinition: true
    commentId: Overload:Global.Mouse.IsHeld
  Global.Mouse.SubscribeToScroll*:
    name:
      CSharp:
      - id: Global.Mouse.SubscribeToScroll*
        name: SubscribeToScroll
      VB:
      - id: Global.Mouse.SubscribeToScroll*
        name: SubscribeToScroll
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToScroll*
        name: SubscribeToScroll
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToScroll*
        name: SubscribeToScroll
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToScroll*
        name: SubscribeToScroll
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToScroll*
        name: SubscribeToScroll
    isDefinition: true
    commentId: Overload:Global.Mouse.SubscribeToScroll
  Global.Mouse.SubscribeToClick*:
    name:
      CSharp:
      - id: Global.Mouse.SubscribeToClick*
        name: SubscribeToClick
      VB:
      - id: Global.Mouse.SubscribeToClick*
        name: SubscribeToClick
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToClick*
        name: SubscribeToClick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToClick*
        name: SubscribeToClick
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToClick*
        name: SubscribeToClick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToClick*
        name: SubscribeToClick
    isDefinition: true
    commentId: Overload:Global.Mouse.SubscribeToClick
  Global.Mouse.SubscribeToLeftClick*:
    name:
      CSharp:
      - id: Global.Mouse.SubscribeToLeftClick*
        name: SubscribeToLeftClick
      VB:
      - id: Global.Mouse.SubscribeToLeftClick*
        name: SubscribeToLeftClick
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToLeftClick*
        name: SubscribeToLeftClick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToLeftClick*
        name: SubscribeToLeftClick
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToLeftClick*
        name: SubscribeToLeftClick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToLeftClick*
        name: SubscribeToLeftClick
    isDefinition: true
    commentId: Overload:Global.Mouse.SubscribeToLeftClick
  Global.Mouse.SubscribeToRightClick*:
    name:
      CSharp:
      - id: Global.Mouse.SubscribeToRightClick*
        name: SubscribeToRightClick
      VB:
      - id: Global.Mouse.SubscribeToRightClick*
        name: SubscribeToRightClick
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToRightClick*
        name: SubscribeToRightClick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToRightClick*
        name: SubscribeToRightClick
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToRightClick*
        name: SubscribeToRightClick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToRightClick*
        name: SubscribeToRightClick
    isDefinition: true
    commentId: Overload:Global.Mouse.SubscribeToRightClick
  Global.Mouse.SubscribeToMiddleClick*:
    name:
      CSharp:
      - id: Global.Mouse.SubscribeToMiddleClick*
        name: SubscribeToMiddleClick
      VB:
      - id: Global.Mouse.SubscribeToMiddleClick*
        name: SubscribeToMiddleClick
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToMiddleClick*
        name: SubscribeToMiddleClick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToMiddleClick*
        name: SubscribeToMiddleClick
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToMiddleClick*
        name: SubscribeToMiddleClick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToMiddleClick*
        name: SubscribeToMiddleClick
    isDefinition: true
    commentId: Overload:Global.Mouse.SubscribeToMiddleClick
  Global.Mouse.SubscribeToUnclick*:
    name:
      CSharp:
      - id: Global.Mouse.SubscribeToUnclick*
        name: SubscribeToUnclick
      VB:
      - id: Global.Mouse.SubscribeToUnclick*
        name: SubscribeToUnclick
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToUnclick*
        name: SubscribeToUnclick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToUnclick*
        name: SubscribeToUnclick
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToUnclick*
        name: SubscribeToUnclick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToUnclick*
        name: SubscribeToUnclick
    isDefinition: true
    commentId: Overload:Global.Mouse.SubscribeToUnclick
  Global.Mouse.SubscribeToLeftUnclick*:
    name:
      CSharp:
      - id: Global.Mouse.SubscribeToLeftUnclick*
        name: SubscribeToLeftUnclick
      VB:
      - id: Global.Mouse.SubscribeToLeftUnclick*
        name: SubscribeToLeftUnclick
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToLeftUnclick*
        name: SubscribeToLeftUnclick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToLeftUnclick*
        name: SubscribeToLeftUnclick
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToLeftUnclick*
        name: SubscribeToLeftUnclick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToLeftUnclick*
        name: SubscribeToLeftUnclick
    isDefinition: true
    commentId: Overload:Global.Mouse.SubscribeToLeftUnclick
  Global.Mouse.SubscribeToRightUnclick*:
    name:
      CSharp:
      - id: Global.Mouse.SubscribeToRightUnclick*
        name: SubscribeToRightUnclick
      VB:
      - id: Global.Mouse.SubscribeToRightUnclick*
        name: SubscribeToRightUnclick
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToRightUnclick*
        name: SubscribeToRightUnclick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToRightUnclick*
        name: SubscribeToRightUnclick
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToRightUnclick*
        name: SubscribeToRightUnclick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToRightUnclick*
        name: SubscribeToRightUnclick
    isDefinition: true
    commentId: Overload:Global.Mouse.SubscribeToRightUnclick
  Global.Mouse.SubscribeToMiddleUnclick*:
    name:
      CSharp:
      - id: Global.Mouse.SubscribeToMiddleUnclick*
        name: SubscribeToMiddleUnclick
      VB:
      - id: Global.Mouse.SubscribeToMiddleUnclick*
        name: SubscribeToMiddleUnclick
    nameWithType:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToMiddleUnclick*
        name: SubscribeToMiddleUnclick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToMiddleUnclick*
        name: SubscribeToMiddleUnclick
    qualifiedName:
      CSharp:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToMiddleUnclick*
        name: SubscribeToMiddleUnclick
      VB:
      - id: Global.Mouse*
        name: Mouse
      - name: .
      - id: Global.Mouse.SubscribeToMiddleUnclick*
        name: SubscribeToMiddleUnclick
    isDefinition: true
    commentId: Overload:Global.Mouse.SubscribeToMiddleUnclick
  Global.MouseTargetState:
    name:
      CSharp:
      - id: Global.MouseTargetState
        name: MouseTargetState
      VB:
      - id: Global.MouseTargetState
        name: MouseTargetState
    nameWithType:
      CSharp:
      - id: Global.MouseTargetState
        name: MouseTargetState
      VB:
      - id: Global.MouseTargetState
        name: MouseTargetState
    qualifiedName:
      CSharp:
      - id: Global.MouseTargetState
        name: MouseTargetState
      VB:
      - id: Global.MouseTargetState
        name: MouseTargetState
    isDefinition: true
    commentId: T:Global.MouseTargetState
  Global.MouseTarget.state*:
    name:
      CSharp:
      - id: Global.MouseTarget.state*
        name: state
      VB:
      - id: Global.MouseTarget.state*
        name: state
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.state*
        name: state
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.state*
        name: state
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.state*
        name: state
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.state*
        name: state
    isDefinition: true
    commentId: Overload:Global.MouseTarget.state
  Global.MouseTarget.selected*:
    name:
      CSharp:
      - id: Global.MouseTarget.selected*
        name: selected
      VB:
      - id: Global.MouseTarget.selected*
        name: selected
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.selected*
        name: selected
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.selected*
        name: selected
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.selected*
        name: selected
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.selected*
        name: selected
    isDefinition: true
    commentId: Overload:Global.MouseTarget.selected
  Global.MouseTarget.timeHovered*:
    name:
      CSharp:
      - id: Global.MouseTarget.timeHovered*
        name: timeHovered
      VB:
      - id: Global.MouseTarget.timeHovered*
        name: timeHovered
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.timeHovered*
        name: timeHovered
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.timeHovered*
        name: timeHovered
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.timeHovered*
        name: timeHovered
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.timeHovered*
        name: timeHovered
    isDefinition: true
    commentId: Overload:Global.MouseTarget.timeHovered
  Global.MouseTarget.Idle*:
    name:
      CSharp:
      - id: Global.MouseTarget.Idle*
        name: Idle
      VB:
      - id: Global.MouseTarget.Idle*
        name: Idle
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Idle*
        name: Idle
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Idle*
        name: Idle
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Idle*
        name: Idle
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Idle*
        name: Idle
    isDefinition: true
    commentId: Overload:Global.MouseTarget.Idle
  Global.MouseTarget.Hover*:
    name:
      CSharp:
      - id: Global.MouseTarget.Hover*
        name: Hover
      VB:
      - id: Global.MouseTarget.Hover*
        name: Hover
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Hover*
        name: Hover
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Hover*
        name: Hover
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Hover*
        name: Hover
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Hover*
        name: Hover
    isDefinition: true
    commentId: Overload:Global.MouseTarget.Hover
  Global.MouseTarget.Press*:
    name:
      CSharp:
      - id: Global.MouseTarget.Press*
        name: Press
      VB:
      - id: Global.MouseTarget.Press*
        name: Press
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Press*
        name: Press
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Press*
        name: Press
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Press*
        name: Press
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Press*
        name: Press
    isDefinition: true
    commentId: Overload:Global.MouseTarget.Press
  Global.MouseTarget.Select*:
    name:
      CSharp:
      - id: Global.MouseTarget.Select*
        name: Select
      VB:
      - id: Global.MouseTarget.Select*
        name: Select
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Select*
        name: Select
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Select*
        name: Select
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Select*
        name: Select
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Select*
        name: Select
    isDefinition: true
    commentId: Overload:Global.MouseTarget.Select
  Global.MouseTarget.Deselect*:
    name:
      CSharp:
      - id: Global.MouseTarget.Deselect*
        name: Deselect
      VB:
      - id: Global.MouseTarget.Deselect*
        name: Deselect
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Deselect*
        name: Deselect
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Deselect*
        name: Deselect
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Deselect*
        name: Deselect
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Deselect*
        name: Deselect
    isDefinition: true
    commentId: Overload:Global.MouseTarget.Deselect
  Global.MouseTarget.Scroll*:
    name:
      CSharp:
      - id: Global.MouseTarget.Scroll*
        name: Scroll
      VB:
      - id: Global.MouseTarget.Scroll*
        name: Scroll
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Scroll*
        name: Scroll
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Scroll*
        name: Scroll
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Scroll*
        name: Scroll
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Scroll*
        name: Scroll
    isDefinition: true
    commentId: Overload:Global.MouseTarget.Scroll
  Global.MouseTarget.Untarget*:
    name:
      CSharp:
      - id: Global.MouseTarget.Untarget*
        name: Untarget
      VB:
      - id: Global.MouseTarget.Untarget*
        name: Untarget
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Untarget*
        name: Untarget
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Untarget*
        name: Untarget
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Untarget*
        name: Untarget
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.Untarget*
        name: Untarget
    isDefinition: true
    commentId: Overload:Global.MouseTarget.Untarget
  Global.MouseTarget.SubscribeToIdle*:
    name:
      CSharp:
      - id: Global.MouseTarget.SubscribeToIdle*
        name: SubscribeToIdle
      VB:
      - id: Global.MouseTarget.SubscribeToIdle*
        name: SubscribeToIdle
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToIdle*
        name: SubscribeToIdle
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToIdle*
        name: SubscribeToIdle
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToIdle*
        name: SubscribeToIdle
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToIdle*
        name: SubscribeToIdle
    isDefinition: true
    commentId: Overload:Global.MouseTarget.SubscribeToIdle
  Global.MouseTarget.SubscribeToHover*:
    name:
      CSharp:
      - id: Global.MouseTarget.SubscribeToHover*
        name: SubscribeToHover
      VB:
      - id: Global.MouseTarget.SubscribeToHover*
        name: SubscribeToHover
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToHover*
        name: SubscribeToHover
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToHover*
        name: SubscribeToHover
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToHover*
        name: SubscribeToHover
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToHover*
        name: SubscribeToHover
    isDefinition: true
    commentId: Overload:Global.MouseTarget.SubscribeToHover
  Global.MouseTarget.SubscribeToPress*:
    name:
      CSharp:
      - id: Global.MouseTarget.SubscribeToPress*
        name: SubscribeToPress
      VB:
      - id: Global.MouseTarget.SubscribeToPress*
        name: SubscribeToPress
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToPress*
        name: SubscribeToPress
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToPress*
        name: SubscribeToPress
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToPress*
        name: SubscribeToPress
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToPress*
        name: SubscribeToPress
    isDefinition: true
    commentId: Overload:Global.MouseTarget.SubscribeToPress
  Global.MouseTarget.SubscribeToSelect*:
    name:
      CSharp:
      - id: Global.MouseTarget.SubscribeToSelect*
        name: SubscribeToSelect
      VB:
      - id: Global.MouseTarget.SubscribeToSelect*
        name: SubscribeToSelect
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToSelect*
        name: SubscribeToSelect
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToSelect*
        name: SubscribeToSelect
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToSelect*
        name: SubscribeToSelect
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToSelect*
        name: SubscribeToSelect
    isDefinition: true
    commentId: Overload:Global.MouseTarget.SubscribeToSelect
  Global.MouseTarget.SubscribeToDeselect*:
    name:
      CSharp:
      - id: Global.MouseTarget.SubscribeToDeselect*
        name: SubscribeToDeselect
      VB:
      - id: Global.MouseTarget.SubscribeToDeselect*
        name: SubscribeToDeselect
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToDeselect*
        name: SubscribeToDeselect
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToDeselect*
        name: SubscribeToDeselect
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToDeselect*
        name: SubscribeToDeselect
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToDeselect*
        name: SubscribeToDeselect
    isDefinition: true
    commentId: Overload:Global.MouseTarget.SubscribeToDeselect
  Global.MouseTarget.SubscribeToStateChange*:
    name:
      CSharp:
      - id: Global.MouseTarget.SubscribeToStateChange*
        name: SubscribeToStateChange
      VB:
      - id: Global.MouseTarget.SubscribeToStateChange*
        name: SubscribeToStateChange
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToStateChange*
        name: SubscribeToStateChange
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToStateChange*
        name: SubscribeToStateChange
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToStateChange*
        name: SubscribeToStateChange
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToStateChange*
        name: SubscribeToStateChange
    isDefinition: true
    commentId: Overload:Global.MouseTarget.SubscribeToStateChange
  Global.MouseTarget.SubscribeToScroll*:
    name:
      CSharp:
      - id: Global.MouseTarget.SubscribeToScroll*
        name: SubscribeToScroll
      VB:
      - id: Global.MouseTarget.SubscribeToScroll*
        name: SubscribeToScroll
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToScroll*
        name: SubscribeToScroll
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToScroll*
        name: SubscribeToScroll
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToScroll*
        name: SubscribeToScroll
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToScroll*
        name: SubscribeToScroll
    isDefinition: true
    commentId: Overload:Global.MouseTarget.SubscribeToScroll
  Global.MouseTarget.SubscribeToClick*:
    name:
      CSharp:
      - id: Global.MouseTarget.SubscribeToClick*
        name: SubscribeToClick
      VB:
      - id: Global.MouseTarget.SubscribeToClick*
        name: SubscribeToClick
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToClick*
        name: SubscribeToClick
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToClick*
        name: SubscribeToClick
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToClick*
        name: SubscribeToClick
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToClick*
        name: SubscribeToClick
    isDefinition: true
    commentId: Overload:Global.MouseTarget.SubscribeToClick
  Global.MouseTarget.SubscribeToLeftClick*:
    name:
      CSharp:
      - id: Global.MouseTarget.SubscribeToLeftClick*
        name: SubscribeToLeftClick
      VB:
      - id: Global.MouseTarget.SubscribeToLeftClick*
        name: SubscribeToLeftClick
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToLeftClick*
        name: SubscribeToLeftClick
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToLeftClick*
        name: SubscribeToLeftClick
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToLeftClick*
        name: SubscribeToLeftClick
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToLeftClick*
        name: SubscribeToLeftClick
    isDefinition: true
    commentId: Overload:Global.MouseTarget.SubscribeToLeftClick
  Global.MouseTarget.SubscribeToRightClick*:
    name:
      CSharp:
      - id: Global.MouseTarget.SubscribeToRightClick*
        name: SubscribeToRightClick
      VB:
      - id: Global.MouseTarget.SubscribeToRightClick*
        name: SubscribeToRightClick
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToRightClick*
        name: SubscribeToRightClick
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToRightClick*
        name: SubscribeToRightClick
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToRightClick*
        name: SubscribeToRightClick
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToRightClick*
        name: SubscribeToRightClick
    isDefinition: true
    commentId: Overload:Global.MouseTarget.SubscribeToRightClick
  Global.MouseTarget.SubscribeToMiddleClick*:
    name:
      CSharp:
      - id: Global.MouseTarget.SubscribeToMiddleClick*
        name: SubscribeToMiddleClick
      VB:
      - id: Global.MouseTarget.SubscribeToMiddleClick*
        name: SubscribeToMiddleClick
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToMiddleClick*
        name: SubscribeToMiddleClick
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToMiddleClick*
        name: SubscribeToMiddleClick
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToMiddleClick*
        name: SubscribeToMiddleClick
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToMiddleClick*
        name: SubscribeToMiddleClick
    isDefinition: true
    commentId: Overload:Global.MouseTarget.SubscribeToMiddleClick
  Global.MouseTarget.SubscribeToUnclick*:
    name:
      CSharp:
      - id: Global.MouseTarget.SubscribeToUnclick*
        name: SubscribeToUnclick
      VB:
      - id: Global.MouseTarget.SubscribeToUnclick*
        name: SubscribeToUnclick
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToUnclick*
        name: SubscribeToUnclick
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToUnclick*
        name: SubscribeToUnclick
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToUnclick*
        name: SubscribeToUnclick
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToUnclick*
        name: SubscribeToUnclick
    isDefinition: true
    commentId: Overload:Global.MouseTarget.SubscribeToUnclick
  Global.MouseTarget.SubscribeToLeftUnclick*:
    name:
      CSharp:
      - id: Global.MouseTarget.SubscribeToLeftUnclick*
        name: SubscribeToLeftUnclick
      VB:
      - id: Global.MouseTarget.SubscribeToLeftUnclick*
        name: SubscribeToLeftUnclick
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToLeftUnclick*
        name: SubscribeToLeftUnclick
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToLeftUnclick*
        name: SubscribeToLeftUnclick
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToLeftUnclick*
        name: SubscribeToLeftUnclick
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToLeftUnclick*
        name: SubscribeToLeftUnclick
    isDefinition: true
    commentId: Overload:Global.MouseTarget.SubscribeToLeftUnclick
  Global.MouseTarget.SubscribeToRightUnclick*:
    name:
      CSharp:
      - id: Global.MouseTarget.SubscribeToRightUnclick*
        name: SubscribeToRightUnclick
      VB:
      - id: Global.MouseTarget.SubscribeToRightUnclick*
        name: SubscribeToRightUnclick
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToRightUnclick*
        name: SubscribeToRightUnclick
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToRightUnclick*
        name: SubscribeToRightUnclick
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToRightUnclick*
        name: SubscribeToRightUnclick
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToRightUnclick*
        name: SubscribeToRightUnclick
    isDefinition: true
    commentId: Overload:Global.MouseTarget.SubscribeToRightUnclick
  Global.MouseTarget.SubscribeToMiddleUnclick*:
    name:
      CSharp:
      - id: Global.MouseTarget.SubscribeToMiddleUnclick*
        name: SubscribeToMiddleUnclick
      VB:
      - id: Global.MouseTarget.SubscribeToMiddleUnclick*
        name: SubscribeToMiddleUnclick
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToMiddleUnclick*
        name: SubscribeToMiddleUnclick
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToMiddleUnclick*
        name: SubscribeToMiddleUnclick
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToMiddleUnclick*
        name: SubscribeToMiddleUnclick
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToMiddleUnclick*
        name: SubscribeToMiddleUnclick
    isDefinition: true
    commentId: Overload:Global.MouseTarget.SubscribeToMiddleUnclick
  Global.MouseTarget.SubscribeToUntarget*:
    name:
      CSharp:
      - id: Global.MouseTarget.SubscribeToUntarget*
        name: SubscribeToUntarget
      VB:
      - id: Global.MouseTarget.SubscribeToUntarget*
        name: SubscribeToUntarget
    nameWithType:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToUntarget*
        name: SubscribeToUntarget
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToUntarget*
        name: SubscribeToUntarget
    qualifiedName:
      CSharp:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToUntarget*
        name: SubscribeToUntarget
      VB:
      - id: Global.MouseTarget*
        name: MouseTarget
      - name: .
      - id: Global.MouseTarget.SubscribeToUntarget*
        name: SubscribeToUntarget
    isDefinition: true
    commentId: Overload:Global.MouseTarget.SubscribeToUntarget
  Global.Tooltip.text*:
    name:
      CSharp:
      - id: Global.Tooltip.text*
        name: text
      VB:
      - id: Global.Tooltip.text*
        name: text
    nameWithType:
      CSharp:
      - id: Global.Tooltip*
        name: Tooltip
      - name: .
      - id: Global.Tooltip.text*
        name: text
      VB:
      - id: Global.Tooltip*
        name: Tooltip
      - name: .
      - id: Global.Tooltip.text*
        name: text
    qualifiedName:
      CSharp:
      - id: Global.Tooltip*
        name: Tooltip
      - name: .
      - id: Global.Tooltip.text*
        name: text
      VB:
      - id: Global.Tooltip*
        name: Tooltip
      - name: .
      - id: Global.Tooltip.text*
        name: text
    isDefinition: true
    commentId: Overload:Global.Tooltip.text
  Global.Tooltip.tooltipVisible*:
    name:
      CSharp:
      - id: Global.Tooltip.tooltipVisible*
        name: tooltipVisible
      VB:
      - id: Global.Tooltip.tooltipVisible*
        name: tooltipVisible
    nameWithType:
      CSharp:
      - id: Global.Tooltip*
        name: Tooltip
      - name: .
      - id: Global.Tooltip.tooltipVisible*
        name: tooltipVisible
      VB:
      - id: Global.Tooltip*
        name: Tooltip
      - name: .
      - id: Global.Tooltip.tooltipVisible*
        name: tooltipVisible
    qualifiedName:
      CSharp:
      - id: Global.Tooltip*
        name: Tooltip
      - name: .
      - id: Global.Tooltip.tooltipVisible*
        name: tooltipVisible
      VB:
      - id: Global.Tooltip*
        name: Tooltip
      - name: .
      - id: Global.Tooltip.tooltipVisible*
        name: tooltipVisible
    isDefinition: true
    commentId: Overload:Global.Tooltip.tooltipVisible
  Global.Tooltip.ShowTooltip*:
    name:
      CSharp:
      - id: Global.Tooltip.ShowTooltip*
        name: ShowTooltip
      VB:
      - id: Global.Tooltip.ShowTooltip*
        name: ShowTooltip
    nameWithType:
      CSharp:
      - id: Global.Tooltip*
        name: Tooltip
      - name: .
      - id: Global.Tooltip.ShowTooltip*
        name: ShowTooltip
      VB:
      - id: Global.Tooltip*
        name: Tooltip
      - name: .
      - id: Global.Tooltip.ShowTooltip*
        name: ShowTooltip
    qualifiedName:
      CSharp:
      - id: Global.Tooltip*
        name: Tooltip
      - name: .
      - id: Global.Tooltip.ShowTooltip*
        name: ShowTooltip
      VB:
      - id: Global.Tooltip*
        name: Tooltip
      - name: .
      - id: Global.Tooltip.ShowTooltip*
        name: ShowTooltip
    isDefinition: true
    commentId: Overload:Global.Tooltip.ShowTooltip
  Global.Tooltip.HideTooltip*:
    name:
      CSharp:
      - id: Global.Tooltip.HideTooltip*
        name: HideTooltip
      VB:
      - id: Global.Tooltip.HideTooltip*
        name: HideTooltip
    nameWithType:
      CSharp:
      - id: Global.Tooltip*
        name: Tooltip
      - name: .
      - id: Global.Tooltip.HideTooltip*
        name: HideTooltip
      VB:
      - id: Global.Tooltip*
        name: Tooltip
      - name: .
      - id: Global.Tooltip.HideTooltip*
        name: HideTooltip
    qualifiedName:
      CSharp:
      - id: Global.Tooltip*
        name: Tooltip
      - name: .
      - id: Global.Tooltip.HideTooltip*
        name: HideTooltip
      VB:
      - id: Global.Tooltip*
        name: Tooltip
      - name: .
      - id: Global.Tooltip.HideTooltip*
        name: HideTooltip
    isDefinition: true
    commentId: Overload:Global.Tooltip.HideTooltip
  Global.Tooltip:
    name:
      CSharp:
      - id: Global.Tooltip
        name: Tooltip
      VB:
      - id: Global.Tooltip
        name: Tooltip
    nameWithType:
      CSharp:
      - id: Global.Tooltip
        name: Tooltip
      VB:
      - id: Global.Tooltip
        name: Tooltip
    qualifiedName:
      CSharp:
      - id: Global.Tooltip
        name: Tooltip
      VB:
      - id: Global.Tooltip
        name: Tooltip
    isDefinition: true
    commentId: T:Global.Tooltip
  Global.IJSONable.ToJSON*:
    name:
      CSharp:
      - id: Global.IJSONable.ToJSON*
        name: ToJSON
      VB:
      - id: Global.IJSONable.ToJSON*
        name: ToJSON
    nameWithType:
      CSharp:
      - id: Global.IJSONable*
        name: IJSONable
      - name: .
      - id: Global.IJSONable.ToJSON*
        name: ToJSON
      VB:
      - id: Global.IJSONable*
        name: IJSONable
      - name: .
      - id: Global.IJSONable.ToJSON*
        name: ToJSON
    qualifiedName:
      CSharp:
      - id: Global.IJSONable*
        name: IJSONable
      - name: .
      - id: Global.IJSONable.ToJSON*
        name: ToJSON
      VB:
      - id: Global.IJSONable*
        name: IJSONable
      - name: .
      - id: Global.IJSONable.ToJSON*
        name: ToJSON
    isDefinition: true
    commentId: Overload:Global.IJSONable.ToJSON
  Global.JSON.#ctor*:
    name:
      CSharp:
      - id: Global.JSON.#ctor*
        name: JSON
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.#ctor*
        name: JSON
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.#ctor*
        name: JSON
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.JSON.#ctor
  System.String[]:
    name:
      CSharp:
      - id: System.String
        name: string
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: System.String
        name: String
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.String
        name: string
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: System.String
        name: String
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System.String
        name: string
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: System.String
        name: String
        isExternal: true
      - name: (
      - name: )
    isDefinition: false
  Global.JSON.Keys*:
    name:
      CSharp:
      - id: Global.JSON.Keys*
        name: Keys
      VB:
      - id: Global.JSON.Keys*
        name: Keys
    nameWithType:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Keys*
        name: Keys
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Keys*
        name: Keys
    qualifiedName:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Keys*
        name: Keys
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Keys*
        name: Keys
    isDefinition: true
    commentId: Overload:Global.JSON.Keys
  Global.JSON.Item*:
    name:
      CSharp:
      - name: this
      VB:
      - id: Global.JSON.Item*
        name: this[]
    nameWithType:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - name: this
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Item*
        name: this[]
    qualifiedName:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - name: this
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Item*
        name: this[]
    isDefinition: true
    commentId: Overload:Global.JSON.Item
  Global.JSON.ContainsKey*:
    name:
      CSharp:
      - id: Global.JSON.ContainsKey*
        name: ContainsKey
      VB:
      - id: Global.JSON.ContainsKey*
        name: ContainsKey
    nameWithType:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.ContainsKey*
        name: ContainsKey
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.ContainsKey*
        name: ContainsKey
    qualifiedName:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.ContainsKey*
        name: ContainsKey
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.ContainsKey*
        name: ContainsKey
    isDefinition: true
    commentId: Overload:Global.JSON.ContainsKey
  Global.JSON.Get*:
    name:
      CSharp:
      - id: Global.JSON.Get*
        name: Get
      VB:
      - id: Global.JSON.Get*
        name: Get
    nameWithType:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Get*
        name: Get
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Get*
        name: Get
    qualifiedName:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Get*
        name: Get
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Get*
        name: Get
    isDefinition: true
    commentId: Overload:Global.JSON.Get
  Global.JSON.JSONProperty:
    name:
      CSharp:
      - id: Global.JSON
        name: JSON
      - name: .
      - id: Global.JSON.JSONProperty
        name: JSONProperty
      VB:
      - id: Global.JSON
        name: JSON
      - name: .
      - id: Global.JSON.JSONProperty
        name: JSONProperty
    nameWithType:
      CSharp:
      - id: Global.JSON
        name: JSON
      - name: .
      - id: Global.JSON.JSONProperty
        name: JSONProperty
      VB:
      - id: Global.JSON
        name: JSON
      - name: .
      - id: Global.JSON.JSONProperty
        name: JSONProperty
    qualifiedName:
      CSharp:
      - id: Global.JSON
        name: JSON
      - name: .
      - id: Global.JSON.JSONProperty
        name: JSONProperty
      VB:
      - id: Global.JSON
        name: JSON
      - name: .
      - id: Global.JSON.JSONProperty
        name: JSONProperty
    isDefinition: true
    commentId: T:Global.JSON.JSONProperty
  Global.JSON.GetJSONProperty*:
    name:
      CSharp:
      - id: Global.JSON.GetJSONProperty*
        name: GetJSONProperty
      VB:
      - id: Global.JSON.GetJSONProperty*
        name: GetJSONProperty
    nameWithType:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.GetJSONProperty*
        name: GetJSONProperty
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.GetJSONProperty*
        name: GetJSONProperty
    qualifiedName:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.GetJSONProperty*
        name: GetJSONProperty
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.GetJSONProperty*
        name: GetJSONProperty
    isDefinition: true
    commentId: Overload:Global.JSON.GetJSONProperty
  Global.JSON.Add*:
    name:
      CSharp:
      - id: Global.JSON.Add*
        name: Add
      VB:
      - id: Global.JSON.Add*
        name: Add
    nameWithType:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Add*
        name: Add
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Add*
        name: Add
    qualifiedName:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Add*
        name: Add
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Add*
        name: Add
    isDefinition: true
    commentId: Overload:Global.JSON.Add
  System.Collections.Generic.IEnumerable{System.String}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{System.String}
  System.Collections.Generic.IEnumerable{IJSONable}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - id: Global.IJSONable
        name: IJSONable
      - name: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.IJSONable
        name: IJSONable
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - id: Global.IJSONable
        name: IJSONable
      - name: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.IJSONable
        name: IJSONable
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - id: Global.IJSONable
        name: IJSONable
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.IJSONable
        name: IJSONable
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{IJSONable}
  Global.JSON.Append*:
    name:
      CSharp:
      - id: Global.JSON.Append*
        name: Append
      VB:
      - id: Global.JSON.Append*
        name: Append
    nameWithType:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Append*
        name: Append
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Append*
        name: Append
    qualifiedName:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Append*
        name: Append
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Append*
        name: Append
    isDefinition: true
    commentId: Overload:Global.JSON.Append
  Global.JSON.Parse*:
    name:
      CSharp:
      - id: Global.JSON.Parse*
        name: Parse
      VB:
      - id: Global.JSON.Parse*
        name: Parse
    nameWithType:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Parse*
        name: Parse
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Parse*
        name: Parse
    qualifiedName:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Parse*
        name: Parse
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.Parse*
        name: Parse
    isDefinition: true
    commentId: Overload:Global.JSON.Parse
  Global.JSON.AddParse*:
    name:
      CSharp:
      - id: Global.JSON.AddParse*
        name: AddParse
      VB:
      - id: Global.JSON.AddParse*
        name: AddParse
    nameWithType:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.AddParse*
        name: AddParse
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.AddParse*
        name: AddParse
    qualifiedName:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.AddParse*
        name: AddParse
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.AddParse*
        name: AddParse
    isDefinition: true
    commentId: Overload:Global.JSON.AddParse
  Global.JSON.StripQuotationMarks*:
    name:
      CSharp:
      - id: Global.JSON.StripQuotationMarks*
        name: StripQuotationMarks
      VB:
      - id: Global.JSON.StripQuotationMarks*
        name: StripQuotationMarks
    nameWithType:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.StripQuotationMarks*
        name: StripQuotationMarks
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.StripQuotationMarks*
        name: StripQuotationMarks
    qualifiedName:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.StripQuotationMarks*
        name: StripQuotationMarks
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.StripQuotationMarks*
        name: StripQuotationMarks
    isDefinition: true
    commentId: Overload:Global.JSON.StripQuotationMarks
  Global.JSON.ToString*:
    name:
      CSharp:
      - id: Global.JSON.ToString*
        name: ToString
      VB:
      - id: Global.JSON.ToString*
        name: ToString
    nameWithType:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.ToString*
        name: ToString
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.ToString*
        name: ToString
    qualifiedName:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.ToString*
        name: ToString
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.ToString*
        name: ToString
    isDefinition: true
    commentId: Overload:Global.JSON.ToString
  Global.JSON.ToJSONString*:
    name:
      CSharp:
      - id: Global.JSON.ToJSONString*
        name: ToJSONString
      VB:
      - id: Global.JSON.ToJSONString*
        name: ToJSONString
    nameWithType:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.ToJSONString*
        name: ToJSONString
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.ToJSONString*
        name: ToJSONString
    qualifiedName:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.ToJSONString*
        name: ToJSONString
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.ToJSONString*
        name: ToJSONString
    isDefinition: true
    commentId: Overload:Global.JSON.ToJSONString
  Global.JSON.SplitArray*:
    name:
      CSharp:
      - id: Global.JSON.SplitArray*
        name: SplitArray
      VB:
      - id: Global.JSON.SplitArray*
        name: SplitArray
    nameWithType:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.SplitArray*
        name: SplitArray
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.SplitArray*
        name: SplitArray
    qualifiedName:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.SplitArray*
        name: SplitArray
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.SplitArray*
        name: SplitArray
    isDefinition: true
    commentId: Overload:Global.JSON.SplitArray
  Global.JSON.JSONProperty.#ctor*:
    name:
      CSharp:
      - id: Global.JSON.JSONProperty.#ctor*
        name: JSONProperty
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.JSONProperty*
        name: JSONProperty
      - name: .
      - id: Global.JSON.JSONProperty.#ctor*
        name: JSONProperty
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.JSONProperty*
        name: JSONProperty
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.JSONProperty*
        name: JSONProperty
      - name: .
      - id: Global.JSON.JSONProperty.#ctor*
        name: JSONProperty
      VB:
      - id: Global.JSON*
        name: JSON
      - name: .
      - id: Global.JSON.JSONProperty*
        name: JSONProperty
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.JSON.JSONProperty.#ctor
  Global.CustomKeyCode.displayName*:
    name:
      CSharp:
      - id: Global.CustomKeyCode.displayName*
        name: displayName
      VB:
      - id: Global.CustomKeyCode.displayName*
        name: displayName
    nameWithType:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.displayName*
        name: displayName
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.displayName*
        name: displayName
    qualifiedName:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.displayName*
        name: displayName
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.displayName*
        name: displayName
    isDefinition: true
    commentId: Overload:Global.CustomKeyCode.displayName
  System.Collections.Generic.List{KeyCode}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.KeyCode
        name: KeyCode
        isExternal: true
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.KeyCode
        name: KeyCode
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.KeyCode
        name: KeyCode
        isExternal: true
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.KeyCode
        name: KeyCode
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.KeyCode
        name: KeyCode
        isExternal: true
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.KeyCode
        name: KeyCode
        isExternal: true
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{KeyCode}
  Global.CustomKeyCode.keyCodes*:
    name:
      CSharp:
      - id: Global.CustomKeyCode.keyCodes*
        name: keyCodes
      VB:
      - id: Global.CustomKeyCode.keyCodes*
        name: keyCodes
    nameWithType:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.keyCodes*
        name: keyCodes
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.keyCodes*
        name: keyCodes
    qualifiedName:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.keyCodes*
        name: keyCodes
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.keyCodes*
        name: keyCodes
    isDefinition: true
    commentId: Overload:Global.CustomKeyCode.keyCodes
  Global.CustomKeyCode.op_Implicit*:
    name:
      CSharp:
      - name: implicit
      - name: " "
      - name: operator
      - name: " "
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      VB:
      - name: CType
    nameWithType:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - name: implicit
      - name: " "
      - name: operator
      - name: " "
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - name: CType
    qualifiedName:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - name: implicit
      - name: " "
      - name: operator
      - name: " "
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - name: CType
    isDefinition: true
    commentId: Overload:Global.CustomKeyCode.op_Implicit
  Global.CustomKeyCode.op_Equality*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.CustomKeyCode.op_Equality*
        name: ==
      VB:
      - name: =
    nameWithType:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - name: operator
      - name: " "
      - id: Global.CustomKeyCode.op_Equality*
        name: ==
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - name: =
    qualifiedName:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - name: operator
      - name: " "
      - id: Global.CustomKeyCode.op_Equality*
        name: ==
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - name: =
    isDefinition: true
    commentId: Overload:Global.CustomKeyCode.op_Equality
  Global.CustomKeyCode.op_Inequality*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.CustomKeyCode.op_Inequality*
        name: '!='
      VB:
      - name: <>
    nameWithType:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - name: operator
      - name: " "
      - id: Global.CustomKeyCode.op_Inequality*
        name: '!='
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - name: <>
    qualifiedName:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - name: operator
      - name: " "
      - id: Global.CustomKeyCode.op_Inequality*
        name: '!='
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - name: <>
    isDefinition: true
    commentId: Overload:Global.CustomKeyCode.op_Inequality
  Global.CustomKeyCode.Equals*:
    name:
      CSharp:
      - id: Global.CustomKeyCode.Equals*
        name: Equals
      VB:
      - id: Global.CustomKeyCode.Equals*
        name: Equals
    nameWithType:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.Equals*
        name: Equals
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.Equals*
        name: Equals
    qualifiedName:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.Equals*
        name: Equals
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.Equals*
        name: Equals
    isDefinition: true
    commentId: Overload:Global.CustomKeyCode.Equals
  Global.CustomKeyCode.GetHashCode*:
    name:
      CSharp:
      - id: Global.CustomKeyCode.GetHashCode*
        name: GetHashCode
      VB:
      - id: Global.CustomKeyCode.GetHashCode*
        name: GetHashCode
    nameWithType:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetHashCode*
        name: GetHashCode
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetHashCode*
        name: GetHashCode
    qualifiedName:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetHashCode*
        name: GetHashCode
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetHashCode*
        name: GetHashCode
    isDefinition: true
    commentId: Overload:Global.CustomKeyCode.GetHashCode
  Global.CustomKeyCode.ToString*:
    name:
      CSharp:
      - id: Global.CustomKeyCode.ToString*
        name: ToString
      VB:
      - id: Global.CustomKeyCode.ToString*
        name: ToString
    nameWithType:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.ToString*
        name: ToString
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.ToString*
        name: ToString
    qualifiedName:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.ToString*
        name: ToString
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.ToString*
        name: ToString
    isDefinition: true
    commentId: Overload:Global.CustomKeyCode.ToString
  Global.CustomKeyCode.FromString*:
    name:
      CSharp:
      - id: Global.CustomKeyCode.FromString*
        name: FromString
      VB:
      - id: Global.CustomKeyCode.FromString*
        name: FromString
    nameWithType:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.FromString*
        name: FromString
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.FromString*
        name: FromString
    qualifiedName:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.FromString*
        name: FromString
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.FromString*
        name: FromString
    isDefinition: true
    commentId: Overload:Global.CustomKeyCode.FromString
  Global.CustomKeyCode.GetKey*:
    name:
      CSharp:
      - id: Global.CustomKeyCode.GetKey*
        name: GetKey
      VB:
      - id: Global.CustomKeyCode.GetKey*
        name: GetKey
    nameWithType:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetKey*
        name: GetKey
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetKey*
        name: GetKey
    qualifiedName:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetKey*
        name: GetKey
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetKey*
        name: GetKey
    isDefinition: true
    commentId: Overload:Global.CustomKeyCode.GetKey
  Global.CustomKeyCode.GetKeyDown*:
    name:
      CSharp:
      - id: Global.CustomKeyCode.GetKeyDown*
        name: GetKeyDown
      VB:
      - id: Global.CustomKeyCode.GetKeyDown*
        name: GetKeyDown
    nameWithType:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetKeyDown*
        name: GetKeyDown
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetKeyDown*
        name: GetKeyDown
    qualifiedName:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetKeyDown*
        name: GetKeyDown
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetKeyDown*
        name: GetKeyDown
    isDefinition: true
    commentId: Overload:Global.CustomKeyCode.GetKeyDown
  Global.CustomKeyCode.GetKeyUp*:
    name:
      CSharp:
      - id: Global.CustomKeyCode.GetKeyUp*
        name: GetKeyUp
      VB:
      - id: Global.CustomKeyCode.GetKeyUp*
        name: GetKeyUp
    nameWithType:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetKeyUp*
        name: GetKeyUp
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetKeyUp*
        name: GetKeyUp
    qualifiedName:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetKeyUp*
        name: GetKeyUp
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetKeyUp*
        name: GetKeyUp
    isDefinition: true
    commentId: Overload:Global.CustomKeyCode.GetKeyUp
  Global.CustomKeyCode.Contains*:
    name:
      CSharp:
      - id: Global.CustomKeyCode.Contains*
        name: Contains
      VB:
      - id: Global.CustomKeyCode.Contains*
        name: Contains
    nameWithType:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.Contains*
        name: Contains
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.Contains*
        name: Contains
    qualifiedName:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.Contains*
        name: Contains
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.Contains*
        name: Contains
    isDefinition: true
    commentId: Overload:Global.CustomKeyCode.Contains
  Global.CustomKeyCode.GetEnumerator*:
    name:
      CSharp:
      - id: Global.CustomKeyCode.GetEnumerator*
        name: GetEnumerator
      VB:
      - id: Global.CustomKeyCode.GetEnumerator*
        name: GetEnumerator
    nameWithType:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetEnumerator*
        name: GetEnumerator
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetEnumerator*
        name: GetEnumerator
    qualifiedName:
      CSharp:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetEnumerator*
        name: GetEnumerator
      VB:
      - id: Global.CustomKeyCode*
        name: CustomKeyCode
      - name: .
      - id: Global.CustomKeyCode.GetEnumerator*
        name: GetEnumerator
    isDefinition: true
    commentId: Overload:Global.CustomKeyCode.GetEnumerator
  System.Collections.Generic.List{CustomKeyCode}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.CustomKeyCode
        name: CustomKeyCode
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{CustomKeyCode}
  Global.KeyboardShortcut.keyCodes*:
    name:
      CSharp:
      - id: Global.KeyboardShortcut.keyCodes*
        name: keyCodes
      VB:
      - id: Global.KeyboardShortcut.keyCodes*
        name: keyCodes
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.keyCodes*
        name: keyCodes
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.keyCodes*
        name: keyCodes
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.keyCodes*
        name: keyCodes
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.keyCodes*
        name: keyCodes
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcut.keyCodes
  Global.KeyboardShortcut.None*:
    name:
      CSharp:
      - id: Global.KeyboardShortcut.None*
        name: None
      VB:
      - id: Global.KeyboardShortcut.None*
        name: None
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.None*
        name: None
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.None*
        name: None
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.None*
        name: None
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.None*
        name: None
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcut.None
  Global.KeyboardShortcut.#ctor*:
    name:
      CSharp:
      - id: Global.KeyboardShortcut.#ctor*
        name: KeyboardShortcut
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.#ctor*
        name: KeyboardShortcut
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.#ctor*
        name: KeyboardShortcut
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcut.#ctor
  Global.KeyboardShortcut.op_Equality*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.KeyboardShortcut.op_Equality*
        name: ==
      VB:
      - name: =
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - name: operator
      - name: " "
      - id: Global.KeyboardShortcut.op_Equality*
        name: ==
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - name: =
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - name: operator
      - name: " "
      - id: Global.KeyboardShortcut.op_Equality*
        name: ==
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - name: =
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcut.op_Equality
  Global.KeyboardShortcut.op_Inequality*:
    name:
      CSharp:
      - name: operator
      - name: " "
      - id: Global.KeyboardShortcut.op_Inequality*
        name: '!='
      VB:
      - name: <>
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - name: operator
      - name: " "
      - id: Global.KeyboardShortcut.op_Inequality*
        name: '!='
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - name: <>
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - name: operator
      - name: " "
      - id: Global.KeyboardShortcut.op_Inequality*
        name: '!='
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - name: <>
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcut.op_Inequality
  Global.KeyboardShortcut.Equals*:
    name:
      CSharp:
      - id: Global.KeyboardShortcut.Equals*
        name: Equals
      VB:
      - id: Global.KeyboardShortcut.Equals*
        name: Equals
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.Equals*
        name: Equals
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.Equals*
        name: Equals
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.Equals*
        name: Equals
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.Equals*
        name: Equals
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcut.Equals
  Global.KeyboardShortcut.GetHashCode*:
    name:
      CSharp:
      - id: Global.KeyboardShortcut.GetHashCode*
        name: GetHashCode
      VB:
      - id: Global.KeyboardShortcut.GetHashCode*
        name: GetHashCode
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.GetHashCode*
        name: GetHashCode
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.GetHashCode*
        name: GetHashCode
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.GetHashCode*
        name: GetHashCode
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.GetHashCode*
        name: GetHashCode
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcut.GetHashCode
  Global.KeyboardShortcut.Add*:
    name:
      CSharp:
      - id: Global.KeyboardShortcut.Add*
        name: Add
      VB:
      - id: Global.KeyboardShortcut.Add*
        name: Add
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.Add*
        name: Add
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.Add*
        name: Add
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.Add*
        name: Add
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.Add*
        name: Add
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcut.Add
  Global.KeyboardShortcut.Remove*:
    name:
      CSharp:
      - id: Global.KeyboardShortcut.Remove*
        name: Remove
      VB:
      - id: Global.KeyboardShortcut.Remove*
        name: Remove
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.Remove*
        name: Remove
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.Remove*
        name: Remove
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.Remove*
        name: Remove
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.Remove*
        name: Remove
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcut.Remove
  Global.KeyboardShortcut.Contains*:
    name:
      CSharp:
      - id: Global.KeyboardShortcut.Contains*
        name: Contains
      VB:
      - id: Global.KeyboardShortcut.Contains*
        name: Contains
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.Contains*
        name: Contains
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.Contains*
        name: Contains
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.Contains*
        name: Contains
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.Contains*
        name: Contains
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcut.Contains
  Global.KeyboardShortcut.GetKeys*:
    name:
      CSharp:
      - id: Global.KeyboardShortcut.GetKeys*
        name: GetKeys
      VB:
      - id: Global.KeyboardShortcut.GetKeys*
        name: GetKeys
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.GetKeys*
        name: GetKeys
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.GetKeys*
        name: GetKeys
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.GetKeys*
        name: GetKeys
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.GetKeys*
        name: GetKeys
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcut.GetKeys
  Global.KeyboardShortcut.GetKeysDown*:
    name:
      CSharp:
      - id: Global.KeyboardShortcut.GetKeysDown*
        name: GetKeysDown
      VB:
      - id: Global.KeyboardShortcut.GetKeysDown*
        name: GetKeysDown
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.GetKeysDown*
        name: GetKeysDown
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.GetKeysDown*
        name: GetKeysDown
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.GetKeysDown*
        name: GetKeysDown
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.GetKeysDown*
        name: GetKeysDown
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcut.GetKeysDown
  Global.KeyboardShortcut.GetKeysUp*:
    name:
      CSharp:
      - id: Global.KeyboardShortcut.GetKeysUp*
        name: GetKeysUp
      VB:
      - id: Global.KeyboardShortcut.GetKeysUp*
        name: GetKeysUp
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.GetKeysUp*
        name: GetKeysUp
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.GetKeysUp*
        name: GetKeysUp
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.GetKeysUp*
        name: GetKeysUp
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.GetKeysUp*
        name: GetKeysUp
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcut.GetKeysUp
  Global.KeyboardShortcut.ToString*:
    name:
      CSharp:
      - id: Global.KeyboardShortcut.ToString*
        name: ToString
      VB:
      - id: Global.KeyboardShortcut.ToString*
        name: ToString
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.ToString*
        name: ToString
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.ToString*
        name: ToString
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.ToString*
        name: ToString
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.ToString*
        name: ToString
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcut.ToString
  Global.KeyboardShortcut.ToArray*:
    name:
      CSharp:
      - id: Global.KeyboardShortcut.ToArray*
        name: ToArray
      VB:
      - id: Global.KeyboardShortcut.ToArray*
        name: ToArray
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.ToArray*
        name: ToArray
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.ToArray*
        name: ToArray
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.ToArray*
        name: ToArray
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.ToArray*
        name: ToArray
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcut.ToArray
  Global.KeyboardShortcut.ToJSON*:
    name:
      CSharp:
      - id: Global.KeyboardShortcut.ToJSON*
        name: ToJSON
      VB:
      - id: Global.KeyboardShortcut.ToJSON*
        name: ToJSON
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.ToJSON*
        name: ToJSON
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.ToJSON*
        name: ToJSON
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.ToJSON*
        name: ToJSON
      VB:
      - id: Global.KeyboardShortcut*
        name: KeyboardShortcut
      - name: .
      - id: Global.KeyboardShortcut.ToJSON*
        name: ToJSON
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcut.ToJSON
  Global.KeyboardShortcutOptionsManager:
    name:
      CSharp:
      - id: Global.KeyboardShortcutOptionsManager
        name: KeyboardShortcutOptionsManager
      VB:
      - id: Global.KeyboardShortcutOptionsManager
        name: KeyboardShortcutOptionsManager
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcutOptionsManager
        name: KeyboardShortcutOptionsManager
      VB:
      - id: Global.KeyboardShortcutOptionsManager
        name: KeyboardShortcutOptionsManager
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcutOptionsManager
        name: KeyboardShortcutOptionsManager
      VB:
      - id: Global.KeyboardShortcutOptionsManager
        name: KeyboardShortcutOptionsManager
    isDefinition: true
    commentId: T:Global.KeyboardShortcutOptionsManager
  System.Collections.Generic.Dictionary`2:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - name: TKey
      - name: ','
      - name: " "
      - name: TValue
      - name: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: ','
      - name: " "
      - name: TValue
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - name: TKey
      - name: ','
      - name: " "
      - name: TValue
      - name: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: ','
      - name: " "
      - name: TValue
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - name: TKey
      - name: ','
      - name: " "
      - name: TValue
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: ','
      - name: " "
      - name: TValue
      - name: )
    isDefinition: true
    commentId: T:System.Collections.Generic.Dictionary`2
  System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{KeyboardShortcut}}:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: '>'
      - name: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: '>'
      - name: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: ','
      - name: " "
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: '>'
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: ','
      - name: " "
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: )
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{KeyboardShortcut}}
  Global.KeyboardShortcuts.shortcuts*:
    name:
      CSharp:
      - id: Global.KeyboardShortcuts.shortcuts*
        name: shortcuts
      VB:
      - id: Global.KeyboardShortcuts.shortcuts*
        name: shortcuts
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.shortcuts*
        name: shortcuts
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.shortcuts*
        name: shortcuts
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.shortcuts*
        name: shortcuts
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.shortcuts*
        name: shortcuts
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcuts.shortcuts
  Global.KeyboardShortcuts.LoadShortcuts*:
    name:
      CSharp:
      - id: Global.KeyboardShortcuts.LoadShortcuts*
        name: LoadShortcuts
      VB:
      - id: Global.KeyboardShortcuts.LoadShortcuts*
        name: LoadShortcuts
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.LoadShortcuts*
        name: LoadShortcuts
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.LoadShortcuts*
        name: LoadShortcuts
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.LoadShortcuts*
        name: LoadShortcuts
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.LoadShortcuts*
        name: LoadShortcuts
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcuts.LoadShortcuts
  Global.KeyboardShortcuts.SaveShortcuts*:
    name:
      CSharp:
      - id: Global.KeyboardShortcuts.SaveShortcuts*
        name: SaveShortcuts
      VB:
      - id: Global.KeyboardShortcuts.SaveShortcuts*
        name: SaveShortcuts
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.SaveShortcuts*
        name: SaveShortcuts
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.SaveShortcuts*
        name: SaveShortcuts
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.SaveShortcuts*
        name: SaveShortcuts
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.SaveShortcuts*
        name: SaveShortcuts
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcuts.SaveShortcuts
  Global.KeyboardShortcuts.ToJSON*:
    name:
      CSharp:
      - id: Global.KeyboardShortcuts.ToJSON*
        name: ToJSON
      VB:
      - id: Global.KeyboardShortcuts.ToJSON*
        name: ToJSON
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.ToJSON*
        name: ToJSON
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.ToJSON*
        name: ToJSON
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.ToJSON*
        name: ToJSON
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.ToJSON*
        name: ToJSON
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcuts.ToJSON
  Global.KeyboardShortcuts.AddShortcut*:
    name:
      CSharp:
      - id: Global.KeyboardShortcuts.AddShortcut*
        name: AddShortcut
      VB:
      - id: Global.KeyboardShortcuts.AddShortcut*
        name: AddShortcut
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.AddShortcut*
        name: AddShortcut
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.AddShortcut*
        name: AddShortcut
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.AddShortcut*
        name: AddShortcut
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.AddShortcut*
        name: AddShortcut
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcuts.AddShortcut
  Global.KeyboardShortcuts.SetShortcut*:
    name:
      CSharp:
      - id: Global.KeyboardShortcuts.SetShortcut*
        name: SetShortcut
      VB:
      - id: Global.KeyboardShortcuts.SetShortcut*
        name: SetShortcut
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.SetShortcut*
        name: SetShortcut
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.SetShortcut*
        name: SetShortcut
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.SetShortcut*
        name: SetShortcut
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.SetShortcut*
        name: SetShortcut
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcuts.SetShortcut
  Global.KeyboardShortcuts.ClearShortcutsFor*:
    name:
      CSharp:
      - id: Global.KeyboardShortcuts.ClearShortcutsFor*
        name: ClearShortcutsFor
      VB:
      - id: Global.KeyboardShortcuts.ClearShortcutsFor*
        name: ClearShortcutsFor
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.ClearShortcutsFor*
        name: ClearShortcutsFor
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.ClearShortcutsFor*
        name: ClearShortcutsFor
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.ClearShortcutsFor*
        name: ClearShortcutsFor
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.ClearShortcutsFor*
        name: ClearShortcutsFor
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcuts.ClearShortcutsFor
  System.Collections.Generic.List{KeyboardShortcut}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{KeyboardShortcut}
  Global.KeyboardShortcuts.GetShortcutsFor*:
    name:
      CSharp:
      - id: Global.KeyboardShortcuts.GetShortcutsFor*
        name: GetShortcutsFor
      VB:
      - id: Global.KeyboardShortcuts.GetShortcutsFor*
        name: GetShortcutsFor
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.GetShortcutsFor*
        name: GetShortcutsFor
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.GetShortcutsFor*
        name: GetShortcutsFor
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.GetShortcutsFor*
        name: GetShortcutsFor
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.GetShortcutsFor*
        name: GetShortcutsFor
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcuts.GetShortcutsFor
  Global.KeyboardShortcuts.ContainsShortcutFor*:
    name:
      CSharp:
      - id: Global.KeyboardShortcuts.ContainsShortcutFor*
        name: ContainsShortcutFor
      VB:
      - id: Global.KeyboardShortcuts.ContainsShortcutFor*
        name: ContainsShortcutFor
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.ContainsShortcutFor*
        name: ContainsShortcutFor
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.ContainsShortcutFor*
        name: ContainsShortcutFor
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.ContainsShortcutFor*
        name: ContainsShortcutFor
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.ContainsShortcutFor*
        name: ContainsShortcutFor
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcuts.ContainsShortcutFor
  Global.KeyboardShortcuts.ContainsKey*:
    name:
      CSharp:
      - id: Global.KeyboardShortcuts.ContainsKey*
        name: ContainsKey
      VB:
      - id: Global.KeyboardShortcuts.ContainsKey*
        name: ContainsKey
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.ContainsKey*
        name: ContainsKey
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.ContainsKey*
        name: ContainsKey
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.ContainsKey*
        name: ContainsKey
      VB:
      - id: Global.KeyboardShortcuts*
        name: KeyboardShortcuts
      - name: .
      - id: Global.KeyboardShortcuts.ContainsKey*
        name: ContainsKey
    isDefinition: true
    commentId: Overload:Global.KeyboardShortcuts.ContainsKey
  Global.KeyboardShortcuts:
    name:
      CSharp:
      - id: Global.KeyboardShortcuts
        name: KeyboardShortcuts
      VB:
      - id: Global.KeyboardShortcuts
        name: KeyboardShortcuts
    nameWithType:
      CSharp:
      - id: Global.KeyboardShortcuts
        name: KeyboardShortcuts
      VB:
      - id: Global.KeyboardShortcuts
        name: KeyboardShortcuts
    qualifiedName:
      CSharp:
      - id: Global.KeyboardShortcuts
        name: KeyboardShortcuts
      VB:
      - id: Global.KeyboardShortcuts
        name: KeyboardShortcuts
    isDefinition: true
    commentId: T:Global.KeyboardShortcuts
  Global.AnimFrameRefMode:
    name:
      CSharp:
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      VB:
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
    nameWithType:
      CSharp:
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      VB:
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
    qualifiedName:
      CSharp:
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      VB:
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
    isDefinition: true
    commentId: T:Global.AnimFrameRefMode
  Global.LayerType:
    name:
      CSharp:
      - id: Global.LayerType
        name: LayerType
      VB:
      - id: Global.LayerType
        name: LayerType
    nameWithType:
      CSharp:
      - id: Global.LayerType
        name: LayerType
      VB:
      - id: Global.LayerType
        name: LayerType
    qualifiedName:
      CSharp:
      - id: Global.LayerType
        name: LayerType
      VB:
      - id: Global.LayerType
        name: LayerType
    isDefinition: true
    commentId: T:Global.LayerType
  Global.Layer.layerType*:
    name:
      CSharp:
      - id: Global.Layer.layerType*
        name: layerType
      VB:
      - id: Global.Layer.layerType*
        name: layerType
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.layerType*
        name: layerType
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.layerType*
        name: layerType
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.layerType*
        name: layerType
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.layerType*
        name: layerType
    isDefinition: true
    commentId: Overload:Global.Layer.layerType
  Global.Layer.name*:
    name:
      CSharp:
      - id: Global.Layer.name*
        name: name
      VB:
      - id: Global.Layer.name*
        name: name
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.name*
        name: name
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.name*
        name: name
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.name*
        name: name
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.name*
        name: name
    isDefinition: true
    commentId: Overload:Global.Layer.name
  Global.Layer.width*:
    name:
      CSharp:
      - id: Global.Layer.width*
        name: width
      VB:
      - id: Global.Layer.width*
        name: width
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.width*
        name: width
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.width*
        name: width
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.width*
        name: width
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.width*
        name: width
    isDefinition: true
    commentId: Overload:Global.Layer.width
  Global.Layer.height*:
    name:
      CSharp:
      - id: Global.Layer.height*
        name: height
      VB:
      - id: Global.Layer.height*
        name: height
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.height*
        name: height
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.height*
        name: height
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.height*
        name: height
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.height*
        name: height
    isDefinition: true
    commentId: Overload:Global.Layer.height
  Global.Layer.rect*:
    name:
      CSharp:
      - id: Global.Layer.rect*
        name: rect
      VB:
      - id: Global.Layer.rect*
        name: rect
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.rect*
        name: rect
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.rect*
        name: rect
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.rect*
        name: rect
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.rect*
        name: rect
    isDefinition: true
    commentId: Overload:Global.Layer.rect
  Global.Layer.visible*:
    name:
      CSharp:
      - id: Global.Layer.visible*
        name: visible
      VB:
      - id: Global.Layer.visible*
        name: visible
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.visible*
        name: visible
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.visible*
        name: visible
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.visible*
        name: visible
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.visible*
        name: visible
    isDefinition: true
    commentId: Overload:Global.Layer.visible
  Global.Layer.locked*:
    name:
      CSharp:
      - id: Global.Layer.locked*
        name: locked
      VB:
      - id: Global.Layer.locked*
        name: locked
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.locked*
        name: locked
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.locked*
        name: locked
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.locked*
        name: locked
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.locked*
        name: locked
    isDefinition: true
    commentId: Overload:Global.Layer.locked
  Global.Layer.opacity*:
    name:
      CSharp:
      - id: Global.Layer.opacity*
        name: opacity
      VB:
      - id: Global.Layer.opacity*
        name: opacity
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.opacity*
        name: opacity
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.opacity*
        name: opacity
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.opacity*
        name: opacity
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.opacity*
        name: opacity
    isDefinition: true
    commentId: Overload:Global.Layer.opacity
  Global.Layer.blendMode*:
    name:
      CSharp:
      - id: Global.Layer.blendMode*
        name: blendMode
      VB:
      - id: Global.Layer.blendMode*
        name: blendMode
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.blendMode*
        name: blendMode
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.blendMode*
        name: blendMode
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.blendMode*
        name: blendMode
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.blendMode*
        name: blendMode
    isDefinition: true
    commentId: Overload:Global.Layer.blendMode
  Global.Layer.keyFrames*:
    name:
      CSharp:
      - id: Global.Layer.keyFrames*
        name: keyFrames
      VB:
      - id: Global.Layer.keyFrames*
        name: keyFrames
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.keyFrames*
        name: keyFrames
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.keyFrames*
        name: keyFrames
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.keyFrames*
        name: keyFrames
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.keyFrames*
        name: keyFrames
    isDefinition: true
    commentId: Overload:Global.Layer.keyFrames
  Global.Layer.keyFrameIndices*:
    name:
      CSharp:
      - id: Global.Layer.keyFrameIndices*
        name: keyFrameIndices
      VB:
      - id: Global.Layer.keyFrameIndices*
        name: keyFrameIndices
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.keyFrameIndices*
        name: keyFrameIndices
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.keyFrameIndices*
        name: keyFrameIndices
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.keyFrameIndices*
        name: keyFrameIndices
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.keyFrameIndices*
        name: keyFrameIndices
    isDefinition: true
    commentId: Overload:Global.Layer.keyFrameIndices
  Global.Texture2D[]:
    name:
      CSharp:
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      - name: (
      - name: )
    isDefinition: false
  Global.Layer.keyFrameTextures*:
    name:
      CSharp:
      - id: Global.Layer.keyFrameTextures*
        name: keyFrameTextures
      VB:
      - id: Global.Layer.keyFrameTextures*
        name: keyFrameTextures
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.keyFrameTextures*
        name: keyFrameTextures
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.keyFrameTextures*
        name: keyFrameTextures
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.keyFrameTextures*
        name: keyFrameTextures
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.keyFrameTextures*
        name: keyFrameTextures
    isDefinition: true
    commentId: Overload:Global.Layer.keyFrameTextures
  Global.UnityEvent`2:
    name:
      CSharp:
      - id: Global.UnityEvent`2
        name: UnityEvent
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.UnityEvent`2
        name: UnityEvent
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UnityEvent`2
        name: UnityEvent
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.UnityEvent`2
        name: UnityEvent
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UnityEvent`2
        name: UnityEvent
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.UnityEvent`2
        name: UnityEvent
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    isDefinition: true
    commentId: '!:Global.UnityEvent`2'
  Global.UnityEvent{IntVector2[],System.Int32[]}:
    name:
      CSharp:
      - id: Global.UnityEvent`2
        name: UnityEvent
        isExternal: true
      - name: <
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: '['
      - name: ']'
      - name: '>'
      VB:
      - id: Global.UnityEvent`2
        name: UnityEvent
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: (
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UnityEvent`2
        name: UnityEvent
        isExternal: true
      - name: <
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: '['
      - name: ']'
      - name: '>'
      VB:
      - id: Global.UnityEvent`2
        name: UnityEvent
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: (
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UnityEvent`2
        name: UnityEvent
        isExternal: true
      - name: <
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: '['
      - name: ']'
      - name: '>'
      VB:
      - id: Global.UnityEvent`2
        name: UnityEvent
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: (
      - name: )
      - name: )
    isDefinition: false
    definition: Global.UnityEvent`2
    commentId: '!:Global.UnityEvent{IntVector2[],System.Int32[]}'
  Global.Layer.#ctor*:
    name:
      CSharp:
      - id: Global.Layer.#ctor*
        name: Layer
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.#ctor*
        name: Layer
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.#ctor*
        name: Layer
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.Layer.#ctor
  Global.Layer.DeepCopy*:
    name:
      CSharp:
      - id: Global.Layer.DeepCopy*
        name: DeepCopy
      VB:
      - id: Global.Layer.DeepCopy*
        name: DeepCopy
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.DeepCopy*
        name: DeepCopy
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.DeepCopy*
        name: DeepCopy
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.DeepCopy*
        name: DeepCopy
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.DeepCopy*
        name: DeepCopy
    isDefinition: true
    commentId: Overload:Global.Layer.DeepCopy
  Global.Layer.SetPixel*:
    name:
      CSharp:
      - id: Global.Layer.SetPixel*
        name: SetPixel
      VB:
      - id: Global.Layer.SetPixel*
        name: SetPixel
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SetPixel*
        name: SetPixel
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SetPixel*
        name: SetPixel
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SetPixel*
        name: SetPixel
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SetPixel*
        name: SetPixel
    isDefinition: true
    commentId: Overload:Global.Layer.SetPixel
  Global.Layer.SetPixelsNoEvent*:
    name:
      CSharp:
      - id: Global.Layer.SetPixelsNoEvent*
        name: SetPixelsNoEvent
      VB:
      - id: Global.Layer.SetPixelsNoEvent*
        name: SetPixelsNoEvent
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SetPixelsNoEvent*
        name: SetPixelsNoEvent
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SetPixelsNoEvent*
        name: SetPixelsNoEvent
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SetPixelsNoEvent*
        name: SetPixelsNoEvent
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SetPixelsNoEvent*
        name: SetPixelsNoEvent
    isDefinition: true
    commentId: Overload:Global.Layer.SetPixelsNoEvent
  Global.Layer.SetPixels*:
    name:
      CSharp:
      - id: Global.Layer.SetPixels*
        name: SetPixels
      VB:
      - id: Global.Layer.SetPixels*
        name: SetPixels
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SetPixels*
        name: SetPixels
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SetPixels*
        name: SetPixels
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SetPixels*
        name: SetPixels
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SetPixels*
        name: SetPixels
    isDefinition: true
    commentId: Overload:Global.Layer.SetPixels
  Global.Layer.GetPixel*:
    name:
      CSharp:
      - id: Global.Layer.GetPixel*
        name: GetPixel
      VB:
      - id: Global.Layer.GetPixel*
        name: GetPixel
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.GetPixel*
        name: GetPixel
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.GetPixel*
        name: GetPixel
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.GetPixel*
        name: GetPixel
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.GetPixel*
        name: GetPixel
    isDefinition: true
    commentId: Overload:Global.Layer.GetPixel
  Global.Layer.IsBlank*:
    name:
      CSharp:
      - id: Global.Layer.IsBlank*
        name: IsBlank
      VB:
      - id: Global.Layer.IsBlank*
        name: IsBlank
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.IsBlank*
        name: IsBlank
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.IsBlank*
        name: IsBlank
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.IsBlank*
        name: IsBlank
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.IsBlank*
        name: IsBlank
    isDefinition: true
    commentId: Overload:Global.Layer.IsBlank
  Global.Layer.FlipNoEvent*:
    name:
      CSharp:
      - id: Global.Layer.FlipNoEvent*
        name: FlipNoEvent
      VB:
      - id: Global.Layer.FlipNoEvent*
        name: FlipNoEvent
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.FlipNoEvent*
        name: FlipNoEvent
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.FlipNoEvent*
        name: FlipNoEvent
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.FlipNoEvent*
        name: FlipNoEvent
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.FlipNoEvent*
        name: FlipNoEvent
    isDefinition: true
    commentId: Overload:Global.Layer.FlipNoEvent
  Global.Layer.Flip*:
    name:
      CSharp:
      - id: Global.Layer.Flip*
        name: Flip
      VB:
      - id: Global.Layer.Flip*
        name: Flip
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.Flip*
        name: Flip
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.Flip*
        name: Flip
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.Flip*
        name: Flip
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.Flip*
        name: Flip
    isDefinition: true
    commentId: Overload:Global.Layer.Flip
  Global.Layer.RotateNoEvent*:
    name:
      CSharp:
      - id: Global.Layer.RotateNoEvent*
        name: RotateNoEvent
      VB:
      - id: Global.Layer.RotateNoEvent*
        name: RotateNoEvent
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.RotateNoEvent*
        name: RotateNoEvent
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.RotateNoEvent*
        name: RotateNoEvent
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.RotateNoEvent*
        name: RotateNoEvent
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.RotateNoEvent*
        name: RotateNoEvent
    isDefinition: true
    commentId: Overload:Global.Layer.RotateNoEvent
  Global.Layer.Rotate*:
    name:
      CSharp:
      - id: Global.Layer.Rotate*
        name: Rotate
      VB:
      - id: Global.Layer.Rotate*
        name: Rotate
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.Rotate*
        name: Rotate
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.Rotate*
        name: Rotate
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.Rotate*
        name: Rotate
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.Rotate*
        name: Rotate
    isDefinition: true
    commentId: Overload:Global.Layer.Rotate
  Global.Layer.ExtendNoEvent*:
    name:
      CSharp:
      - id: Global.Layer.ExtendNoEvent*
        name: ExtendNoEvent
      VB:
      - id: Global.Layer.ExtendNoEvent*
        name: ExtendNoEvent
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.ExtendNoEvent*
        name: ExtendNoEvent
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.ExtendNoEvent*
        name: ExtendNoEvent
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.ExtendNoEvent*
        name: ExtendNoEvent
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.ExtendNoEvent*
        name: ExtendNoEvent
    isDefinition: true
    commentId: Overload:Global.Layer.ExtendNoEvent
  Global.Layer.Extend*:
    name:
      CSharp:
      - id: Global.Layer.Extend*
        name: Extend
      VB:
      - id: Global.Layer.Extend*
        name: Extend
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.Extend*
        name: Extend
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.Extend*
        name: Extend
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.Extend*
        name: Extend
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.Extend*
        name: Extend
    isDefinition: true
    commentId: Overload:Global.Layer.Extend
  Global.Layer.ScaleNoEvent*:
    name:
      CSharp:
      - id: Global.Layer.ScaleNoEvent*
        name: ScaleNoEvent
      VB:
      - id: Global.Layer.ScaleNoEvent*
        name: ScaleNoEvent
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.ScaleNoEvent*
        name: ScaleNoEvent
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.ScaleNoEvent*
        name: ScaleNoEvent
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.ScaleNoEvent*
        name: ScaleNoEvent
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.ScaleNoEvent*
        name: ScaleNoEvent
    isDefinition: true
    commentId: Overload:Global.Layer.ScaleNoEvent
  Global.Layer.Scale*:
    name:
      CSharp:
      - id: Global.Layer.Scale*
        name: Scale
      VB:
      - id: Global.Layer.Scale*
        name: Scale
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.Scale*
        name: Scale
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.Scale*
        name: Scale
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.Scale*
        name: Scale
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.Scale*
        name: Scale
    isDefinition: true
    commentId: Overload:Global.Layer.Scale
  Global.Layer.ToJSON*:
    name:
      CSharp:
      - id: Global.Layer.ToJSON*
        name: ToJSON
      VB:
      - id: Global.Layer.ToJSON*
        name: ToJSON
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.ToJSON*
        name: ToJSON
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.ToJSON*
        name: ToJSON
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.ToJSON*
        name: ToJSON
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.ToJSON*
        name: ToJSON
    isDefinition: true
    commentId: Overload:Global.Layer.ToJSON
  Global.Layer.LoadJSON*:
    name:
      CSharp:
      - id: Global.Layer.LoadJSON*
        name: LoadJSON
      VB:
      - id: Global.Layer.LoadJSON*
        name: LoadJSON
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.LoadJSON*
        name: LoadJSON
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.LoadJSON*
        name: LoadJSON
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.LoadJSON*
        name: LoadJSON
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.LoadJSON*
        name: LoadJSON
    isDefinition: true
    commentId: Overload:Global.Layer.LoadJSON
  Global.Layer.FromJSON*:
    name:
      CSharp:
      - id: Global.Layer.FromJSON*
        name: FromJSON
      VB:
      - id: Global.Layer.FromJSON*
        name: FromJSON
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.FromJSON*
        name: FromJSON
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.FromJSON*
        name: FromJSON
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.FromJSON*
        name: FromJSON
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.FromJSON*
        name: FromJSON
    isDefinition: true
    commentId: Overload:Global.Layer.FromJSON
  Global.Layer.Item*:
    name:
      CSharp:
      - name: this
      VB:
      - id: Global.Layer.Item*
        name: this[]
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - name: this
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.Item*
        name: this[]
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - name: this
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.Item*
        name: this[]
    isDefinition: true
    commentId: Overload:Global.Layer.Item
  Global.Layer.GetKeyFrame*:
    name:
      CSharp:
      - id: Global.Layer.GetKeyFrame*
        name: GetKeyFrame
      VB:
      - id: Global.Layer.GetKeyFrame*
        name: GetKeyFrame
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.GetKeyFrame*
        name: GetKeyFrame
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.GetKeyFrame*
        name: GetKeyFrame
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.GetKeyFrame*
        name: GetKeyFrame
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.GetKeyFrame*
        name: GetKeyFrame
    isDefinition: true
    commentId: Overload:Global.Layer.GetKeyFrame
  Global.Layer.HasKeyFrameAt*:
    name:
      CSharp:
      - id: Global.Layer.HasKeyFrameAt*
        name: HasKeyFrameAt
      VB:
      - id: Global.Layer.HasKeyFrameAt*
        name: HasKeyFrameAt
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.HasKeyFrameAt*
        name: HasKeyFrameAt
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.HasKeyFrameAt*
        name: HasKeyFrameAt
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.HasKeyFrameAt*
        name: HasKeyFrameAt
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.HasKeyFrameAt*
        name: HasKeyFrameAt
    isDefinition: true
    commentId: Overload:Global.Layer.HasKeyFrameAt
  Global.Layer.AddKeyFrame*:
    name:
      CSharp:
      - id: Global.Layer.AddKeyFrame*
        name: AddKeyFrame
      VB:
      - id: Global.Layer.AddKeyFrame*
        name: AddKeyFrame
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.AddKeyFrame*
        name: AddKeyFrame
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.AddKeyFrame*
        name: AddKeyFrame
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.AddKeyFrame*
        name: AddKeyFrame
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.AddKeyFrame*
        name: AddKeyFrame
    isDefinition: true
    commentId: Overload:Global.Layer.AddKeyFrame
  Global.Layer.DeleteMostRecentKeyFrame*:
    name:
      CSharp:
      - id: Global.Layer.DeleteMostRecentKeyFrame*
        name: DeleteMostRecentKeyFrame
      VB:
      - id: Global.Layer.DeleteMostRecentKeyFrame*
        name: DeleteMostRecentKeyFrame
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.DeleteMostRecentKeyFrame*
        name: DeleteMostRecentKeyFrame
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.DeleteMostRecentKeyFrame*
        name: DeleteMostRecentKeyFrame
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.DeleteMostRecentKeyFrame*
        name: DeleteMostRecentKeyFrame
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.DeleteMostRecentKeyFrame*
        name: DeleteMostRecentKeyFrame
    isDefinition: true
    commentId: Overload:Global.Layer.DeleteMostRecentKeyFrame
  Global.Layer.DeleteKeyFrameNoEvent*:
    name:
      CSharp:
      - id: Global.Layer.DeleteKeyFrameNoEvent*
        name: DeleteKeyFrameNoEvent
      VB:
      - id: Global.Layer.DeleteKeyFrameNoEvent*
        name: DeleteKeyFrameNoEvent
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrameNoEvent*
        name: DeleteKeyFrameNoEvent
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrameNoEvent*
        name: DeleteKeyFrameNoEvent
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrameNoEvent*
        name: DeleteKeyFrameNoEvent
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrameNoEvent*
        name: DeleteKeyFrameNoEvent
    isDefinition: true
    commentId: Overload:Global.Layer.DeleteKeyFrameNoEvent
  Global.Layer.DeleteKeyFrame*:
    name:
      CSharp:
      - id: Global.Layer.DeleteKeyFrame*
        name: DeleteKeyFrame
      VB:
      - id: Global.Layer.DeleteKeyFrame*
        name: DeleteKeyFrame
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrame*
        name: DeleteKeyFrame
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrame*
        name: DeleteKeyFrame
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrame*
        name: DeleteKeyFrame
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrame*
        name: DeleteKeyFrame
    isDefinition: true
    commentId: Overload:Global.Layer.DeleteKeyFrame
  Global.Layer.ClearFrames*:
    name:
      CSharp:
      - id: Global.Layer.ClearFrames*
        name: ClearFrames
      VB:
      - id: Global.Layer.ClearFrames*
        name: ClearFrames
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.ClearFrames*
        name: ClearFrames
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.ClearFrames*
        name: ClearFrames
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.ClearFrames*
        name: ClearFrames
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.ClearFrames*
        name: ClearFrames
    isDefinition: true
    commentId: Overload:Global.Layer.ClearFrames
  Global.UnityAction`2:
    name:
      CSharp:
      - id: Global.UnityAction`2
        name: UnityAction
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.UnityAction`2
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UnityAction`2
        name: UnityAction
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.UnityAction`2
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UnityAction`2
        name: UnityAction
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.UnityAction`2
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    isDefinition: true
    commentId: '!:Global.UnityAction`2'
  Global.UnityAction{IntVector2[],System.Int32[]}:
    name:
      CSharp:
      - id: Global.UnityAction`2
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: '['
      - name: ']'
      - name: '>'
      VB:
      - id: Global.UnityAction`2
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: (
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UnityAction`2
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: '['
      - name: ']'
      - name: '>'
      VB:
      - id: Global.UnityAction`2
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: (
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UnityAction`2
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: '['
      - name: ']'
      - name: '>'
      VB:
      - id: Global.UnityAction`2
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: (
      - name: )
      - name: )
    isDefinition: false
    definition: Global.UnityAction`2
    commentId: '!:Global.UnityAction{IntVector2[],System.Int32[]}'
  Global.Layer.SubscribeToOnPixelsChanged*:
    name:
      CSharp:
      - id: Global.Layer.SubscribeToOnPixelsChanged*
        name: SubscribeToOnPixelsChanged
      VB:
      - id: Global.Layer.SubscribeToOnPixelsChanged*
        name: SubscribeToOnPixelsChanged
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnPixelsChanged*
        name: SubscribeToOnPixelsChanged
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnPixelsChanged*
        name: SubscribeToOnPixelsChanged
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnPixelsChanged*
        name: SubscribeToOnPixelsChanged
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnPixelsChanged*
        name: SubscribeToOnPixelsChanged
    isDefinition: true
    commentId: Overload:Global.Layer.SubscribeToOnPixelsChanged
  Global.Layer.SubscribeToOnVisibilityChanged*:
    name:
      CSharp:
      - id: Global.Layer.SubscribeToOnVisibilityChanged*
        name: SubscribeToOnVisibilityChanged
      VB:
      - id: Global.Layer.SubscribeToOnVisibilityChanged*
        name: SubscribeToOnVisibilityChanged
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnVisibilityChanged*
        name: SubscribeToOnVisibilityChanged
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnVisibilityChanged*
        name: SubscribeToOnVisibilityChanged
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnVisibilityChanged*
        name: SubscribeToOnVisibilityChanged
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnVisibilityChanged*
        name: SubscribeToOnVisibilityChanged
    isDefinition: true
    commentId: Overload:Global.Layer.SubscribeToOnVisibilityChanged
  Global.Layer.SubscribeToOnBlendModeChanged*:
    name:
      CSharp:
      - id: Global.Layer.SubscribeToOnBlendModeChanged*
        name: SubscribeToOnBlendModeChanged
      VB:
      - id: Global.Layer.SubscribeToOnBlendModeChanged*
        name: SubscribeToOnBlendModeChanged
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnBlendModeChanged*
        name: SubscribeToOnBlendModeChanged
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnBlendModeChanged*
        name: SubscribeToOnBlendModeChanged
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnBlendModeChanged*
        name: SubscribeToOnBlendModeChanged
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnBlendModeChanged*
        name: SubscribeToOnBlendModeChanged
    isDefinition: true
    commentId: Overload:Global.Layer.SubscribeToOnBlendModeChanged
  Global.UnityAction{System.Int32}:
    name:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: System.Int32
        name: int
        isExternal: true
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: System.Int32
        name: int
        isExternal: true
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: System.Int32
        name: int
        isExternal: true
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    isDefinition: false
    definition: Global.UnityAction`1
    commentId: '!:Global.UnityAction{System.Int32}'
  Global.Layer.SubscribeToOnKeyFrameAdded*:
    name:
      CSharp:
      - id: Global.Layer.SubscribeToOnKeyFrameAdded*
        name: SubscribeToOnKeyFrameAdded
      VB:
      - id: Global.Layer.SubscribeToOnKeyFrameAdded*
        name: SubscribeToOnKeyFrameAdded
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnKeyFrameAdded*
        name: SubscribeToOnKeyFrameAdded
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnKeyFrameAdded*
        name: SubscribeToOnKeyFrameAdded
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnKeyFrameAdded*
        name: SubscribeToOnKeyFrameAdded
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnKeyFrameAdded*
        name: SubscribeToOnKeyFrameAdded
    isDefinition: true
    commentId: Overload:Global.Layer.SubscribeToOnKeyFrameAdded
  Global.Layer.SubscribeToOnKeyFrameRemoved*:
    name:
      CSharp:
      - id: Global.Layer.SubscribeToOnKeyFrameRemoved*
        name: SubscribeToOnKeyFrameRemoved
      VB:
      - id: Global.Layer.SubscribeToOnKeyFrameRemoved*
        name: SubscribeToOnKeyFrameRemoved
    nameWithType:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnKeyFrameRemoved*
        name: SubscribeToOnKeyFrameRemoved
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnKeyFrameRemoved*
        name: SubscribeToOnKeyFrameRemoved
    qualifiedName:
      CSharp:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnKeyFrameRemoved*
        name: SubscribeToOnKeyFrameRemoved
      VB:
      - id: Global.Layer*
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnKeyFrameRemoved*
        name: SubscribeToOnKeyFrameRemoved
    isDefinition: true
    commentId: Overload:Global.Layer.SubscribeToOnKeyFrameRemoved
  Global.LayerManager.selectedLayerIndex*:
    name:
      CSharp:
      - id: Global.LayerManager.selectedLayerIndex*
        name: selectedLayerIndex
      VB:
      - id: Global.LayerManager.selectedLayerIndex*
        name: selectedLayerIndex
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.selectedLayerIndex*
        name: selectedLayerIndex
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.selectedLayerIndex*
        name: selectedLayerIndex
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.selectedLayerIndex*
        name: selectedLayerIndex
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.selectedLayerIndex*
        name: selectedLayerIndex
    isDefinition: true
    commentId: Overload:Global.LayerManager.selectedLayerIndex
  Global.LayerManager.selectedLayer*:
    name:
      CSharp:
      - id: Global.LayerManager.selectedLayer*
        name: selectedLayer
      VB:
      - id: Global.LayerManager.selectedLayer*
        name: selectedLayer
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.selectedLayer*
        name: selectedLayer
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.selectedLayer*
        name: selectedLayer
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.selectedLayer*
        name: selectedLayer
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.selectedLayer*
        name: selectedLayer
    isDefinition: true
    commentId: Overload:Global.LayerManager.selectedLayer
  Global.LayerManager.selectedLayerIndices*:
    name:
      CSharp:
      - id: Global.LayerManager.selectedLayerIndices*
        name: selectedLayerIndices
      VB:
      - id: Global.LayerManager.selectedLayerIndices*
        name: selectedLayerIndices
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.selectedLayerIndices*
        name: selectedLayerIndices
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.selectedLayerIndices*
        name: selectedLayerIndices
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.selectedLayerIndices*
        name: selectedLayerIndices
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.selectedLayerIndices*
        name: selectedLayerIndices
    isDefinition: true
    commentId: Overload:Global.LayerManager.selectedLayerIndices
  Global.LayerManager.selectedLayers*:
    name:
      CSharp:
      - id: Global.LayerManager.selectedLayers*
        name: selectedLayers
      VB:
      - id: Global.LayerManager.selectedLayers*
        name: selectedLayers
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.selectedLayers*
        name: selectedLayers
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.selectedLayers*
        name: selectedLayers
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.selectedLayers*
        name: selectedLayers
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.selectedLayers*
        name: selectedLayers
    isDefinition: true
    commentId: Overload:Global.LayerManager.selectedLayers
  Global.LayerManager.OnLayersChanged*:
    name:
      CSharp:
      - id: Global.LayerManager.OnLayersChanged*
        name: OnLayersChanged
      VB:
      - id: Global.LayerManager.OnLayersChanged*
        name: OnLayersChanged
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.OnLayersChanged*
        name: OnLayersChanged
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.OnLayersChanged*
        name: OnLayersChanged
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.OnLayersChanged*
        name: OnLayersChanged
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.OnLayersChanged*
        name: OnLayersChanged
    isDefinition: true
    commentId: Overload:Global.LayerManager.OnLayersChanged
  Global.LayerManager.OnFileSwitched*:
    name:
      CSharp:
      - id: Global.LayerManager.OnFileSwitched*
        name: OnFileSwitched
      VB:
      - id: Global.LayerManager.OnFileSwitched*
        name: OnFileSwitched
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.OnFileSwitched*
        name: OnFileSwitched
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.OnFileSwitched*
        name: OnFileSwitched
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.OnFileSwitched*
        name: OnFileSwitched
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.OnFileSwitched*
        name: OnFileSwitched
    isDefinition: true
    commentId: Overload:Global.LayerManager.OnFileSwitched
  Global.LayerManager.AddLayer*:
    name:
      CSharp:
      - id: Global.LayerManager.AddLayer*
        name: AddLayer
      VB:
      - id: Global.LayerManager.AddLayer*
        name: AddLayer
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.AddLayer*
        name: AddLayer
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.AddLayer*
        name: AddLayer
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.AddLayer*
        name: AddLayer
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.AddLayer*
        name: AddLayer
    isDefinition: true
    commentId: Overload:Global.LayerManager.AddLayer
  Global.LayerManager.AddTileLayer*:
    name:
      CSharp:
      - id: Global.LayerManager.AddTileLayer*
        name: AddTileLayer
      VB:
      - id: Global.LayerManager.AddTileLayer*
        name: AddTileLayer
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.AddTileLayer*
        name: AddTileLayer
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.AddTileLayer*
        name: AddTileLayer
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.AddTileLayer*
        name: AddTileLayer
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.AddTileLayer*
        name: AddTileLayer
    isDefinition: true
    commentId: Overload:Global.LayerManager.AddTileLayer
  Global.LayerManager.RemoveSelectedLayers*:
    name:
      CSharp:
      - id: Global.LayerManager.RemoveSelectedLayers*
        name: RemoveSelectedLayers
      VB:
      - id: Global.LayerManager.RemoveSelectedLayers*
        name: RemoveSelectedLayers
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.RemoveSelectedLayers*
        name: RemoveSelectedLayers
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.RemoveSelectedLayers*
        name: RemoveSelectedLayers
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.RemoveSelectedLayers*
        name: RemoveSelectedLayers
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.RemoveSelectedLayers*
        name: RemoveSelectedLayers
    isDefinition: true
    commentId: Overload:Global.LayerManager.RemoveSelectedLayers
  Global.LayerManager.DuplicateSelectedLayers*:
    name:
      CSharp:
      - id: Global.LayerManager.DuplicateSelectedLayers*
        name: DuplicateSelectedLayers
      VB:
      - id: Global.LayerManager.DuplicateSelectedLayers*
        name: DuplicateSelectedLayers
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.DuplicateSelectedLayers*
        name: DuplicateSelectedLayers
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.DuplicateSelectedLayers*
        name: DuplicateSelectedLayers
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.DuplicateSelectedLayers*
        name: DuplicateSelectedLayers
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.DuplicateSelectedLayers*
        name: DuplicateSelectedLayers
    isDefinition: true
    commentId: Overload:Global.LayerManager.DuplicateSelectedLayers
  Global.LayerManager.FlattenSelectedLayers*:
    name:
      CSharp:
      - id: Global.LayerManager.FlattenSelectedLayers*
        name: FlattenSelectedLayers
      VB:
      - id: Global.LayerManager.FlattenSelectedLayers*
        name: FlattenSelectedLayers
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.FlattenSelectedLayers*
        name: FlattenSelectedLayers
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.FlattenSelectedLayers*
        name: FlattenSelectedLayers
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.FlattenSelectedLayers*
        name: FlattenSelectedLayers
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.FlattenSelectedLayers*
        name: FlattenSelectedLayers
    isDefinition: true
    commentId: Overload:Global.LayerManager.FlattenSelectedLayers
  Global.LayerManager.MoveSelectedLayersUp*:
    name:
      CSharp:
      - id: Global.LayerManager.MoveSelectedLayersUp*
        name: MoveSelectedLayersUp
      VB:
      - id: Global.LayerManager.MoveSelectedLayersUp*
        name: MoveSelectedLayersUp
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.MoveSelectedLayersUp*
        name: MoveSelectedLayersUp
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.MoveSelectedLayersUp*
        name: MoveSelectedLayersUp
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.MoveSelectedLayersUp*
        name: MoveSelectedLayersUp
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.MoveSelectedLayersUp*
        name: MoveSelectedLayersUp
    isDefinition: true
    commentId: Overload:Global.LayerManager.MoveSelectedLayersUp
  Global.LayerManager.MoveSelectedLayersDown*:
    name:
      CSharp:
      - id: Global.LayerManager.MoveSelectedLayersDown*
        name: MoveSelectedLayersDown
      VB:
      - id: Global.LayerManager.MoveSelectedLayersDown*
        name: MoveSelectedLayersDown
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.MoveSelectedLayersDown*
        name: MoveSelectedLayersDown
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.MoveSelectedLayersDown*
        name: MoveSelectedLayersDown
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.MoveSelectedLayersDown*
        name: MoveSelectedLayersDown
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.MoveSelectedLayersDown*
        name: MoveSelectedLayersDown
    isDefinition: true
    commentId: Overload:Global.LayerManager.MoveSelectedLayersDown
  Global.LayerManager.HideAllBut*:
    name:
      CSharp:
      - id: Global.LayerManager.HideAllBut*
        name: HideAllBut
      VB:
      - id: Global.LayerManager.HideAllBut*
        name: HideAllBut
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.HideAllBut*
        name: HideAllBut
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.HideAllBut*
        name: HideAllBut
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.HideAllBut*
        name: HideAllBut
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.HideAllBut*
        name: HideAllBut
    isDefinition: true
    commentId: Overload:Global.LayerManager.HideAllBut
  Global.LayerManager.WorldYCoordOfLayerTile*:
    name:
      CSharp:
      - id: Global.LayerManager.WorldYCoordOfLayerTile*
        name: WorldYCoordOfLayerTile
      VB:
      - id: Global.LayerManager.WorldYCoordOfLayerTile*
        name: WorldYCoordOfLayerTile
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.WorldYCoordOfLayerTile*
        name: WorldYCoordOfLayerTile
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.WorldYCoordOfLayerTile*
        name: WorldYCoordOfLayerTile
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.WorldYCoordOfLayerTile*
        name: WorldYCoordOfLayerTile
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.WorldYCoordOfLayerTile*
        name: WorldYCoordOfLayerTile
    isDefinition: true
    commentId: Overload:Global.LayerManager.WorldYCoordOfLayerTile
  Global.LayerManager.SetLayerName*:
    name:
      CSharp:
      - id: Global.LayerManager.SetLayerName*
        name: SetLayerName
      VB:
      - id: Global.LayerManager.SetLayerName*
        name: SetLayerName
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SetLayerName*
        name: SetLayerName
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SetLayerName*
        name: SetLayerName
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SetLayerName*
        name: SetLayerName
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SetLayerName*
        name: SetLayerName
    isDefinition: true
    commentId: Overload:Global.LayerManager.SetLayerName
  Global.LayerManager.SetLayerOpacity*:
    name:
      CSharp:
      - id: Global.LayerManager.SetLayerOpacity*
        name: SetLayerOpacity
      VB:
      - id: Global.LayerManager.SetLayerOpacity*
        name: SetLayerOpacity
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SetLayerOpacity*
        name: SetLayerOpacity
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SetLayerOpacity*
        name: SetLayerOpacity
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SetLayerOpacity*
        name: SetLayerOpacity
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SetLayerOpacity*
        name: SetLayerOpacity
    isDefinition: true
    commentId: Overload:Global.LayerManager.SetLayerOpacity
  Global.LayerManager.SetLayerBlendMode*:
    name:
      CSharp:
      - id: Global.LayerManager.SetLayerBlendMode*
        name: SetLayerBlendMode
      VB:
      - id: Global.LayerManager.SetLayerBlendMode*
        name: SetLayerBlendMode
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SetLayerBlendMode*
        name: SetLayerBlendMode
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SetLayerBlendMode*
        name: SetLayerBlendMode
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SetLayerBlendMode*
        name: SetLayerBlendMode
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SetLayerBlendMode*
        name: SetLayerBlendMode
    isDefinition: true
    commentId: Overload:Global.LayerManager.SetLayerBlendMode
  Global.LayerManager.SubscribeToLayerChange*:
    name:
      CSharp:
      - id: Global.LayerManager.SubscribeToLayerChange*
        name: SubscribeToLayerChange
      VB:
      - id: Global.LayerManager.SubscribeToLayerChange*
        name: SubscribeToLayerChange
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SubscribeToLayerChange*
        name: SubscribeToLayerChange
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SubscribeToLayerChange*
        name: SubscribeToLayerChange
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SubscribeToLayerChange*
        name: SubscribeToLayerChange
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SubscribeToLayerChange*
        name: SubscribeToLayerChange
    isDefinition: true
    commentId: Overload:Global.LayerManager.SubscribeToLayerChange
  Global.LayerManager.SubscribeToVisibilityChange*:
    name:
      CSharp:
      - id: Global.LayerManager.SubscribeToVisibilityChange*
        name: SubscribeToVisibilityChange
      VB:
      - id: Global.LayerManager.SubscribeToVisibilityChange*
        name: SubscribeToVisibilityChange
    nameWithType:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SubscribeToVisibilityChange*
        name: SubscribeToVisibilityChange
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SubscribeToVisibilityChange*
        name: SubscribeToVisibilityChange
    qualifiedName:
      CSharp:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SubscribeToVisibilityChange*
        name: SubscribeToVisibilityChange
      VB:
      - id: Global.LayerManager*
        name: LayerManager
      - name: .
      - id: Global.LayerManager.SubscribeToVisibilityChange*
        name: SubscribeToVisibilityChange
    isDefinition: true
    commentId: Overload:Global.LayerManager.SubscribeToVisibilityChange
  Global.LayerTile.layer*:
    name:
      CSharp:
      - id: Global.LayerTile.layer*
        name: layer
      VB:
      - id: Global.LayerTile.layer*
        name: layer
    nameWithType:
      CSharp:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.layer*
        name: layer
      VB:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.layer*
        name: layer
    qualifiedName:
      CSharp:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.layer*
        name: layer
      VB:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.layer*
        name: layer
    isDefinition: true
    commentId: Overload:Global.LayerTile.layer
  Global.LayerTile.selected*:
    name:
      CSharp:
      - id: Global.LayerTile.selected*
        name: selected
      VB:
      - id: Global.LayerTile.selected*
        name: selected
    nameWithType:
      CSharp:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.selected*
        name: selected
      VB:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.selected*
        name: selected
    qualifiedName:
      CSharp:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.selected*
        name: selected
      VB:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.selected*
        name: selected
    isDefinition: true
    commentId: Overload:Global.LayerTile.selected
  Global.LayerTile.tileToggle*:
    name:
      CSharp:
      - id: Global.LayerTile.tileToggle*
        name: tileToggle
      VB:
      - id: Global.LayerTile.tileToggle*
        name: tileToggle
    nameWithType:
      CSharp:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.tileToggle*
        name: tileToggle
      VB:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.tileToggle*
        name: tileToggle
    qualifiedName:
      CSharp:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.tileToggle*
        name: tileToggle
      VB:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.tileToggle*
        name: tileToggle
    isDefinition: true
    commentId: Overload:Global.LayerTile.tileToggle
  Global.LayerTile.SetLayer*:
    name:
      CSharp:
      - id: Global.LayerTile.SetLayer*
        name: SetLayer
      VB:
      - id: Global.LayerTile.SetLayer*
        name: SetLayer
    nameWithType:
      CSharp:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SetLayer*
        name: SetLayer
      VB:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SetLayer*
        name: SetLayer
    qualifiedName:
      CSharp:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SetLayer*
        name: SetLayer
      VB:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SetLayer*
        name: SetLayer
    isDefinition: true
    commentId: Overload:Global.LayerTile.SetLayer
  Global.LayerTile.SubscribeToVisibilityChange*:
    name:
      CSharp:
      - id: Global.LayerTile.SubscribeToVisibilityChange*
        name: SubscribeToVisibilityChange
      VB:
      - id: Global.LayerTile.SubscribeToVisibilityChange*
        name: SubscribeToVisibilityChange
    nameWithType:
      CSharp:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SubscribeToVisibilityChange*
        name: SubscribeToVisibilityChange
      VB:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SubscribeToVisibilityChange*
        name: SubscribeToVisibilityChange
    qualifiedName:
      CSharp:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SubscribeToVisibilityChange*
        name: SubscribeToVisibilityChange
      VB:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SubscribeToVisibilityChange*
        name: SubscribeToVisibilityChange
    isDefinition: true
    commentId: Overload:Global.LayerTile.SubscribeToVisibilityChange
  Global.LayerTile.SubscribeToLockChange*:
    name:
      CSharp:
      - id: Global.LayerTile.SubscribeToLockChange*
        name: SubscribeToLockChange
      VB:
      - id: Global.LayerTile.SubscribeToLockChange*
        name: SubscribeToLockChange
    nameWithType:
      CSharp:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SubscribeToLockChange*
        name: SubscribeToLockChange
      VB:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SubscribeToLockChange*
        name: SubscribeToLockChange
    qualifiedName:
      CSharp:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SubscribeToLockChange*
        name: SubscribeToLockChange
      VB:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SubscribeToLockChange*
        name: SubscribeToLockChange
    isDefinition: true
    commentId: Overload:Global.LayerTile.SubscribeToLockChange
  Global.LayerTile.SubscribeToNameChange*:
    name:
      CSharp:
      - id: Global.LayerTile.SubscribeToNameChange*
        name: SubscribeToNameChange
      VB:
      - id: Global.LayerTile.SubscribeToNameChange*
        name: SubscribeToNameChange
    nameWithType:
      CSharp:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SubscribeToNameChange*
        name: SubscribeToNameChange
      VB:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SubscribeToNameChange*
        name: SubscribeToNameChange
    qualifiedName:
      CSharp:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SubscribeToNameChange*
        name: SubscribeToNameChange
      VB:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SubscribeToNameChange*
        name: SubscribeToNameChange
    isDefinition: true
    commentId: Overload:Global.LayerTile.SubscribeToNameChange
  Global.LayerTile.SubscribeToRightClick*:
    name:
      CSharp:
      - id: Global.LayerTile.SubscribeToRightClick*
        name: SubscribeToRightClick
      VB:
      - id: Global.LayerTile.SubscribeToRightClick*
        name: SubscribeToRightClick
    nameWithType:
      CSharp:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SubscribeToRightClick*
        name: SubscribeToRightClick
      VB:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SubscribeToRightClick*
        name: SubscribeToRightClick
    qualifiedName:
      CSharp:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SubscribeToRightClick*
        name: SubscribeToRightClick
      VB:
      - id: Global.LayerTile*
        name: LayerTile
      - name: .
      - id: Global.LayerTile.SubscribeToRightClick*
        name: SubscribeToRightClick
    isDefinition: true
    commentId: Overload:Global.LayerTile.SubscribeToRightClick
  Global.LayerTile:
    name:
      CSharp:
      - id: Global.LayerTile
        name: LayerTile
      VB:
      - id: Global.LayerTile
        name: LayerTile
    nameWithType:
      CSharp:
      - id: Global.LayerTile
        name: LayerTile
      VB:
      - id: Global.LayerTile
        name: LayerTile
    qualifiedName:
      CSharp:
      - id: Global.LayerTile
        name: LayerTile
      VB:
      - id: Global.LayerTile
        name: LayerTile
    isDefinition: true
    commentId: T:Global.LayerTile
  Global.Layer.name:
    name:
      CSharp:
      - id: Global.Layer.name
        name: name
      VB:
      - id: Global.Layer.name
        name: name
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.name
        name: name
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.name
        name: name
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.name
        name: name
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.name
        name: name
    isDefinition: true
    parent: Global.Layer
    commentId: P:Global.Layer.name
  Global.Layer.width:
    name:
      CSharp:
      - id: Global.Layer.width
        name: width
      VB:
      - id: Global.Layer.width
        name: width
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.width
        name: width
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.width
        name: width
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.width
        name: width
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.width
        name: width
    isDefinition: true
    parent: Global.Layer
    commentId: P:Global.Layer.width
  Global.Layer.height:
    name:
      CSharp:
      - id: Global.Layer.height
        name: height
      VB:
      - id: Global.Layer.height
        name: height
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.height
        name: height
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.height
        name: height
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.height
        name: height
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.height
        name: height
    isDefinition: true
    parent: Global.Layer
    commentId: P:Global.Layer.height
  Global.Layer.rect:
    name:
      CSharp:
      - id: Global.Layer.rect
        name: rect
      VB:
      - id: Global.Layer.rect
        name: rect
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.rect
        name: rect
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.rect
        name: rect
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.rect
        name: rect
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.rect
        name: rect
    isDefinition: true
    parent: Global.Layer
    commentId: P:Global.Layer.rect
  Global.Layer._visible:
    name:
      CSharp:
      - id: Global.Layer._visible
        name: _visible
      VB:
      - id: Global.Layer._visible
        name: _visible
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer._visible
        name: _visible
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer._visible
        name: _visible
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer._visible
        name: _visible
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer._visible
        name: _visible
    isDefinition: true
    parent: Global.Layer
    commentId: F:Global.Layer._visible
  Global.Layer.visible:
    name:
      CSharp:
      - id: Global.Layer.visible
        name: visible
      VB:
      - id: Global.Layer.visible
        name: visible
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.visible
        name: visible
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.visible
        name: visible
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.visible
        name: visible
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.visible
        name: visible
    isDefinition: true
    parent: Global.Layer
    commentId: P:Global.Layer.visible
  Global.Layer.locked:
    name:
      CSharp:
      - id: Global.Layer.locked
        name: locked
      VB:
      - id: Global.Layer.locked
        name: locked
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.locked
        name: locked
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.locked
        name: locked
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.locked
        name: locked
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.locked
        name: locked
    isDefinition: true
    parent: Global.Layer
    commentId: P:Global.Layer.locked
  Global.Layer.opacity:
    name:
      CSharp:
      - id: Global.Layer.opacity
        name: opacity
      VB:
      - id: Global.Layer.opacity
        name: opacity
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.opacity
        name: opacity
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.opacity
        name: opacity
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.opacity
        name: opacity
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.opacity
        name: opacity
    isDefinition: true
    parent: Global.Layer
    commentId: P:Global.Layer.opacity
  Global.Layer._blendMode:
    name:
      CSharp:
      - id: Global.Layer._blendMode
        name: _blendMode
      VB:
      - id: Global.Layer._blendMode
        name: _blendMode
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer._blendMode
        name: _blendMode
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer._blendMode
        name: _blendMode
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer._blendMode
        name: _blendMode
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer._blendMode
        name: _blendMode
    isDefinition: true
    parent: Global.Layer
    commentId: F:Global.Layer._blendMode
  Global.Layer.blendMode:
    name:
      CSharp:
      - id: Global.Layer.blendMode
        name: blendMode
      VB:
      - id: Global.Layer.blendMode
        name: blendMode
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.blendMode
        name: blendMode
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.blendMode
        name: blendMode
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.blendMode
        name: blendMode
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.blendMode
        name: blendMode
    isDefinition: true
    parent: Global.Layer
    commentId: P:Global.Layer.blendMode
  Global.Layer.keyFrames:
    name:
      CSharp:
      - id: Global.Layer.keyFrames
        name: keyFrames
      VB:
      - id: Global.Layer.keyFrames
        name: keyFrames
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.keyFrames
        name: keyFrames
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.keyFrames
        name: keyFrames
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.keyFrames
        name: keyFrames
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.keyFrames
        name: keyFrames
    isDefinition: true
    parent: Global.Layer
    commentId: P:Global.Layer.keyFrames
  Global.Layer.keyFrameIndices:
    name:
      CSharp:
      - id: Global.Layer.keyFrameIndices
        name: keyFrameIndices
      VB:
      - id: Global.Layer.keyFrameIndices
        name: keyFrameIndices
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.keyFrameIndices
        name: keyFrameIndices
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.keyFrameIndices
        name: keyFrameIndices
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.keyFrameIndices
        name: keyFrameIndices
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.keyFrameIndices
        name: keyFrameIndices
    isDefinition: true
    parent: Global.Layer
    commentId: P:Global.Layer.keyFrameIndices
  Global.Layer.keyFrameTextures:
    name:
      CSharp:
      - id: Global.Layer.keyFrameTextures
        name: keyFrameTextures
      VB:
      - id: Global.Layer.keyFrameTextures
        name: keyFrameTextures
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.keyFrameTextures
        name: keyFrameTextures
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.keyFrameTextures
        name: keyFrameTextures
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.keyFrameTextures
        name: keyFrameTextures
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.keyFrameTextures
        name: keyFrameTextures
    isDefinition: true
    parent: Global.Layer
    commentId: P:Global.Layer.keyFrameTextures
  Global.Layer.onPixelsChanged:
    name:
      CSharp:
      - id: Global.Layer.onPixelsChanged
        name: onPixelsChanged
      VB:
      - id: Global.Layer.onPixelsChanged
        name: onPixelsChanged
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.onPixelsChanged
        name: onPixelsChanged
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.onPixelsChanged
        name: onPixelsChanged
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.onPixelsChanged
        name: onPixelsChanged
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.onPixelsChanged
        name: onPixelsChanged
    isDefinition: true
    parent: Global.Layer
    commentId: F:Global.Layer.onPixelsChanged
  Global.Layer.SetPixel(System.Int32,System.Int32,System.Int32,Color,AnimFrameRefMode):
    name:
      CSharp:
      - id: Global.Layer.SetPixel(System.Int32,System.Int32,System.Int32,Color,AnimFrameRefMode)
        name: SetPixel
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
      VB:
      - id: Global.Layer.SetPixel(System.Int32,System.Int32,System.Int32,Color,AnimFrameRefMode)
        name: SetPixel
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SetPixel(System.Int32,System.Int32,System.Int32,Color,AnimFrameRefMode)
        name: SetPixel
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SetPixel(System.Int32,System.Int32,System.Int32,Color,AnimFrameRefMode)
        name: SetPixel
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SetPixel(System.Int32,System.Int32,System.Int32,Color,AnimFrameRefMode)
        name: SetPixel
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SetPixel(System.Int32,System.Int32,System.Int32,Color,AnimFrameRefMode)
        name: SetPixel
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.SetPixel(System.Int32,System.Int32,System.Int32,Color,AnimFrameRefMode)
  Global.Layer.SetPixel(IntVector2,System.Int32,Color,AnimFrameRefMode):
    name:
      CSharp:
      - id: Global.Layer.SetPixel(IntVector2,System.Int32,Color,AnimFrameRefMode)
        name: SetPixel
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
      VB:
      - id: Global.Layer.SetPixel(IntVector2,System.Int32,Color,AnimFrameRefMode)
        name: SetPixel
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SetPixel(IntVector2,System.Int32,Color,AnimFrameRefMode)
        name: SetPixel
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SetPixel(IntVector2,System.Int32,Color,AnimFrameRefMode)
        name: SetPixel
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SetPixel(IntVector2,System.Int32,Color,AnimFrameRefMode)
        name: SetPixel
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SetPixel(IntVector2,System.Int32,Color,AnimFrameRefMode)
        name: SetPixel
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.SetPixel(IntVector2,System.Int32,Color,AnimFrameRefMode)
  Global.Layer.SetPixels(IntVector2[],System.Int32,Color,AnimFrameRefMode):
    name:
      CSharp:
      - id: Global.Layer.SetPixels(IntVector2[],System.Int32,Color,AnimFrameRefMode)
        name: SetPixels
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
      VB:
      - id: Global.Layer.SetPixels(IntVector2[],System.Int32,Color,AnimFrameRefMode)
        name: SetPixels
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SetPixels(IntVector2[],System.Int32,Color,AnimFrameRefMode)
        name: SetPixels
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SetPixels(IntVector2[],System.Int32,Color,AnimFrameRefMode)
        name: SetPixels
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SetPixels(IntVector2[],System.Int32,Color,AnimFrameRefMode)
        name: SetPixels
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SetPixels(IntVector2[],System.Int32,Color,AnimFrameRefMode)
        name: SetPixels
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.SetPixels(IntVector2[],System.Int32,Color,AnimFrameRefMode)
  Global.Layer.GetPixel(System.Int32,System.Int32,System.Int32,System.Boolean):
    name:
      CSharp:
      - id: Global.Layer.GetPixel(System.Int32,System.Int32,System.Int32,System.Boolean)
        name: GetPixel
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer.GetPixel(System.Int32,System.Int32,System.Int32,System.Boolean)
        name: GetPixel
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.GetPixel(System.Int32,System.Int32,System.Int32,System.Boolean)
        name: GetPixel
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.GetPixel(System.Int32,System.Int32,System.Int32,System.Boolean)
        name: GetPixel
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.GetPixel(System.Int32,System.Int32,System.Int32,System.Boolean)
        name: GetPixel
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.GetPixel(System.Int32,System.Int32,System.Int32,System.Boolean)
        name: GetPixel
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.GetPixel(System.Int32,System.Int32,System.Int32,System.Boolean)
  Global.Layer.IsBlank:
    name:
      CSharp:
      - id: Global.Layer.IsBlank
        name: IsBlank
      - name: (
      - name: )
      VB:
      - id: Global.Layer.IsBlank
        name: IsBlank
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.IsBlank
        name: IsBlank
      - name: (
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.IsBlank
        name: IsBlank
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.IsBlank
        name: IsBlank
      - name: (
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.IsBlank
        name: IsBlank
      - name: (
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.IsBlank
  Global.Layer.Flip(FlipDirection):
    name:
      CSharp:
      - id: Global.Layer.Flip(FlipDirection)
        name: Flip
      - name: (
      - id: Global.FlipDirection
        name: FlipDirection
      - name: )
      VB:
      - id: Global.Layer.Flip(FlipDirection)
        name: Flip
      - name: (
      - id: Global.FlipDirection
        name: FlipDirection
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Flip(FlipDirection)
        name: Flip
      - name: (
      - id: Global.FlipDirection
        name: FlipDirection
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Flip(FlipDirection)
        name: Flip
      - name: (
      - id: Global.FlipDirection
        name: FlipDirection
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Flip(FlipDirection)
        name: Flip
      - name: (
      - id: Global.FlipDirection
        name: FlipDirection
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Flip(FlipDirection)
        name: Flip
      - name: (
      - id: Global.FlipDirection
        name: FlipDirection
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.Flip(FlipDirection)
  Global.Layer.Rotate(RotationAngle):
    name:
      CSharp:
      - id: Global.Layer.Rotate(RotationAngle)
        name: Rotate
      - name: (
      - id: Global.RotationAngle
        name: RotationAngle
      - name: )
      VB:
      - id: Global.Layer.Rotate(RotationAngle)
        name: Rotate
      - name: (
      - id: Global.RotationAngle
        name: RotationAngle
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Rotate(RotationAngle)
        name: Rotate
      - name: (
      - id: Global.RotationAngle
        name: RotationAngle
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Rotate(RotationAngle)
        name: Rotate
      - name: (
      - id: Global.RotationAngle
        name: RotationAngle
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Rotate(RotationAngle)
        name: Rotate
      - name: (
      - id: Global.RotationAngle
        name: RotationAngle
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Rotate(RotationAngle)
        name: Rotate
      - name: (
      - id: Global.RotationAngle
        name: RotationAngle
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.Rotate(RotationAngle)
  Global.Layer.Extend(System.Int32,System.Int32,System.Int32,System.Int32):
    name:
      CSharp:
      - id: Global.Layer.Extend(System.Int32,System.Int32,System.Int32,System.Int32)
        name: Extend
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer.Extend(System.Int32,System.Int32,System.Int32,System.Int32)
        name: Extend
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Extend(System.Int32,System.Int32,System.Int32,System.Int32)
        name: Extend
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Extend(System.Int32,System.Int32,System.Int32,System.Int32)
        name: Extend
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Extend(System.Int32,System.Int32,System.Int32,System.Int32)
        name: Extend
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Extend(System.Int32,System.Int32,System.Int32,System.Int32)
        name: Extend
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.Extend(System.Int32,System.Int32,System.Int32,System.Int32)
  Global.Layer.Scale(System.Single):
    name:
      CSharp:
      - id: Global.Layer.Scale(System.Single)
        name: Scale
      - name: (
      - id: System.Single
        name: float
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer.Scale(System.Single)
        name: Scale
      - name: (
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Scale(System.Single)
        name: Scale
      - name: (
      - id: System.Single
        name: float
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Scale(System.Single)
        name: Scale
      - name: (
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Scale(System.Single)
        name: Scale
      - name: (
      - id: System.Single
        name: float
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Scale(System.Single)
        name: Scale
      - name: (
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.Scale(System.Single)
  Global.Layer.Scale(System.Single,System.Single):
    name:
      CSharp:
      - id: Global.Layer.Scale(System.Single,System.Single)
        name: Scale
      - name: (
      - id: System.Single
        name: float
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: float
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer.Scale(System.Single,System.Single)
        name: Scale
      - name: (
      - id: System.Single
        name: Single
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Scale(System.Single,System.Single)
        name: Scale
      - name: (
      - id: System.Single
        name: float
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: float
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Scale(System.Single,System.Single)
        name: Scale
      - name: (
      - id: System.Single
        name: Single
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Scale(System.Single,System.Single)
        name: Scale
      - name: (
      - id: System.Single
        name: float
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: float
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Scale(System.Single,System.Single)
        name: Scale
      - name: (
      - id: System.Single
        name: Single
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.Scale(System.Single,System.Single)
  Global.Layer.Scale(System.Int32,System.Int32):
    name:
      CSharp:
      - id: Global.Layer.Scale(System.Int32,System.Int32)
        name: Scale
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer.Scale(System.Int32,System.Int32)
        name: Scale
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Scale(System.Int32,System.Int32)
        name: Scale
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Scale(System.Int32,System.Int32)
        name: Scale
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Scale(System.Int32,System.Int32)
        name: Scale
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Scale(System.Int32,System.Int32)
        name: Scale
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.Scale(System.Int32,System.Int32)
  Global.Layer.FromJSON(JSON):
    name:
      CSharp:
      - id: Global.Layer.FromJSON(JSON)
        name: FromJSON
      - name: (
      - id: Global.JSON
        name: JSON
      - name: )
      VB:
      - id: Global.Layer.FromJSON(JSON)
        name: FromJSON
      - name: (
      - id: Global.JSON
        name: JSON
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.FromJSON(JSON)
        name: FromJSON
      - name: (
      - id: Global.JSON
        name: JSON
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.FromJSON(JSON)
        name: FromJSON
      - name: (
      - id: Global.JSON
        name: JSON
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.FromJSON(JSON)
        name: FromJSON
      - name: (
      - id: Global.JSON
        name: JSON
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.FromJSON(JSON)
        name: FromJSON
      - name: (
      - id: Global.JSON
        name: JSON
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.FromJSON(JSON)
  Global.Layer.Item(System.Int32):
    name:
      CSharp:
      - name: this
      - name: '['
      - id: System.Int32
        name: int
        isExternal: true
      - name: ']'
      VB:
      - id: Global.Layer.Item(System.Int32)
        name: this[]
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - name: this
      - name: '['
      - id: System.Int32
        name: int
        isExternal: true
      - name: ']'
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Item(System.Int32)
        name: this[]
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - name: this
      - name: '['
      - id: System.Int32
        name: int
        isExternal: true
      - name: ']'
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.Item(System.Int32)
        name: this[]
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: P:Global.Layer.Item(System.Int32)
  Global.Layer.GetKeyFrame(System.Int32):
    name:
      CSharp:
      - id: Global.Layer.GetKeyFrame(System.Int32)
        name: GetKeyFrame
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer.GetKeyFrame(System.Int32)
        name: GetKeyFrame
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.GetKeyFrame(System.Int32)
        name: GetKeyFrame
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.GetKeyFrame(System.Int32)
        name: GetKeyFrame
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.GetKeyFrame(System.Int32)
        name: GetKeyFrame
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.GetKeyFrame(System.Int32)
        name: GetKeyFrame
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.GetKeyFrame(System.Int32)
  Global.Layer.HasKeyFrameAt(System.Int32):
    name:
      CSharp:
      - id: Global.Layer.HasKeyFrameAt(System.Int32)
        name: HasKeyFrameAt
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer.HasKeyFrameAt(System.Int32)
        name: HasKeyFrameAt
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.HasKeyFrameAt(System.Int32)
        name: HasKeyFrameAt
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.HasKeyFrameAt(System.Int32)
        name: HasKeyFrameAt
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.HasKeyFrameAt(System.Int32)
        name: HasKeyFrameAt
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.HasKeyFrameAt(System.Int32)
        name: HasKeyFrameAt
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.HasKeyFrameAt(System.Int32)
  Global.Layer.AddKeyFrame(System.Int32):
    name:
      CSharp:
      - id: Global.Layer.AddKeyFrame(System.Int32)
        name: AddKeyFrame
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer.AddKeyFrame(System.Int32)
        name: AddKeyFrame
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.AddKeyFrame(System.Int32)
        name: AddKeyFrame
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.AddKeyFrame(System.Int32)
        name: AddKeyFrame
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.AddKeyFrame(System.Int32)
        name: AddKeyFrame
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.AddKeyFrame(System.Int32)
        name: AddKeyFrame
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.AddKeyFrame(System.Int32)
  Global.Layer.AddKeyFrame(System.Int32,Texture2D):
    name:
      CSharp:
      - id: Global.Layer.AddKeyFrame(System.Int32,Texture2D)
        name: AddKeyFrame
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer.AddKeyFrame(System.Int32,Texture2D)
        name: AddKeyFrame
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.AddKeyFrame(System.Int32,Texture2D)
        name: AddKeyFrame
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.AddKeyFrame(System.Int32,Texture2D)
        name: AddKeyFrame
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.AddKeyFrame(System.Int32,Texture2D)
        name: AddKeyFrame
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.AddKeyFrame(System.Int32,Texture2D)
        name: AddKeyFrame
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.AddKeyFrame(System.Int32,Texture2D)
  Global.Layer.AddKeyFrame(AnimationKeyFrame):
    name:
      CSharp:
      - id: Global.Layer.AddKeyFrame(AnimationKeyFrame)
        name: AddKeyFrame
      - name: (
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      - name: )
      VB:
      - id: Global.Layer.AddKeyFrame(AnimationKeyFrame)
        name: AddKeyFrame
      - name: (
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.AddKeyFrame(AnimationKeyFrame)
        name: AddKeyFrame
      - name: (
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.AddKeyFrame(AnimationKeyFrame)
        name: AddKeyFrame
      - name: (
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.AddKeyFrame(AnimationKeyFrame)
        name: AddKeyFrame
      - name: (
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.AddKeyFrame(AnimationKeyFrame)
        name: AddKeyFrame
      - name: (
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.AddKeyFrame(AnimationKeyFrame)
  Global.Layer.DeleteMostRecentKeyFrame(System.Int32):
    name:
      CSharp:
      - id: Global.Layer.DeleteMostRecentKeyFrame(System.Int32)
        name: DeleteMostRecentKeyFrame
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer.DeleteMostRecentKeyFrame(System.Int32)
        name: DeleteMostRecentKeyFrame
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeleteMostRecentKeyFrame(System.Int32)
        name: DeleteMostRecentKeyFrame
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeleteMostRecentKeyFrame(System.Int32)
        name: DeleteMostRecentKeyFrame
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeleteMostRecentKeyFrame(System.Int32)
        name: DeleteMostRecentKeyFrame
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeleteMostRecentKeyFrame(System.Int32)
        name: DeleteMostRecentKeyFrame
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.DeleteMostRecentKeyFrame(System.Int32)
  Global.Layer.DeleteKeyFrame(System.Int32):
    name:
      CSharp:
      - id: Global.Layer.DeleteKeyFrame(System.Int32)
        name: DeleteKeyFrame
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer.DeleteKeyFrame(System.Int32)
        name: DeleteKeyFrame
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrame(System.Int32)
        name: DeleteKeyFrame
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrame(System.Int32)
        name: DeleteKeyFrame
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrame(System.Int32)
        name: DeleteKeyFrame
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrame(System.Int32)
        name: DeleteKeyFrame
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.DeleteKeyFrame(System.Int32)
  Global.Layer.DeleteKeyFrame(AnimationKeyFrame):
    name:
      CSharp:
      - id: Global.Layer.DeleteKeyFrame(AnimationKeyFrame)
        name: DeleteKeyFrame
      - name: (
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      - name: )
      VB:
      - id: Global.Layer.DeleteKeyFrame(AnimationKeyFrame)
        name: DeleteKeyFrame
      - name: (
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrame(AnimationKeyFrame)
        name: DeleteKeyFrame
      - name: (
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrame(AnimationKeyFrame)
        name: DeleteKeyFrame
      - name: (
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrame(AnimationKeyFrame)
        name: DeleteKeyFrame
      - name: (
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrame(AnimationKeyFrame)
        name: DeleteKeyFrame
      - name: (
      - id: Global.AnimationKeyFrame
        name: AnimationKeyFrame
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.DeleteKeyFrame(AnimationKeyFrame)
  Global.Layer.SubscribeToOnPixelsChanged(UnityAction{IntVector2[],System.Int32[]}):
    name:
      CSharp:
      - id: Global.Layer.SubscribeToOnPixelsChanged(UnityAction{IntVector2[],System.Int32[]})
        name: SubscribeToOnPixelsChanged
      - name: (
      - id: Global.UnityAction`2
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: '['
      - name: ']'
      - name: '>'
      - name: )
      VB:
      - id: Global.Layer.SubscribeToOnPixelsChanged(UnityAction{IntVector2[],System.Int32[]})
        name: SubscribeToOnPixelsChanged
      - name: (
      - id: Global.UnityAction`2
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: (
      - name: )
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnPixelsChanged(UnityAction{IntVector2[],System.Int32[]})
        name: SubscribeToOnPixelsChanged
      - name: (
      - id: Global.UnityAction`2
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: '['
      - name: ']'
      - name: '>'
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnPixelsChanged(UnityAction{IntVector2[],System.Int32[]})
        name: SubscribeToOnPixelsChanged
      - name: (
      - id: Global.UnityAction`2
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: (
      - name: )
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnPixelsChanged(UnityAction{IntVector2[],System.Int32[]})
        name: SubscribeToOnPixelsChanged
      - name: (
      - id: Global.UnityAction`2
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: '['
      - name: ']'
      - name: '>'
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnPixelsChanged(UnityAction{IntVector2[],System.Int32[]})
        name: SubscribeToOnPixelsChanged
      - name: (
      - id: Global.UnityAction`2
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: (
      - name: )
      - name: )
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.SubscribeToOnPixelsChanged(UnityAction{IntVector2[],System.Int32[]})
  Global.Layer.SubscribeToOnVisibilityChanged(UnityAction):
    name:
      CSharp:
      - id: Global.Layer.SubscribeToOnVisibilityChanged(UnityAction)
        name: SubscribeToOnVisibilityChanged
      - name: (
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer.SubscribeToOnVisibilityChanged(UnityAction)
        name: SubscribeToOnVisibilityChanged
      - name: (
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnVisibilityChanged(UnityAction)
        name: SubscribeToOnVisibilityChanged
      - name: (
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnVisibilityChanged(UnityAction)
        name: SubscribeToOnVisibilityChanged
      - name: (
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnVisibilityChanged(UnityAction)
        name: SubscribeToOnVisibilityChanged
      - name: (
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnVisibilityChanged(UnityAction)
        name: SubscribeToOnVisibilityChanged
      - name: (
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.SubscribeToOnVisibilityChanged(UnityAction)
  Global.Layer.SubscribeToOnBlendModeChanged(UnityAction):
    name:
      CSharp:
      - id: Global.Layer.SubscribeToOnBlendModeChanged(UnityAction)
        name: SubscribeToOnBlendModeChanged
      - name: (
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer.SubscribeToOnBlendModeChanged(UnityAction)
        name: SubscribeToOnBlendModeChanged
      - name: (
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnBlendModeChanged(UnityAction)
        name: SubscribeToOnBlendModeChanged
      - name: (
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnBlendModeChanged(UnityAction)
        name: SubscribeToOnBlendModeChanged
      - name: (
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnBlendModeChanged(UnityAction)
        name: SubscribeToOnBlendModeChanged
      - name: (
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnBlendModeChanged(UnityAction)
        name: SubscribeToOnBlendModeChanged
      - name: (
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.SubscribeToOnBlendModeChanged(UnityAction)
  Global.Layer.SubscribeToOnKeyFrameAdded(UnityAction{System.Int32}):
    name:
      CSharp:
      - id: Global.Layer.SubscribeToOnKeyFrameAdded(UnityAction{System.Int32})
        name: SubscribeToOnKeyFrameAdded
      - name: (
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: System.Int32
        name: int
        isExternal: true
      - name: '>'
      - name: )
      VB:
      - id: Global.Layer.SubscribeToOnKeyFrameAdded(UnityAction{System.Int32})
        name: SubscribeToOnKeyFrameAdded
      - name: (
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnKeyFrameAdded(UnityAction{System.Int32})
        name: SubscribeToOnKeyFrameAdded
      - name: (
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: System.Int32
        name: int
        isExternal: true
      - name: '>'
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnKeyFrameAdded(UnityAction{System.Int32})
        name: SubscribeToOnKeyFrameAdded
      - name: (
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnKeyFrameAdded(UnityAction{System.Int32})
        name: SubscribeToOnKeyFrameAdded
      - name: (
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: System.Int32
        name: int
        isExternal: true
      - name: '>'
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnKeyFrameAdded(UnityAction{System.Int32})
        name: SubscribeToOnKeyFrameAdded
      - name: (
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.SubscribeToOnKeyFrameAdded(UnityAction{System.Int32})
  Global.Layer.SubscribeToOnKeyFrameRemoved(UnityAction{System.Int32}):
    name:
      CSharp:
      - id: Global.Layer.SubscribeToOnKeyFrameRemoved(UnityAction{System.Int32})
        name: SubscribeToOnKeyFrameRemoved
      - name: (
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: System.Int32
        name: int
        isExternal: true
      - name: '>'
      - name: )
      VB:
      - id: Global.Layer.SubscribeToOnKeyFrameRemoved(UnityAction{System.Int32})
        name: SubscribeToOnKeyFrameRemoved
      - name: (
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnKeyFrameRemoved(UnityAction{System.Int32})
        name: SubscribeToOnKeyFrameRemoved
      - name: (
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: System.Int32
        name: int
        isExternal: true
      - name: '>'
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnKeyFrameRemoved(UnityAction{System.Int32})
        name: SubscribeToOnKeyFrameRemoved
      - name: (
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnKeyFrameRemoved(UnityAction{System.Int32})
        name: SubscribeToOnKeyFrameRemoved
      - name: (
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: System.Int32
        name: int
        isExternal: true
      - name: '>'
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SubscribeToOnKeyFrameRemoved(UnityAction{System.Int32})
        name: SubscribeToOnKeyFrameRemoved
      - name: (
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.SubscribeToOnKeyFrameRemoved(UnityAction{System.Int32})
  Global.Layer.layerType:
    name:
      CSharp:
      - id: Global.Layer.layerType
        name: layerType
      VB:
      - id: Global.Layer.layerType
        name: layerType
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.layerType
        name: layerType
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.layerType
        name: layerType
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.layerType
        name: layerType
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.layerType
        name: layerType
    isDefinition: true
    parent: Global.Layer
    commentId: P:Global.Layer.layerType
  Global.NormalLayer.layerType*:
    name:
      CSharp:
      - id: Global.NormalLayer.layerType*
        name: layerType
      VB:
      - id: Global.NormalLayer.layerType*
        name: layerType
    nameWithType:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.layerType*
        name: layerType
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.layerType*
        name: layerType
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.layerType*
        name: layerType
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.layerType*
        name: layerType
    isDefinition: true
    commentId: Overload:Global.NormalLayer.layerType
  Global.NormalLayer.#ctor*:
    name:
      CSharp:
      - id: Global.NormalLayer.#ctor*
        name: NormalLayer
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.#ctor*
        name: NormalLayer
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.#ctor*
        name: NormalLayer
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.NormalLayer.#ctor
  Global.NormalLayer:
    name:
      CSharp:
      - id: Global.NormalLayer
        name: NormalLayer
      VB:
      - id: Global.NormalLayer
        name: NormalLayer
    nameWithType:
      CSharp:
      - id: Global.NormalLayer
        name: NormalLayer
      VB:
      - id: Global.NormalLayer
        name: NormalLayer
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer
        name: NormalLayer
      VB:
      - id: Global.NormalLayer
        name: NormalLayer
    isDefinition: true
    commentId: T:Global.NormalLayer
  Global.Layer.DeepCopy:
    name:
      CSharp:
      - id: Global.Layer.DeepCopy
        name: DeepCopy
      - name: (
      - name: )
      VB:
      - id: Global.Layer.DeepCopy
        name: DeepCopy
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeepCopy
        name: DeepCopy
      - name: (
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeepCopy
        name: DeepCopy
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeepCopy
        name: DeepCopy
      - name: (
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeepCopy
        name: DeepCopy
      - name: (
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.DeepCopy
  Global.NormalLayer.DeepCopy*:
    name:
      CSharp:
      - id: Global.NormalLayer.DeepCopy*
        name: DeepCopy
      VB:
      - id: Global.NormalLayer.DeepCopy*
        name: DeepCopy
    nameWithType:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.DeepCopy*
        name: DeepCopy
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.DeepCopy*
        name: DeepCopy
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.DeepCopy*
        name: DeepCopy
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.DeepCopy*
        name: DeepCopy
    isDefinition: true
    commentId: Overload:Global.NormalLayer.DeepCopy
  Global.Layer.SetPixelsNoEvent(IntVector2[],System.Int32,Color,AnimFrameRefMode):
    name:
      CSharp:
      - id: Global.Layer.SetPixelsNoEvent(IntVector2[],System.Int32,Color,AnimFrameRefMode)
        name: SetPixelsNoEvent
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
      VB:
      - id: Global.Layer.SetPixelsNoEvent(IntVector2[],System.Int32,Color,AnimFrameRefMode)
        name: SetPixelsNoEvent
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SetPixelsNoEvent(IntVector2[],System.Int32,Color,AnimFrameRefMode)
        name: SetPixelsNoEvent
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SetPixelsNoEvent(IntVector2[],System.Int32,Color,AnimFrameRefMode)
        name: SetPixelsNoEvent
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SetPixelsNoEvent(IntVector2[],System.Int32,Color,AnimFrameRefMode)
        name: SetPixelsNoEvent
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: '['
      - name: ']'
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.SetPixelsNoEvent(IntVector2[],System.Int32,Color,AnimFrameRefMode)
        name: SetPixelsNoEvent
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: (
      - name: )
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.AnimFrameRefMode
        name: AnimFrameRefMode
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.SetPixelsNoEvent(IntVector2[],System.Int32,Color,AnimFrameRefMode)
  Global.NormalLayer.SetPixelsNoEvent*:
    name:
      CSharp:
      - id: Global.NormalLayer.SetPixelsNoEvent*
        name: SetPixelsNoEvent
      VB:
      - id: Global.NormalLayer.SetPixelsNoEvent*
        name: SetPixelsNoEvent
    nameWithType:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.SetPixelsNoEvent*
        name: SetPixelsNoEvent
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.SetPixelsNoEvent*
        name: SetPixelsNoEvent
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.SetPixelsNoEvent*
        name: SetPixelsNoEvent
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.SetPixelsNoEvent*
        name: SetPixelsNoEvent
    isDefinition: true
    commentId: Overload:Global.NormalLayer.SetPixelsNoEvent
  Global.Layer.GetPixel(IntVector2,System.Int32,System.Boolean):
    name:
      CSharp:
      - id: Global.Layer.GetPixel(IntVector2,System.Int32,System.Boolean)
        name: GetPixel
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer.GetPixel(IntVector2,System.Int32,System.Boolean)
        name: GetPixel
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.GetPixel(IntVector2,System.Int32,System.Boolean)
        name: GetPixel
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.GetPixel(IntVector2,System.Int32,System.Boolean)
        name: GetPixel
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.GetPixel(IntVector2,System.Int32,System.Boolean)
        name: GetPixel
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.GetPixel(IntVector2,System.Int32,System.Boolean)
        name: GetPixel
      - name: (
      - id: Global.IntVector2
        name: IntVector2
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.GetPixel(IntVector2,System.Int32,System.Boolean)
  Global.NormalLayer.GetPixel*:
    name:
      CSharp:
      - id: Global.NormalLayer.GetPixel*
        name: GetPixel
      VB:
      - id: Global.NormalLayer.GetPixel*
        name: GetPixel
    nameWithType:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.GetPixel*
        name: GetPixel
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.GetPixel*
        name: GetPixel
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.GetPixel*
        name: GetPixel
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.GetPixel*
        name: GetPixel
    isDefinition: true
    commentId: Overload:Global.NormalLayer.GetPixel
  Global.NormalLayer.SetTexture*:
    name:
      CSharp:
      - id: Global.NormalLayer.SetTexture*
        name: SetTexture
      VB:
      - id: Global.NormalLayer.SetTexture*
        name: SetTexture
    nameWithType:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.SetTexture*
        name: SetTexture
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.SetTexture*
        name: SetTexture
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.SetTexture*
        name: SetTexture
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.SetTexture*
        name: SetTexture
    isDefinition: true
    commentId: Overload:Global.NormalLayer.SetTexture
  Global.NormalLayer.OverlayTexture*:
    name:
      CSharp:
      - id: Global.NormalLayer.OverlayTexture*
        name: OverlayTexture
      VB:
      - id: Global.NormalLayer.OverlayTexture*
        name: OverlayTexture
    nameWithType:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.OverlayTexture*
        name: OverlayTexture
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.OverlayTexture*
        name: OverlayTexture
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.OverlayTexture*
        name: OverlayTexture
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.OverlayTexture*
        name: OverlayTexture
    isDefinition: true
    commentId: Overload:Global.NormalLayer.OverlayTexture
  Global.NormalLayer.Offset*:
    name:
      CSharp:
      - id: Global.NormalLayer.Offset*
        name: Offset
      VB:
      - id: Global.NormalLayer.Offset*
        name: Offset
    nameWithType:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.Offset*
        name: Offset
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.Offset*
        name: Offset
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.Offset*
        name: Offset
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.Offset*
        name: Offset
    isDefinition: true
    commentId: Overload:Global.NormalLayer.Offset
  Global.NormalLayer.Flip*:
    name:
      CSharp:
      - id: Global.NormalLayer.Flip*
        name: Flip
      VB:
      - id: Global.NormalLayer.Flip*
        name: Flip
    nameWithType:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.Flip*
        name: Flip
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.Flip*
        name: Flip
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.Flip*
        name: Flip
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.Flip*
        name: Flip
    isDefinition: true
    commentId: Overload:Global.NormalLayer.Flip
  Global.Layer.FlipNoEvent(FlipDirection):
    name:
      CSharp:
      - id: Global.Layer.FlipNoEvent(FlipDirection)
        name: FlipNoEvent
      - name: (
      - id: Global.FlipDirection
        name: FlipDirection
      - name: )
      VB:
      - id: Global.Layer.FlipNoEvent(FlipDirection)
        name: FlipNoEvent
      - name: (
      - id: Global.FlipDirection
        name: FlipDirection
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.FlipNoEvent(FlipDirection)
        name: FlipNoEvent
      - name: (
      - id: Global.FlipDirection
        name: FlipDirection
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.FlipNoEvent(FlipDirection)
        name: FlipNoEvent
      - name: (
      - id: Global.FlipDirection
        name: FlipDirection
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.FlipNoEvent(FlipDirection)
        name: FlipNoEvent
      - name: (
      - id: Global.FlipDirection
        name: FlipDirection
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.FlipNoEvent(FlipDirection)
        name: FlipNoEvent
      - name: (
      - id: Global.FlipDirection
        name: FlipDirection
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.FlipNoEvent(FlipDirection)
  Global.NormalLayer.FlipNoEvent*:
    name:
      CSharp:
      - id: Global.NormalLayer.FlipNoEvent*
        name: FlipNoEvent
      VB:
      - id: Global.NormalLayer.FlipNoEvent*
        name: FlipNoEvent
    nameWithType:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.FlipNoEvent*
        name: FlipNoEvent
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.FlipNoEvent*
        name: FlipNoEvent
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.FlipNoEvent*
        name: FlipNoEvent
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.FlipNoEvent*
        name: FlipNoEvent
    isDefinition: true
    commentId: Overload:Global.NormalLayer.FlipNoEvent
  Global.NormalLayer.Rotate*:
    name:
      CSharp:
      - id: Global.NormalLayer.Rotate*
        name: Rotate
      VB:
      - id: Global.NormalLayer.Rotate*
        name: Rotate
    nameWithType:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.Rotate*
        name: Rotate
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.Rotate*
        name: Rotate
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.Rotate*
        name: Rotate
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.Rotate*
        name: Rotate
    isDefinition: true
    commentId: Overload:Global.NormalLayer.Rotate
  Global.Layer.RotateNoEvent(RotationAngle):
    name:
      CSharp:
      - id: Global.Layer.RotateNoEvent(RotationAngle)
        name: RotateNoEvent
      - name: (
      - id: Global.RotationAngle
        name: RotationAngle
      - name: )
      VB:
      - id: Global.Layer.RotateNoEvent(RotationAngle)
        name: RotateNoEvent
      - name: (
      - id: Global.RotationAngle
        name: RotationAngle
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.RotateNoEvent(RotationAngle)
        name: RotateNoEvent
      - name: (
      - id: Global.RotationAngle
        name: RotationAngle
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.RotateNoEvent(RotationAngle)
        name: RotateNoEvent
      - name: (
      - id: Global.RotationAngle
        name: RotationAngle
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.RotateNoEvent(RotationAngle)
        name: RotateNoEvent
      - name: (
      - id: Global.RotationAngle
        name: RotationAngle
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.RotateNoEvent(RotationAngle)
        name: RotateNoEvent
      - name: (
      - id: Global.RotationAngle
        name: RotationAngle
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.RotateNoEvent(RotationAngle)
  Global.NormalLayer.RotateNoEvent*:
    name:
      CSharp:
      - id: Global.NormalLayer.RotateNoEvent*
        name: RotateNoEvent
      VB:
      - id: Global.NormalLayer.RotateNoEvent*
        name: RotateNoEvent
    nameWithType:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.RotateNoEvent*
        name: RotateNoEvent
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.RotateNoEvent*
        name: RotateNoEvent
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.RotateNoEvent*
        name: RotateNoEvent
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.RotateNoEvent*
        name: RotateNoEvent
    isDefinition: true
    commentId: Overload:Global.NormalLayer.RotateNoEvent
  Global.Layer.ExtendNoEvent(System.Int32,System.Int32,System.Int32,System.Int32):
    name:
      CSharp:
      - id: Global.Layer.ExtendNoEvent(System.Int32,System.Int32,System.Int32,System.Int32)
        name: ExtendNoEvent
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer.ExtendNoEvent(System.Int32,System.Int32,System.Int32,System.Int32)
        name: ExtendNoEvent
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ExtendNoEvent(System.Int32,System.Int32,System.Int32,System.Int32)
        name: ExtendNoEvent
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ExtendNoEvent(System.Int32,System.Int32,System.Int32,System.Int32)
        name: ExtendNoEvent
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ExtendNoEvent(System.Int32,System.Int32,System.Int32,System.Int32)
        name: ExtendNoEvent
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ExtendNoEvent(System.Int32,System.Int32,System.Int32,System.Int32)
        name: ExtendNoEvent
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.ExtendNoEvent(System.Int32,System.Int32,System.Int32,System.Int32)
  Global.NormalLayer.ExtendNoEvent*:
    name:
      CSharp:
      - id: Global.NormalLayer.ExtendNoEvent*
        name: ExtendNoEvent
      VB:
      - id: Global.NormalLayer.ExtendNoEvent*
        name: ExtendNoEvent
    nameWithType:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.ExtendNoEvent*
        name: ExtendNoEvent
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.ExtendNoEvent*
        name: ExtendNoEvent
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.ExtendNoEvent*
        name: ExtendNoEvent
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.ExtendNoEvent*
        name: ExtendNoEvent
    isDefinition: true
    commentId: Overload:Global.NormalLayer.ExtendNoEvent
  Global.Layer.ScaleNoEvent(System.Single,System.Single):
    name:
      CSharp:
      - id: Global.Layer.ScaleNoEvent(System.Single,System.Single)
        name: ScaleNoEvent
      - name: (
      - id: System.Single
        name: float
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: float
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer.ScaleNoEvent(System.Single,System.Single)
        name: ScaleNoEvent
      - name: (
      - id: System.Single
        name: Single
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ScaleNoEvent(System.Single,System.Single)
        name: ScaleNoEvent
      - name: (
      - id: System.Single
        name: float
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: float
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ScaleNoEvent(System.Single,System.Single)
        name: ScaleNoEvent
      - name: (
      - id: System.Single
        name: Single
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ScaleNoEvent(System.Single,System.Single)
        name: ScaleNoEvent
      - name: (
      - id: System.Single
        name: float
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: float
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ScaleNoEvent(System.Single,System.Single)
        name: ScaleNoEvent
      - name: (
      - id: System.Single
        name: Single
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.ScaleNoEvent(System.Single,System.Single)
  Global.NormalLayer.ScaleNoEvent*:
    name:
      CSharp:
      - id: Global.NormalLayer.ScaleNoEvent*
        name: ScaleNoEvent
      VB:
      - id: Global.NormalLayer.ScaleNoEvent*
        name: ScaleNoEvent
    nameWithType:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.ScaleNoEvent*
        name: ScaleNoEvent
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.ScaleNoEvent*
        name: ScaleNoEvent
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.ScaleNoEvent*
        name: ScaleNoEvent
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.ScaleNoEvent*
        name: ScaleNoEvent
    isDefinition: true
    commentId: Overload:Global.NormalLayer.ScaleNoEvent
  Global.Layer.ScaleNoEvent(System.Int32,System.Int32):
    name:
      CSharp:
      - id: Global.Layer.ScaleNoEvent(System.Int32,System.Int32)
        name: ScaleNoEvent
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer.ScaleNoEvent(System.Int32,System.Int32)
        name: ScaleNoEvent
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ScaleNoEvent(System.Int32,System.Int32)
        name: ScaleNoEvent
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ScaleNoEvent(System.Int32,System.Int32)
        name: ScaleNoEvent
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ScaleNoEvent(System.Int32,System.Int32)
        name: ScaleNoEvent
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ScaleNoEvent(System.Int32,System.Int32)
        name: ScaleNoEvent
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.ScaleNoEvent(System.Int32,System.Int32)
  Global.Layer.ToJSON:
    name:
      CSharp:
      - id: Global.Layer.ToJSON
        name: ToJSON
      - name: (
      - name: )
      VB:
      - id: Global.Layer.ToJSON
        name: ToJSON
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ToJSON
        name: ToJSON
      - name: (
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ToJSON
        name: ToJSON
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ToJSON
        name: ToJSON
      - name: (
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ToJSON
        name: ToJSON
      - name: (
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.ToJSON
  Global.NormalLayer.ToJSON*:
    name:
      CSharp:
      - id: Global.NormalLayer.ToJSON*
        name: ToJSON
      VB:
      - id: Global.NormalLayer.ToJSON*
        name: ToJSON
    nameWithType:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.ToJSON*
        name: ToJSON
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.ToJSON*
        name: ToJSON
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.ToJSON*
        name: ToJSON
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.ToJSON*
        name: ToJSON
    isDefinition: true
    commentId: Overload:Global.NormalLayer.ToJSON
  Global.Layer.LoadJSON(JSON):
    name:
      CSharp:
      - id: Global.Layer.LoadJSON(JSON)
        name: LoadJSON
      - name: (
      - id: Global.JSON
        name: JSON
      - name: )
      VB:
      - id: Global.Layer.LoadJSON(JSON)
        name: LoadJSON
      - name: (
      - id: Global.JSON
        name: JSON
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.LoadJSON(JSON)
        name: LoadJSON
      - name: (
      - id: Global.JSON
        name: JSON
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.LoadJSON(JSON)
        name: LoadJSON
      - name: (
      - id: Global.JSON
        name: JSON
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.LoadJSON(JSON)
        name: LoadJSON
      - name: (
      - id: Global.JSON
        name: JSON
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.LoadJSON(JSON)
        name: LoadJSON
      - name: (
      - id: Global.JSON
        name: JSON
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.LoadJSON(JSON)
  Global.NormalLayer.LoadJSON*:
    name:
      CSharp:
      - id: Global.NormalLayer.LoadJSON*
        name: LoadJSON
      VB:
      - id: Global.NormalLayer.LoadJSON*
        name: LoadJSON
    nameWithType:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.LoadJSON*
        name: LoadJSON
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.LoadJSON*
        name: LoadJSON
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.LoadJSON*
        name: LoadJSON
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.LoadJSON*
        name: LoadJSON
    isDefinition: true
    commentId: Overload:Global.NormalLayer.LoadJSON
  Global.Layer.DeleteKeyFrameNoEvent(System.Int32):
    name:
      CSharp:
      - id: Global.Layer.DeleteKeyFrameNoEvent(System.Int32)
        name: DeleteKeyFrameNoEvent
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer.DeleteKeyFrameNoEvent(System.Int32)
        name: DeleteKeyFrameNoEvent
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrameNoEvent(System.Int32)
        name: DeleteKeyFrameNoEvent
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrameNoEvent(System.Int32)
        name: DeleteKeyFrameNoEvent
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrameNoEvent(System.Int32)
        name: DeleteKeyFrameNoEvent
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.DeleteKeyFrameNoEvent(System.Int32)
        name: DeleteKeyFrameNoEvent
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.DeleteKeyFrameNoEvent(System.Int32)
  Global.NormalLayer.DeleteKeyFrameNoEvent*:
    name:
      CSharp:
      - id: Global.NormalLayer.DeleteKeyFrameNoEvent*
        name: DeleteKeyFrameNoEvent
      VB:
      - id: Global.NormalLayer.DeleteKeyFrameNoEvent*
        name: DeleteKeyFrameNoEvent
    nameWithType:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.DeleteKeyFrameNoEvent*
        name: DeleteKeyFrameNoEvent
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.DeleteKeyFrameNoEvent*
        name: DeleteKeyFrameNoEvent
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.DeleteKeyFrameNoEvent*
        name: DeleteKeyFrameNoEvent
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.DeleteKeyFrameNoEvent*
        name: DeleteKeyFrameNoEvent
    isDefinition: true
    commentId: Overload:Global.NormalLayer.DeleteKeyFrameNoEvent
  Global.Layer.ClearFrames:
    name:
      CSharp:
      - id: Global.Layer.ClearFrames
        name: ClearFrames
      - name: (
      - name: )
      VB:
      - id: Global.Layer.ClearFrames
        name: ClearFrames
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ClearFrames
        name: ClearFrames
      - name: (
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ClearFrames
        name: ClearFrames
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ClearFrames
        name: ClearFrames
      - name: (
      - name: )
      VB:
      - id: Global.Layer
        name: Layer
      - name: .
      - id: Global.Layer.ClearFrames
        name: ClearFrames
      - name: (
      - name: )
    isDefinition: true
    parent: Global.Layer
    commentId: M:Global.Layer.ClearFrames
  Global.NormalLayer.ClearFrames*:
    name:
      CSharp:
      - id: Global.NormalLayer.ClearFrames*
        name: ClearFrames
      VB:
      - id: Global.NormalLayer.ClearFrames*
        name: ClearFrames
    nameWithType:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.ClearFrames*
        name: ClearFrames
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.ClearFrames*
        name: ClearFrames
    qualifiedName:
      CSharp:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.ClearFrames*
        name: ClearFrames
      VB:
      - id: Global.NormalLayer*
        name: NormalLayer
      - name: .
      - id: Global.NormalLayer.ClearFrames*
        name: ClearFrames
    isDefinition: true
    commentId: Overload:Global.NormalLayer.ClearFrames
  Global.TileLayer.layerType*:
    name:
      CSharp:
      - id: Global.TileLayer.layerType*
        name: layerType
      VB:
      - id: Global.TileLayer.layerType*
        name: layerType
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.layerType*
        name: layerType
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.layerType*
        name: layerType
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.layerType*
        name: layerType
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.layerType*
        name: layerType
    isDefinition: true
    commentId: Overload:Global.TileLayer.layerType
  System.Collections.Generic.List{Tile}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Tile
        name: Tile
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Tile
        name: Tile
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Tile
        name: Tile
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Tile
        name: Tile
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Tile
        name: Tile
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Tile
        name: Tile
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Tile}
  Global.TileLayer.tiles*:
    name:
      CSharp:
      - id: Global.TileLayer.tiles*
        name: tiles
      VB:
      - id: Global.TileLayer.tiles*
        name: tiles
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.tiles*
        name: tiles
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.tiles*
        name: tiles
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.tiles*
        name: tiles
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.tiles*
        name: tiles
    isDefinition: true
    commentId: Overload:Global.TileLayer.tiles
  Global.TileLayer.#ctor*:
    name:
      CSharp:
      - id: Global.TileLayer.#ctor*
        name: TileLayer
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.#ctor*
        name: TileLayer
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.#ctor*
        name: TileLayer
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.TileLayer.#ctor
  Global.TileLayer:
    name:
      CSharp:
      - id: Global.TileLayer
        name: TileLayer
      VB:
      - id: Global.TileLayer
        name: TileLayer
    nameWithType:
      CSharp:
      - id: Global.TileLayer
        name: TileLayer
      VB:
      - id: Global.TileLayer
        name: TileLayer
    qualifiedName:
      CSharp:
      - id: Global.TileLayer
        name: TileLayer
      VB:
      - id: Global.TileLayer
        name: TileLayer
    isDefinition: true
    commentId: T:Global.TileLayer
  Global.TileLayer.DeepCopy*:
    name:
      CSharp:
      - id: Global.TileLayer.DeepCopy*
        name: DeepCopy
      VB:
      - id: Global.TileLayer.DeepCopy*
        name: DeepCopy
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.DeepCopy*
        name: DeepCopy
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.DeepCopy*
        name: DeepCopy
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.DeepCopy*
        name: DeepCopy
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.DeepCopy*
        name: DeepCopy
    isDefinition: true
    commentId: Overload:Global.TileLayer.DeepCopy
  Global.TileLayer.AddTile*:
    name:
      CSharp:
      - id: Global.TileLayer.AddTile*
        name: AddTile
      VB:
      - id: Global.TileLayer.AddTile*
        name: AddTile
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.AddTile*
        name: AddTile
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.AddTile*
        name: AddTile
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.AddTile*
        name: AddTile
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.AddTile*
        name: AddTile
    isDefinition: true
    commentId: Overload:Global.TileLayer.AddTile
  Global.TileLayer.RemoveTile*:
    name:
      CSharp:
      - id: Global.TileLayer.RemoveTile*
        name: RemoveTile
      VB:
      - id: Global.TileLayer.RemoveTile*
        name: RemoveTile
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.RemoveTile*
        name: RemoveTile
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.RemoveTile*
        name: RemoveTile
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.RemoveTile*
        name: RemoveTile
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.RemoveTile*
        name: RemoveTile
    isDefinition: true
    commentId: Overload:Global.TileLayer.RemoveTile
  Global.TileLayer.ClearTiles*:
    name:
      CSharp:
      - id: Global.TileLayer.ClearTiles*
        name: ClearTiles
      VB:
      - id: Global.TileLayer.ClearTiles*
        name: ClearTiles
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ClearTiles*
        name: ClearTiles
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ClearTiles*
        name: ClearTiles
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ClearTiles*
        name: ClearTiles
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ClearTiles*
        name: ClearTiles
    isDefinition: true
    commentId: Overload:Global.TileLayer.ClearTiles
  Global.TileLayer.ContainsTile*:
    name:
      CSharp:
      - id: Global.TileLayer.ContainsTile*
        name: ContainsTile
      VB:
      - id: Global.TileLayer.ContainsTile*
        name: ContainsTile
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ContainsTile*
        name: ContainsTile
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ContainsTile*
        name: ContainsTile
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ContainsTile*
        name: ContainsTile
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ContainsTile*
        name: ContainsTile
    isDefinition: true
    commentId: Overload:Global.TileLayer.ContainsTile
  Global.TileLayer.SetPixelsNoEvent*:
    name:
      CSharp:
      - id: Global.TileLayer.SetPixelsNoEvent*
        name: SetPixelsNoEvent
      VB:
      - id: Global.TileLayer.SetPixelsNoEvent*
        name: SetPixelsNoEvent
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.SetPixelsNoEvent*
        name: SetPixelsNoEvent
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.SetPixelsNoEvent*
        name: SetPixelsNoEvent
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.SetPixelsNoEvent*
        name: SetPixelsNoEvent
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.SetPixelsNoEvent*
        name: SetPixelsNoEvent
    isDefinition: true
    commentId: Overload:Global.TileLayer.SetPixelsNoEvent
  Global.TileLayer.GetPixel*:
    name:
      CSharp:
      - id: Global.TileLayer.GetPixel*
        name: GetPixel
      VB:
      - id: Global.TileLayer.GetPixel*
        name: GetPixel
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.GetPixel*
        name: GetPixel
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.GetPixel*
        name: GetPixel
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.GetPixel*
        name: GetPixel
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.GetPixel*
        name: GetPixel
    isDefinition: true
    commentId: Overload:Global.TileLayer.GetPixel
  Global.TileLayer.PixelToTile*:
    name:
      CSharp:
      - id: Global.TileLayer.PixelToTile*
        name: PixelToTile
      VB:
      - id: Global.TileLayer.PixelToTile*
        name: PixelToTile
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.PixelToTile*
        name: PixelToTile
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.PixelToTile*
        name: PixelToTile
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.PixelToTile*
        name: PixelToTile
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.PixelToTile*
        name: PixelToTile
    isDefinition: true
    commentId: Overload:Global.TileLayer.PixelToTile
  Global.TileLayer.GetLinkedPixels*:
    name:
      CSharp:
      - id: Global.TileLayer.GetLinkedPixels*
        name: GetLinkedPixels
      VB:
      - id: Global.TileLayer.GetLinkedPixels*
        name: GetLinkedPixels
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.GetLinkedPixels*
        name: GetLinkedPixels
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.GetLinkedPixels*
        name: GetLinkedPixels
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.GetLinkedPixels*
        name: GetLinkedPixels
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.GetLinkedPixels*
        name: GetLinkedPixels
    isDefinition: true
    commentId: Overload:Global.TileLayer.GetLinkedPixels
  Global.TileLayer.FlipNoEvent*:
    name:
      CSharp:
      - id: Global.TileLayer.FlipNoEvent*
        name: FlipNoEvent
      VB:
      - id: Global.TileLayer.FlipNoEvent*
        name: FlipNoEvent
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.FlipNoEvent*
        name: FlipNoEvent
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.FlipNoEvent*
        name: FlipNoEvent
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.FlipNoEvent*
        name: FlipNoEvent
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.FlipNoEvent*
        name: FlipNoEvent
    isDefinition: true
    commentId: Overload:Global.TileLayer.FlipNoEvent
  Global.TileLayer.RotateNoEvent*:
    name:
      CSharp:
      - id: Global.TileLayer.RotateNoEvent*
        name: RotateNoEvent
      VB:
      - id: Global.TileLayer.RotateNoEvent*
        name: RotateNoEvent
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.RotateNoEvent*
        name: RotateNoEvent
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.RotateNoEvent*
        name: RotateNoEvent
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.RotateNoEvent*
        name: RotateNoEvent
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.RotateNoEvent*
        name: RotateNoEvent
    isDefinition: true
    commentId: Overload:Global.TileLayer.RotateNoEvent
  Global.TileLayer.ExtendNoEvent*:
    name:
      CSharp:
      - id: Global.TileLayer.ExtendNoEvent*
        name: ExtendNoEvent
      VB:
      - id: Global.TileLayer.ExtendNoEvent*
        name: ExtendNoEvent
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ExtendNoEvent*
        name: ExtendNoEvent
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ExtendNoEvent*
        name: ExtendNoEvent
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ExtendNoEvent*
        name: ExtendNoEvent
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ExtendNoEvent*
        name: ExtendNoEvent
    isDefinition: true
    commentId: Overload:Global.TileLayer.ExtendNoEvent
  Global.TileLayer.ScaleNoEvent*:
    name:
      CSharp:
      - id: Global.TileLayer.ScaleNoEvent*
        name: ScaleNoEvent
      VB:
      - id: Global.TileLayer.ScaleNoEvent*
        name: ScaleNoEvent
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ScaleNoEvent*
        name: ScaleNoEvent
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ScaleNoEvent*
        name: ScaleNoEvent
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ScaleNoEvent*
        name: ScaleNoEvent
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ScaleNoEvent*
        name: ScaleNoEvent
    isDefinition: true
    commentId: Overload:Global.TileLayer.ScaleNoEvent
  Global.TileLayer.ToJSON*:
    name:
      CSharp:
      - id: Global.TileLayer.ToJSON*
        name: ToJSON
      VB:
      - id: Global.TileLayer.ToJSON*
        name: ToJSON
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ToJSON*
        name: ToJSON
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ToJSON*
        name: ToJSON
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ToJSON*
        name: ToJSON
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ToJSON*
        name: ToJSON
    isDefinition: true
    commentId: Overload:Global.TileLayer.ToJSON
  Global.TileLayer.LoadJSON*:
    name:
      CSharp:
      - id: Global.TileLayer.LoadJSON*
        name: LoadJSON
      VB:
      - id: Global.TileLayer.LoadJSON*
        name: LoadJSON
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.LoadJSON*
        name: LoadJSON
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.LoadJSON*
        name: LoadJSON
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.LoadJSON*
        name: LoadJSON
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.LoadJSON*
        name: LoadJSON
    isDefinition: true
    commentId: Overload:Global.TileLayer.LoadJSON
  Global.TileLayer.DeleteKeyFrameNoEvent*:
    name:
      CSharp:
      - id: Global.TileLayer.DeleteKeyFrameNoEvent*
        name: DeleteKeyFrameNoEvent
      VB:
      - id: Global.TileLayer.DeleteKeyFrameNoEvent*
        name: DeleteKeyFrameNoEvent
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.DeleteKeyFrameNoEvent*
        name: DeleteKeyFrameNoEvent
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.DeleteKeyFrameNoEvent*
        name: DeleteKeyFrameNoEvent
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.DeleteKeyFrameNoEvent*
        name: DeleteKeyFrameNoEvent
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.DeleteKeyFrameNoEvent*
        name: DeleteKeyFrameNoEvent
    isDefinition: true
    commentId: Overload:Global.TileLayer.DeleteKeyFrameNoEvent
  Global.TileLayer.ClearFrames*:
    name:
      CSharp:
      - id: Global.TileLayer.ClearFrames*
        name: ClearFrames
      VB:
      - id: Global.TileLayer.ClearFrames*
        name: ClearFrames
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ClearFrames*
        name: ClearFrames
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ClearFrames*
        name: ClearFrames
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ClearFrames*
        name: ClearFrames
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.ClearFrames*
        name: ClearFrames
    isDefinition: true
    commentId: Overload:Global.TileLayer.ClearFrames
  Global.TileLayer.RerenderKeyFrames*:
    name:
      CSharp:
      - id: Global.TileLayer.RerenderKeyFrames*
        name: RerenderKeyFrames
      VB:
      - id: Global.TileLayer.RerenderKeyFrames*
        name: RerenderKeyFrames
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.RerenderKeyFrames*
        name: RerenderKeyFrames
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.RerenderKeyFrames*
        name: RerenderKeyFrames
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.RerenderKeyFrames*
        name: RerenderKeyFrames
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.RerenderKeyFrames*
        name: RerenderKeyFrames
    isDefinition: true
    commentId: Overload:Global.TileLayer.RerenderKeyFrames
  Global.TileLayer.RerenderKeyFrame*:
    name:
      CSharp:
      - id: Global.TileLayer.RerenderKeyFrame*
        name: RerenderKeyFrame
      VB:
      - id: Global.TileLayer.RerenderKeyFrame*
        name: RerenderKeyFrame
    nameWithType:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.RerenderKeyFrame*
        name: RerenderKeyFrame
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.RerenderKeyFrame*
        name: RerenderKeyFrame
    qualifiedName:
      CSharp:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.RerenderKeyFrame*
        name: RerenderKeyFrame
      VB:
      - id: Global.TileLayer*
        name: TileLayer
      - name: .
      - id: Global.TileLayer.RerenderKeyFrame*
        name: RerenderKeyFrame
    isDefinition: true
    commentId: Overload:Global.TileLayer.RerenderKeyFrame
  Global.MaximiseWindow.ShowWindowAsync*:
    name:
      CSharp:
      - id: Global.MaximiseWindow.ShowWindowAsync*
        name: ShowWindowAsync
        isExternal: true
      VB:
      - id: Global.MaximiseWindow.ShowWindowAsync*
        name: ShowWindowAsync
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.MaximiseWindow*
        name: MaximiseWindow
      - name: .
      - id: Global.MaximiseWindow.ShowWindowAsync*
        name: ShowWindowAsync
        isExternal: true
      VB:
      - id: Global.MaximiseWindow*
        name: MaximiseWindow
      - name: .
      - id: Global.MaximiseWindow.ShowWindowAsync*
        name: ShowWindowAsync
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.MaximiseWindow*
        name: MaximiseWindow
      - name: .
      - id: Global.MaximiseWindow.ShowWindowAsync*
        name: ShowWindowAsync
        isExternal: true
      VB:
      - id: Global.MaximiseWindow*
        name: MaximiseWindow
      - name: .
      - id: Global.MaximiseWindow.ShowWindowAsync*
        name: ShowWindowAsync
        isExternal: true
    isDefinition: true
    commentId: Overload:Global.MaximiseWindow.ShowWindowAsync
  Global.MaximiseWindow:
    name:
      CSharp:
      - id: Global.MaximiseWindow
        name: MaximiseWindow
      VB:
      - id: Global.MaximiseWindow
        name: MaximiseWindow
    nameWithType:
      CSharp:
      - id: Global.MaximiseWindow
        name: MaximiseWindow
      VB:
      - id: Global.MaximiseWindow
        name: MaximiseWindow
    qualifiedName:
      CSharp:
      - id: Global.MaximiseWindow
        name: MaximiseWindow
      VB:
      - id: Global.MaximiseWindow
        name: MaximiseWindow
    isDefinition: true
    commentId: T:Global.MaximiseWindow
  Global.ScreenInfo.screenWorldWidth*:
    name:
      CSharp:
      - id: Global.ScreenInfo.screenWorldWidth*
        name: screenWorldWidth
      VB:
      - id: Global.ScreenInfo.screenWorldWidth*
        name: screenWorldWidth
    nameWithType:
      CSharp:
      - id: Global.ScreenInfo*
        name: ScreenInfo
      - name: .
      - id: Global.ScreenInfo.screenWorldWidth*
        name: screenWorldWidth
      VB:
      - id: Global.ScreenInfo*
        name: ScreenInfo
      - name: .
      - id: Global.ScreenInfo.screenWorldWidth*
        name: screenWorldWidth
    qualifiedName:
      CSharp:
      - id: Global.ScreenInfo*
        name: ScreenInfo
      - name: .
      - id: Global.ScreenInfo.screenWorldWidth*
        name: screenWorldWidth
      VB:
      - id: Global.ScreenInfo*
        name: ScreenInfo
      - name: .
      - id: Global.ScreenInfo.screenWorldWidth*
        name: screenWorldWidth
    isDefinition: true
    commentId: Overload:Global.ScreenInfo.screenWorldWidth
  Global.ScreenInfo.screenWorldHeight*:
    name:
      CSharp:
      - id: Global.ScreenInfo.screenWorldHeight*
        name: screenWorldHeight
      VB:
      - id: Global.ScreenInfo.screenWorldHeight*
        name: screenWorldHeight
    nameWithType:
      CSharp:
      - id: Global.ScreenInfo*
        name: ScreenInfo
      - name: .
      - id: Global.ScreenInfo.screenWorldHeight*
        name: screenWorldHeight
      VB:
      - id: Global.ScreenInfo*
        name: ScreenInfo
      - name: .
      - id: Global.ScreenInfo.screenWorldHeight*
        name: screenWorldHeight
    qualifiedName:
      CSharp:
      - id: Global.ScreenInfo*
        name: ScreenInfo
      - name: .
      - id: Global.ScreenInfo.screenWorldHeight*
        name: screenWorldHeight
      VB:
      - id: Global.ScreenInfo*
        name: ScreenInfo
      - name: .
      - id: Global.ScreenInfo.screenWorldHeight*
        name: screenWorldHeight
    isDefinition: true
    commentId: Overload:Global.ScreenInfo.screenWorldHeight
  Global.ScreenInfo.GetScreenPixelColour*:
    name:
      CSharp:
      - id: Global.ScreenInfo.GetScreenPixelColour*
        name: GetScreenPixelColour
      VB:
      - id: Global.ScreenInfo.GetScreenPixelColour*
        name: GetScreenPixelColour
    nameWithType:
      CSharp:
      - id: Global.ScreenInfo*
        name: ScreenInfo
      - name: .
      - id: Global.ScreenInfo.GetScreenPixelColour*
        name: GetScreenPixelColour
      VB:
      - id: Global.ScreenInfo*
        name: ScreenInfo
      - name: .
      - id: Global.ScreenInfo.GetScreenPixelColour*
        name: GetScreenPixelColour
    qualifiedName:
      CSharp:
      - id: Global.ScreenInfo*
        name: ScreenInfo
      - name: .
      - id: Global.ScreenInfo.GetScreenPixelColour*
        name: GetScreenPixelColour
      VB:
      - id: Global.ScreenInfo*
        name: ScreenInfo
      - name: .
      - id: Global.ScreenInfo.GetScreenPixelColour*
        name: GetScreenPixelColour
    isDefinition: true
    commentId: Overload:Global.ScreenInfo.GetScreenPixelColour
  Global.ScreenInfo:
    name:
      CSharp:
      - id: Global.ScreenInfo
        name: ScreenInfo
      VB:
      - id: Global.ScreenInfo
        name: ScreenInfo
    nameWithType:
      CSharp:
      - id: Global.ScreenInfo
        name: ScreenInfo
      VB:
      - id: Global.ScreenInfo
        name: ScreenInfo
    qualifiedName:
      CSharp:
      - id: Global.ScreenInfo
        name: ScreenInfo
      VB:
      - id: Global.ScreenInfo
        name: ScreenInfo
    isDefinition: true
    commentId: T:Global.ScreenInfo
  Global.SerializationInfo:
    name:
      CSharp:
      - id: Global.SerializationInfo
        name: SerializationInfo
        isExternal: true
      VB:
      - id: Global.SerializationInfo
        name: SerializationInfo
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.SerializationInfo
        name: SerializationInfo
        isExternal: true
      VB:
      - id: Global.SerializationInfo
        name: SerializationInfo
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.SerializationInfo
        name: SerializationInfo
        isExternal: true
      VB:
      - id: Global.SerializationInfo
        name: SerializationInfo
        isExternal: true
    isDefinition: true
  Global.StreamingContext:
    name:
      CSharp:
      - id: Global.StreamingContext
        name: StreamingContext
        isExternal: true
      VB:
      - id: Global.StreamingContext
        name: StreamingContext
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.StreamingContext
        name: StreamingContext
        isExternal: true
      VB:
      - id: Global.StreamingContext
        name: StreamingContext
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.StreamingContext
        name: StreamingContext
        isExternal: true
      VB:
      - id: Global.StreamingContext
        name: StreamingContext
        isExternal: true
    isDefinition: true
  Global.LayerSerializationSurrogate.GetObjectData*:
    name:
      CSharp:
      - id: Global.LayerSerializationSurrogate.GetObjectData*
        name: GetObjectData
      VB:
      - id: Global.LayerSerializationSurrogate.GetObjectData*
        name: GetObjectData
    nameWithType:
      CSharp:
      - id: Global.LayerSerializationSurrogate*
        name: LayerSerializationSurrogate
      - name: .
      - id: Global.LayerSerializationSurrogate.GetObjectData*
        name: GetObjectData
      VB:
      - id: Global.LayerSerializationSurrogate*
        name: LayerSerializationSurrogate
      - name: .
      - id: Global.LayerSerializationSurrogate.GetObjectData*
        name: GetObjectData
    qualifiedName:
      CSharp:
      - id: Global.LayerSerializationSurrogate*
        name: LayerSerializationSurrogate
      - name: .
      - id: Global.LayerSerializationSurrogate.GetObjectData*
        name: GetObjectData
      VB:
      - id: Global.LayerSerializationSurrogate*
        name: LayerSerializationSurrogate
      - name: .
      - id: Global.LayerSerializationSurrogate.GetObjectData*
        name: GetObjectData
    isDefinition: true
    commentId: Overload:Global.LayerSerializationSurrogate.GetObjectData
  Global.ISurrogateSelector:
    name:
      CSharp:
      - id: Global.ISurrogateSelector
        name: ISurrogateSelector
        isExternal: true
      VB:
      - id: Global.ISurrogateSelector
        name: ISurrogateSelector
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.ISurrogateSelector
        name: ISurrogateSelector
        isExternal: true
      VB:
      - id: Global.ISurrogateSelector
        name: ISurrogateSelector
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.ISurrogateSelector
        name: ISurrogateSelector
        isExternal: true
      VB:
      - id: Global.ISurrogateSelector
        name: ISurrogateSelector
        isExternal: true
    isDefinition: true
  Global.LayerSerializationSurrogate.SetObjectData*:
    name:
      CSharp:
      - id: Global.LayerSerializationSurrogate.SetObjectData*
        name: SetObjectData
      VB:
      - id: Global.LayerSerializationSurrogate.SetObjectData*
        name: SetObjectData
    nameWithType:
      CSharp:
      - id: Global.LayerSerializationSurrogate*
        name: LayerSerializationSurrogate
      - name: .
      - id: Global.LayerSerializationSurrogate.SetObjectData*
        name: SetObjectData
      VB:
      - id: Global.LayerSerializationSurrogate*
        name: LayerSerializationSurrogate
      - name: .
      - id: Global.LayerSerializationSurrogate.SetObjectData*
        name: SetObjectData
    qualifiedName:
      CSharp:
      - id: Global.LayerSerializationSurrogate*
        name: LayerSerializationSurrogate
      - name: .
      - id: Global.LayerSerializationSurrogate.SetObjectData*
        name: SetObjectData
      VB:
      - id: Global.LayerSerializationSurrogate*
        name: LayerSerializationSurrogate
      - name: .
      - id: Global.LayerSerializationSurrogate.SetObjectData*
        name: SetObjectData
    isDefinition: true
    commentId: Overload:Global.LayerSerializationSurrogate.SetObjectData
  Global.LayerSerializationSurrogate:
    name:
      CSharp:
      - id: Global.LayerSerializationSurrogate
        name: LayerSerializationSurrogate
      VB:
      - id: Global.LayerSerializationSurrogate
        name: LayerSerializationSurrogate
    nameWithType:
      CSharp:
      - id: Global.LayerSerializationSurrogate
        name: LayerSerializationSurrogate
      VB:
      - id: Global.LayerSerializationSurrogate
        name: LayerSerializationSurrogate
    qualifiedName:
      CSharp:
      - id: Global.LayerSerializationSurrogate
        name: LayerSerializationSurrogate
      VB:
      - id: Global.LayerSerializationSurrogate
        name: LayerSerializationSurrogate
    isDefinition: true
    commentId: T:Global.LayerSerializationSurrogate
  System.ObsoleteAttribute.#ctor:
    name:
      CSharp:
      - id: System.ObsoleteAttribute.#ctor
        name: ObsoleteAttribute
        isExternal: true
      - name: (
      - name: )
      VB:
      - name: New
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        isExternal: true
      - name: .
      - id: System.ObsoleteAttribute.#ctor
        name: ObsoleteAttribute
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        isExternal: true
      - name: .
      - name: New
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        isExternal: true
      - name: .
      - id: System.ObsoleteAttribute.#ctor
        name: ObsoleteAttribute
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        isExternal: true
      - name: .
      - name: New
      - name: (
      - name: )
    isDefinition: true
    parent: System.ObsoleteAttribute
    commentId: M:System.ObsoleteAttribute.#ctor
  Global.Texture2DSerializationSurrogate.GetObjectData*:
    name:
      CSharp:
      - id: Global.Texture2DSerializationSurrogate.GetObjectData*
        name: GetObjectData
      VB:
      - id: Global.Texture2DSerializationSurrogate.GetObjectData*
        name: GetObjectData
    nameWithType:
      CSharp:
      - id: Global.Texture2DSerializationSurrogate*
        name: Texture2DSerializationSurrogate
      - name: .
      - id: Global.Texture2DSerializationSurrogate.GetObjectData*
        name: GetObjectData
      VB:
      - id: Global.Texture2DSerializationSurrogate*
        name: Texture2DSerializationSurrogate
      - name: .
      - id: Global.Texture2DSerializationSurrogate.GetObjectData*
        name: GetObjectData
    qualifiedName:
      CSharp:
      - id: Global.Texture2DSerializationSurrogate*
        name: Texture2DSerializationSurrogate
      - name: .
      - id: Global.Texture2DSerializationSurrogate.GetObjectData*
        name: GetObjectData
      VB:
      - id: Global.Texture2DSerializationSurrogate*
        name: Texture2DSerializationSurrogate
      - name: .
      - id: Global.Texture2DSerializationSurrogate.GetObjectData*
        name: GetObjectData
    isDefinition: true
    commentId: Overload:Global.Texture2DSerializationSurrogate.GetObjectData
  Global.Texture2DSerializationSurrogate.SetObjectData*:
    name:
      CSharp:
      - id: Global.Texture2DSerializationSurrogate.SetObjectData*
        name: SetObjectData
      VB:
      - id: Global.Texture2DSerializationSurrogate.SetObjectData*
        name: SetObjectData
    nameWithType:
      CSharp:
      - id: Global.Texture2DSerializationSurrogate*
        name: Texture2DSerializationSurrogate
      - name: .
      - id: Global.Texture2DSerializationSurrogate.SetObjectData*
        name: SetObjectData
      VB:
      - id: Global.Texture2DSerializationSurrogate*
        name: Texture2DSerializationSurrogate
      - name: .
      - id: Global.Texture2DSerializationSurrogate.SetObjectData*
        name: SetObjectData
    qualifiedName:
      CSharp:
      - id: Global.Texture2DSerializationSurrogate*
        name: Texture2DSerializationSurrogate
      - name: .
      - id: Global.Texture2DSerializationSurrogate.SetObjectData*
        name: SetObjectData
      VB:
      - id: Global.Texture2DSerializationSurrogate*
        name: Texture2DSerializationSurrogate
      - name: .
      - id: Global.Texture2DSerializationSurrogate.SetObjectData*
        name: SetObjectData
    isDefinition: true
    commentId: Overload:Global.Texture2DSerializationSurrogate.SetObjectData
  Global.Texture2DSerializationSurrogate:
    name:
      CSharp:
      - id: Global.Texture2DSerializationSurrogate
        name: Texture2DSerializationSurrogate
      VB:
      - id: Global.Texture2DSerializationSurrogate
        name: Texture2DSerializationSurrogate
    nameWithType:
      CSharp:
      - id: Global.Texture2DSerializationSurrogate
        name: Texture2DSerializationSurrogate
      VB:
      - id: Global.Texture2DSerializationSurrogate
        name: Texture2DSerializationSurrogate
    qualifiedName:
      CSharp:
      - id: Global.Texture2DSerializationSurrogate
        name: Texture2DSerializationSurrogate
      VB:
      - id: Global.Texture2DSerializationSurrogate
        name: Texture2DSerializationSurrogate
    isDefinition: true
    commentId: T:Global.Texture2DSerializationSurrogate
  Global.Material:
    name:
      CSharp:
      - id: Global.Material
        name: Material
        isExternal: true
      VB:
      - id: Global.Material
        name: Material
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Material
        name: Material
        isExternal: true
      VB:
      - id: Global.Material
        name: Material
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Material
        name: Material
        isExternal: true
      VB:
      - id: Global.Material
        name: Material
        isExternal: true
    isDefinition: true
  Global.HueSaturationBoxShader:
    name:
      CSharp:
      - id: Global.HueSaturationBoxShader
        name: HueSaturationBoxShader
      VB:
      - id: Global.HueSaturationBoxShader
        name: HueSaturationBoxShader
    nameWithType:
      CSharp:
      - id: Global.HueSaturationBoxShader
        name: HueSaturationBoxShader
      VB:
      - id: Global.HueSaturationBoxShader
        name: HueSaturationBoxShader
    qualifiedName:
      CSharp:
      - id: Global.HueSaturationBoxShader
        name: HueSaturationBoxShader
      VB:
      - id: Global.HueSaturationBoxShader
        name: HueSaturationBoxShader
    isDefinition: true
    commentId: T:Global.HueSaturationBoxShader
  Global.LightnessSliderShader:
    name:
      CSharp:
      - id: Global.LightnessSliderShader
        name: LightnessSliderShader
      VB:
      - id: Global.LightnessSliderShader
        name: LightnessSliderShader
    nameWithType:
      CSharp:
      - id: Global.LightnessSliderShader
        name: LightnessSliderShader
      VB:
      - id: Global.LightnessSliderShader
        name: LightnessSliderShader
    qualifiedName:
      CSharp:
      - id: Global.LightnessSliderShader
        name: LightnessSliderShader
      VB:
      - id: Global.LightnessSliderShader
        name: LightnessSliderShader
    isDefinition: true
    commentId: T:Global.LightnessSliderShader
  Global.Outline.outlineEnabled*:
    name:
      CSharp:
      - id: Global.Outline.outlineEnabled*
        name: outlineEnabled
      VB:
      - id: Global.Outline.outlineEnabled*
        name: outlineEnabled
    nameWithType:
      CSharp:
      - id: Global.Outline*
        name: Outline
      - name: .
      - id: Global.Outline.outlineEnabled*
        name: outlineEnabled
      VB:
      - id: Global.Outline*
        name: Outline
      - name: .
      - id: Global.Outline.outlineEnabled*
        name: outlineEnabled
    qualifiedName:
      CSharp:
      - id: Global.Outline*
        name: Outline
      - name: .
      - id: Global.Outline.outlineEnabled*
        name: outlineEnabled
      VB:
      - id: Global.Outline*
        name: Outline
      - name: .
      - id: Global.Outline.outlineEnabled*
        name: outlineEnabled
    isDefinition: true
    commentId: Overload:Global.Outline.outlineEnabled
  Global.Outline.colour*:
    name:
      CSharp:
      - id: Global.Outline.colour*
        name: colour
      VB:
      - id: Global.Outline.colour*
        name: colour
    nameWithType:
      CSharp:
      - id: Global.Outline*
        name: Outline
      - name: .
      - id: Global.Outline.colour*
        name: colour
      VB:
      - id: Global.Outline*
        name: Outline
      - name: .
      - id: Global.Outline.colour*
        name: colour
    qualifiedName:
      CSharp:
      - id: Global.Outline*
        name: Outline
      - name: .
      - id: Global.Outline.colour*
        name: colour
      VB:
      - id: Global.Outline*
        name: Outline
      - name: .
      - id: Global.Outline.colour*
        name: colour
    isDefinition: true
    commentId: Overload:Global.Outline.colour
  Global.Outline.thickness*:
    name:
      CSharp:
      - id: Global.Outline.thickness*
        name: thickness
      VB:
      - id: Global.Outline.thickness*
        name: thickness
    nameWithType:
      CSharp:
      - id: Global.Outline*
        name: Outline
      - name: .
      - id: Global.Outline.thickness*
        name: thickness
      VB:
      - id: Global.Outline*
        name: Outline
      - name: .
      - id: Global.Outline.thickness*
        name: thickness
    qualifiedName:
      CSharp:
      - id: Global.Outline*
        name: Outline
      - name: .
      - id: Global.Outline.thickness*
        name: thickness
      VB:
      - id: Global.Outline*
        name: Outline
      - name: .
      - id: Global.Outline.thickness*
        name: thickness
    isDefinition: true
    commentId: Overload:Global.Outline.thickness
  Global.Outline.keepExistingTexture*:
    name:
      CSharp:
      - id: Global.Outline.keepExistingTexture*
        name: keepExistingTexture
      VB:
      - id: Global.Outline.keepExistingTexture*
        name: keepExistingTexture
    nameWithType:
      CSharp:
      - id: Global.Outline*
        name: Outline
      - name: .
      - id: Global.Outline.keepExistingTexture*
        name: keepExistingTexture
      VB:
      - id: Global.Outline*
        name: Outline
      - name: .
      - id: Global.Outline.keepExistingTexture*
        name: keepExistingTexture
    qualifiedName:
      CSharp:
      - id: Global.Outline*
        name: Outline
      - name: .
      - id: Global.Outline.keepExistingTexture*
        name: keepExistingTexture
      VB:
      - id: Global.Outline*
        name: Outline
      - name: .
      - id: Global.Outline.keepExistingTexture*
        name: keepExistingTexture
    isDefinition: true
    commentId: Overload:Global.Outline.keepExistingTexture
  Global.Outline:
    name:
      CSharp:
      - id: Global.Outline
        name: Outline
      VB:
      - id: Global.Outline
        name: Outline
    nameWithType:
      CSharp:
      - id: Global.Outline
        name: Outline
      VB:
      - id: Global.Outline
        name: Outline
    qualifiedName:
      CSharp:
      - id: Global.Outline
        name: Outline
      VB:
      - id: Global.Outline
        name: Outline
    isDefinition: true
    commentId: T:Global.Outline
  Global.RainbowOutline.outlineEnabled*:
    name:
      CSharp:
      - id: Global.RainbowOutline.outlineEnabled*
        name: outlineEnabled
      VB:
      - id: Global.RainbowOutline.outlineEnabled*
        name: outlineEnabled
    nameWithType:
      CSharp:
      - id: Global.RainbowOutline*
        name: RainbowOutline
      - name: .
      - id: Global.RainbowOutline.outlineEnabled*
        name: outlineEnabled
      VB:
      - id: Global.RainbowOutline*
        name: RainbowOutline
      - name: .
      - id: Global.RainbowOutline.outlineEnabled*
        name: outlineEnabled
    qualifiedName:
      CSharp:
      - id: Global.RainbowOutline*
        name: RainbowOutline
      - name: .
      - id: Global.RainbowOutline.outlineEnabled*
        name: outlineEnabled
      VB:
      - id: Global.RainbowOutline*
        name: RainbowOutline
      - name: .
      - id: Global.RainbowOutline.outlineEnabled*
        name: outlineEnabled
    isDefinition: true
    commentId: Overload:Global.RainbowOutline.outlineEnabled
  Global.RainbowOutline.thickness*:
    name:
      CSharp:
      - id: Global.RainbowOutline.thickness*
        name: thickness
      VB:
      - id: Global.RainbowOutline.thickness*
        name: thickness
    nameWithType:
      CSharp:
      - id: Global.RainbowOutline*
        name: RainbowOutline
      - name: .
      - id: Global.RainbowOutline.thickness*
        name: thickness
      VB:
      - id: Global.RainbowOutline*
        name: RainbowOutline
      - name: .
      - id: Global.RainbowOutline.thickness*
        name: thickness
    qualifiedName:
      CSharp:
      - id: Global.RainbowOutline*
        name: RainbowOutline
      - name: .
      - id: Global.RainbowOutline.thickness*
        name: thickness
      VB:
      - id: Global.RainbowOutline*
        name: RainbowOutline
      - name: .
      - id: Global.RainbowOutline.thickness*
        name: thickness
    isDefinition: true
    commentId: Overload:Global.RainbowOutline.thickness
  Global.RainbowOutline.keepExistingTexture*:
    name:
      CSharp:
      - id: Global.RainbowOutline.keepExistingTexture*
        name: keepExistingTexture
      VB:
      - id: Global.RainbowOutline.keepExistingTexture*
        name: keepExistingTexture
    nameWithType:
      CSharp:
      - id: Global.RainbowOutline*
        name: RainbowOutline
      - name: .
      - id: Global.RainbowOutline.keepExistingTexture*
        name: keepExistingTexture
      VB:
      - id: Global.RainbowOutline*
        name: RainbowOutline
      - name: .
      - id: Global.RainbowOutline.keepExistingTexture*
        name: keepExistingTexture
    qualifiedName:
      CSharp:
      - id: Global.RainbowOutline*
        name: RainbowOutline
      - name: .
      - id: Global.RainbowOutline.keepExistingTexture*
        name: keepExistingTexture
      VB:
      - id: Global.RainbowOutline*
        name: RainbowOutline
      - name: .
      - id: Global.RainbowOutline.keepExistingTexture*
        name: keepExistingTexture
    isDefinition: true
    commentId: Overload:Global.RainbowOutline.keepExistingTexture
  Global.RainbowOutline:
    name:
      CSharp:
      - id: Global.RainbowOutline
        name: RainbowOutline
      VB:
      - id: Global.RainbowOutline
        name: RainbowOutline
    nameWithType:
      CSharp:
      - id: Global.RainbowOutline
        name: RainbowOutline
      VB:
      - id: Global.RainbowOutline
        name: RainbowOutline
    qualifiedName:
      CSharp:
      - id: Global.RainbowOutline
        name: RainbowOutline
      VB:
      - id: Global.RainbowOutline
        name: RainbowOutline
    isDefinition: true
    commentId: T:Global.RainbowOutline
  Global.Theme.SubscribeToOnChanged*:
    name:
      CSharp:
      - id: Global.Theme.SubscribeToOnChanged*
        name: SubscribeToOnChanged
      VB:
      - id: Global.Theme.SubscribeToOnChanged*
        name: SubscribeToOnChanged
    nameWithType:
      CSharp:
      - id: Global.Theme*
        name: Theme
      - name: .
      - id: Global.Theme.SubscribeToOnChanged*
        name: SubscribeToOnChanged
      VB:
      - id: Global.Theme*
        name: Theme
      - name: .
      - id: Global.Theme.SubscribeToOnChanged*
        name: SubscribeToOnChanged
    qualifiedName:
      CSharp:
      - id: Global.Theme*
        name: Theme
      - name: .
      - id: Global.Theme.SubscribeToOnChanged*
        name: SubscribeToOnChanged
      VB:
      - id: Global.Theme*
        name: Theme
      - name: .
      - id: Global.Theme.SubscribeToOnChanged*
        name: SubscribeToOnChanged
    isDefinition: true
    commentId: Overload:Global.Theme.SubscribeToOnChanged
  Global.Theme:
    name:
      CSharp:
      - id: Global.Theme
        name: Theme
      VB:
      - id: Global.Theme
        name: Theme
    nameWithType:
      CSharp:
      - id: Global.Theme
        name: Theme
      VB:
      - id: Global.Theme
        name: Theme
    qualifiedName:
      CSharp:
      - id: Global.Theme
        name: Theme
      VB:
      - id: Global.Theme
        name: Theme
    isDefinition: true
    commentId: T:Global.Theme
  Global.ThemeManager.currentTheme*:
    name:
      CSharp:
      - id: Global.ThemeManager.currentTheme*
        name: currentTheme
      VB:
      - id: Global.ThemeManager.currentTheme*
        name: currentTheme
    nameWithType:
      CSharp:
      - id: Global.ThemeManager*
        name: ThemeManager
      - name: .
      - id: Global.ThemeManager.currentTheme*
        name: currentTheme
      VB:
      - id: Global.ThemeManager*
        name: ThemeManager
      - name: .
      - id: Global.ThemeManager.currentTheme*
        name: currentTheme
    qualifiedName:
      CSharp:
      - id: Global.ThemeManager*
        name: ThemeManager
      - name: .
      - id: Global.ThemeManager.currentTheme*
        name: currentTheme
      VB:
      - id: Global.ThemeManager*
        name: ThemeManager
      - name: .
      - id: Global.ThemeManager.currentTheme*
        name: currentTheme
    isDefinition: true
    commentId: Overload:Global.ThemeManager.currentTheme
  System.Collections.Generic.List{Theme}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Theme
        name: Theme
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Theme
        name: Theme
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Theme
        name: Theme
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Theme
        name: Theme
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Theme
        name: Theme
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Theme
        name: Theme
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Theme}
  Global.ThemeManager.themes*:
    name:
      CSharp:
      - id: Global.ThemeManager.themes*
        name: themes
      VB:
      - id: Global.ThemeManager.themes*
        name: themes
    nameWithType:
      CSharp:
      - id: Global.ThemeManager*
        name: ThemeManager
      - name: .
      - id: Global.ThemeManager.themes*
        name: themes
      VB:
      - id: Global.ThemeManager*
        name: ThemeManager
      - name: .
      - id: Global.ThemeManager.themes*
        name: themes
    qualifiedName:
      CSharp:
      - id: Global.ThemeManager*
        name: ThemeManager
      - name: .
      - id: Global.ThemeManager.themes*
        name: themes
      VB:
      - id: Global.ThemeManager*
        name: ThemeManager
      - name: .
      - id: Global.ThemeManager.themes*
        name: themes
    isDefinition: true
    commentId: Overload:Global.ThemeManager.themes
  Global.ThemeManager.SetTheme*:
    name:
      CSharp:
      - id: Global.ThemeManager.SetTheme*
        name: SetTheme
      VB:
      - id: Global.ThemeManager.SetTheme*
        name: SetTheme
    nameWithType:
      CSharp:
      - id: Global.ThemeManager*
        name: ThemeManager
      - name: .
      - id: Global.ThemeManager.SetTheme*
        name: SetTheme
      VB:
      - id: Global.ThemeManager*
        name: ThemeManager
      - name: .
      - id: Global.ThemeManager.SetTheme*
        name: SetTheme
    qualifiedName:
      CSharp:
      - id: Global.ThemeManager*
        name: ThemeManager
      - name: .
      - id: Global.ThemeManager.SetTheme*
        name: SetTheme
      VB:
      - id: Global.ThemeManager*
        name: ThemeManager
      - name: .
      - id: Global.ThemeManager.SetTheme*
        name: SetTheme
    isDefinition: true
    commentId: Overload:Global.ThemeManager.SetTheme
  Global.ThemeManager.SubscribeToThemeChanged*:
    name:
      CSharp:
      - id: Global.ThemeManager.SubscribeToThemeChanged*
        name: SubscribeToThemeChanged
      VB:
      - id: Global.ThemeManager.SubscribeToThemeChanged*
        name: SubscribeToThemeChanged
    nameWithType:
      CSharp:
      - id: Global.ThemeManager*
        name: ThemeManager
      - name: .
      - id: Global.ThemeManager.SubscribeToThemeChanged*
        name: SubscribeToThemeChanged
      VB:
      - id: Global.ThemeManager*
        name: ThemeManager
      - name: .
      - id: Global.ThemeManager.SubscribeToThemeChanged*
        name: SubscribeToThemeChanged
    qualifiedName:
      CSharp:
      - id: Global.ThemeManager*
        name: ThemeManager
      - name: .
      - id: Global.ThemeManager.SubscribeToThemeChanged*
        name: SubscribeToThemeChanged
      VB:
      - id: Global.ThemeManager*
        name: ThemeManager
      - name: .
      - id: Global.ThemeManager.SubscribeToThemeChanged*
        name: SubscribeToThemeChanged
    isDefinition: true
    commentId: Overload:Global.ThemeManager.SubscribeToThemeChanged
  Global.ThemeObjectType:
    name:
      CSharp:
      - id: Global.ThemeObjectType
        name: ThemeObjectType
      VB:
      - id: Global.ThemeObjectType
        name: ThemeObjectType
    nameWithType:
      CSharp:
      - id: Global.ThemeObjectType
        name: ThemeObjectType
      VB:
      - id: Global.ThemeObjectType
        name: ThemeObjectType
    qualifiedName:
      CSharp:
      - id: Global.ThemeObjectType
        name: ThemeObjectType
      VB:
      - id: Global.ThemeObjectType
        name: ThemeObjectType
    isDefinition: true
    commentId: T:Global.ThemeObjectType
  Global.UITheme:
    name:
      CSharp:
      - id: Global.UITheme
        name: UITheme
      VB:
      - id: Global.UITheme
        name: UITheme
    nameWithType:
      CSharp:
      - id: Global.UITheme
        name: UITheme
      VB:
      - id: Global.UITheme
        name: UITheme
    qualifiedName:
      CSharp:
      - id: Global.UITheme
        name: UITheme
      VB:
      - id: Global.UITheme
        name: UITheme
    isDefinition: true
    commentId: T:Global.UITheme
  Global.Tile.file*:
    name:
      CSharp:
      - id: Global.Tile.file*
        name: file
      VB:
      - id: Global.Tile.file*
        name: file
    nameWithType:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.file*
        name: file
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.file*
        name: file
    qualifiedName:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.file*
        name: file
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.file*
        name: file
    isDefinition: true
    commentId: Overload:Global.Tile.file
  Global.TileLayer[]:
    name:
      CSharp:
      - id: Global.TileLayer
        name: TileLayer
      - name: '['
      - name: ']'
      VB:
      - id: Global.TileLayer
        name: TileLayer
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: Global.TileLayer
        name: TileLayer
      - name: '['
      - name: ']'
      VB:
      - id: Global.TileLayer
        name: TileLayer
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.TileLayer
        name: TileLayer
      - name: '['
      - name: ']'
      VB:
      - id: Global.TileLayer
        name: TileLayer
      - name: (
      - name: )
    isDefinition: false
  Global.Tile.tileLayersAppearsOn*:
    name:
      CSharp:
      - id: Global.Tile.tileLayersAppearsOn*
        name: tileLayersAppearsOn
      VB:
      - id: Global.Tile.tileLayersAppearsOn*
        name: tileLayersAppearsOn
    nameWithType:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.tileLayersAppearsOn*
        name: tileLayersAppearsOn
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.tileLayersAppearsOn*
        name: tileLayersAppearsOn
    qualifiedName:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.tileLayersAppearsOn*
        name: tileLayersAppearsOn
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.tileLayersAppearsOn*
        name: tileLayersAppearsOn
    isDefinition: true
    commentId: Overload:Global.Tile.tileLayersAppearsOn
  Global.Tile.width*:
    name:
      CSharp:
      - id: Global.Tile.width*
        name: width
      VB:
      - id: Global.Tile.width*
        name: width
    nameWithType:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.width*
        name: width
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.width*
        name: width
    qualifiedName:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.width*
        name: width
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.width*
        name: width
    isDefinition: true
    commentId: Overload:Global.Tile.width
  Global.Tile.height*:
    name:
      CSharp:
      - id: Global.Tile.height*
        name: height
      VB:
      - id: Global.Tile.height*
        name: height
    nameWithType:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.height*
        name: height
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.height*
        name: height
    qualifiedName:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.height*
        name: height
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.height*
        name: height
    isDefinition: true
    commentId: Overload:Global.Tile.height
  Global.Tile.bottomLeft*:
    name:
      CSharp:
      - id: Global.Tile.bottomLeft*
        name: bottomLeft
      VB:
      - id: Global.Tile.bottomLeft*
        name: bottomLeft
    nameWithType:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.bottomLeft*
        name: bottomLeft
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.bottomLeft*
        name: bottomLeft
    qualifiedName:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.bottomLeft*
        name: bottomLeft
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.bottomLeft*
        name: bottomLeft
    isDefinition: true
    commentId: Overload:Global.Tile.bottomLeft
  Global.Tile.bottomRight*:
    name:
      CSharp:
      - id: Global.Tile.bottomRight*
        name: bottomRight
      VB:
      - id: Global.Tile.bottomRight*
        name: bottomRight
    nameWithType:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.bottomRight*
        name: bottomRight
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.bottomRight*
        name: bottomRight
    qualifiedName:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.bottomRight*
        name: bottomRight
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.bottomRight*
        name: bottomRight
    isDefinition: true
    commentId: Overload:Global.Tile.bottomRight
  Global.Tile.topLeft*:
    name:
      CSharp:
      - id: Global.Tile.topLeft*
        name: topLeft
      VB:
      - id: Global.Tile.topLeft*
        name: topLeft
    nameWithType:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.topLeft*
        name: topLeft
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.topLeft*
        name: topLeft
    qualifiedName:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.topLeft*
        name: topLeft
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.topLeft*
        name: topLeft
    isDefinition: true
    commentId: Overload:Global.Tile.topLeft
  Global.Tile.topRight*:
    name:
      CSharp:
      - id: Global.Tile.topRight*
        name: topRight
      VB:
      - id: Global.Tile.topRight*
        name: topRight
    nameWithType:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.topRight*
        name: topRight
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.topRight*
        name: topRight
    qualifiedName:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.topRight*
        name: topRight
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.topRight*
        name: topRight
    isDefinition: true
    commentId: Overload:Global.Tile.topRight
  Global.Tile.centre*:
    name:
      CSharp:
      - id: Global.Tile.centre*
        name: centre
      VB:
      - id: Global.Tile.centre*
        name: centre
    nameWithType:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.centre*
        name: centre
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.centre*
        name: centre
    qualifiedName:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.centre*
        name: centre
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.centre*
        name: centre
    isDefinition: true
    commentId: Overload:Global.Tile.centre
  Global.Tile.rect*:
    name:
      CSharp:
      - id: Global.Tile.rect*
        name: rect
      VB:
      - id: Global.Tile.rect*
        name: rect
    nameWithType:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.rect*
        name: rect
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.rect*
        name: rect
    qualifiedName:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.rect*
        name: rect
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.rect*
        name: rect
    isDefinition: true
    commentId: Overload:Global.Tile.rect
  Global.Tile.#ctor*:
    name:
      CSharp:
      - id: Global.Tile.#ctor*
        name: Tile
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.#ctor*
        name: Tile
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.#ctor*
        name: Tile
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.Tile.#ctor
  Global.Tile.TileLayerToLayerInTile*:
    name:
      CSharp:
      - id: Global.Tile.TileLayerToLayerInTile*
        name: TileLayerToLayerInTile
      VB:
      - id: Global.Tile.TileLayerToLayerInTile*
        name: TileLayerToLayerInTile
    nameWithType:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.TileLayerToLayerInTile*
        name: TileLayerToLayerInTile
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.TileLayerToLayerInTile*
        name: TileLayerToLayerInTile
    qualifiedName:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.TileLayerToLayerInTile*
        name: TileLayerToLayerInTile
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.TileLayerToLayerInTile*
        name: TileLayerToLayerInTile
    isDefinition: true
    commentId: Overload:Global.Tile.TileLayerToLayerInTile
  Global.Tile.LayerInTileToTileLayer*:
    name:
      CSharp:
      - id: Global.Tile.LayerInTileToTileLayer*
        name: LayerInTileToTileLayer
      VB:
      - id: Global.Tile.LayerInTileToTileLayer*
        name: LayerInTileToTileLayer
    nameWithType:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.LayerInTileToTileLayer*
        name: LayerInTileToTileLayer
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.LayerInTileToTileLayer*
        name: LayerInTileToTileLayer
    qualifiedName:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.LayerInTileToTileLayer*
        name: LayerInTileToTileLayer
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.LayerInTileToTileLayer*
        name: LayerInTileToTileLayer
    isDefinition: true
    commentId: Overload:Global.Tile.LayerInTileToTileLayer
  Global.UnityAction{IntRect}:
    name:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.IntRect
        name: IntRect
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.IntRect
        name: IntRect
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.IntRect
        name: IntRect
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.IntRect
        name: IntRect
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.IntRect
        name: IntRect
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.IntRect
        name: IntRect
      - name: )
    isDefinition: false
    definition: Global.UnityAction`1
    commentId: '!:Global.UnityAction{IntRect}'
  Global.Tile.SubscribeToOnMoved*:
    name:
      CSharp:
      - id: Global.Tile.SubscribeToOnMoved*
        name: SubscribeToOnMoved
      VB:
      - id: Global.Tile.SubscribeToOnMoved*
        name: SubscribeToOnMoved
    nameWithType:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.SubscribeToOnMoved*
        name: SubscribeToOnMoved
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.SubscribeToOnMoved*
        name: SubscribeToOnMoved
    qualifiedName:
      CSharp:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.SubscribeToOnMoved*
        name: SubscribeToOnMoved
      VB:
      - id: Global.Tile*
        name: Tile
      - name: .
      - id: Global.Tile.SubscribeToOnMoved*
        name: SubscribeToOnMoved
    isDefinition: true
    commentId: Overload:Global.Tile.SubscribeToOnMoved
  Global.TileOutlineManager.RefreshTileOutlines*:
    name:
      CSharp:
      - id: Global.TileOutlineManager.RefreshTileOutlines*
        name: RefreshTileOutlines
      VB:
      - id: Global.TileOutlineManager.RefreshTileOutlines*
        name: RefreshTileOutlines
    nameWithType:
      CSharp:
      - id: Global.TileOutlineManager*
        name: TileOutlineManager
      - name: .
      - id: Global.TileOutlineManager.RefreshTileOutlines*
        name: RefreshTileOutlines
      VB:
      - id: Global.TileOutlineManager*
        name: TileOutlineManager
      - name: .
      - id: Global.TileOutlineManager.RefreshTileOutlines*
        name: RefreshTileOutlines
    qualifiedName:
      CSharp:
      - id: Global.TileOutlineManager*
        name: TileOutlineManager
      - name: .
      - id: Global.TileOutlineManager.RefreshTileOutlines*
        name: RefreshTileOutlines
      VB:
      - id: Global.TileOutlineManager*
        name: TileOutlineManager
      - name: .
      - id: Global.TileOutlineManager.RefreshTileOutlines*
        name: RefreshTileOutlines
    isDefinition: true
    commentId: Overload:Global.TileOutlineManager.RefreshTileOutlines
  Global.TileOutlineManager.HideShowTileOutline*:
    name:
      CSharp:
      - id: Global.TileOutlineManager.HideShowTileOutline*
        name: HideShowTileOutline
      VB:
      - id: Global.TileOutlineManager.HideShowTileOutline*
        name: HideShowTileOutline
    nameWithType:
      CSharp:
      - id: Global.TileOutlineManager*
        name: TileOutlineManager
      - name: .
      - id: Global.TileOutlineManager.HideShowTileOutline*
        name: HideShowTileOutline
      VB:
      - id: Global.TileOutlineManager*
        name: TileOutlineManager
      - name: .
      - id: Global.TileOutlineManager.HideShowTileOutline*
        name: HideShowTileOutline
    qualifiedName:
      CSharp:
      - id: Global.TileOutlineManager*
        name: TileOutlineManager
      - name: .
      - id: Global.TileOutlineManager.HideShowTileOutline*
        name: HideShowTileOutline
      VB:
      - id: Global.TileOutlineManager*
        name: TileOutlineManager
      - name: .
      - id: Global.TileOutlineManager.HideShowTileOutline*
        name: HideShowTileOutline
    isDefinition: true
    commentId: Overload:Global.TileOutlineManager.HideShowTileOutline
  Global.TileOutlineManager.HideTileOutline*:
    name:
      CSharp:
      - id: Global.TileOutlineManager.HideTileOutline*
        name: HideTileOutline
      VB:
      - id: Global.TileOutlineManager.HideTileOutline*
        name: HideTileOutline
    nameWithType:
      CSharp:
      - id: Global.TileOutlineManager*
        name: TileOutlineManager
      - name: .
      - id: Global.TileOutlineManager.HideTileOutline*
        name: HideTileOutline
      VB:
      - id: Global.TileOutlineManager*
        name: TileOutlineManager
      - name: .
      - id: Global.TileOutlineManager.HideTileOutline*
        name: HideTileOutline
    qualifiedName:
      CSharp:
      - id: Global.TileOutlineManager*
        name: TileOutlineManager
      - name: .
      - id: Global.TileOutlineManager.HideTileOutline*
        name: HideTileOutline
      VB:
      - id: Global.TileOutlineManager*
        name: TileOutlineManager
      - name: .
      - id: Global.TileOutlineManager.HideTileOutline*
        name: HideTileOutline
    isDefinition: true
    commentId: Overload:Global.TileOutlineManager.HideTileOutline
  Global.TileOutlineManager.ShowTileOutline*:
    name:
      CSharp:
      - id: Global.TileOutlineManager.ShowTileOutline*
        name: ShowTileOutline
      VB:
      - id: Global.TileOutlineManager.ShowTileOutline*
        name: ShowTileOutline
    nameWithType:
      CSharp:
      - id: Global.TileOutlineManager*
        name: TileOutlineManager
      - name: .
      - id: Global.TileOutlineManager.ShowTileOutline*
        name: ShowTileOutline
      VB:
      - id: Global.TileOutlineManager*
        name: TileOutlineManager
      - name: .
      - id: Global.TileOutlineManager.ShowTileOutline*
        name: ShowTileOutline
    qualifiedName:
      CSharp:
      - id: Global.TileOutlineManager*
        name: TileOutlineManager
      - name: .
      - id: Global.TileOutlineManager.ShowTileOutline*
        name: ShowTileOutline
      VB:
      - id: Global.TileOutlineManager*
        name: TileOutlineManager
      - name: .
      - id: Global.TileOutlineManager.ShowTileOutline*
        name: ShowTileOutline
    isDefinition: true
    commentId: Overload:Global.TileOutlineManager.ShowTileOutline
  Global.Tileset.tilesetName*:
    name:
      CSharp:
      - id: Global.Tileset.tilesetName*
        name: tilesetName
      VB:
      - id: Global.Tileset.tilesetName*
        name: tilesetName
    nameWithType:
      CSharp:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - id: Global.Tileset.tilesetName*
        name: tilesetName
      VB:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - id: Global.Tileset.tilesetName*
        name: tilesetName
    qualifiedName:
      CSharp:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - id: Global.Tileset.tilesetName*
        name: tilesetName
      VB:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - id: Global.Tileset.tilesetName*
        name: tilesetName
    isDefinition: true
    commentId: Overload:Global.Tileset.tilesetName
  Global.Tileset.Count*:
    name:
      CSharp:
      - id: Global.Tileset.Count*
        name: Count
      VB:
      - id: Global.Tileset.Count*
        name: Count
    nameWithType:
      CSharp:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - id: Global.Tileset.Count*
        name: Count
      VB:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - id: Global.Tileset.Count*
        name: Count
    qualifiedName:
      CSharp:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - id: Global.Tileset.Count*
        name: Count
      VB:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - id: Global.Tileset.Count*
        name: Count
    isDefinition: true
    commentId: Overload:Global.Tileset.Count
  Global.Tileset.#ctor*:
    name:
      CSharp:
      - id: Global.Tileset.#ctor*
        name: Tileset
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - id: Global.Tileset.#ctor*
        name: Tileset
      VB:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - id: Global.Tileset.#ctor*
        name: Tileset
      VB:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.Tileset.#ctor
  Global.Tileset.AddTile*:
    name:
      CSharp:
      - id: Global.Tileset.AddTile*
        name: AddTile
      VB:
      - id: Global.Tileset.AddTile*
        name: AddTile
    nameWithType:
      CSharp:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - id: Global.Tileset.AddTile*
        name: AddTile
      VB:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - id: Global.Tileset.AddTile*
        name: AddTile
    qualifiedName:
      CSharp:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - id: Global.Tileset.AddTile*
        name: AddTile
      VB:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - id: Global.Tileset.AddTile*
        name: AddTile
    isDefinition: true
    commentId: Overload:Global.Tileset.AddTile
  Global.Tileset.RemoveTile*:
    name:
      CSharp:
      - id: Global.Tileset.RemoveTile*
        name: RemoveTile
      VB:
      - id: Global.Tileset.RemoveTile*
        name: RemoveTile
    nameWithType:
      CSharp:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - id: Global.Tileset.RemoveTile*
        name: RemoveTile
      VB:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - id: Global.Tileset.RemoveTile*
        name: RemoveTile
    qualifiedName:
      CSharp:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - id: Global.Tileset.RemoveTile*
        name: RemoveTile
      VB:
      - id: Global.Tileset*
        name: Tileset
      - name: .
      - id: Global.Tileset.RemoveTile*
        name: RemoveTile
    isDefinition: true
    commentId: Overload:Global.Tileset.RemoveTile
  Global.Tileset:
    name:
      CSharp:
      - id: Global.Tileset
        name: Tileset
      VB:
      - id: Global.Tileset
        name: Tileset
    nameWithType:
      CSharp:
      - id: Global.Tileset
        name: Tileset
      VB:
      - id: Global.Tileset
        name: Tileset
    qualifiedName:
      CSharp:
      - id: Global.Tileset
        name: Tileset
      VB:
      - id: Global.Tileset
        name: Tileset
    isDefinition: true
    commentId: T:Global.Tileset
  Global.UnityAction{File}:
    name:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.File
        name: File
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.File
        name: File
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.File
        name: File
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.File
        name: File
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.File
        name: File
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.File
        name: File
      - name: )
    isDefinition: false
    definition: Global.UnityAction`1
    commentId: '!:Global.UnityAction{File}'
  Global.TilesetManager.SubscribeToOnTileIconSelected*:
    name:
      CSharp:
      - id: Global.TilesetManager.SubscribeToOnTileIconSelected*
        name: SubscribeToOnTileIconSelected
      VB:
      - id: Global.TilesetManager.SubscribeToOnTileIconSelected*
        name: SubscribeToOnTileIconSelected
    nameWithType:
      CSharp:
      - id: Global.TilesetManager*
        name: TilesetManager
      - name: .
      - id: Global.TilesetManager.SubscribeToOnTileIconSelected*
        name: SubscribeToOnTileIconSelected
      VB:
      - id: Global.TilesetManager*
        name: TilesetManager
      - name: .
      - id: Global.TilesetManager.SubscribeToOnTileIconSelected*
        name: SubscribeToOnTileIconSelected
    qualifiedName:
      CSharp:
      - id: Global.TilesetManager*
        name: TilesetManager
      - name: .
      - id: Global.TilesetManager.SubscribeToOnTileIconSelected*
        name: SubscribeToOnTileIconSelected
      VB:
      - id: Global.TilesetManager*
        name: TilesetManager
      - name: .
      - id: Global.TilesetManager.SubscribeToOnTileIconSelected*
        name: SubscribeToOnTileIconSelected
    isDefinition: true
    commentId: Overload:Global.TilesetManager.SubscribeToOnTileIconSelected
  Global.UIAnchorPoint:
    name:
      CSharp:
      - id: Global.UIAnchorPoint
        name: UIAnchorPoint
      VB:
      - id: Global.UIAnchorPoint
        name: UIAnchorPoint
    nameWithType:
      CSharp:
      - id: Global.UIAnchorPoint
        name: UIAnchorPoint
      VB:
      - id: Global.UIAnchorPoint
        name: UIAnchorPoint
    qualifiedName:
      CSharp:
      - id: Global.UIAnchorPoint
        name: UIAnchorPoint
      VB:
      - id: Global.UIAnchorPoint
        name: UIAnchorPoint
    isDefinition: true
    commentId: T:Global.UIAnchorPoint
  Global.UIButton.width*:
    name:
      CSharp:
      - id: Global.UIButton.width*
        name: width
      VB:
      - id: Global.UIButton.width*
        name: width
    nameWithType:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.width*
        name: width
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.width*
        name: width
    qualifiedName:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.width*
        name: width
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.width*
        name: width
    isDefinition: true
    commentId: Overload:Global.UIButton.width
  Global.UIButton.height*:
    name:
      CSharp:
      - id: Global.UIButton.height*
        name: height
      VB:
      - id: Global.UIButton.height*
        name: height
    nameWithType:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.height*
        name: height
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.height*
        name: height
    qualifiedName:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.height*
        name: height
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.height*
        name: height
    isDefinition: true
    commentId: Overload:Global.UIButton.height
  Global.UIButton.image*:
    name:
      CSharp:
      - id: Global.UIButton.image*
        name: image
      VB:
      - id: Global.UIButton.image*
        name: image
    nameWithType:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.image*
        name: image
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.image*
        name: image
    qualifiedName:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.image*
        name: image
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.image*
        name: image
    isDefinition: true
    commentId: Overload:Global.UIButton.image
  Global.UIButton.hoverImage*:
    name:
      CSharp:
      - id: Global.UIButton.hoverImage*
        name: hoverImage
      VB:
      - id: Global.UIButton.hoverImage*
        name: hoverImage
    nameWithType:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.hoverImage*
        name: hoverImage
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.hoverImage*
        name: hoverImage
    qualifiedName:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.hoverImage*
        name: hoverImage
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.hoverImage*
        name: hoverImage
    isDefinition: true
    commentId: Overload:Global.UIButton.hoverImage
  Global.UIButton.pressedImage*:
    name:
      CSharp:
      - id: Global.UIButton.pressedImage*
        name: pressedImage
      VB:
      - id: Global.UIButton.pressedImage*
        name: pressedImage
    nameWithType:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.pressedImage*
        name: pressedImage
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.pressedImage*
        name: pressedImage
    qualifiedName:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.pressedImage*
        name: pressedImage
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.pressedImage*
        name: pressedImage
    isDefinition: true
    commentId: Overload:Global.UIButton.pressedImage
  Global.UIButton.isPressed*:
    name:
      CSharp:
      - id: Global.UIButton.isPressed*
        name: isPressed
      VB:
      - id: Global.UIButton.isPressed*
        name: isPressed
    nameWithType:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.isPressed*
        name: isPressed
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.isPressed*
        name: isPressed
    qualifiedName:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.isPressed*
        name: isPressed
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.isPressed*
        name: isPressed
    isDefinition: true
    commentId: Overload:Global.UIButton.isPressed
  Global.UIButton.UpdateDisplay*:
    name:
      CSharp:
      - id: Global.UIButton.UpdateDisplay*
        name: UpdateDisplay
      VB:
      - id: Global.UIButton.UpdateDisplay*
        name: UpdateDisplay
    nameWithType:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.UpdateDisplay*
        name: UpdateDisplay
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.UpdateDisplay*
        name: UpdateDisplay
    qualifiedName:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.UpdateDisplay*
        name: UpdateDisplay
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.UpdateDisplay*
        name: UpdateDisplay
    isDefinition: true
    commentId: Overload:Global.UIButton.UpdateDisplay
  Global.UIButton.Press*:
    name:
      CSharp:
      - id: Global.UIButton.Press*
        name: Press
      VB:
      - id: Global.UIButton.Press*
        name: Press
    nameWithType:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.Press*
        name: Press
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.Press*
        name: Press
    qualifiedName:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.Press*
        name: Press
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.Press*
        name: Press
    isDefinition: true
    commentId: Overload:Global.UIButton.Press
  Global.UIButton.RightClick*:
    name:
      CSharp:
      - id: Global.UIButton.RightClick*
        name: RightClick
      VB:
      - id: Global.UIButton.RightClick*
        name: RightClick
    nameWithType:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.RightClick*
        name: RightClick
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.RightClick*
        name: RightClick
    qualifiedName:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.RightClick*
        name: RightClick
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.RightClick*
        name: RightClick
    isDefinition: true
    commentId: Overload:Global.UIButton.RightClick
  Global.UIButton.SetImages*:
    name:
      CSharp:
      - id: Global.UIButton.SetImages*
        name: SetImages
      VB:
      - id: Global.UIButton.SetImages*
        name: SetImages
    nameWithType:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SetImages*
        name: SetImages
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SetImages*
        name: SetImages
    qualifiedName:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SetImages*
        name: SetImages
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SetImages*
        name: SetImages
    isDefinition: true
    commentId: Overload:Global.UIButton.SetImages
  Global.UIButton.SetText*:
    name:
      CSharp:
      - id: Global.UIButton.SetText*
        name: SetText
      VB:
      - id: Global.UIButton.SetText*
        name: SetText
    nameWithType:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SetText*
        name: SetText
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SetText*
        name: SetText
    qualifiedName:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SetText*
        name: SetText
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SetText*
        name: SetText
    isDefinition: true
    commentId: Overload:Global.UIButton.SetText
  Global.UIButton.SetSortingLayer*:
    name:
      CSharp:
      - id: Global.UIButton.SetSortingLayer*
        name: SetSortingLayer
      VB:
      - id: Global.UIButton.SetSortingLayer*
        name: SetSortingLayer
    nameWithType:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SetSortingLayer*
        name: SetSortingLayer
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SetSortingLayer*
        name: SetSortingLayer
    qualifiedName:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SetSortingLayer*
        name: SetSortingLayer
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SetSortingLayer*
        name: SetSortingLayer
    isDefinition: true
    commentId: Overload:Global.UIButton.SetSortingLayer
  Global.UIButton.SetSortingOrder*:
    name:
      CSharp:
      - id: Global.UIButton.SetSortingOrder*
        name: SetSortingOrder
      VB:
      - id: Global.UIButton.SetSortingOrder*
        name: SetSortingOrder
    nameWithType:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SetSortingOrder*
        name: SetSortingOrder
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SetSortingOrder*
        name: SetSortingOrder
    qualifiedName:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SetSortingOrder*
        name: SetSortingOrder
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SetSortingOrder*
        name: SetSortingOrder
    isDefinition: true
    commentId: Overload:Global.UIButton.SetSortingOrder
  Global.UIButton.SubscribeToIdle*:
    name:
      CSharp:
      - id: Global.UIButton.SubscribeToIdle*
        name: SubscribeToIdle
      VB:
      - id: Global.UIButton.SubscribeToIdle*
        name: SubscribeToIdle
    nameWithType:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToIdle*
        name: SubscribeToIdle
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToIdle*
        name: SubscribeToIdle
    qualifiedName:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToIdle*
        name: SubscribeToIdle
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToIdle*
        name: SubscribeToIdle
    isDefinition: true
    commentId: Overload:Global.UIButton.SubscribeToIdle
  Global.UIButton.SubscribeToHover*:
    name:
      CSharp:
      - id: Global.UIButton.SubscribeToHover*
        name: SubscribeToHover
      VB:
      - id: Global.UIButton.SubscribeToHover*
        name: SubscribeToHover
    nameWithType:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToHover*
        name: SubscribeToHover
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToHover*
        name: SubscribeToHover
    qualifiedName:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToHover*
        name: SubscribeToHover
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToHover*
        name: SubscribeToHover
    isDefinition: true
    commentId: Overload:Global.UIButton.SubscribeToHover
  Global.UIButton.SubscribeToClick*:
    name:
      CSharp:
      - id: Global.UIButton.SubscribeToClick*
        name: SubscribeToClick
      VB:
      - id: Global.UIButton.SubscribeToClick*
        name: SubscribeToClick
    nameWithType:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToClick*
        name: SubscribeToClick
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToClick*
        name: SubscribeToClick
    qualifiedName:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToClick*
        name: SubscribeToClick
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToClick*
        name: SubscribeToClick
    isDefinition: true
    commentId: Overload:Global.UIButton.SubscribeToClick
  Global.UIButton.SubscribeToLeftClick*:
    name:
      CSharp:
      - id: Global.UIButton.SubscribeToLeftClick*
        name: SubscribeToLeftClick
      VB:
      - id: Global.UIButton.SubscribeToLeftClick*
        name: SubscribeToLeftClick
    nameWithType:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToLeftClick*
        name: SubscribeToLeftClick
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToLeftClick*
        name: SubscribeToLeftClick
    qualifiedName:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToLeftClick*
        name: SubscribeToLeftClick
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToLeftClick*
        name: SubscribeToLeftClick
    isDefinition: true
    commentId: Overload:Global.UIButton.SubscribeToLeftClick
  Global.UIButton.SubscribeToRightClick*:
    name:
      CSharp:
      - id: Global.UIButton.SubscribeToRightClick*
        name: SubscribeToRightClick
      VB:
      - id: Global.UIButton.SubscribeToRightClick*
        name: SubscribeToRightClick
    nameWithType:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToRightClick*
        name: SubscribeToRightClick
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToRightClick*
        name: SubscribeToRightClick
    qualifiedName:
      CSharp:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToRightClick*
        name: SubscribeToRightClick
      VB:
      - id: Global.UIButton*
        name: UIButton
      - name: .
      - id: Global.UIButton.SubscribeToRightClick*
        name: SubscribeToRightClick
    isDefinition: true
    commentId: Overload:Global.UIButton.SubscribeToRightClick
  Global.UIButton:
    name:
      CSharp:
      - id: Global.UIButton
        name: UIButton
      VB:
      - id: Global.UIButton
        name: UIButton
    nameWithType:
      CSharp:
      - id: Global.UIButton
        name: UIButton
      VB:
      - id: Global.UIButton
        name: UIButton
    qualifiedName:
      CSharp:
      - id: Global.UIButton
        name: UIButton
      VB:
      - id: Global.UIButton
        name: UIButton
    isDefinition: true
    commentId: T:Global.UIButton
  Global.CollapsedState:
    name:
      CSharp:
      - id: Global.CollapsedState
        name: CollapsedState
      VB:
      - id: Global.CollapsedState
        name: CollapsedState
    nameWithType:
      CSharp:
      - id: Global.CollapsedState
        name: CollapsedState
      VB:
      - id: Global.CollapsedState
        name: CollapsedState
    qualifiedName:
      CSharp:
      - id: Global.CollapsedState
        name: CollapsedState
      VB:
      - id: Global.CollapsedState
        name: CollapsedState
    isDefinition: true
    commentId: T:Global.CollapsedState
  Global.UICollapser.Collapse*:
    name:
      CSharp:
      - id: Global.UICollapser.Collapse*
        name: Collapse
      VB:
      - id: Global.UICollapser.Collapse*
        name: Collapse
    nameWithType:
      CSharp:
      - id: Global.UICollapser*
        name: UICollapser
      - name: .
      - id: Global.UICollapser.Collapse*
        name: Collapse
      VB:
      - id: Global.UICollapser*
        name: UICollapser
      - name: .
      - id: Global.UICollapser.Collapse*
        name: Collapse
    qualifiedName:
      CSharp:
      - id: Global.UICollapser*
        name: UICollapser
      - name: .
      - id: Global.UICollapser.Collapse*
        name: Collapse
      VB:
      - id: Global.UICollapser*
        name: UICollapser
      - name: .
      - id: Global.UICollapser.Collapse*
        name: Collapse
    isDefinition: true
    commentId: Overload:Global.UICollapser.Collapse
  Global.UICollapser.Uncollapse*:
    name:
      CSharp:
      - id: Global.UICollapser.Uncollapse*
        name: Uncollapse
      VB:
      - id: Global.UICollapser.Uncollapse*
        name: Uncollapse
    nameWithType:
      CSharp:
      - id: Global.UICollapser*
        name: UICollapser
      - name: .
      - id: Global.UICollapser.Uncollapse*
        name: Uncollapse
      VB:
      - id: Global.UICollapser*
        name: UICollapser
      - name: .
      - id: Global.UICollapser.Uncollapse*
        name: Uncollapse
    qualifiedName:
      CSharp:
      - id: Global.UICollapser*
        name: UICollapser
      - name: .
      - id: Global.UICollapser.Uncollapse*
        name: Uncollapse
      VB:
      - id: Global.UICollapser*
        name: UICollapser
      - name: .
      - id: Global.UICollapser.Uncollapse*
        name: Uncollapse
    isDefinition: true
    commentId: Overload:Global.UICollapser.Uncollapse
  Global.UICollapser.SetCollapsed*:
    name:
      CSharp:
      - id: Global.UICollapser.SetCollapsed*
        name: SetCollapsed
      VB:
      - id: Global.UICollapser.SetCollapsed*
        name: SetCollapsed
    nameWithType:
      CSharp:
      - id: Global.UICollapser*
        name: UICollapser
      - name: .
      - id: Global.UICollapser.SetCollapsed*
        name: SetCollapsed
      VB:
      - id: Global.UICollapser*
        name: UICollapser
      - name: .
      - id: Global.UICollapser.SetCollapsed*
        name: SetCollapsed
    qualifiedName:
      CSharp:
      - id: Global.UICollapser*
        name: UICollapser
      - name: .
      - id: Global.UICollapser.SetCollapsed*
        name: SetCollapsed
      VB:
      - id: Global.UICollapser*
        name: UICollapser
      - name: .
      - id: Global.UICollapser.SetCollapsed*
        name: SetCollapsed
    isDefinition: true
    commentId: Overload:Global.UICollapser.SetCollapsed
  Global.UICollapser:
    name:
      CSharp:
      - id: Global.UICollapser
        name: UICollapser
      VB:
      - id: Global.UICollapser
        name: UICollapser
    nameWithType:
      CSharp:
      - id: Global.UICollapser
        name: UICollapser
      VB:
      - id: Global.UICollapser
        name: UICollapser
    qualifiedName:
      CSharp:
      - id: Global.UICollapser
        name: UICollapser
      VB:
      - id: Global.UICollapser
        name: UICollapser
    isDefinition: true
    commentId: T:Global.UICollapser
  Global.UIColourField.colour*:
    name:
      CSharp:
      - id: Global.UIColourField.colour*
        name: colour
      VB:
      - id: Global.UIColourField.colour*
        name: colour
    nameWithType:
      CSharp:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.colour*
        name: colour
      VB:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.colour*
        name: colour
    qualifiedName:
      CSharp:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.colour*
        name: colour
      VB:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.colour*
        name: colour
    isDefinition: true
    commentId: Overload:Global.UIColourField.colour
  Global.UIColourField.outlineThickness*:
    name:
      CSharp:
      - id: Global.UIColourField.outlineThickness*
        name: outlineThickness
      VB:
      - id: Global.UIColourField.outlineThickness*
        name: outlineThickness
    nameWithType:
      CSharp:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.outlineThickness*
        name: outlineThickness
      VB:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.outlineThickness*
        name: outlineThickness
    qualifiedName:
      CSharp:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.outlineThickness*
        name: outlineThickness
      VB:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.outlineThickness*
        name: outlineThickness
    isDefinition: true
    commentId: Overload:Global.UIColourField.outlineThickness
  Global.UIColourField.colourPickerOpen*:
    name:
      CSharp:
      - id: Global.UIColourField.colourPickerOpen*
        name: colourPickerOpen
      VB:
      - id: Global.UIColourField.colourPickerOpen*
        name: colourPickerOpen
    nameWithType:
      CSharp:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.colourPickerOpen*
        name: colourPickerOpen
      VB:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.colourPickerOpen*
        name: colourPickerOpen
    qualifiedName:
      CSharp:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.colourPickerOpen*
        name: colourPickerOpen
      VB:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.colourPickerOpen*
        name: colourPickerOpen
    isDefinition: true
    commentId: Overload:Global.UIColourField.colourPickerOpen
  Global.UIColourField.SetColour*:
    name:
      CSharp:
      - id: Global.UIColourField.SetColour*
        name: SetColour
      VB:
      - id: Global.UIColourField.SetColour*
        name: SetColour
    nameWithType:
      CSharp:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.SetColour*
        name: SetColour
      VB:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.SetColour*
        name: SetColour
    qualifiedName:
      CSharp:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.SetColour*
        name: SetColour
      VB:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.SetColour*
        name: SetColour
    isDefinition: true
    commentId: Overload:Global.UIColourField.SetColour
  Global.UIColourField.OpenColourPicker*:
    name:
      CSharp:
      - id: Global.UIColourField.OpenColourPicker*
        name: OpenColourPicker
      VB:
      - id: Global.UIColourField.OpenColourPicker*
        name: OpenColourPicker
    nameWithType:
      CSharp:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.OpenColourPicker*
        name: OpenColourPicker
      VB:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.OpenColourPicker*
        name: OpenColourPicker
    qualifiedName:
      CSharp:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.OpenColourPicker*
        name: OpenColourPicker
      VB:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.OpenColourPicker*
        name: OpenColourPicker
    isDefinition: true
    commentId: Overload:Global.UIColourField.OpenColourPicker
  Global.UIColourField.CloseColourPicker*:
    name:
      CSharp:
      - id: Global.UIColourField.CloseColourPicker*
        name: CloseColourPicker
      VB:
      - id: Global.UIColourField.CloseColourPicker*
        name: CloseColourPicker
    nameWithType:
      CSharp:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.CloseColourPicker*
        name: CloseColourPicker
      VB:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.CloseColourPicker*
        name: CloseColourPicker
    qualifiedName:
      CSharp:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.CloseColourPicker*
        name: CloseColourPicker
      VB:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.CloseColourPicker*
        name: CloseColourPicker
    isDefinition: true
    commentId: Overload:Global.UIColourField.CloseColourPicker
  Global.UIColourField.SubscribeToColourChange*:
    name:
      CSharp:
      - id: Global.UIColourField.SubscribeToColourChange*
        name: SubscribeToColourChange
      VB:
      - id: Global.UIColourField.SubscribeToColourChange*
        name: SubscribeToColourChange
    nameWithType:
      CSharp:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.SubscribeToColourChange*
        name: SubscribeToColourChange
      VB:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.SubscribeToColourChange*
        name: SubscribeToColourChange
    qualifiedName:
      CSharp:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.SubscribeToColourChange*
        name: SubscribeToColourChange
      VB:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.SubscribeToColourChange*
        name: SubscribeToColourChange
    isDefinition: true
    commentId: Overload:Global.UIColourField.SubscribeToColourChange
  Global.UIColourField.SubscribeToColourPickerOpen*:
    name:
      CSharp:
      - id: Global.UIColourField.SubscribeToColourPickerOpen*
        name: SubscribeToColourPickerOpen
      VB:
      - id: Global.UIColourField.SubscribeToColourPickerOpen*
        name: SubscribeToColourPickerOpen
    nameWithType:
      CSharp:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.SubscribeToColourPickerOpen*
        name: SubscribeToColourPickerOpen
      VB:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.SubscribeToColourPickerOpen*
        name: SubscribeToColourPickerOpen
    qualifiedName:
      CSharp:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.SubscribeToColourPickerOpen*
        name: SubscribeToColourPickerOpen
      VB:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.SubscribeToColourPickerOpen*
        name: SubscribeToColourPickerOpen
    isDefinition: true
    commentId: Overload:Global.UIColourField.SubscribeToColourPickerOpen
  Global.UIColourField.SubscribeToColourPickerClose*:
    name:
      CSharp:
      - id: Global.UIColourField.SubscribeToColourPickerClose*
        name: SubscribeToColourPickerClose
      VB:
      - id: Global.UIColourField.SubscribeToColourPickerClose*
        name: SubscribeToColourPickerClose
    nameWithType:
      CSharp:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.SubscribeToColourPickerClose*
        name: SubscribeToColourPickerClose
      VB:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.SubscribeToColourPickerClose*
        name: SubscribeToColourPickerClose
    qualifiedName:
      CSharp:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.SubscribeToColourPickerClose*
        name: SubscribeToColourPickerClose
      VB:
      - id: Global.UIColourField*
        name: UIColourField
      - name: .
      - id: Global.UIColourField.SubscribeToColourPickerClose*
        name: SubscribeToColourPickerClose
    isDefinition: true
    commentId: Overload:Global.UIColourField.SubscribeToColourPickerClose
  Global.UIColourField:
    name:
      CSharp:
      - id: Global.UIColourField
        name: UIColourField
      VB:
      - id: Global.UIColourField
        name: UIColourField
    nameWithType:
      CSharp:
      - id: Global.UIColourField
        name: UIColourField
      VB:
      - id: Global.UIColourField
        name: UIColourField
    qualifiedName:
      CSharp:
      - id: Global.UIColourField
        name: UIColourField
      VB:
      - id: Global.UIColourField
        name: UIColourField
    isDefinition: true
    commentId: T:Global.UIColourField
  System.Collections.Generic.List{UIColourField}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.UIColourField
        name: UIColourField
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.UIColourField
        name: UIColourField
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.UIColourField
        name: UIColourField
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.UIColourField
        name: UIColourField
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.UIColourField
        name: UIColourField
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.UIColourField
        name: UIColourField
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{UIColourField}
  Global.UIColourFieldGroup.colourFields*:
    name:
      CSharp:
      - id: Global.UIColourFieldGroup.colourFields*
        name: colourFields
      VB:
      - id: Global.UIColourFieldGroup.colourFields*
        name: colourFields
    nameWithType:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.colourFields*
        name: colourFields
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.colourFields*
        name: colourFields
    qualifiedName:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.colourFields*
        name: colourFields
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.colourFields*
        name: colourFields
    isDefinition: true
    commentId: Overload:Global.UIColourFieldGroup.colourFields
  Global.UIColourFieldGroup.currentOpenColourField*:
    name:
      CSharp:
      - id: Global.UIColourFieldGroup.currentOpenColourField*
        name: currentOpenColourField
      VB:
      - id: Global.UIColourFieldGroup.currentOpenColourField*
        name: currentOpenColourField
    nameWithType:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.currentOpenColourField*
        name: currentOpenColourField
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.currentOpenColourField*
        name: currentOpenColourField
    qualifiedName:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.currentOpenColourField*
        name: currentOpenColourField
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.currentOpenColourField*
        name: currentOpenColourField
    isDefinition: true
    commentId: Overload:Global.UIColourFieldGroup.currentOpenColourField
  Global.UIColourFieldGroup.Count*:
    name:
      CSharp:
      - id: Global.UIColourFieldGroup.Count*
        name: Count
      VB:
      - id: Global.UIColourFieldGroup.Count*
        name: Count
    nameWithType:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Count*
        name: Count
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Count*
        name: Count
    qualifiedName:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Count*
        name: Count
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Count*
        name: Count
    isDefinition: true
    commentId: Overload:Global.UIColourFieldGroup.Count
  Global.UIColourFieldGroup.Add*:
    name:
      CSharp:
      - id: Global.UIColourFieldGroup.Add*
        name: Add
      VB:
      - id: Global.UIColourFieldGroup.Add*
        name: Add
    nameWithType:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Add*
        name: Add
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Add*
        name: Add
    qualifiedName:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Add*
        name: Add
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Add*
        name: Add
    isDefinition: true
    commentId: Overload:Global.UIColourFieldGroup.Add
  Global.UIColourFieldGroup.Remove*:
    name:
      CSharp:
      - id: Global.UIColourFieldGroup.Remove*
        name: Remove
      VB:
      - id: Global.UIColourFieldGroup.Remove*
        name: Remove
    nameWithType:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Remove*
        name: Remove
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Remove*
        name: Remove
    qualifiedName:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Remove*
        name: Remove
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Remove*
        name: Remove
    isDefinition: true
    commentId: Overload:Global.UIColourFieldGroup.Remove
  Global.UIColourFieldGroup.Contains*:
    name:
      CSharp:
      - id: Global.UIColourFieldGroup.Contains*
        name: Contains
      VB:
      - id: Global.UIColourFieldGroup.Contains*
        name: Contains
    nameWithType:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Contains*
        name: Contains
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Contains*
        name: Contains
    qualifiedName:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Contains*
        name: Contains
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Contains*
        name: Contains
    isDefinition: true
    commentId: Overload:Global.UIColourFieldGroup.Contains
  Global.UIColourFieldGroup.Clear*:
    name:
      CSharp:
      - id: Global.UIColourFieldGroup.Clear*
        name: Clear
      VB:
      - id: Global.UIColourFieldGroup.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Clear*
        name: Clear
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Clear*
        name: Clear
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:Global.UIColourFieldGroup.Clear
  Global.UIColourFieldGroup.DestroyColourFields*:
    name:
      CSharp:
      - id: Global.UIColourFieldGroup.DestroyColourFields*
        name: DestroyColourFields
      VB:
      - id: Global.UIColourFieldGroup.DestroyColourFields*
        name: DestroyColourFields
    nameWithType:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.DestroyColourFields*
        name: DestroyColourFields
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.DestroyColourFields*
        name: DestroyColourFields
    qualifiedName:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.DestroyColourFields*
        name: DestroyColourFields
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.DestroyColourFields*
        name: DestroyColourFields
    isDefinition: true
    commentId: Overload:Global.UIColourFieldGroup.DestroyColourFields
  Global.UIColourFieldGroup.Opened*:
    name:
      CSharp:
      - id: Global.UIColourFieldGroup.Opened*
        name: Opened
      VB:
      - id: Global.UIColourFieldGroup.Opened*
        name: Opened
    nameWithType:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Opened*
        name: Opened
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Opened*
        name: Opened
    qualifiedName:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Opened*
        name: Opened
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.Opened*
        name: Opened
    isDefinition: true
    commentId: Overload:Global.UIColourFieldGroup.Opened
  Global.UIColourFieldGroup.SubscribeToColourFieldOpen*:
    name:
      CSharp:
      - id: Global.UIColourFieldGroup.SubscribeToColourFieldOpen*
        name: SubscribeToColourFieldOpen
      VB:
      - id: Global.UIColourFieldGroup.SubscribeToColourFieldOpen*
        name: SubscribeToColourFieldOpen
    nameWithType:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.SubscribeToColourFieldOpen*
        name: SubscribeToColourFieldOpen
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.SubscribeToColourFieldOpen*
        name: SubscribeToColourFieldOpen
    qualifiedName:
      CSharp:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.SubscribeToColourFieldOpen*
        name: SubscribeToColourFieldOpen
      VB:
      - id: Global.UIColourFieldGroup*
        name: UIColourFieldGroup
      - name: .
      - id: Global.UIColourFieldGroup.SubscribeToColourFieldOpen*
        name: SubscribeToColourFieldOpen
    isDefinition: true
    commentId: Overload:Global.UIColourFieldGroup.SubscribeToColourFieldOpen
  Global.UIColourFieldGroup:
    name:
      CSharp:
      - id: Global.UIColourFieldGroup
        name: UIColourFieldGroup
      VB:
      - id: Global.UIColourFieldGroup
        name: UIColourFieldGroup
    nameWithType:
      CSharp:
      - id: Global.UIColourFieldGroup
        name: UIColourFieldGroup
      VB:
      - id: Global.UIColourFieldGroup
        name: UIColourFieldGroup
    qualifiedName:
      CSharp:
      - id: Global.UIColourFieldGroup
        name: UIColourFieldGroup
      VB:
      - id: Global.UIColourFieldGroup
        name: UIColourFieldGroup
    isDefinition: true
    commentId: T:Global.UIColourFieldGroup
  Global.UIColourPicker.colour*:
    name:
      CSharp:
      - id: Global.UIColourPicker.colour*
        name: colour
      VB:
      - id: Global.UIColourPicker.colour*
        name: colour
    nameWithType:
      CSharp:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.colour*
        name: colour
      VB:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.colour*
        name: colour
    qualifiedName:
      CSharp:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.colour*
        name: colour
      VB:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.colour*
        name: colour
    isDefinition: true
    commentId: Overload:Global.UIColourPicker.colour
  Global.UIColourPicker.UpdateColour*:
    name:
      CSharp:
      - id: Global.UIColourPicker.UpdateColour*
        name: UpdateColour
      VB:
      - id: Global.UIColourPicker.UpdateColour*
        name: UpdateColour
    nameWithType:
      CSharp:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.UpdateColour*
        name: UpdateColour
      VB:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.UpdateColour*
        name: UpdateColour
    qualifiedName:
      CSharp:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.UpdateColour*
        name: UpdateColour
      VB:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.UpdateColour*
        name: UpdateColour
    isDefinition: true
    commentId: Overload:Global.UIColourPicker.UpdateColour
  Global.UIColourPicker.SetColour*:
    name:
      CSharp:
      - id: Global.UIColourPicker.SetColour*
        name: SetColour
      VB:
      - id: Global.UIColourPicker.SetColour*
        name: SetColour
    nameWithType:
      CSharp:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.SetColour*
        name: SetColour
      VB:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.SetColour*
        name: SetColour
    qualifiedName:
      CSharp:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.SetColour*
        name: SetColour
      VB:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.SetColour*
        name: SetColour
    isDefinition: true
    commentId: Overload:Global.UIColourPicker.SetColour
  Global.UIColourPicker.Close*:
    name:
      CSharp:
      - id: Global.UIColourPicker.Close*
        name: Close
      VB:
      - id: Global.UIColourPicker.Close*
        name: Close
    nameWithType:
      CSharp:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.Close*
        name: Close
      VB:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.Close*
        name: Close
    qualifiedName:
      CSharp:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.Close*
        name: Close
      VB:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.Close*
        name: Close
    isDefinition: true
    commentId: Overload:Global.UIColourPicker.Close
  Global.UIColourPicker.SelectDeselectEyeDropper*:
    name:
      CSharp:
      - id: Global.UIColourPicker.SelectDeselectEyeDropper*
        name: SelectDeselectEyeDropper
      VB:
      - id: Global.UIColourPicker.SelectDeselectEyeDropper*
        name: SelectDeselectEyeDropper
    nameWithType:
      CSharp:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.SelectDeselectEyeDropper*
        name: SelectDeselectEyeDropper
      VB:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.SelectDeselectEyeDropper*
        name: SelectDeselectEyeDropper
    qualifiedName:
      CSharp:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.SelectDeselectEyeDropper*
        name: SelectDeselectEyeDropper
      VB:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.SelectDeselectEyeDropper*
        name: SelectDeselectEyeDropper
    isDefinition: true
    commentId: Overload:Global.UIColourPicker.SelectDeselectEyeDropper
  Global.UIColourPicker.SubscribeToColourChange*:
    name:
      CSharp:
      - id: Global.UIColourPicker.SubscribeToColourChange*
        name: SubscribeToColourChange
      VB:
      - id: Global.UIColourPicker.SubscribeToColourChange*
        name: SubscribeToColourChange
    nameWithType:
      CSharp:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.SubscribeToColourChange*
        name: SubscribeToColourChange
      VB:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.SubscribeToColourChange*
        name: SubscribeToColourChange
    qualifiedName:
      CSharp:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.SubscribeToColourChange*
        name: SubscribeToColourChange
      VB:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.SubscribeToColourChange*
        name: SubscribeToColourChange
    isDefinition: true
    commentId: Overload:Global.UIColourPicker.SubscribeToColourChange
  Global.UIColourPicker.SubscribeToClose*:
    name:
      CSharp:
      - id: Global.UIColourPicker.SubscribeToClose*
        name: SubscribeToClose
      VB:
      - id: Global.UIColourPicker.SubscribeToClose*
        name: SubscribeToClose
    nameWithType:
      CSharp:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.SubscribeToClose*
        name: SubscribeToClose
      VB:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.SubscribeToClose*
        name: SubscribeToClose
    qualifiedName:
      CSharp:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.SubscribeToClose*
        name: SubscribeToClose
      VB:
      - id: Global.UIColourPicker*
        name: UIColourPicker
      - name: .
      - id: Global.UIColourPicker.SubscribeToClose*
        name: SubscribeToClose
    isDefinition: true
    commentId: Overload:Global.UIColourPicker.SubscribeToClose
  Global.UIColourPicker:
    name:
      CSharp:
      - id: Global.UIColourPicker
        name: UIColourPicker
      VB:
      - id: Global.UIColourPicker
        name: UIColourPicker
    nameWithType:
      CSharp:
      - id: Global.UIColourPicker
        name: UIColourPicker
      VB:
      - id: Global.UIColourPicker
        name: UIColourPicker
    qualifiedName:
      CSharp:
      - id: Global.UIColourPicker
        name: UIColourPicker
      VB:
      - id: Global.UIColourPicker
        name: UIColourPicker
    isDefinition: true
    commentId: T:Global.UIColourPicker
  Global.DropdownCloseMode:
    name:
      CSharp:
      - id: Global.DropdownCloseMode
        name: DropdownCloseMode
      VB:
      - id: Global.DropdownCloseMode
        name: DropdownCloseMode
    nameWithType:
      CSharp:
      - id: Global.DropdownCloseMode
        name: DropdownCloseMode
      VB:
      - id: Global.DropdownCloseMode
        name: DropdownCloseMode
    qualifiedName:
      CSharp:
      - id: Global.DropdownCloseMode
        name: DropdownCloseMode
      VB:
      - id: Global.DropdownCloseMode
        name: DropdownCloseMode
    isDefinition: true
    commentId: T:Global.DropdownCloseMode
  Global.UIDropdown.open*:
    name:
      CSharp:
      - id: Global.UIDropdown.open*
        name: open
      VB:
      - id: Global.UIDropdown.open*
        name: open
    nameWithType:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.open*
        name: open
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.open*
        name: open
    qualifiedName:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.open*
        name: open
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.open*
        name: open
    isDefinition: true
    commentId: Overload:Global.UIDropdown.open
  Global.GameObject:
    name:
      CSharp:
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      VB:
      - id: Global.GameObject
        name: GameObject
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      VB:
      - id: Global.GameObject
        name: GameObject
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      VB:
      - id: Global.GameObject
        name: GameObject
        isExternal: true
    isDefinition: true
  Global.UIDropdown:
    name:
      CSharp:
      - id: Global.UIDropdown
        name: UIDropdown
      VB:
      - id: Global.UIDropdown
        name: UIDropdown
    nameWithType:
      CSharp:
      - id: Global.UIDropdown
        name: UIDropdown
      VB:
      - id: Global.UIDropdown
        name: UIDropdown
    qualifiedName:
      CSharp:
      - id: Global.UIDropdown
        name: UIDropdown
      VB:
      - id: Global.UIDropdown
        name: UIDropdown
    isDefinition: true
    commentId: T:Global.UIDropdown
  Global.UIDropdown.rootDropdown*:
    name:
      CSharp:
      - id: Global.UIDropdown.rootDropdown*
        name: rootDropdown
      VB:
      - id: Global.UIDropdown.rootDropdown*
        name: rootDropdown
    nameWithType:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.rootDropdown*
        name: rootDropdown
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.rootDropdown*
        name: rootDropdown
    qualifiedName:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.rootDropdown*
        name: rootDropdown
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.rootDropdown*
        name: rootDropdown
    isDefinition: true
    commentId: Overload:Global.UIDropdown.rootDropdown
  Global.UIDropdown.isRootDropdown*:
    name:
      CSharp:
      - id: Global.UIDropdown.isRootDropdown*
        name: isRootDropdown
      VB:
      - id: Global.UIDropdown.isRootDropdown*
        name: isRootDropdown
    nameWithType:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.isRootDropdown*
        name: isRootDropdown
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.isRootDropdown*
        name: isRootDropdown
    qualifiedName:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.isRootDropdown*
        name: isRootDropdown
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.isRootDropdown*
        name: isRootDropdown
    isDefinition: true
    commentId: Overload:Global.UIDropdown.isRootDropdown
  Global.UIDropdown.Initialise*:
    name:
      CSharp:
      - id: Global.UIDropdown.Initialise*
        name: Initialise
      VB:
      - id: Global.UIDropdown.Initialise*
        name: Initialise
    nameWithType:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.Initialise*
        name: Initialise
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.Initialise*
        name: Initialise
    qualifiedName:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.Initialise*
        name: Initialise
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.Initialise*
        name: Initialise
    isDefinition: true
    commentId: Overload:Global.UIDropdown.Initialise
  Global.UIDropdown.Open*:
    name:
      CSharp:
      - id: Global.UIDropdown.Open*
        name: Open
      VB:
      - id: Global.UIDropdown.Open*
        name: Open
    nameWithType:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.Open*
        name: Open
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.Open*
        name: Open
    qualifiedName:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.Open*
        name: Open
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.Open*
        name: Open
    isDefinition: true
    commentId: Overload:Global.UIDropdown.Open
  Global.UIDropdown.Close*:
    name:
      CSharp:
      - id: Global.UIDropdown.Close*
        name: Close
      VB:
      - id: Global.UIDropdown.Close*
        name: Close
    nameWithType:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.Close*
        name: Close
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.Close*
        name: Close
    qualifiedName:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.Close*
        name: Close
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.Close*
        name: Close
    isDefinition: true
    commentId: Overload:Global.UIDropdown.Close
  Global.UIDropdown.ToggleOpen*:
    name:
      CSharp:
      - id: Global.UIDropdown.ToggleOpen*
        name: ToggleOpen
      VB:
      - id: Global.UIDropdown.ToggleOpen*
        name: ToggleOpen
    nameWithType:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.ToggleOpen*
        name: ToggleOpen
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.ToggleOpen*
        name: ToggleOpen
    qualifiedName:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.ToggleOpen*
        name: ToggleOpen
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.ToggleOpen*
        name: ToggleOpen
    isDefinition: true
    commentId: Overload:Global.UIDropdown.ToggleOpen
  Global.UIDropdown.SetOpen*:
    name:
      CSharp:
      - id: Global.UIDropdown.SetOpen*
        name: SetOpen
      VB:
      - id: Global.UIDropdown.SetOpen*
        name: SetOpen
    nameWithType:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.SetOpen*
        name: SetOpen
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.SetOpen*
        name: SetOpen
    qualifiedName:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.SetOpen*
        name: SetOpen
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.SetOpen*
        name: SetOpen
    isDefinition: true
    commentId: Overload:Global.UIDropdown.SetOpen
  Global.UIDropdown.SetOpenEditor*:
    name:
      CSharp:
      - id: Global.UIDropdown.SetOpenEditor*
        name: SetOpenEditor
      VB:
      - id: Global.UIDropdown.SetOpenEditor*
        name: SetOpenEditor
    nameWithType:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.SetOpenEditor*
        name: SetOpenEditor
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.SetOpenEditor*
        name: SetOpenEditor
    qualifiedName:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.SetOpenEditor*
        name: SetOpenEditor
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.SetOpenEditor*
        name: SetOpenEditor
    isDefinition: true
    commentId: Overload:Global.UIDropdown.SetOpenEditor
  Global.UIDropdown.FullyOpen*:
    name:
      CSharp:
      - id: Global.UIDropdown.FullyOpen*
        name: FullyOpen
      VB:
      - id: Global.UIDropdown.FullyOpen*
        name: FullyOpen
    nameWithType:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.FullyOpen*
        name: FullyOpen
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.FullyOpen*
        name: FullyOpen
    qualifiedName:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.FullyOpen*
        name: FullyOpen
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.FullyOpen*
        name: FullyOpen
    isDefinition: true
    commentId: Overload:Global.UIDropdown.FullyOpen
  Global.UIDropdown.CloseRoot*:
    name:
      CSharp:
      - id: Global.UIDropdown.CloseRoot*
        name: CloseRoot
      VB:
      - id: Global.UIDropdown.CloseRoot*
        name: CloseRoot
    nameWithType:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.CloseRoot*
        name: CloseRoot
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.CloseRoot*
        name: CloseRoot
    qualifiedName:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.CloseRoot*
        name: CloseRoot
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.CloseRoot*
        name: CloseRoot
    isDefinition: true
    commentId: Overload:Global.UIDropdown.CloseRoot
  Global.UIDropdown.MouseOff*:
    name:
      CSharp:
      - id: Global.UIDropdown.MouseOff*
        name: MouseOff
      VB:
      - id: Global.UIDropdown.MouseOff*
        name: MouseOff
    nameWithType:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.MouseOff*
        name: MouseOff
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.MouseOff*
        name: MouseOff
    qualifiedName:
      CSharp:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.MouseOff*
        name: MouseOff
      VB:
      - id: Global.UIDropdown*
        name: UIDropdown
      - name: .
      - id: Global.UIDropdown.MouseOff*
        name: MouseOff
    isDefinition: true
    commentId: Overload:Global.UIDropdown.MouseOff
  Global.DropdownDirection:
    name:
      CSharp:
      - id: Global.DropdownDirection
        name: DropdownDirection
      VB:
      - id: Global.DropdownDirection
        name: DropdownDirection
    nameWithType:
      CSharp:
      - id: Global.DropdownDirection
        name: DropdownDirection
      VB:
      - id: Global.DropdownDirection
        name: DropdownDirection
    qualifiedName:
      CSharp:
      - id: Global.DropdownDirection
        name: DropdownDirection
      VB:
      - id: Global.DropdownDirection
        name: DropdownDirection
    isDefinition: true
    commentId: T:Global.DropdownDirection
  System.Collections.Generic.List{System.String}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.String}
  Global.UIDropdownChoice.selectedOption*:
    name:
      CSharp:
      - id: Global.UIDropdownChoice.selectedOption*
        name: selectedOption
      VB:
      - id: Global.UIDropdownChoice.selectedOption*
        name: selectedOption
    nameWithType:
      CSharp:
      - id: Global.UIDropdownChoice*
        name: UIDropdownChoice
      - name: .
      - id: Global.UIDropdownChoice.selectedOption*
        name: selectedOption
      VB:
      - id: Global.UIDropdownChoice*
        name: UIDropdownChoice
      - name: .
      - id: Global.UIDropdownChoice.selectedOption*
        name: selectedOption
    qualifiedName:
      CSharp:
      - id: Global.UIDropdownChoice*
        name: UIDropdownChoice
      - name: .
      - id: Global.UIDropdownChoice.selectedOption*
        name: selectedOption
      VB:
      - id: Global.UIDropdownChoice*
        name: UIDropdownChoice
      - name: .
      - id: Global.UIDropdownChoice.selectedOption*
        name: selectedOption
    isDefinition: true
    commentId: Overload:Global.UIDropdownChoice.selectedOption
  Global.UIDropdownChoice.SetUpDropdown*:
    name:
      CSharp:
      - id: Global.UIDropdownChoice.SetUpDropdown*
        name: SetUpDropdown
      VB:
      - id: Global.UIDropdownChoice.SetUpDropdown*
        name: SetUpDropdown
    nameWithType:
      CSharp:
      - id: Global.UIDropdownChoice*
        name: UIDropdownChoice
      - name: .
      - id: Global.UIDropdownChoice.SetUpDropdown*
        name: SetUpDropdown
      VB:
      - id: Global.UIDropdownChoice*
        name: UIDropdownChoice
      - name: .
      - id: Global.UIDropdownChoice.SetUpDropdown*
        name: SetUpDropdown
    qualifiedName:
      CSharp:
      - id: Global.UIDropdownChoice*
        name: UIDropdownChoice
      - name: .
      - id: Global.UIDropdownChoice.SetUpDropdown*
        name: SetUpDropdown
      VB:
      - id: Global.UIDropdownChoice*
        name: UIDropdownChoice
      - name: .
      - id: Global.UIDropdownChoice.SetUpDropdown*
        name: SetUpDropdown
    isDefinition: true
    commentId: Overload:Global.UIDropdownChoice.SetUpDropdown
  Global.UIDropdownChoice.Select*:
    name:
      CSharp:
      - id: Global.UIDropdownChoice.Select*
        name: Select
      VB:
      - id: Global.UIDropdownChoice.Select*
        name: Select
    nameWithType:
      CSharp:
      - id: Global.UIDropdownChoice*
        name: UIDropdownChoice
      - name: .
      - id: Global.UIDropdownChoice.Select*
        name: Select
      VB:
      - id: Global.UIDropdownChoice*
        name: UIDropdownChoice
      - name: .
      - id: Global.UIDropdownChoice.Select*
        name: Select
    qualifiedName:
      CSharp:
      - id: Global.UIDropdownChoice*
        name: UIDropdownChoice
      - name: .
      - id: Global.UIDropdownChoice.Select*
        name: Select
      VB:
      - id: Global.UIDropdownChoice*
        name: UIDropdownChoice
      - name: .
      - id: Global.UIDropdownChoice.Select*
        name: Select
    isDefinition: true
    commentId: Overload:Global.UIDropdownChoice.Select
  Global.UIDropdownChoice.SubscribeToOptionChanged*:
    name:
      CSharp:
      - id: Global.UIDropdownChoice.SubscribeToOptionChanged*
        name: SubscribeToOptionChanged
      VB:
      - id: Global.UIDropdownChoice.SubscribeToOptionChanged*
        name: SubscribeToOptionChanged
    nameWithType:
      CSharp:
      - id: Global.UIDropdownChoice*
        name: UIDropdownChoice
      - name: .
      - id: Global.UIDropdownChoice.SubscribeToOptionChanged*
        name: SubscribeToOptionChanged
      VB:
      - id: Global.UIDropdownChoice*
        name: UIDropdownChoice
      - name: .
      - id: Global.UIDropdownChoice.SubscribeToOptionChanged*
        name: SubscribeToOptionChanged
    qualifiedName:
      CSharp:
      - id: Global.UIDropdownChoice*
        name: UIDropdownChoice
      - name: .
      - id: Global.UIDropdownChoice.SubscribeToOptionChanged*
        name: SubscribeToOptionChanged
      VB:
      - id: Global.UIDropdownChoice*
        name: UIDropdownChoice
      - name: .
      - id: Global.UIDropdownChoice.SubscribeToOptionChanged*
        name: SubscribeToOptionChanged
    isDefinition: true
    commentId: Overload:Global.UIDropdownChoice.SubscribeToOptionChanged
  Global.UIDropdownChoice:
    name:
      CSharp:
      - id: Global.UIDropdownChoice
        name: UIDropdownChoice
      VB:
      - id: Global.UIDropdownChoice
        name: UIDropdownChoice
    nameWithType:
      CSharp:
      - id: Global.UIDropdownChoice
        name: UIDropdownChoice
      VB:
      - id: Global.UIDropdownChoice
        name: UIDropdownChoice
    qualifiedName:
      CSharp:
      - id: Global.UIDropdownChoice
        name: UIDropdownChoice
      VB:
      - id: Global.UIDropdownChoice
        name: UIDropdownChoice
    isDefinition: true
    commentId: T:Global.UIDropdownChoice
  Global.UIElementSelectMode:
    name:
      CSharp:
      - id: Global.UIElementSelectMode
        name: UIElementSelectMode
      VB:
      - id: Global.UIElementSelectMode
        name: UIElementSelectMode
    nameWithType:
      CSharp:
      - id: Global.UIElementSelectMode
        name: UIElementSelectMode
      VB:
      - id: Global.UIElementSelectMode
        name: UIElementSelectMode
    qualifiedName:
      CSharp:
      - id: Global.UIElementSelectMode
        name: UIElementSelectMode
      VB:
      - id: Global.UIElementSelectMode
        name: UIElementSelectMode
    isDefinition: true
    commentId: T:Global.UIElementSelectMode
  Global.UIElementDeselectMode:
    name:
      CSharp:
      - id: Global.UIElementDeselectMode
        name: UIElementDeselectMode
      VB:
      - id: Global.UIElementDeselectMode
        name: UIElementDeselectMode
    nameWithType:
      CSharp:
      - id: Global.UIElementDeselectMode
        name: UIElementDeselectMode
      VB:
      - id: Global.UIElementDeselectMode
        name: UIElementDeselectMode
    qualifiedName:
      CSharp:
      - id: Global.UIElementDeselectMode
        name: UIElementDeselectMode
      VB:
      - id: Global.UIElementDeselectMode
        name: UIElementDeselectMode
    isDefinition: true
    commentId: T:Global.UIElementDeselectMode
  Global.UIElement.elementName*:
    name:
      CSharp:
      - id: Global.UIElement.elementName*
        name: elementName
      VB:
      - id: Global.UIElement.elementName*
        name: elementName
    nameWithType:
      CSharp:
      - id: Global.UIElement*
        name: UIElement
      - name: .
      - id: Global.UIElement.elementName*
        name: elementName
      VB:
      - id: Global.UIElement*
        name: UIElement
      - name: .
      - id: Global.UIElement.elementName*
        name: elementName
    qualifiedName:
      CSharp:
      - id: Global.UIElement*
        name: UIElement
      - name: .
      - id: Global.UIElement.elementName*
        name: elementName
      VB:
      - id: Global.UIElement*
        name: UIElement
      - name: .
      - id: Global.UIElement.elementName*
        name: elementName
    isDefinition: true
    commentId: Overload:Global.UIElement.elementName
  Global.GridAlignment:
    name:
      CSharp:
      - id: Global.GridAlignment
        name: GridAlignment
      VB:
      - id: Global.GridAlignment
        name: GridAlignment
    nameWithType:
      CSharp:
      - id: Global.GridAlignment
        name: GridAlignment
      VB:
      - id: Global.GridAlignment
        name: GridAlignment
    qualifiedName:
      CSharp:
      - id: Global.GridAlignment
        name: GridAlignment
      VB:
      - id: Global.GridAlignment
        name: GridAlignment
    isDefinition: true
    commentId: T:Global.GridAlignment
  Global.UIGridPacker.Repack*:
    name:
      CSharp:
      - id: Global.UIGridPacker.Repack*
        name: Repack
      VB:
      - id: Global.UIGridPacker.Repack*
        name: Repack
    nameWithType:
      CSharp:
      - id: Global.UIGridPacker*
        name: UIGridPacker
      - name: .
      - id: Global.UIGridPacker.Repack*
        name: Repack
      VB:
      - id: Global.UIGridPacker*
        name: UIGridPacker
      - name: .
      - id: Global.UIGridPacker.Repack*
        name: Repack
    qualifiedName:
      CSharp:
      - id: Global.UIGridPacker*
        name: UIGridPacker
      - name: .
      - id: Global.UIGridPacker.Repack*
        name: Repack
      VB:
      - id: Global.UIGridPacker*
        name: UIGridPacker
      - name: .
      - id: Global.UIGridPacker.Repack*
        name: Repack
    isDefinition: true
    commentId: Overload:Global.UIGridPacker.Repack
  Global.UIGridPacker:
    name:
      CSharp:
      - id: Global.UIGridPacker
        name: UIGridPacker
      VB:
      - id: Global.UIGridPacker
        name: UIGridPacker
    nameWithType:
      CSharp:
      - id: Global.UIGridPacker
        name: UIGridPacker
      VB:
      - id: Global.UIGridPacker
        name: UIGridPacker
    qualifiedName:
      CSharp:
      - id: Global.UIGridPacker
        name: UIGridPacker
      VB:
      - id: Global.UIGridPacker
        name: UIGridPacker
    isDefinition: true
    commentId: T:Global.UIGridPacker
  Global.UIKeyboardShortcut.shortcut*:
    name:
      CSharp:
      - id: Global.UIKeyboardShortcut.shortcut*
        name: shortcut
      VB:
      - id: Global.UIKeyboardShortcut.shortcut*
        name: shortcut
    nameWithType:
      CSharp:
      - id: Global.UIKeyboardShortcut*
        name: UIKeyboardShortcut
      - name: .
      - id: Global.UIKeyboardShortcut.shortcut*
        name: shortcut
      VB:
      - id: Global.UIKeyboardShortcut*
        name: UIKeyboardShortcut
      - name: .
      - id: Global.UIKeyboardShortcut.shortcut*
        name: shortcut
    qualifiedName:
      CSharp:
      - id: Global.UIKeyboardShortcut*
        name: UIKeyboardShortcut
      - name: .
      - id: Global.UIKeyboardShortcut.shortcut*
        name: shortcut
      VB:
      - id: Global.UIKeyboardShortcut*
        name: UIKeyboardShortcut
      - name: .
      - id: Global.UIKeyboardShortcut.shortcut*
        name: shortcut
    isDefinition: true
    commentId: Overload:Global.UIKeyboardShortcut.shortcut
  Global.UnityAction{KeyboardShortcut}:
    name:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.KeyboardShortcut
        name: KeyboardShortcut
      - name: )
    isDefinition: false
    definition: Global.UnityAction`1
    commentId: '!:Global.UnityAction{KeyboardShortcut}'
  Global.UIKeyboardShortcut.SubscribeToOnShortcutSet*:
    name:
      CSharp:
      - id: Global.UIKeyboardShortcut.SubscribeToOnShortcutSet*
        name: SubscribeToOnShortcutSet
      VB:
      - id: Global.UIKeyboardShortcut.SubscribeToOnShortcutSet*
        name: SubscribeToOnShortcutSet
    nameWithType:
      CSharp:
      - id: Global.UIKeyboardShortcut*
        name: UIKeyboardShortcut
      - name: .
      - id: Global.UIKeyboardShortcut.SubscribeToOnShortcutSet*
        name: SubscribeToOnShortcutSet
      VB:
      - id: Global.UIKeyboardShortcut*
        name: UIKeyboardShortcut
      - name: .
      - id: Global.UIKeyboardShortcut.SubscribeToOnShortcutSet*
        name: SubscribeToOnShortcutSet
    qualifiedName:
      CSharp:
      - id: Global.UIKeyboardShortcut*
        name: UIKeyboardShortcut
      - name: .
      - id: Global.UIKeyboardShortcut.SubscribeToOnShortcutSet*
        name: SubscribeToOnShortcutSet
      VB:
      - id: Global.UIKeyboardShortcut*
        name: UIKeyboardShortcut
      - name: .
      - id: Global.UIKeyboardShortcut.SubscribeToOnShortcutSet*
        name: SubscribeToOnShortcutSet
    isDefinition: true
    commentId: Overload:Global.UIKeyboardShortcut.SubscribeToOnShortcutSet
  Global.UIKeyboardShortcut:
    name:
      CSharp:
      - id: Global.UIKeyboardShortcut
        name: UIKeyboardShortcut
      VB:
      - id: Global.UIKeyboardShortcut
        name: UIKeyboardShortcut
    nameWithType:
      CSharp:
      - id: Global.UIKeyboardShortcut
        name: UIKeyboardShortcut
      VB:
      - id: Global.UIKeyboardShortcut
        name: UIKeyboardShortcut
    qualifiedName:
      CSharp:
      - id: Global.UIKeyboardShortcut
        name: UIKeyboardShortcut
      VB:
      - id: Global.UIKeyboardShortcut
        name: UIKeyboardShortcut
    isDefinition: true
    commentId: T:Global.UIKeyboardShortcut
  Global.UIManager.selectedUIElement*:
    name:
      CSharp:
      - id: Global.UIManager.selectedUIElement*
        name: selectedUIElement
      VB:
      - id: Global.UIManager.selectedUIElement*
        name: selectedUIElement
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.selectedUIElement*
        name: selectedUIElement
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.selectedUIElement*
        name: selectedUIElement
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.selectedUIElement*
        name: selectedUIElement
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.selectedUIElement*
        name: selectedUIElement
    isDefinition: true
    commentId: Overload:Global.UIManager.selectedUIElement
  Global.UIManager.TryTarget*:
    name:
      CSharp:
      - id: Global.UIManager.TryTarget*
        name: TryTarget
      VB:
      - id: Global.UIManager.TryTarget*
        name: TryTarget
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.TryTarget*
        name: TryTarget
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.TryTarget*
        name: TryTarget
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.TryTarget*
        name: TryTarget
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.TryTarget*
        name: TryTarget
    isDefinition: true
    commentId: Overload:Global.UIManager.TryTarget
  Global.UIManager.TryUntarget*:
    name:
      CSharp:
      - id: Global.UIManager.TryUntarget*
        name: TryUntarget
      VB:
      - id: Global.UIManager.TryUntarget*
        name: TryUntarget
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.TryUntarget*
        name: TryUntarget
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.TryUntarget*
        name: TryUntarget
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.TryUntarget*
        name: TryUntarget
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.TryUntarget*
        name: TryUntarget
    isDefinition: true
    commentId: Overload:Global.UIManager.TryUntarget
  Global.UIManager.CanTargetInputTarget*:
    name:
      CSharp:
      - id: Global.UIManager.CanTargetInputTarget*
        name: CanTargetInputTarget
      VB:
      - id: Global.UIManager.CanTargetInputTarget*
        name: CanTargetInputTarget
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CanTargetInputTarget*
        name: CanTargetInputTarget
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CanTargetInputTarget*
        name: CanTargetInputTarget
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CanTargetInputTarget*
        name: CanTargetInputTarget
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CanTargetInputTarget*
        name: CanTargetInputTarget
    isDefinition: true
    commentId: Overload:Global.UIManager.CanTargetInputTarget
  Global.UIManager.OpenDialogBox*:
    name:
      CSharp:
      - id: Global.UIManager.OpenDialogBox*
        name: OpenDialogBox
      VB:
      - id: Global.UIManager.OpenDialogBox*
        name: OpenDialogBox
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenDialogBox*
        name: OpenDialogBox
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenDialogBox*
        name: OpenDialogBox
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenDialogBox*
        name: OpenDialogBox
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenDialogBox*
        name: OpenDialogBox
    isDefinition: true
    commentId: Overload:Global.UIManager.OpenDialogBox
  Global.UIManager.CloseDialogBox*:
    name:
      CSharp:
      - id: Global.UIManager.CloseDialogBox*
        name: CloseDialogBox
      VB:
      - id: Global.UIManager.CloseDialogBox*
        name: CloseDialogBox
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseDialogBox*
        name: CloseDialogBox
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseDialogBox*
        name: CloseDialogBox
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseDialogBox*
        name: CloseDialogBox
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseDialogBox*
        name: CloseDialogBox
    isDefinition: true
    commentId: Overload:Global.UIManager.CloseDialogBox
  Global.Action:
    name:
      CSharp:
      - id: Global.Action
        name: Action
        isExternal: true
      VB:
      - id: Global.Action
        name: Action
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Action
        name: Action
        isExternal: true
      VB:
      - id: Global.Action
        name: Action
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Action
        name: Action
        isExternal: true
      VB:
      - id: Global.Action
        name: Action
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Action'
  Global.UIManager.OpenNewFileWindow*:
    name:
      CSharp:
      - id: Global.UIManager.OpenNewFileWindow*
        name: OpenNewFileWindow
      VB:
      - id: Global.UIManager.OpenNewFileWindow*
        name: OpenNewFileWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenNewFileWindow*
        name: OpenNewFileWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenNewFileWindow*
        name: OpenNewFileWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenNewFileWindow*
        name: OpenNewFileWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenNewFileWindow*
        name: OpenNewFileWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.OpenNewFileWindow
  Global.UIManager.CloseNewFileWindow*:
    name:
      CSharp:
      - id: Global.UIManager.CloseNewFileWindow*
        name: CloseNewFileWindow
      VB:
      - id: Global.UIManager.CloseNewFileWindow*
        name: CloseNewFileWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseNewFileWindow*
        name: CloseNewFileWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseNewFileWindow*
        name: CloseNewFileWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseNewFileWindow*
        name: CloseNewFileWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseNewFileWindow*
        name: CloseNewFileWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.CloseNewFileWindow
  Global.UIManager.ConfirmNewFileWindow*:
    name:
      CSharp:
      - id: Global.UIManager.ConfirmNewFileWindow*
        name: ConfirmNewFileWindow
      VB:
      - id: Global.UIManager.ConfirmNewFileWindow*
        name: ConfirmNewFileWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmNewFileWindow*
        name: ConfirmNewFileWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmNewFileWindow*
        name: ConfirmNewFileWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmNewFileWindow*
        name: ConfirmNewFileWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmNewFileWindow*
        name: ConfirmNewFileWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.ConfirmNewFileWindow
  Global.UIManager.SetNewFileWidth*:
    name:
      CSharp:
      - id: Global.UIManager.SetNewFileWidth*
        name: SetNewFileWidth
      VB:
      - id: Global.UIManager.SetNewFileWidth*
        name: SetNewFileWidth
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.SetNewFileWidth*
        name: SetNewFileWidth
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.SetNewFileWidth*
        name: SetNewFileWidth
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.SetNewFileWidth*
        name: SetNewFileWidth
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.SetNewFileWidth*
        name: SetNewFileWidth
    isDefinition: true
    commentId: Overload:Global.UIManager.SetNewFileWidth
  Global.UIManager.SetNewFileHeight*:
    name:
      CSharp:
      - id: Global.UIManager.SetNewFileHeight*
        name: SetNewFileHeight
      VB:
      - id: Global.UIManager.SetNewFileHeight*
        name: SetNewFileHeight
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.SetNewFileHeight*
        name: SetNewFileHeight
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.SetNewFileHeight*
        name: SetNewFileHeight
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.SetNewFileHeight*
        name: SetNewFileHeight
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.SetNewFileHeight*
        name: SetNewFileHeight
    isDefinition: true
    commentId: Overload:Global.UIManager.SetNewFileHeight
  Global.UIManager.OpenExtendCropWindow*:
    name:
      CSharp:
      - id: Global.UIManager.OpenExtendCropWindow*
        name: OpenExtendCropWindow
      VB:
      - id: Global.UIManager.OpenExtendCropWindow*
        name: OpenExtendCropWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenExtendCropWindow*
        name: OpenExtendCropWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenExtendCropWindow*
        name: OpenExtendCropWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenExtendCropWindow*
        name: OpenExtendCropWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenExtendCropWindow*
        name: OpenExtendCropWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.OpenExtendCropWindow
  Global.UIManager.CloseExtendCropWindow*:
    name:
      CSharp:
      - id: Global.UIManager.CloseExtendCropWindow*
        name: CloseExtendCropWindow
      VB:
      - id: Global.UIManager.CloseExtendCropWindow*
        name: CloseExtendCropWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseExtendCropWindow*
        name: CloseExtendCropWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseExtendCropWindow*
        name: CloseExtendCropWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseExtendCropWindow*
        name: CloseExtendCropWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseExtendCropWindow*
        name: CloseExtendCropWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.CloseExtendCropWindow
  Global.UIManager.ConfirmExtendCropWindow*:
    name:
      CSharp:
      - id: Global.UIManager.ConfirmExtendCropWindow*
        name: ConfirmExtendCropWindow
      VB:
      - id: Global.UIManager.ConfirmExtendCropWindow*
        name: ConfirmExtendCropWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmExtendCropWindow*
        name: ConfirmExtendCropWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmExtendCropWindow*
        name: ConfirmExtendCropWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmExtendCropWindow*
        name: ConfirmExtendCropWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmExtendCropWindow*
        name: ConfirmExtendCropWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.ConfirmExtendCropWindow
  Global.UIManager.OpenScaleWindow*:
    name:
      CSharp:
      - id: Global.UIManager.OpenScaleWindow*
        name: OpenScaleWindow
      VB:
      - id: Global.UIManager.OpenScaleWindow*
        name: OpenScaleWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenScaleWindow*
        name: OpenScaleWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenScaleWindow*
        name: OpenScaleWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenScaleWindow*
        name: OpenScaleWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenScaleWindow*
        name: OpenScaleWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.OpenScaleWindow
  Global.UIManager.CloseScaleWindow*:
    name:
      CSharp:
      - id: Global.UIManager.CloseScaleWindow*
        name: CloseScaleWindow
      VB:
      - id: Global.UIManager.CloseScaleWindow*
        name: CloseScaleWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseScaleWindow*
        name: CloseScaleWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseScaleWindow*
        name: CloseScaleWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseScaleWindow*
        name: CloseScaleWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseScaleWindow*
        name: CloseScaleWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.CloseScaleWindow
  Global.UIManager.ConfirmScaleWindow*:
    name:
      CSharp:
      - id: Global.UIManager.ConfirmScaleWindow*
        name: ConfirmScaleWindow
      VB:
      - id: Global.UIManager.ConfirmScaleWindow*
        name: ConfirmScaleWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmScaleWindow*
        name: ConfirmScaleWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmScaleWindow*
        name: ConfirmScaleWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmScaleWindow*
        name: ConfirmScaleWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmScaleWindow*
        name: ConfirmScaleWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.ConfirmScaleWindow
  Global.UIManager.OpenGridWindow*:
    name:
      CSharp:
      - id: Global.UIManager.OpenGridWindow*
        name: OpenGridWindow
      VB:
      - id: Global.UIManager.OpenGridWindow*
        name: OpenGridWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenGridWindow*
        name: OpenGridWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenGridWindow*
        name: OpenGridWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenGridWindow*
        name: OpenGridWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenGridWindow*
        name: OpenGridWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.OpenGridWindow
  Global.UIManager.CloseGridWindow*:
    name:
      CSharp:
      - id: Global.UIManager.CloseGridWindow*
        name: CloseGridWindow
      VB:
      - id: Global.UIManager.CloseGridWindow*
        name: CloseGridWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseGridWindow*
        name: CloseGridWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseGridWindow*
        name: CloseGridWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseGridWindow*
        name: CloseGridWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseGridWindow*
        name: CloseGridWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.CloseGridWindow
  Global.UIManager.ConfirmGridWindow*:
    name:
      CSharp:
      - id: Global.UIManager.ConfirmGridWindow*
        name: ConfirmGridWindow
      VB:
      - id: Global.UIManager.ConfirmGridWindow*
        name: ConfirmGridWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmGridWindow*
        name: ConfirmGridWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmGridWindow*
        name: ConfirmGridWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmGridWindow*
        name: ConfirmGridWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmGridWindow*
        name: ConfirmGridWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.ConfirmGridWindow
  Global.UIManager.OpenOutlineWindow*:
    name:
      CSharp:
      - id: Global.UIManager.OpenOutlineWindow*
        name: OpenOutlineWindow
      VB:
      - id: Global.UIManager.OpenOutlineWindow*
        name: OpenOutlineWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenOutlineWindow*
        name: OpenOutlineWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenOutlineWindow*
        name: OpenOutlineWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenOutlineWindow*
        name: OpenOutlineWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenOutlineWindow*
        name: OpenOutlineWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.OpenOutlineWindow
  Global.UIManager.CloseOutlineWindow*:
    name:
      CSharp:
      - id: Global.UIManager.CloseOutlineWindow*
        name: CloseOutlineWindow
      VB:
      - id: Global.UIManager.CloseOutlineWindow*
        name: CloseOutlineWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseOutlineWindow*
        name: CloseOutlineWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseOutlineWindow*
        name: CloseOutlineWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseOutlineWindow*
        name: CloseOutlineWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseOutlineWindow*
        name: CloseOutlineWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.CloseOutlineWindow
  Global.UIManager.ConfirmOutlineWindow*:
    name:
      CSharp:
      - id: Global.UIManager.ConfirmOutlineWindow*
        name: ConfirmOutlineWindow
      VB:
      - id: Global.UIManager.ConfirmOutlineWindow*
        name: ConfirmOutlineWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmOutlineWindow*
        name: ConfirmOutlineWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmOutlineWindow*
        name: ConfirmOutlineWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmOutlineWindow*
        name: ConfirmOutlineWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmOutlineWindow*
        name: ConfirmOutlineWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.ConfirmOutlineWindow
  Global.UIManager.OpenReplaceColourWindow*:
    name:
      CSharp:
      - id: Global.UIManager.OpenReplaceColourWindow*
        name: OpenReplaceColourWindow
      VB:
      - id: Global.UIManager.OpenReplaceColourWindow*
        name: OpenReplaceColourWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenReplaceColourWindow*
        name: OpenReplaceColourWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenReplaceColourWindow*
        name: OpenReplaceColourWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenReplaceColourWindow*
        name: OpenReplaceColourWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenReplaceColourWindow*
        name: OpenReplaceColourWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.OpenReplaceColourWindow
  Global.UIManager.CloseReplaceColourWindow*:
    name:
      CSharp:
      - id: Global.UIManager.CloseReplaceColourWindow*
        name: CloseReplaceColourWindow
      VB:
      - id: Global.UIManager.CloseReplaceColourWindow*
        name: CloseReplaceColourWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseReplaceColourWindow*
        name: CloseReplaceColourWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseReplaceColourWindow*
        name: CloseReplaceColourWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseReplaceColourWindow*
        name: CloseReplaceColourWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseReplaceColourWindow*
        name: CloseReplaceColourWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.CloseReplaceColourWindow
  Global.UIManager.ConfirmReplaceColourWindow*:
    name:
      CSharp:
      - id: Global.UIManager.ConfirmReplaceColourWindow*
        name: ConfirmReplaceColourWindow
      VB:
      - id: Global.UIManager.ConfirmReplaceColourWindow*
        name: ConfirmReplaceColourWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmReplaceColourWindow*
        name: ConfirmReplaceColourWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmReplaceColourWindow*
        name: ConfirmReplaceColourWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmReplaceColourWindow*
        name: ConfirmReplaceColourWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmReplaceColourWindow*
        name: ConfirmReplaceColourWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.ConfirmReplaceColourWindow
  Global.UIManager.OpenImportPACWindow*:
    name:
      CSharp:
      - id: Global.UIManager.OpenImportPACWindow*
        name: OpenImportPACWindow
      VB:
      - id: Global.UIManager.OpenImportPACWindow*
        name: OpenImportPACWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenImportPACWindow*
        name: OpenImportPACWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenImportPACWindow*
        name: OpenImportPACWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenImportPACWindow*
        name: OpenImportPACWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenImportPACWindow*
        name: OpenImportPACWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.OpenImportPACWindow
  Global.UIManager.CloseImportPACWindow*:
    name:
      CSharp:
      - id: Global.UIManager.CloseImportPACWindow*
        name: CloseImportPACWindow
      VB:
      - id: Global.UIManager.CloseImportPACWindow*
        name: CloseImportPACWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseImportPACWindow*
        name: CloseImportPACWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseImportPACWindow*
        name: CloseImportPACWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseImportPACWindow*
        name: CloseImportPACWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseImportPACWindow*
        name: CloseImportPACWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.CloseImportPACWindow
  Global.UIManager.ConfirmImportPACWindow*:
    name:
      CSharp:
      - id: Global.UIManager.ConfirmImportPACWindow*
        name: ConfirmImportPACWindow
      VB:
      - id: Global.UIManager.ConfirmImportPACWindow*
        name: ConfirmImportPACWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmImportPACWindow*
        name: ConfirmImportPACWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmImportPACWindow*
        name: ConfirmImportPACWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmImportPACWindow*
        name: ConfirmImportPACWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.ConfirmImportPACWindow*
        name: ConfirmImportPACWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.ConfirmImportPACWindow
  Global.UIManager.UpdateImportPACPreview*:
    name:
      CSharp:
      - id: Global.UIManager.UpdateImportPACPreview*
        name: UpdateImportPACPreview
      VB:
      - id: Global.UIManager.UpdateImportPACPreview*
        name: UpdateImportPACPreview
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.UpdateImportPACPreview*
        name: UpdateImportPACPreview
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.UpdateImportPACPreview*
        name: UpdateImportPACPreview
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.UpdateImportPACPreview*
        name: UpdateImportPACPreview
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.UpdateImportPACPreview*
        name: UpdateImportPACPreview
    isDefinition: true
    commentId: Overload:Global.UIManager.UpdateImportPACPreview
  Global.UIManager.OpenLayerPropertiesWindow*:
    name:
      CSharp:
      - id: Global.UIManager.OpenLayerPropertiesWindow*
        name: OpenLayerPropertiesWindow
      VB:
      - id: Global.UIManager.OpenLayerPropertiesWindow*
        name: OpenLayerPropertiesWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenLayerPropertiesWindow*
        name: OpenLayerPropertiesWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenLayerPropertiesWindow*
        name: OpenLayerPropertiesWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenLayerPropertiesWindow*
        name: OpenLayerPropertiesWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenLayerPropertiesWindow*
        name: OpenLayerPropertiesWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.OpenLayerPropertiesWindow
  Global.UIManager.CloseLayerPropertiesWindow*:
    name:
      CSharp:
      - id: Global.UIManager.CloseLayerPropertiesWindow*
        name: CloseLayerPropertiesWindow
      VB:
      - id: Global.UIManager.CloseLayerPropertiesWindow*
        name: CloseLayerPropertiesWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseLayerPropertiesWindow*
        name: CloseLayerPropertiesWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseLayerPropertiesWindow*
        name: CloseLayerPropertiesWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseLayerPropertiesWindow*
        name: CloseLayerPropertiesWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseLayerPropertiesWindow*
        name: CloseLayerPropertiesWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.CloseLayerPropertiesWindow
  Global.UIManager.OpenBrushSettingsWindow*:
    name:
      CSharp:
      - id: Global.UIManager.OpenBrushSettingsWindow*
        name: OpenBrushSettingsWindow
      VB:
      - id: Global.UIManager.OpenBrushSettingsWindow*
        name: OpenBrushSettingsWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenBrushSettingsWindow*
        name: OpenBrushSettingsWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenBrushSettingsWindow*
        name: OpenBrushSettingsWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenBrushSettingsWindow*
        name: OpenBrushSettingsWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenBrushSettingsWindow*
        name: OpenBrushSettingsWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.OpenBrushSettingsWindow
  Global.UIManager.CloseBrushSettingsWindow*:
    name:
      CSharp:
      - id: Global.UIManager.CloseBrushSettingsWindow*
        name: CloseBrushSettingsWindow
      VB:
      - id: Global.UIManager.CloseBrushSettingsWindow*
        name: CloseBrushSettingsWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseBrushSettingsWindow*
        name: CloseBrushSettingsWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseBrushSettingsWindow*
        name: CloseBrushSettingsWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseBrushSettingsWindow*
        name: CloseBrushSettingsWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseBrushSettingsWindow*
        name: CloseBrushSettingsWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.CloseBrushSettingsWindow
  Global.UIManager.UpdateBrushSettingsShape*:
    name:
      CSharp:
      - id: Global.UIManager.UpdateBrushSettingsShape*
        name: UpdateBrushSettingsShape
      VB:
      - id: Global.UIManager.UpdateBrushSettingsShape*
        name: UpdateBrushSettingsShape
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.UpdateBrushSettingsShape*
        name: UpdateBrushSettingsShape
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.UpdateBrushSettingsShape*
        name: UpdateBrushSettingsShape
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.UpdateBrushSettingsShape*
        name: UpdateBrushSettingsShape
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.UpdateBrushSettingsShape*
        name: UpdateBrushSettingsShape
    isDefinition: true
    commentId: Overload:Global.UIManager.UpdateBrushSettingsShape
  Global.UIManager.OpenKeyboardShortcutsWindow*:
    name:
      CSharp:
      - id: Global.UIManager.OpenKeyboardShortcutsWindow*
        name: OpenKeyboardShortcutsWindow
      VB:
      - id: Global.UIManager.OpenKeyboardShortcutsWindow*
        name: OpenKeyboardShortcutsWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenKeyboardShortcutsWindow*
        name: OpenKeyboardShortcutsWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenKeyboardShortcutsWindow*
        name: OpenKeyboardShortcutsWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenKeyboardShortcutsWindow*
        name: OpenKeyboardShortcutsWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenKeyboardShortcutsWindow*
        name: OpenKeyboardShortcutsWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.OpenKeyboardShortcutsWindow
  Global.UIManager.CloseKeyboardShortcutsWindow*:
    name:
      CSharp:
      - id: Global.UIManager.CloseKeyboardShortcutsWindow*
        name: CloseKeyboardShortcutsWindow
      VB:
      - id: Global.UIManager.CloseKeyboardShortcutsWindow*
        name: CloseKeyboardShortcutsWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseKeyboardShortcutsWindow*
        name: CloseKeyboardShortcutsWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseKeyboardShortcutsWindow*
        name: CloseKeyboardShortcutsWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseKeyboardShortcutsWindow*
        name: CloseKeyboardShortcutsWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseKeyboardShortcutsWindow*
        name: CloseKeyboardShortcutsWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.CloseKeyboardShortcutsWindow
  Global.UIManager.OpenUnsavedChangesWindow*:
    name:
      CSharp:
      - id: Global.UIManager.OpenUnsavedChangesWindow*
        name: OpenUnsavedChangesWindow
      VB:
      - id: Global.UIManager.OpenUnsavedChangesWindow*
        name: OpenUnsavedChangesWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenUnsavedChangesWindow*
        name: OpenUnsavedChangesWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenUnsavedChangesWindow*
        name: OpenUnsavedChangesWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenUnsavedChangesWindow*
        name: OpenUnsavedChangesWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenUnsavedChangesWindow*
        name: OpenUnsavedChangesWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.OpenUnsavedChangesWindow
  Global.UIManager.UnsavedChangesYes*:
    name:
      CSharp:
      - id: Global.UIManager.UnsavedChangesYes*
        name: UnsavedChangesYes
      VB:
      - id: Global.UIManager.UnsavedChangesYes*
        name: UnsavedChangesYes
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.UnsavedChangesYes*
        name: UnsavedChangesYes
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.UnsavedChangesYes*
        name: UnsavedChangesYes
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.UnsavedChangesYes*
        name: UnsavedChangesYes
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.UnsavedChangesYes*
        name: UnsavedChangesYes
    isDefinition: true
    commentId: Overload:Global.UIManager.UnsavedChangesYes
  Global.UIManager.UnsavedChangesNo*:
    name:
      CSharp:
      - id: Global.UIManager.UnsavedChangesNo*
        name: UnsavedChangesNo
      VB:
      - id: Global.UIManager.UnsavedChangesNo*
        name: UnsavedChangesNo
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.UnsavedChangesNo*
        name: UnsavedChangesNo
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.UnsavedChangesNo*
        name: UnsavedChangesNo
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.UnsavedChangesNo*
        name: UnsavedChangesNo
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.UnsavedChangesNo*
        name: UnsavedChangesNo
    isDefinition: true
    commentId: Overload:Global.UIManager.UnsavedChangesNo
  Global.UIModalWindow:
    name:
      CSharp:
      - id: Global.UIModalWindow
        name: UIModalWindow
      VB:
      - id: Global.UIModalWindow
        name: UIModalWindow
    nameWithType:
      CSharp:
      - id: Global.UIModalWindow
        name: UIModalWindow
      VB:
      - id: Global.UIModalWindow
        name: UIModalWindow
    qualifiedName:
      CSharp:
      - id: Global.UIModalWindow
        name: UIModalWindow
      VB:
      - id: Global.UIModalWindow
        name: UIModalWindow
    isDefinition: true
    commentId: T:Global.UIModalWindow
  Global.UIManager.OpenModalWindow*:
    name:
      CSharp:
      - id: Global.UIManager.OpenModalWindow*
        name: OpenModalWindow
      VB:
      - id: Global.UIManager.OpenModalWindow*
        name: OpenModalWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenModalWindow*
        name: OpenModalWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenModalWindow*
        name: OpenModalWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenModalWindow*
        name: OpenModalWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.OpenModalWindow*
        name: OpenModalWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.OpenModalWindow
  Global.UnityAction[]:
    name:
      CSharp:
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: Global.UnityAction
        name: UnityAction
        isExternal: true
      - name: (
      - name: )
    isDefinition: false
  Global.UIManager.CloseModalWindow*:
    name:
      CSharp:
      - id: Global.UIManager.CloseModalWindow*
        name: CloseModalWindow
      VB:
      - id: Global.UIManager.CloseModalWindow*
        name: CloseModalWindow
    nameWithType:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseModalWindow*
        name: CloseModalWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseModalWindow*
        name: CloseModalWindow
    qualifiedName:
      CSharp:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseModalWindow*
        name: CloseModalWindow
      VB:
      - id: Global.UIManager*
        name: UIManager
      - name: .
      - id: Global.UIManager.CloseModalWindow*
        name: CloseModalWindow
    isDefinition: true
    commentId: Overload:Global.UIManager.CloseModalWindow
  Global.UIModalWindow.SetTitle*:
    name:
      CSharp:
      - id: Global.UIModalWindow.SetTitle*
        name: SetTitle
      VB:
      - id: Global.UIModalWindow.SetTitle*
        name: SetTitle
    nameWithType:
      CSharp:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.SetTitle*
        name: SetTitle
      VB:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.SetTitle*
        name: SetTitle
    qualifiedName:
      CSharp:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.SetTitle*
        name: SetTitle
      VB:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.SetTitle*
        name: SetTitle
    isDefinition: true
    commentId: Overload:Global.UIModalWindow.SetTitle
  Global.UIModalWindow.SetMessage*:
    name:
      CSharp:
      - id: Global.UIModalWindow.SetMessage*
        name: SetMessage
      VB:
      - id: Global.UIModalWindow.SetMessage*
        name: SetMessage
    nameWithType:
      CSharp:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.SetMessage*
        name: SetMessage
      VB:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.SetMessage*
        name: SetMessage
    qualifiedName:
      CSharp:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.SetMessage*
        name: SetMessage
      VB:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.SetMessage*
        name: SetMessage
    isDefinition: true
    commentId: Overload:Global.UIModalWindow.SetMessage
  Global.UIModalWindow.AddButton*:
    name:
      CSharp:
      - id: Global.UIModalWindow.AddButton*
        name: AddButton
      VB:
      - id: Global.UIModalWindow.AddButton*
        name: AddButton
    nameWithType:
      CSharp:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.AddButton*
        name: AddButton
      VB:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.AddButton*
        name: AddButton
    qualifiedName:
      CSharp:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.AddButton*
        name: AddButton
      VB:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.AddButton*
        name: AddButton
    isDefinition: true
    commentId: Overload:Global.UIModalWindow.AddButton
  Global.UIModalWindow.AddCloseButton*:
    name:
      CSharp:
      - id: Global.UIModalWindow.AddCloseButton*
        name: AddCloseButton
      VB:
      - id: Global.UIModalWindow.AddCloseButton*
        name: AddCloseButton
    nameWithType:
      CSharp:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.AddCloseButton*
        name: AddCloseButton
      VB:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.AddCloseButton*
        name: AddCloseButton
    qualifiedName:
      CSharp:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.AddCloseButton*
        name: AddCloseButton
      VB:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.AddCloseButton*
        name: AddCloseButton
    isDefinition: true
    commentId: Overload:Global.UIModalWindow.AddCloseButton
  Global.UIModalWindow.Close*:
    name:
      CSharp:
      - id: Global.UIModalWindow.Close*
        name: Close
      VB:
      - id: Global.UIModalWindow.Close*
        name: Close
    nameWithType:
      CSharp:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.Close*
        name: Close
      VB:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.Close*
        name: Close
    qualifiedName:
      CSharp:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.Close*
        name: Close
      VB:
      - id: Global.UIModalWindow*
        name: UIModalWindow
      - name: .
      - id: Global.UIModalWindow.Close*
        name: Close
    isDefinition: true
    commentId: Overload:Global.UIModalWindow.Close
  Global.UINumberField.max*:
    name:
      CSharp:
      - id: Global.UINumberField.max*
        name: max
      VB:
      - id: Global.UINumberField.max*
        name: max
    nameWithType:
      CSharp:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.max*
        name: max
      VB:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.max*
        name: max
    qualifiedName:
      CSharp:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.max*
        name: max
      VB:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.max*
        name: max
    isDefinition: true
    commentId: Overload:Global.UINumberField.max
  Global.UINumberField.min*:
    name:
      CSharp:
      - id: Global.UINumberField.min*
        name: min
      VB:
      - id: Global.UINumberField.min*
        name: min
    nameWithType:
      CSharp:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.min*
        name: min
      VB:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.min*
        name: min
    qualifiedName:
      CSharp:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.min*
        name: min
      VB:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.min*
        name: min
    isDefinition: true
    commentId: Overload:Global.UINumberField.min
  Global.UINumberField.value*:
    name:
      CSharp:
      - id: Global.UINumberField.value*
        name: value
      VB:
      - id: Global.UINumberField.value*
        name: value
    nameWithType:
      CSharp:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.value*
        name: value
      VB:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.value*
        name: value
    qualifiedName:
      CSharp:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.value*
        name: value
      VB:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.value*
        name: value
    isDefinition: true
    commentId: Overload:Global.UINumberField.value
  Global.UINumberField.AddNumOfIncrements*:
    name:
      CSharp:
      - id: Global.UINumberField.AddNumOfIncrements*
        name: AddNumOfIncrements
      VB:
      - id: Global.UINumberField.AddNumOfIncrements*
        name: AddNumOfIncrements
    nameWithType:
      CSharp:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.AddNumOfIncrements*
        name: AddNumOfIncrements
      VB:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.AddNumOfIncrements*
        name: AddNumOfIncrements
    qualifiedName:
      CSharp:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.AddNumOfIncrements*
        name: AddNumOfIncrements
      VB:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.AddNumOfIncrements*
        name: AddNumOfIncrements
    isDefinition: true
    commentId: Overload:Global.UINumberField.AddNumOfIncrements
  Global.UINumberField.Increment*:
    name:
      CSharp:
      - id: Global.UINumberField.Increment*
        name: Increment
      VB:
      - id: Global.UINumberField.Increment*
        name: Increment
    nameWithType:
      CSharp:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.Increment*
        name: Increment
      VB:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.Increment*
        name: Increment
    qualifiedName:
      CSharp:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.Increment*
        name: Increment
      VB:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.Increment*
        name: Increment
    isDefinition: true
    commentId: Overload:Global.UINumberField.Increment
  Global.UINumberField.Decrement*:
    name:
      CSharp:
      - id: Global.UINumberField.Decrement*
        name: Decrement
      VB:
      - id: Global.UINumberField.Decrement*
        name: Decrement
    nameWithType:
      CSharp:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.Decrement*
        name: Decrement
      VB:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.Decrement*
        name: Decrement
    qualifiedName:
      CSharp:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.Decrement*
        name: Decrement
      VB:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.Decrement*
        name: Decrement
    isDefinition: true
    commentId: Overload:Global.UINumberField.Decrement
  Global.UINumberField.SubscribeToValueChanged*:
    name:
      CSharp:
      - id: Global.UINumberField.SubscribeToValueChanged*
        name: SubscribeToValueChanged
      VB:
      - id: Global.UINumberField.SubscribeToValueChanged*
        name: SubscribeToValueChanged
    nameWithType:
      CSharp:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.SubscribeToValueChanged*
        name: SubscribeToValueChanged
      VB:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.SubscribeToValueChanged*
        name: SubscribeToValueChanged
    qualifiedName:
      CSharp:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.SubscribeToValueChanged*
        name: SubscribeToValueChanged
      VB:
      - id: Global.UINumberField*
        name: UINumberField
      - name: .
      - id: Global.UINumberField.SubscribeToValueChanged*
        name: SubscribeToValueChanged
    isDefinition: true
    commentId: Overload:Global.UINumberField.SubscribeToValueChanged
  Global.UINumberField:
    name:
      CSharp:
      - id: Global.UINumberField
        name: UINumberField
      VB:
      - id: Global.UINumberField
        name: UINumberField
    nameWithType:
      CSharp:
      - id: Global.UINumberField
        name: UINumberField
      VB:
      - id: Global.UINumberField
        name: UINumberField
    qualifiedName:
      CSharp:
      - id: Global.UINumberField
        name: UINumberField
      VB:
      - id: Global.UINumberField
        name: UINumberField
    isDefinition: true
    commentId: T:Global.UINumberField
  Global.UIScale.decimalPlaces*:
    name:
      CSharp:
      - id: Global.UIScale.decimalPlaces*
        name: decimalPlaces
      VB:
      - id: Global.UIScale.decimalPlaces*
        name: decimalPlaces
    nameWithType:
      CSharp:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.decimalPlaces*
        name: decimalPlaces
      VB:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.decimalPlaces*
        name: decimalPlaces
    qualifiedName:
      CSharp:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.decimalPlaces*
        name: decimalPlaces
      VB:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.decimalPlaces*
        name: decimalPlaces
    isDefinition: true
    commentId: Overload:Global.UIScale.decimalPlaces
  Global.UIScale.value*:
    name:
      CSharp:
      - id: Global.UIScale.value*
        name: value
      VB:
      - id: Global.UIScale.value*
        name: value
    nameWithType:
      CSharp:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.value*
        name: value
      VB:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.value*
        name: value
    qualifiedName:
      CSharp:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.value*
        name: value
      VB:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.value*
        name: value
    isDefinition: true
    commentId: Overload:Global.UIScale.value
  Global.UIScale.UpdateDisplay*:
    name:
      CSharp:
      - id: Global.UIScale.UpdateDisplay*
        name: UpdateDisplay
      VB:
      - id: Global.UIScale.UpdateDisplay*
        name: UpdateDisplay
    nameWithType:
      CSharp:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.UpdateDisplay*
        name: UpdateDisplay
      VB:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.UpdateDisplay*
        name: UpdateDisplay
    qualifiedName:
      CSharp:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.UpdateDisplay*
        name: UpdateDisplay
      VB:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.UpdateDisplay*
        name: UpdateDisplay
    isDefinition: true
    commentId: Overload:Global.UIScale.UpdateDisplay
  Global.UIScale.SetValueNoNotify*:
    name:
      CSharp:
      - id: Global.UIScale.SetValueNoNotify*
        name: SetValueNoNotify
      VB:
      - id: Global.UIScale.SetValueNoNotify*
        name: SetValueNoNotify
    nameWithType:
      CSharp:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.SetValueNoNotify*
        name: SetValueNoNotify
      VB:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.SetValueNoNotify*
        name: SetValueNoNotify
    qualifiedName:
      CSharp:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.SetValueNoNotify*
        name: SetValueNoNotify
      VB:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.SetValueNoNotify*
        name: SetValueNoNotify
    isDefinition: true
    commentId: Overload:Global.UIScale.SetValueNoNotify
  Global.UIScale.SetValue*:
    name:
      CSharp:
      - id: Global.UIScale.SetValue*
        name: SetValue
      VB:
      - id: Global.UIScale.SetValue*
        name: SetValue
    nameWithType:
      CSharp:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.SetValue*
        name: SetValue
      VB:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.SetValue*
        name: SetValue
    qualifiedName:
      CSharp:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.SetValue*
        name: SetValue
      VB:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.SetValue*
        name: SetValue
    isDefinition: true
    commentId: Overload:Global.UIScale.SetValue
  Global.UIScale.SubscribeToValueChange*:
    name:
      CSharp:
      - id: Global.UIScale.SubscribeToValueChange*
        name: SubscribeToValueChange
      VB:
      - id: Global.UIScale.SubscribeToValueChange*
        name: SubscribeToValueChange
    nameWithType:
      CSharp:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.SubscribeToValueChange*
        name: SubscribeToValueChange
      VB:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.SubscribeToValueChange*
        name: SubscribeToValueChange
    qualifiedName:
      CSharp:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.SubscribeToValueChange*
        name: SubscribeToValueChange
      VB:
      - id: Global.UIScale*
        name: UIScale
      - name: .
      - id: Global.UIScale.SubscribeToValueChange*
        name: SubscribeToValueChange
    isDefinition: true
    commentId: Overload:Global.UIScale.SubscribeToValueChange
  Global.UIScale:
    name:
      CSharp:
      - id: Global.UIScale
        name: UIScale
      VB:
      - id: Global.UIScale
        name: UIScale
    nameWithType:
      CSharp:
      - id: Global.UIScale
        name: UIScale
      VB:
      - id: Global.UIScale
        name: UIScale
    qualifiedName:
      CSharp:
      - id: Global.UIScale
        name: UIScale
      VB:
      - id: Global.UIScale
        name: UIScale
    isDefinition: true
    commentId: T:Global.UIScale
  Global.ScrollDirection:
    name:
      CSharp:
      - id: Global.ScrollDirection
        name: ScrollDirection
      VB:
      - id: Global.ScrollDirection
        name: ScrollDirection
    nameWithType:
      CSharp:
      - id: Global.ScrollDirection
        name: ScrollDirection
      VB:
      - id: Global.ScrollDirection
        name: ScrollDirection
    qualifiedName:
      CSharp:
      - id: Global.ScrollDirection
        name: ScrollDirection
      VB:
      - id: Global.ScrollDirection
        name: ScrollDirection
    isDefinition: true
    commentId: T:Global.ScrollDirection
  Global.UIScrollbar.scrollAmount*:
    name:
      CSharp:
      - id: Global.UIScrollbar.scrollAmount*
        name: scrollAmount
      VB:
      - id: Global.UIScrollbar.scrollAmount*
        name: scrollAmount
    nameWithType:
      CSharp:
      - id: Global.UIScrollbar*
        name: UIScrollbar
      - name: .
      - id: Global.UIScrollbar.scrollAmount*
        name: scrollAmount
      VB:
      - id: Global.UIScrollbar*
        name: UIScrollbar
      - name: .
      - id: Global.UIScrollbar.scrollAmount*
        name: scrollAmount
    qualifiedName:
      CSharp:
      - id: Global.UIScrollbar*
        name: UIScrollbar
      - name: .
      - id: Global.UIScrollbar.scrollAmount*
        name: scrollAmount
      VB:
      - id: Global.UIScrollbar*
        name: UIScrollbar
      - name: .
      - id: Global.UIScrollbar.scrollAmount*
        name: scrollAmount
    isDefinition: true
    commentId: Overload:Global.UIScrollbar.scrollAmount
  Global.UIScrollbar.UpdateDisplay*:
    name:
      CSharp:
      - id: Global.UIScrollbar.UpdateDisplay*
        name: UpdateDisplay
      VB:
      - id: Global.UIScrollbar.UpdateDisplay*
        name: UpdateDisplay
    nameWithType:
      CSharp:
      - id: Global.UIScrollbar*
        name: UIScrollbar
      - name: .
      - id: Global.UIScrollbar.UpdateDisplay*
        name: UpdateDisplay
      VB:
      - id: Global.UIScrollbar*
        name: UIScrollbar
      - name: .
      - id: Global.UIScrollbar.UpdateDisplay*
        name: UpdateDisplay
    qualifiedName:
      CSharp:
      - id: Global.UIScrollbar*
        name: UIScrollbar
      - name: .
      - id: Global.UIScrollbar.UpdateDisplay*
        name: UpdateDisplay
      VB:
      - id: Global.UIScrollbar*
        name: UIScrollbar
      - name: .
      - id: Global.UIScrollbar.UpdateDisplay*
        name: UpdateDisplay
    isDefinition: true
    commentId: Overload:Global.UIScrollbar.UpdateDisplay
  Global.UIScrollbar.SetScrollAmount*:
    name:
      CSharp:
      - id: Global.UIScrollbar.SetScrollAmount*
        name: SetScrollAmount
      VB:
      - id: Global.UIScrollbar.SetScrollAmount*
        name: SetScrollAmount
    nameWithType:
      CSharp:
      - id: Global.UIScrollbar*
        name: UIScrollbar
      - name: .
      - id: Global.UIScrollbar.SetScrollAmount*
        name: SetScrollAmount
      VB:
      - id: Global.UIScrollbar*
        name: UIScrollbar
      - name: .
      - id: Global.UIScrollbar.SetScrollAmount*
        name: SetScrollAmount
    qualifiedName:
      CSharp:
      - id: Global.UIScrollbar*
        name: UIScrollbar
      - name: .
      - id: Global.UIScrollbar.SetScrollAmount*
        name: SetScrollAmount
      VB:
      - id: Global.UIScrollbar*
        name: UIScrollbar
      - name: .
      - id: Global.UIScrollbar.SetScrollAmount*
        name: SetScrollAmount
    isDefinition: true
    commentId: Overload:Global.UIScrollbar.SetScrollAmount
  Global.UIScrollbar.GetScrollAmount*:
    name:
      CSharp:
      - id: Global.UIScrollbar.GetScrollAmount*
        name: GetScrollAmount
      VB:
      - id: Global.UIScrollbar.GetScrollAmount*
        name: GetScrollAmount
    nameWithType:
      CSharp:
      - id: Global.UIScrollbar*
        name: UIScrollbar
      - name: .
      - id: Global.UIScrollbar.GetScrollAmount*
        name: GetScrollAmount
      VB:
      - id: Global.UIScrollbar*
        name: UIScrollbar
      - name: .
      - id: Global.UIScrollbar.GetScrollAmount*
        name: GetScrollAmount
    qualifiedName:
      CSharp:
      - id: Global.UIScrollbar*
        name: UIScrollbar
      - name: .
      - id: Global.UIScrollbar.GetScrollAmount*
        name: GetScrollAmount
      VB:
      - id: Global.UIScrollbar*
        name: UIScrollbar
      - name: .
      - id: Global.UIScrollbar.GetScrollAmount*
        name: GetScrollAmount
    isDefinition: true
    commentId: Overload:Global.UIScrollbar.GetScrollAmount
  Global.UIScrollbar:
    name:
      CSharp:
      - id: Global.UIScrollbar
        name: UIScrollbar
      VB:
      - id: Global.UIScrollbar
        name: UIScrollbar
    nameWithType:
      CSharp:
      - id: Global.UIScrollbar
        name: UIScrollbar
      VB:
      - id: Global.UIScrollbar
        name: UIScrollbar
    qualifiedName:
      CSharp:
      - id: Global.UIScrollbar
        name: UIScrollbar
      VB:
      - id: Global.UIScrollbar
        name: UIScrollbar
    isDefinition: true
    commentId: T:Global.UIScrollbar
  Global.UITabManager.AddTab*:
    name:
      CSharp:
      - id: Global.UITabManager.AddTab*
        name: AddTab
      VB:
      - id: Global.UITabManager.AddTab*
        name: AddTab
    nameWithType:
      CSharp:
      - id: Global.UITabManager*
        name: UITabManager
      - name: .
      - id: Global.UITabManager.AddTab*
        name: AddTab
      VB:
      - id: Global.UITabManager*
        name: UITabManager
      - name: .
      - id: Global.UITabManager.AddTab*
        name: AddTab
    qualifiedName:
      CSharp:
      - id: Global.UITabManager*
        name: UITabManager
      - name: .
      - id: Global.UITabManager.AddTab*
        name: AddTab
      VB:
      - id: Global.UITabManager*
        name: UITabManager
      - name: .
      - id: Global.UITabManager.AddTab*
        name: AddTab
    isDefinition: true
    commentId: Overload:Global.UITabManager.AddTab
  Global.UITabManager.SelectTab*:
    name:
      CSharp:
      - id: Global.UITabManager.SelectTab*
        name: SelectTab
      VB:
      - id: Global.UITabManager.SelectTab*
        name: SelectTab
    nameWithType:
      CSharp:
      - id: Global.UITabManager*
        name: UITabManager
      - name: .
      - id: Global.UITabManager.SelectTab*
        name: SelectTab
      VB:
      - id: Global.UITabManager*
        name: UITabManager
      - name: .
      - id: Global.UITabManager.SelectTab*
        name: SelectTab
    qualifiedName:
      CSharp:
      - id: Global.UITabManager*
        name: UITabManager
      - name: .
      - id: Global.UITabManager.SelectTab*
        name: SelectTab
      VB:
      - id: Global.UITabManager*
        name: UITabManager
      - name: .
      - id: Global.UITabManager.SelectTab*
        name: SelectTab
    isDefinition: true
    commentId: Overload:Global.UITabManager.SelectTab
  Global.UITabManager.SelectTabEditor*:
    name:
      CSharp:
      - id: Global.UITabManager.SelectTabEditor*
        name: SelectTabEditor
      VB:
      - id: Global.UITabManager.SelectTabEditor*
        name: SelectTabEditor
    nameWithType:
      CSharp:
      - id: Global.UITabManager*
        name: UITabManager
      - name: .
      - id: Global.UITabManager.SelectTabEditor*
        name: SelectTabEditor
      VB:
      - id: Global.UITabManager*
        name: UITabManager
      - name: .
      - id: Global.UITabManager.SelectTabEditor*
        name: SelectTabEditor
    qualifiedName:
      CSharp:
      - id: Global.UITabManager*
        name: UITabManager
      - name: .
      - id: Global.UITabManager.SelectTabEditor*
        name: SelectTabEditor
      VB:
      - id: Global.UITabManager*
        name: UITabManager
      - name: .
      - id: Global.UITabManager.SelectTabEditor*
        name: SelectTabEditor
    isDefinition: true
    commentId: Overload:Global.UITabManager.SelectTabEditor
  Global.UITabManager:
    name:
      CSharp:
      - id: Global.UITabManager
        name: UITabManager
      VB:
      - id: Global.UITabManager
        name: UITabManager
    nameWithType:
      CSharp:
      - id: Global.UITabManager
        name: UITabManager
      VB:
      - id: Global.UITabManager
        name: UITabManager
    qualifiedName:
      CSharp:
      - id: Global.UITabManager
        name: UITabManager
      VB:
      - id: Global.UITabManager
        name: UITabManager
    isDefinition: true
    commentId: T:Global.UITabManager
  Global.UITextboxAnchorPoint:
    name:
      CSharp:
      - id: Global.UITextboxAnchorPoint
        name: UITextboxAnchorPoint
      VB:
      - id: Global.UITextboxAnchorPoint
        name: UITextboxAnchorPoint
    nameWithType:
      CSharp:
      - id: Global.UITextboxAnchorPoint
        name: UITextboxAnchorPoint
      VB:
      - id: Global.UITextboxAnchorPoint
        name: UITextboxAnchorPoint
    qualifiedName:
      CSharp:
      - id: Global.UITextboxAnchorPoint
        name: UITextboxAnchorPoint
      VB:
      - id: Global.UITextboxAnchorPoint
        name: UITextboxAnchorPoint
    isDefinition: true
    commentId: T:Global.UITextboxAnchorPoint
  Global.UITextbox.text*:
    name:
      CSharp:
      - id: Global.UITextbox.text*
        name: text
      VB:
      - id: Global.UITextbox.text*
        name: text
    nameWithType:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.text*
        name: text
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.text*
        name: text
    qualifiedName:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.text*
        name: text
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.text*
        name: text
    isDefinition: true
    commentId: Overload:Global.UITextbox.text
  Global.UITextbox.prefix*:
    name:
      CSharp:
      - id: Global.UITextbox.prefix*
        name: prefix
      VB:
      - id: Global.UITextbox.prefix*
        name: prefix
    nameWithType:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.prefix*
        name: prefix
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.prefix*
        name: prefix
    qualifiedName:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.prefix*
        name: prefix
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.prefix*
        name: prefix
    isDefinition: true
    commentId: Overload:Global.UITextbox.prefix
  Global.UITextbox.suffix*:
    name:
      CSharp:
      - id: Global.UITextbox.suffix*
        name: suffix
      VB:
      - id: Global.UITextbox.suffix*
        name: suffix
    nameWithType:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.suffix*
        name: suffix
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.suffix*
        name: suffix
    qualifiedName:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.suffix*
        name: suffix
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.suffix*
        name: suffix
    isDefinition: true
    commentId: Overload:Global.UITextbox.suffix
  Global.UITextbox.UpdateDisplay*:
    name:
      CSharp:
      - id: Global.UITextbox.UpdateDisplay*
        name: UpdateDisplay
      VB:
      - id: Global.UITextbox.UpdateDisplay*
        name: UpdateDisplay
    nameWithType:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.UpdateDisplay*
        name: UpdateDisplay
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.UpdateDisplay*
        name: UpdateDisplay
    qualifiedName:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.UpdateDisplay*
        name: UpdateDisplay
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.UpdateDisplay*
        name: UpdateDisplay
    isDefinition: true
    commentId: Overload:Global.UITextbox.UpdateDisplay
  Global.UITextbox.UpdateAnchor*:
    name:
      CSharp:
      - id: Global.UITextbox.UpdateAnchor*
        name: UpdateAnchor
      VB:
      - id: Global.UITextbox.UpdateAnchor*
        name: UpdateAnchor
    nameWithType:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.UpdateAnchor*
        name: UpdateAnchor
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.UpdateAnchor*
        name: UpdateAnchor
    qualifiedName:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.UpdateAnchor*
        name: UpdateAnchor
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.UpdateAnchor*
        name: UpdateAnchor
    isDefinition: true
    commentId: Overload:Global.UITextbox.UpdateAnchor
  Global.UITextbox.SetText*:
    name:
      CSharp:
      - id: Global.UITextbox.SetText*
        name: SetText
      VB:
      - id: Global.UITextbox.SetText*
        name: SetText
    nameWithType:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SetText*
        name: SetText
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SetText*
        name: SetText
    qualifiedName:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SetText*
        name: SetText
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SetText*
        name: SetText
    isDefinition: true
    commentId: Overload:Global.UITextbox.SetText
  Global.UITextbox.SetPrefix*:
    name:
      CSharp:
      - id: Global.UITextbox.SetPrefix*
        name: SetPrefix
      VB:
      - id: Global.UITextbox.SetPrefix*
        name: SetPrefix
    nameWithType:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SetPrefix*
        name: SetPrefix
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SetPrefix*
        name: SetPrefix
    qualifiedName:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SetPrefix*
        name: SetPrefix
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SetPrefix*
        name: SetPrefix
    isDefinition: true
    commentId: Overload:Global.UITextbox.SetPrefix
  Global.UITextbox.SetSuffix*:
    name:
      CSharp:
      - id: Global.UITextbox.SetSuffix*
        name: SetSuffix
      VB:
      - id: Global.UITextbox.SetSuffix*
        name: SetSuffix
    nameWithType:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SetSuffix*
        name: SetSuffix
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SetSuffix*
        name: SetSuffix
    qualifiedName:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SetSuffix*
        name: SetSuffix
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SetSuffix*
        name: SetSuffix
    isDefinition: true
    commentId: Overload:Global.UITextbox.SetSuffix
  Global.UITextbox.SubscribeToInputEvent*:
    name:
      CSharp:
      - id: Global.UITextbox.SubscribeToInputEvent*
        name: SubscribeToInputEvent
      VB:
      - id: Global.UITextbox.SubscribeToInputEvent*
        name: SubscribeToInputEvent
    nameWithType:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SubscribeToInputEvent*
        name: SubscribeToInputEvent
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SubscribeToInputEvent*
        name: SubscribeToInputEvent
    qualifiedName:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SubscribeToInputEvent*
        name: SubscribeToInputEvent
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SubscribeToInputEvent*
        name: SubscribeToInputEvent
    isDefinition: true
    commentId: Overload:Global.UITextbox.SubscribeToInputEvent
  Global.UITextbox.SubscribeToFinishEvent*:
    name:
      CSharp:
      - id: Global.UITextbox.SubscribeToFinishEvent*
        name: SubscribeToFinishEvent
      VB:
      - id: Global.UITextbox.SubscribeToFinishEvent*
        name: SubscribeToFinishEvent
    nameWithType:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SubscribeToFinishEvent*
        name: SubscribeToFinishEvent
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SubscribeToFinishEvent*
        name: SubscribeToFinishEvent
    qualifiedName:
      CSharp:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SubscribeToFinishEvent*
        name: SubscribeToFinishEvent
      VB:
      - id: Global.UITextbox*
        name: UITextbox
      - name: .
      - id: Global.UITextbox.SubscribeToFinishEvent*
        name: SubscribeToFinishEvent
    isDefinition: true
    commentId: Overload:Global.UITextbox.SubscribeToFinishEvent
  Global.UITextbox:
    name:
      CSharp:
      - id: Global.UITextbox
        name: UITextbox
      VB:
      - id: Global.UITextbox
        name: UITextbox
    nameWithType:
      CSharp:
      - id: Global.UITextbox
        name: UITextbox
      VB:
      - id: Global.UITextbox
        name: UITextbox
    qualifiedName:
      CSharp:
      - id: Global.UITextbox
        name: UITextbox
      VB:
      - id: Global.UITextbox
        name: UITextbox
    isDefinition: true
    commentId: T:Global.UITextbox
  Global.UITileIcon.file*:
    name:
      CSharp:
      - id: Global.UITileIcon.file*
        name: file
      VB:
      - id: Global.UITileIcon.file*
        name: file
    nameWithType:
      CSharp:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.file*
        name: file
      VB:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.file*
        name: file
    qualifiedName:
      CSharp:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.file*
        name: file
      VB:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.file*
        name: file
    isDefinition: true
    commentId: Overload:Global.UITileIcon.file
  Global.UITileIcon.width*:
    name:
      CSharp:
      - id: Global.UITileIcon.width*
        name: width
      VB:
      - id: Global.UITileIcon.width*
        name: width
    nameWithType:
      CSharp:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.width*
        name: width
      VB:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.width*
        name: width
    qualifiedName:
      CSharp:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.width*
        name: width
      VB:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.width*
        name: width
    isDefinition: true
    commentId: Overload:Global.UITileIcon.width
  Global.UITileIcon.height*:
    name:
      CSharp:
      - id: Global.UITileIcon.height*
        name: height
      VB:
      - id: Global.UITileIcon.height*
        name: height
    nameWithType:
      CSharp:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.height*
        name: height
      VB:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.height*
        name: height
    qualifiedName:
      CSharp:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.height*
        name: height
      VB:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.height*
        name: height
    isDefinition: true
    commentId: Overload:Global.UITileIcon.height
  Global.UITileIcon.SetFile*:
    name:
      CSharp:
      - id: Global.UITileIcon.SetFile*
        name: SetFile
      VB:
      - id: Global.UITileIcon.SetFile*
        name: SetFile
    nameWithType:
      CSharp:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.SetFile*
        name: SetFile
      VB:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.SetFile*
        name: SetFile
    qualifiedName:
      CSharp:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.SetFile*
        name: SetFile
      VB:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.SetFile*
        name: SetFile
    isDefinition: true
    commentId: Overload:Global.UITileIcon.SetFile
  Global.UITileIcon.SubscribeToOnClick*:
    name:
      CSharp:
      - id: Global.UITileIcon.SubscribeToOnClick*
        name: SubscribeToOnClick
      VB:
      - id: Global.UITileIcon.SubscribeToOnClick*
        name: SubscribeToOnClick
    nameWithType:
      CSharp:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.SubscribeToOnClick*
        name: SubscribeToOnClick
      VB:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.SubscribeToOnClick*
        name: SubscribeToOnClick
    qualifiedName:
      CSharp:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.SubscribeToOnClick*
        name: SubscribeToOnClick
      VB:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.SubscribeToOnClick*
        name: SubscribeToOnClick
    isDefinition: true
    commentId: Overload:Global.UITileIcon.SubscribeToOnClick
  Global.UITileIcon.SubscribeToOnLeftClick*:
    name:
      CSharp:
      - id: Global.UITileIcon.SubscribeToOnLeftClick*
        name: SubscribeToOnLeftClick
      VB:
      - id: Global.UITileIcon.SubscribeToOnLeftClick*
        name: SubscribeToOnLeftClick
    nameWithType:
      CSharp:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.SubscribeToOnLeftClick*
        name: SubscribeToOnLeftClick
      VB:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.SubscribeToOnLeftClick*
        name: SubscribeToOnLeftClick
    qualifiedName:
      CSharp:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.SubscribeToOnLeftClick*
        name: SubscribeToOnLeftClick
      VB:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.SubscribeToOnLeftClick*
        name: SubscribeToOnLeftClick
    isDefinition: true
    commentId: Overload:Global.UITileIcon.SubscribeToOnLeftClick
  Global.UITileIcon.SubscribeToOnRightClick*:
    name:
      CSharp:
      - id: Global.UITileIcon.SubscribeToOnRightClick*
        name: SubscribeToOnRightClick
      VB:
      - id: Global.UITileIcon.SubscribeToOnRightClick*
        name: SubscribeToOnRightClick
    nameWithType:
      CSharp:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.SubscribeToOnRightClick*
        name: SubscribeToOnRightClick
      VB:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.SubscribeToOnRightClick*
        name: SubscribeToOnRightClick
    qualifiedName:
      CSharp:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.SubscribeToOnRightClick*
        name: SubscribeToOnRightClick
      VB:
      - id: Global.UITileIcon*
        name: UITileIcon
      - name: .
      - id: Global.UITileIcon.SubscribeToOnRightClick*
        name: SubscribeToOnRightClick
    isDefinition: true
    commentId: Overload:Global.UITileIcon.SubscribeToOnRightClick
  Global.UITileIcon:
    name:
      CSharp:
      - id: Global.UITileIcon
        name: UITileIcon
      VB:
      - id: Global.UITileIcon
        name: UITileIcon
    nameWithType:
      CSharp:
      - id: Global.UITileIcon
        name: UITileIcon
      VB:
      - id: Global.UITileIcon
        name: UITileIcon
    qualifiedName:
      CSharp:
      - id: Global.UITileIcon
        name: UITileIcon
      VB:
      - id: Global.UITileIcon
        name: UITileIcon
    isDefinition: true
    commentId: T:Global.UITileIcon
  Global.UIToggleButton.on*:
    name:
      CSharp:
      - id: Global.UIToggleButton.on*
        name: on
      VB:
      - id: Global.UIToggleButton.on*
        name: on
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.on*
        name: on
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.on*
        name: on
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.on*
        name: on
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.on*
        name: on
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.on
  Global.UIToggleButton.toggleName*:
    name:
      CSharp:
      - id: Global.UIToggleButton.toggleName*
        name: toggleName
      VB:
      - id: Global.UIToggleButton.toggleName*
        name: toggleName
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.toggleName*
        name: toggleName
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.toggleName*
        name: toggleName
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.toggleName*
        name: toggleName
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.toggleName*
        name: toggleName
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.toggleName
  Global.UIToggleGroup:
    name:
      CSharp:
      - id: Global.UIToggleGroup
        name: UIToggleGroup
      VB:
      - id: Global.UIToggleGroup
        name: UIToggleGroup
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup
        name: UIToggleGroup
      VB:
      - id: Global.UIToggleGroup
        name: UIToggleGroup
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup
        name: UIToggleGroup
      VB:
      - id: Global.UIToggleGroup
        name: UIToggleGroup
    isDefinition: true
    commentId: T:Global.UIToggleGroup
  Global.UIToggleButton.toggleGroup*:
    name:
      CSharp:
      - id: Global.UIToggleButton.toggleGroup*
        name: toggleGroup
      VB:
      - id: Global.UIToggleButton.toggleGroup*
        name: toggleGroup
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.toggleGroup*
        name: toggleGroup
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.toggleGroup*
        name: toggleGroup
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.toggleGroup*
        name: toggleGroup
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.toggleGroup*
        name: toggleGroup
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.toggleGroup
  Global.UIToggleButton.inToggleGroup*:
    name:
      CSharp:
      - id: Global.UIToggleButton.inToggleGroup*
        name: inToggleGroup
      VB:
      - id: Global.UIToggleButton.inToggleGroup*
        name: inToggleGroup
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.inToggleGroup*
        name: inToggleGroup
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.inToggleGroup*
        name: inToggleGroup
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.inToggleGroup*
        name: inToggleGroup
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.inToggleGroup*
        name: inToggleGroup
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.inToggleGroup
  Global.UIToggleButton.offImage*:
    name:
      CSharp:
      - id: Global.UIToggleButton.offImage*
        name: offImage
      VB:
      - id: Global.UIToggleButton.offImage*
        name: offImage
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.offImage*
        name: offImage
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.offImage*
        name: offImage
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.offImage*
        name: offImage
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.offImage*
        name: offImage
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.offImage
  Global.UIToggleButton.onImage*:
    name:
      CSharp:
      - id: Global.UIToggleButton.onImage*
        name: onImage
      VB:
      - id: Global.UIToggleButton.onImage*
        name: onImage
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.onImage*
        name: onImage
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.onImage*
        name: onImage
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.onImage*
        name: onImage
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.onImage*
        name: onImage
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.onImage
  Global.UIToggleButton.hoverImage*:
    name:
      CSharp:
      - id: Global.UIToggleButton.hoverImage*
        name: hoverImage
      VB:
      - id: Global.UIToggleButton.hoverImage*
        name: hoverImage
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.hoverImage*
        name: hoverImage
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.hoverImage*
        name: hoverImage
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.hoverImage*
        name: hoverImage
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.hoverImage*
        name: hoverImage
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.hoverImage
  Global.UIToggleButton.pressedImage*:
    name:
      CSharp:
      - id: Global.UIToggleButton.pressedImage*
        name: pressedImage
      VB:
      - id: Global.UIToggleButton.pressedImage*
        name: pressedImage
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.pressedImage*
        name: pressedImage
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.pressedImage*
        name: pressedImage
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.pressedImage*
        name: pressedImage
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.pressedImage*
        name: pressedImage
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.pressedImage
  Global.UIToggleButton.offBackgroundColour*:
    name:
      CSharp:
      - id: Global.UIToggleButton.offBackgroundColour*
        name: offBackgroundColour
      VB:
      - id: Global.UIToggleButton.offBackgroundColour*
        name: offBackgroundColour
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.offBackgroundColour*
        name: offBackgroundColour
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.offBackgroundColour*
        name: offBackgroundColour
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.offBackgroundColour*
        name: offBackgroundColour
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.offBackgroundColour*
        name: offBackgroundColour
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.offBackgroundColour
  Global.UIToggleButton.onBackgroundColour*:
    name:
      CSharp:
      - id: Global.UIToggleButton.onBackgroundColour*
        name: onBackgroundColour
      VB:
      - id: Global.UIToggleButton.onBackgroundColour*
        name: onBackgroundColour
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.onBackgroundColour*
        name: onBackgroundColour
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.onBackgroundColour*
        name: onBackgroundColour
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.onBackgroundColour*
        name: onBackgroundColour
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.onBackgroundColour*
        name: onBackgroundColour
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.onBackgroundColour
  Global.UIToggleButton.pressedBackgroundColour*:
    name:
      CSharp:
      - id: Global.UIToggleButton.pressedBackgroundColour*
        name: pressedBackgroundColour
      VB:
      - id: Global.UIToggleButton.pressedBackgroundColour*
        name: pressedBackgroundColour
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.pressedBackgroundColour*
        name: pressedBackgroundColour
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.pressedBackgroundColour*
        name: pressedBackgroundColour
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.pressedBackgroundColour*
        name: pressedBackgroundColour
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.pressedBackgroundColour*
        name: pressedBackgroundColour
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.pressedBackgroundColour
  Global.UIToggleButton.UpdateDisplay*:
    name:
      CSharp:
      - id: Global.UIToggleButton.UpdateDisplay*
        name: UpdateDisplay
      VB:
      - id: Global.UIToggleButton.UpdateDisplay*
        name: UpdateDisplay
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.UpdateDisplay*
        name: UpdateDisplay
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.UpdateDisplay*
        name: UpdateDisplay
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.UpdateDisplay*
        name: UpdateDisplay
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.UpdateDisplay*
        name: UpdateDisplay
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.UpdateDisplay
  Global.UIToggleButton.Press*:
    name:
      CSharp:
      - id: Global.UIToggleButton.Press*
        name: Press
      VB:
      - id: Global.UIToggleButton.Press*
        name: Press
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.Press*
        name: Press
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.Press*
        name: Press
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.Press*
        name: Press
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.Press*
        name: Press
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.Press
  Global.UIToggleButton.RightClick*:
    name:
      CSharp:
      - id: Global.UIToggleButton.RightClick*
        name: RightClick
      VB:
      - id: Global.UIToggleButton.RightClick*
        name: RightClick
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.RightClick*
        name: RightClick
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.RightClick*
        name: RightClick
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.RightClick*
        name: RightClick
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.RightClick*
        name: RightClick
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.RightClick
  Global.UIToggleButton.SetImages*:
    name:
      CSharp:
      - id: Global.UIToggleButton.SetImages*
        name: SetImages
      VB:
      - id: Global.UIToggleButton.SetImages*
        name: SetImages
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SetImages*
        name: SetImages
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SetImages*
        name: SetImages
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SetImages*
        name: SetImages
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SetImages*
        name: SetImages
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.SetImages
  Global.UIToggleButton.SetOnOff*:
    name:
      CSharp:
      - id: Global.UIToggleButton.SetOnOff*
        name: SetOnOff
      VB:
      - id: Global.UIToggleButton.SetOnOff*
        name: SetOnOff
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SetOnOff*
        name: SetOnOff
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SetOnOff*
        name: SetOnOff
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SetOnOff*
        name: SetOnOff
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SetOnOff*
        name: SetOnOff
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.SetOnOff
  Global.UIToggleButton.SetText*:
    name:
      CSharp:
      - id: Global.UIToggleButton.SetText*
        name: SetText
      VB:
      - id: Global.UIToggleButton.SetText*
        name: SetText
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SetText*
        name: SetText
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SetText*
        name: SetText
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SetText*
        name: SetText
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SetText*
        name: SetText
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.SetText
  Global.TextAnchor:
    name:
      CSharp:
      - id: Global.TextAnchor
        name: TextAnchor
        isExternal: true
      VB:
      - id: Global.TextAnchor
        name: TextAnchor
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.TextAnchor
        name: TextAnchor
        isExternal: true
      VB:
      - id: Global.TextAnchor
        name: TextAnchor
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.TextAnchor
        name: TextAnchor
        isExternal: true
      VB:
      - id: Global.TextAnchor
        name: TextAnchor
        isExternal: true
    isDefinition: true
    commentId: '!:Global.TextAnchor'
  Global.UIToggleButton.SetTextAlignment*:
    name:
      CSharp:
      - id: Global.UIToggleButton.SetTextAlignment*
        name: SetTextAlignment
      VB:
      - id: Global.UIToggleButton.SetTextAlignment*
        name: SetTextAlignment
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SetTextAlignment*
        name: SetTextAlignment
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SetTextAlignment*
        name: SetTextAlignment
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SetTextAlignment*
        name: SetTextAlignment
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SetTextAlignment*
        name: SetTextAlignment
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.SetTextAlignment
  Global.UIToggleButton.JoinToggleGroup*:
    name:
      CSharp:
      - id: Global.UIToggleButton.JoinToggleGroup*
        name: JoinToggleGroup
      VB:
      - id: Global.UIToggleButton.JoinToggleGroup*
        name: JoinToggleGroup
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.JoinToggleGroup*
        name: JoinToggleGroup
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.JoinToggleGroup*
        name: JoinToggleGroup
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.JoinToggleGroup*
        name: JoinToggleGroup
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.JoinToggleGroup*
        name: JoinToggleGroup
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.JoinToggleGroup
  Global.UIToggleButton.LeaveToggleGroup*:
    name:
      CSharp:
      - id: Global.UIToggleButton.LeaveToggleGroup*
        name: LeaveToggleGroup
      VB:
      - id: Global.UIToggleButton.LeaveToggleGroup*
        name: LeaveToggleGroup
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.LeaveToggleGroup*
        name: LeaveToggleGroup
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.LeaveToggleGroup*
        name: LeaveToggleGroup
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.LeaveToggleGroup*
        name: LeaveToggleGroup
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.LeaveToggleGroup*
        name: LeaveToggleGroup
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.LeaveToggleGroup
  Global.UIToggleButton.SubscribeToTurnOn*:
    name:
      CSharp:
      - id: Global.UIToggleButton.SubscribeToTurnOn*
        name: SubscribeToTurnOn
      VB:
      - id: Global.UIToggleButton.SubscribeToTurnOn*
        name: SubscribeToTurnOn
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToTurnOn*
        name: SubscribeToTurnOn
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToTurnOn*
        name: SubscribeToTurnOn
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToTurnOn*
        name: SubscribeToTurnOn
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToTurnOn*
        name: SubscribeToTurnOn
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.SubscribeToTurnOn
  Global.UIToggleButton.SubscribeToTurnOff*:
    name:
      CSharp:
      - id: Global.UIToggleButton.SubscribeToTurnOff*
        name: SubscribeToTurnOff
      VB:
      - id: Global.UIToggleButton.SubscribeToTurnOff*
        name: SubscribeToTurnOff
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToTurnOff*
        name: SubscribeToTurnOff
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToTurnOff*
        name: SubscribeToTurnOff
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToTurnOff*
        name: SubscribeToTurnOff
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToTurnOff*
        name: SubscribeToTurnOff
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.SubscribeToTurnOff
  Global.UIToggleButton.SubscribeToHover*:
    name:
      CSharp:
      - id: Global.UIToggleButton.SubscribeToHover*
        name: SubscribeToHover
      VB:
      - id: Global.UIToggleButton.SubscribeToHover*
        name: SubscribeToHover
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToHover*
        name: SubscribeToHover
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToHover*
        name: SubscribeToHover
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToHover*
        name: SubscribeToHover
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToHover*
        name: SubscribeToHover
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.SubscribeToHover
  Global.UIToggleButton.SubscribeToLeftClick*:
    name:
      CSharp:
      - id: Global.UIToggleButton.SubscribeToLeftClick*
        name: SubscribeToLeftClick
      VB:
      - id: Global.UIToggleButton.SubscribeToLeftClick*
        name: SubscribeToLeftClick
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToLeftClick*
        name: SubscribeToLeftClick
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToLeftClick*
        name: SubscribeToLeftClick
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToLeftClick*
        name: SubscribeToLeftClick
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToLeftClick*
        name: SubscribeToLeftClick
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.SubscribeToLeftClick
  Global.UIToggleButton.SubscribeToRightClick*:
    name:
      CSharp:
      - id: Global.UIToggleButton.SubscribeToRightClick*
        name: SubscribeToRightClick
      VB:
      - id: Global.UIToggleButton.SubscribeToRightClick*
        name: SubscribeToRightClick
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToRightClick*
        name: SubscribeToRightClick
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToRightClick*
        name: SubscribeToRightClick
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToRightClick*
        name: SubscribeToRightClick
      VB:
      - id: Global.UIToggleButton*
        name: UIToggleButton
      - name: .
      - id: Global.UIToggleButton.SubscribeToRightClick*
        name: SubscribeToRightClick
    isDefinition: true
    commentId: Overload:Global.UIToggleButton.SubscribeToRightClick
  Global.UIToggleGroup.canSelectMultiple*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.canSelectMultiple*
        name: canSelectMultiple
      VB:
      - id: Global.UIToggleGroup.canSelectMultiple*
        name: canSelectMultiple
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.canSelectMultiple*
        name: canSelectMultiple
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.canSelectMultiple*
        name: canSelectMultiple
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.canSelectMultiple*
        name: canSelectMultiple
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.canSelectMultiple*
        name: canSelectMultiple
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.canSelectMultiple
  Global.UIToggleGroup.canSelectNone*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.canSelectNone*
        name: canSelectNone
      VB:
      - id: Global.UIToggleGroup.canSelectNone*
        name: canSelectNone
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.canSelectNone*
        name: canSelectNone
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.canSelectNone*
        name: canSelectNone
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.canSelectNone*
        name: canSelectNone
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.canSelectNone*
        name: canSelectNone
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.canSelectNone
  Global.UIToggleGroup.swapClickAndCtrlClick*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.swapClickAndCtrlClick*
        name: swapClickAndCtrlClick
      VB:
      - id: Global.UIToggleGroup.swapClickAndCtrlClick*
        name: swapClickAndCtrlClick
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.swapClickAndCtrlClick*
        name: swapClickAndCtrlClick
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.swapClickAndCtrlClick*
        name: swapClickAndCtrlClick
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.swapClickAndCtrlClick*
        name: swapClickAndCtrlClick
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.swapClickAndCtrlClick*
        name: swapClickAndCtrlClick
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.swapClickAndCtrlClick
  Global.UIToggleGroup.currentToggle*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.currentToggle*
        name: currentToggle
      VB:
      - id: Global.UIToggleGroup.currentToggle*
        name: currentToggle
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.currentToggle*
        name: currentToggle
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.currentToggle*
        name: currentToggle
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.currentToggle*
        name: currentToggle
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.currentToggle*
        name: currentToggle
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.currentToggle
  Global.UIToggleGroup.currentToggleIndex*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.currentToggleIndex*
        name: currentToggleIndex
      VB:
      - id: Global.UIToggleGroup.currentToggleIndex*
        name: currentToggleIndex
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.currentToggleIndex*
        name: currentToggleIndex
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.currentToggleIndex*
        name: currentToggleIndex
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.currentToggleIndex*
        name: currentToggleIndex
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.currentToggleIndex*
        name: currentToggleIndex
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.currentToggleIndex
  System.Collections.Generic.List{UIToggleButton}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.UIToggleButton
        name: UIToggleButton
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.UIToggleButton
        name: UIToggleButton
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.UIToggleButton
        name: UIToggleButton
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.UIToggleButton
        name: UIToggleButton
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.UIToggleButton
        name: UIToggleButton
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.UIToggleButton
        name: UIToggleButton
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{UIToggleButton}
  Global.UIToggleGroup.toggles*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.toggles*
        name: toggles
      VB:
      - id: Global.UIToggleGroup.toggles*
        name: toggles
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.toggles*
        name: toggles
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.toggles*
        name: toggles
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.toggles*
        name: toggles
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.toggles*
        name: toggles
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.toggles
  Global.UIToggleGroup.Count*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.Count*
        name: Count
      VB:
      - id: Global.UIToggleGroup.Count*
        name: Count
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Count*
        name: Count
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Count*
        name: Count
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Count*
        name: Count
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Count*
        name: Count
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.Count
  Global.UIToggleButton[]:
    name:
      CSharp:
      - id: Global.UIToggleButton
        name: UIToggleButton
      - name: '['
      - name: ']'
      VB:
      - id: Global.UIToggleButton
        name: UIToggleButton
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UIToggleButton
        name: UIToggleButton
      - name: '['
      - name: ']'
      VB:
      - id: Global.UIToggleButton
        name: UIToggleButton
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UIToggleButton
        name: UIToggleButton
      - name: '['
      - name: ']'
      VB:
      - id: Global.UIToggleButton
        name: UIToggleButton
      - name: (
      - name: )
    isDefinition: false
  Global.UIToggleGroup.selectedToggles*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.selectedToggles*
        name: selectedToggles
      VB:
      - id: Global.UIToggleGroup.selectedToggles*
        name: selectedToggles
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.selectedToggles*
        name: selectedToggles
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.selectedToggles*
        name: selectedToggles
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.selectedToggles*
        name: selectedToggles
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.selectedToggles*
        name: selectedToggles
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.selectedToggles
  Global.UIToggleGroup.selectedIndices*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.selectedIndices*
        name: selectedIndices
      VB:
      - id: Global.UIToggleGroup.selectedIndices*
        name: selectedIndices
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.selectedIndices*
        name: selectedIndices
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.selectedIndices*
        name: selectedIndices
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.selectedIndices*
        name: selectedIndices
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.selectedIndices*
        name: selectedIndices
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.selectedIndices
  Global.UIToggleGroup.hasSelectedToggle*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.hasSelectedToggle*
        name: hasSelectedToggle
      VB:
      - id: Global.UIToggleGroup.hasSelectedToggle*
        name: hasSelectedToggle
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.hasSelectedToggle*
        name: hasSelectedToggle
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.hasSelectedToggle*
        name: hasSelectedToggle
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.hasSelectedToggle*
        name: hasSelectedToggle
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.hasSelectedToggle*
        name: hasSelectedToggle
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.hasSelectedToggle
  Global.UIToggleGroup.Add*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.Add*
        name: Add
      VB:
      - id: Global.UIToggleGroup.Add*
        name: Add
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Add*
        name: Add
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Add*
        name: Add
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Add*
        name: Add
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Add*
        name: Add
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.Add
  Global.UIToggleGroup.Remove*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.Remove*
        name: Remove
      VB:
      - id: Global.UIToggleGroup.Remove*
        name: Remove
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Remove*
        name: Remove
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Remove*
        name: Remove
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Remove*
        name: Remove
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Remove*
        name: Remove
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.Remove
  Global.UIToggleGroup.Contains*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.Contains*
        name: Contains
      VB:
      - id: Global.UIToggleGroup.Contains*
        name: Contains
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Contains*
        name: Contains
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Contains*
        name: Contains
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Contains*
        name: Contains
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Contains*
        name: Contains
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.Contains
  Global.UIToggleGroup.Press*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.Press*
        name: Press
      VB:
      - id: Global.UIToggleGroup.Press*
        name: Press
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Press*
        name: Press
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Press*
        name: Press
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Press*
        name: Press
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Press*
        name: Press
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.Press
  Global.UIToggleGroup.PressForceEvent*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.PressForceEvent*
        name: PressForceEvent
      VB:
      - id: Global.UIToggleGroup.PressForceEvent*
        name: PressForceEvent
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.PressForceEvent*
        name: PressForceEvent
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.PressForceEvent*
        name: PressForceEvent
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.PressForceEvent*
        name: PressForceEvent
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.PressForceEvent*
        name: PressForceEvent
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.PressForceEvent
  Global.UIToggleGroup.CtrlPress*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.CtrlPress*
        name: CtrlPress
      VB:
      - id: Global.UIToggleGroup.CtrlPress*
        name: CtrlPress
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.CtrlPress*
        name: CtrlPress
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.CtrlPress*
        name: CtrlPress
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.CtrlPress*
        name: CtrlPress
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.CtrlPress*
        name: CtrlPress
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.CtrlPress
  Global.UIToggleGroup.PressOrCtrlPress*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.PressOrCtrlPress*
        name: PressOrCtrlPress
      VB:
      - id: Global.UIToggleGroup.PressOrCtrlPress*
        name: PressOrCtrlPress
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.PressOrCtrlPress*
        name: PressOrCtrlPress
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.PressOrCtrlPress*
        name: PressOrCtrlPress
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.PressOrCtrlPress*
        name: PressOrCtrlPress
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.PressOrCtrlPress*
        name: PressOrCtrlPress
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.PressOrCtrlPress
  Global.UIToggleGroup.Clear*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.Clear*
        name: Clear
      VB:
      - id: Global.UIToggleGroup.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Clear*
        name: Clear
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Clear*
        name: Clear
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.Clear
  Global.UIToggleGroup.DestroyToggles*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.DestroyToggles*
        name: DestroyToggles
      VB:
      - id: Global.UIToggleGroup.DestroyToggles*
        name: DestroyToggles
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.DestroyToggles*
        name: DestroyToggles
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.DestroyToggles*
        name: DestroyToggles
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.DestroyToggles*
        name: DestroyToggles
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.DestroyToggles*
        name: DestroyToggles
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.DestroyToggles
  Global.UIToggleGroup.SubscribeToSelectedToggleChange*:
    name:
      CSharp:
      - id: Global.UIToggleGroup.SubscribeToSelectedToggleChange*
        name: SubscribeToSelectedToggleChange
      VB:
      - id: Global.UIToggleGroup.SubscribeToSelectedToggleChange*
        name: SubscribeToSelectedToggleChange
    nameWithType:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.SubscribeToSelectedToggleChange*
        name: SubscribeToSelectedToggleChange
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.SubscribeToSelectedToggleChange*
        name: SubscribeToSelectedToggleChange
    qualifiedName:
      CSharp:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.SubscribeToSelectedToggleChange*
        name: SubscribeToSelectedToggleChange
      VB:
      - id: Global.UIToggleGroup*
        name: UIToggleGroup
      - name: .
      - id: Global.UIToggleGroup.SubscribeToSelectedToggleChange*
        name: SubscribeToSelectedToggleChange
    isDefinition: true
    commentId: Overload:Global.UIToggleGroup.SubscribeToSelectedToggleChange
  Global.UIButton[]:
    name:
      CSharp:
      - id: Global.UIButton
        name: UIButton
      - name: '['
      - name: ']'
      VB:
      - id: Global.UIButton
        name: UIButton
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UIButton
        name: UIButton
      - name: '['
      - name: ']'
      VB:
      - id: Global.UIButton
        name: UIButton
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UIButton
        name: UIButton
      - name: '['
      - name: ']'
      VB:
      - id: Global.UIButton
        name: UIButton
      - name: (
      - name: )
    isDefinition: false
  Global.UIToolButton.buttons*:
    name:
      CSharp:
      - id: Global.UIToolButton.buttons*
        name: buttons
      VB:
      - id: Global.UIToolButton.buttons*
        name: buttons
    nameWithType:
      CSharp:
      - id: Global.UIToolButton*
        name: UIToolButton
      - name: .
      - id: Global.UIToolButton.buttons*
        name: buttons
      VB:
      - id: Global.UIToolButton*
        name: UIToolButton
      - name: .
      - id: Global.UIToolButton.buttons*
        name: buttons
    qualifiedName:
      CSharp:
      - id: Global.UIToolButton*
        name: UIToolButton
      - name: .
      - id: Global.UIToolButton.buttons*
        name: buttons
      VB:
      - id: Global.UIToolButton*
        name: UIToolButton
      - name: .
      - id: Global.UIToolButton.buttons*
        name: buttons
    isDefinition: true
    commentId: Overload:Global.UIToolButton.buttons
  Global.UIToolButton.currentButton*:
    name:
      CSharp:
      - id: Global.UIToolButton.currentButton*
        name: currentButton
      VB:
      - id: Global.UIToolButton.currentButton*
        name: currentButton
    nameWithType:
      CSharp:
      - id: Global.UIToolButton*
        name: UIToolButton
      - name: .
      - id: Global.UIToolButton.currentButton*
        name: currentButton
      VB:
      - id: Global.UIToolButton*
        name: UIToolButton
      - name: .
      - id: Global.UIToolButton.currentButton*
        name: currentButton
    qualifiedName:
      CSharp:
      - id: Global.UIToolButton*
        name: UIToolButton
      - name: .
      - id: Global.UIToolButton.currentButton*
        name: currentButton
      VB:
      - id: Global.UIToolButton*
        name: UIToolButton
      - name: .
      - id: Global.UIToolButton.currentButton*
        name: currentButton
    isDefinition: true
    commentId: Overload:Global.UIToolButton.currentButton
  Global.UIToolButton:
    name:
      CSharp:
      - id: Global.UIToolButton
        name: UIToolButton
      VB:
      - id: Global.UIToolButton
        name: UIToolButton
    nameWithType:
      CSharp:
      - id: Global.UIToolButton
        name: UIToolButton
      VB:
      - id: Global.UIToolButton
        name: UIToolButton
    qualifiedName:
      CSharp:
      - id: Global.UIToolButton
        name: UIToolButton
      VB:
      - id: Global.UIToolButton
        name: UIToolButton
    isDefinition: true
    commentId: T:Global.UIToolButton
  Global.UITooltip.text*:
    name:
      CSharp:
      - id: Global.UITooltip.text*
        name: text
      VB:
      - id: Global.UITooltip.text*
        name: text
    nameWithType:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.text*
        name: text
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.text*
        name: text
    qualifiedName:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.text*
        name: text
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.text*
        name: text
    isDefinition: true
    commentId: Overload:Global.UITooltip.text
  Global.UITooltip.globalWidth*:
    name:
      CSharp:
      - id: Global.UITooltip.globalWidth*
        name: globalWidth
      VB:
      - id: Global.UITooltip.globalWidth*
        name: globalWidth
    nameWithType:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.globalWidth*
        name: globalWidth
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.globalWidth*
        name: globalWidth
    qualifiedName:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.globalWidth*
        name: globalWidth
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.globalWidth*
        name: globalWidth
    isDefinition: true
    commentId: Overload:Global.UITooltip.globalWidth
  Global.UITooltip.globalHeight*:
    name:
      CSharp:
      - id: Global.UITooltip.globalHeight*
        name: globalHeight
      VB:
      - id: Global.UITooltip.globalHeight*
        name: globalHeight
    nameWithType:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.globalHeight*
        name: globalHeight
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.globalHeight*
        name: globalHeight
    qualifiedName:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.globalHeight*
        name: globalHeight
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.globalHeight*
        name: globalHeight
    isDefinition: true
    commentId: Overload:Global.UITooltip.globalHeight
  Global.UITooltip.localWidth*:
    name:
      CSharp:
      - id: Global.UITooltip.localWidth*
        name: localWidth
      VB:
      - id: Global.UITooltip.localWidth*
        name: localWidth
    nameWithType:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.localWidth*
        name: localWidth
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.localWidth*
        name: localWidth
    qualifiedName:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.localWidth*
        name: localWidth
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.localWidth*
        name: localWidth
    isDefinition: true
    commentId: Overload:Global.UITooltip.localWidth
  Global.UITooltip.localHeight*:
    name:
      CSharp:
      - id: Global.UITooltip.localHeight*
        name: localHeight
      VB:
      - id: Global.UITooltip.localHeight*
        name: localHeight
    nameWithType:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.localHeight*
        name: localHeight
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.localHeight*
        name: localHeight
    qualifiedName:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.localHeight*
        name: localHeight
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.localHeight*
        name: localHeight
    isDefinition: true
    commentId: Overload:Global.UITooltip.localHeight
  Global.UITooltip.Awake*:
    name:
      CSharp:
      - id: Global.UITooltip.Awake*
        name: Awake
      VB:
      - id: Global.UITooltip.Awake*
        name: Awake
    nameWithType:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.Awake*
        name: Awake
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.Awake*
        name: Awake
    qualifiedName:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.Awake*
        name: Awake
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.Awake*
        name: Awake
    isDefinition: true
    commentId: Overload:Global.UITooltip.Awake
  Global.UITooltip.SetText*:
    name:
      CSharp:
      - id: Global.UITooltip.SetText*
        name: SetText
      VB:
      - id: Global.UITooltip.SetText*
        name: SetText
    nameWithType:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.SetText*
        name: SetText
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.SetText*
        name: SetText
    qualifiedName:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.SetText*
        name: SetText
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.SetText*
        name: SetText
    isDefinition: true
    commentId: Overload:Global.UITooltip.SetText
  Global.UITooltip.GoesOffScreen*:
    name:
      CSharp:
      - id: Global.UITooltip.GoesOffScreen*
        name: GoesOffScreen
      VB:
      - id: Global.UITooltip.GoesOffScreen*
        name: GoesOffScreen
    nameWithType:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffScreen*
        name: GoesOffScreen
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffScreen*
        name: GoesOffScreen
    qualifiedName:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffScreen*
        name: GoesOffScreen
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffScreen*
        name: GoesOffScreen
    isDefinition: true
    commentId: Overload:Global.UITooltip.GoesOffScreen
  Global.UITooltip.GoesOffLeftOfScreen*:
    name:
      CSharp:
      - id: Global.UITooltip.GoesOffLeftOfScreen*
        name: GoesOffLeftOfScreen
      VB:
      - id: Global.UITooltip.GoesOffLeftOfScreen*
        name: GoesOffLeftOfScreen
    nameWithType:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffLeftOfScreen*
        name: GoesOffLeftOfScreen
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffLeftOfScreen*
        name: GoesOffLeftOfScreen
    qualifiedName:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffLeftOfScreen*
        name: GoesOffLeftOfScreen
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffLeftOfScreen*
        name: GoesOffLeftOfScreen
    isDefinition: true
    commentId: Overload:Global.UITooltip.GoesOffLeftOfScreen
  Global.UITooltip.GoesOffRightOfScreen*:
    name:
      CSharp:
      - id: Global.UITooltip.GoesOffRightOfScreen*
        name: GoesOffRightOfScreen
      VB:
      - id: Global.UITooltip.GoesOffRightOfScreen*
        name: GoesOffRightOfScreen
    nameWithType:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffRightOfScreen*
        name: GoesOffRightOfScreen
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffRightOfScreen*
        name: GoesOffRightOfScreen
    qualifiedName:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffRightOfScreen*
        name: GoesOffRightOfScreen
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffRightOfScreen*
        name: GoesOffRightOfScreen
    isDefinition: true
    commentId: Overload:Global.UITooltip.GoesOffRightOfScreen
  Global.UITooltip.GoesOffBottomOfScreen*:
    name:
      CSharp:
      - id: Global.UITooltip.GoesOffBottomOfScreen*
        name: GoesOffBottomOfScreen
      VB:
      - id: Global.UITooltip.GoesOffBottomOfScreen*
        name: GoesOffBottomOfScreen
    nameWithType:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffBottomOfScreen*
        name: GoesOffBottomOfScreen
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffBottomOfScreen*
        name: GoesOffBottomOfScreen
    qualifiedName:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffBottomOfScreen*
        name: GoesOffBottomOfScreen
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffBottomOfScreen*
        name: GoesOffBottomOfScreen
    isDefinition: true
    commentId: Overload:Global.UITooltip.GoesOffBottomOfScreen
  Global.UITooltip.GoesOffTopOfScreen*:
    name:
      CSharp:
      - id: Global.UITooltip.GoesOffTopOfScreen*
        name: GoesOffTopOfScreen
      VB:
      - id: Global.UITooltip.GoesOffTopOfScreen*
        name: GoesOffTopOfScreen
    nameWithType:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffTopOfScreen*
        name: GoesOffTopOfScreen
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffTopOfScreen*
        name: GoesOffTopOfScreen
    qualifiedName:
      CSharp:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffTopOfScreen*
        name: GoesOffTopOfScreen
      VB:
      - id: Global.UITooltip*
        name: UITooltip
      - name: .
      - id: Global.UITooltip.GoesOffTopOfScreen*
        name: GoesOffTopOfScreen
    isDefinition: true
    commentId: Overload:Global.UITooltip.GoesOffTopOfScreen
  Global.UITooltip:
    name:
      CSharp:
      - id: Global.UITooltip
        name: UITooltip
      VB:
      - id: Global.UITooltip
        name: UITooltip
    nameWithType:
      CSharp:
      - id: Global.UITooltip
        name: UITooltip
      VB:
      - id: Global.UITooltip
        name: UITooltip
    qualifiedName:
      CSharp:
      - id: Global.UITooltip
        name: UITooltip
      VB:
      - id: Global.UITooltip
        name: UITooltip
    isDefinition: true
    commentId: T:Global.UITooltip
  Global.ViewportSide:
    name:
      CSharp:
      - id: Global.ViewportSide
        name: ViewportSide
      VB:
      - id: Global.ViewportSide
        name: ViewportSide
    nameWithType:
      CSharp:
      - id: Global.ViewportSide
        name: ViewportSide
      VB:
      - id: Global.ViewportSide
        name: ViewportSide
    qualifiedName:
      CSharp:
      - id: Global.ViewportSide
        name: ViewportSide
      VB:
      - id: Global.ViewportSide
        name: ViewportSide
    isDefinition: true
    commentId: T:Global.ViewportSide
  Global.UIViewport.scrollAmount*:
    name:
      CSharp:
      - id: Global.UIViewport.scrollAmount*
        name: scrollAmount
      VB:
      - id: Global.UIViewport.scrollAmount*
        name: scrollAmount
    nameWithType:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.scrollAmount*
        name: scrollAmount
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.scrollAmount*
        name: scrollAmount
    qualifiedName:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.scrollAmount*
        name: scrollAmount
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.scrollAmount*
        name: scrollAmount
    isDefinition: true
    commentId: Overload:Global.UIViewport.scrollAmount
  Global.UIViewport.defaultScrollSide*:
    name:
      CSharp:
      - id: Global.UIViewport.defaultScrollSide*
        name: defaultScrollSide
      VB:
      - id: Global.UIViewport.defaultScrollSide*
        name: defaultScrollSide
    nameWithType:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.defaultScrollSide*
        name: defaultScrollSide
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.defaultScrollSide*
        name: defaultScrollSide
    qualifiedName:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.defaultScrollSide*
        name: defaultScrollSide
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.defaultScrollSide*
        name: defaultScrollSide
    isDefinition: true
    commentId: Overload:Global.UIViewport.defaultScrollSide
  Global.Transform:
    name:
      CSharp:
      - id: Global.Transform
        name: Transform
        isExternal: true
      VB:
      - id: Global.Transform
        name: Transform
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Transform
        name: Transform
        isExternal: true
      VB:
      - id: Global.Transform
        name: Transform
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Transform
        name: Transform
        isExternal: true
      VB:
      - id: Global.Transform
        name: Transform
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Transform'
  Global.UIViewport.scrollingArea*:
    name:
      CSharp:
      - id: Global.UIViewport.scrollingArea*
        name: scrollingArea
      VB:
      - id: Global.UIViewport.scrollingArea*
        name: scrollingArea
    nameWithType:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.scrollingArea*
        name: scrollingArea
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.scrollingArea*
        name: scrollingArea
    qualifiedName:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.scrollingArea*
        name: scrollingArea
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.scrollingArea*
        name: scrollingArea
    isDefinition: true
    commentId: Overload:Global.UIViewport.scrollingArea
  Global.RectTransform:
    name:
      CSharp:
      - id: Global.RectTransform
        name: RectTransform
        isExternal: true
      VB:
      - id: Global.RectTransform
        name: RectTransform
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.RectTransform
        name: RectTransform
        isExternal: true
      VB:
      - id: Global.RectTransform
        name: RectTransform
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.RectTransform
        name: RectTransform
        isExternal: true
      VB:
      - id: Global.RectTransform
        name: RectTransform
        isExternal: true
    isDefinition: true
    commentId: '!:Global.RectTransform'
  Global.UIViewport.rectTransform*:
    name:
      CSharp:
      - id: Global.UIViewport.rectTransform*
        name: rectTransform
      VB:
      - id: Global.UIViewport.rectTransform*
        name: rectTransform
    nameWithType:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.rectTransform*
        name: rectTransform
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.rectTransform*
        name: rectTransform
    qualifiedName:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.rectTransform*
        name: rectTransform
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.rectTransform*
        name: rectTransform
    isDefinition: true
    commentId: Overload:Global.UIViewport.rectTransform
  Global.BoxCollider2D:
    name:
      CSharp:
      - id: Global.BoxCollider2D
        name: BoxCollider2D
        isExternal: true
      VB:
      - id: Global.BoxCollider2D
        name: BoxCollider2D
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.BoxCollider2D
        name: BoxCollider2D
        isExternal: true
      VB:
      - id: Global.BoxCollider2D
        name: BoxCollider2D
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.BoxCollider2D
        name: BoxCollider2D
        isExternal: true
      VB:
      - id: Global.BoxCollider2D
        name: BoxCollider2D
        isExternal: true
    isDefinition: true
    commentId: '!:Global.BoxCollider2D'
  Global.UIViewport.collider*:
    name:
      CSharp:
      - id: Global.UIViewport.collider*
        name: collider
      VB:
      - id: Global.UIViewport.collider*
        name: collider
    nameWithType:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.collider*
        name: collider
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.collider*
        name: collider
    qualifiedName:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.collider*
        name: collider
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.collider*
        name: collider
    isDefinition: true
    commentId: Overload:Global.UIViewport.collider
  Global.UIViewport.RefreshViewport*:
    name:
      CSharp:
      - id: Global.UIViewport.RefreshViewport*
        name: RefreshViewport
      VB:
      - id: Global.UIViewport.RefreshViewport*
        name: RefreshViewport
    nameWithType:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.RefreshViewport*
        name: RefreshViewport
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.RefreshViewport*
        name: RefreshViewport
    qualifiedName:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.RefreshViewport*
        name: RefreshViewport
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.RefreshViewport*
        name: RefreshViewport
    isDefinition: true
    commentId: Overload:Global.UIViewport.RefreshViewport
  Global.UIViewport.AddScrollAmount*:
    name:
      CSharp:
      - id: Global.UIViewport.AddScrollAmount*
        name: AddScrollAmount
      VB:
      - id: Global.UIViewport.AddScrollAmount*
        name: AddScrollAmount
    nameWithType:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.AddScrollAmount*
        name: AddScrollAmount
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.AddScrollAmount*
        name: AddScrollAmount
    qualifiedName:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.AddScrollAmount*
        name: AddScrollAmount
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.AddScrollAmount*
        name: AddScrollAmount
    isDefinition: true
    commentId: Overload:Global.UIViewport.AddScrollAmount
  Global.UIViewport.SetScrollAmount*:
    name:
      CSharp:
      - id: Global.UIViewport.SetScrollAmount*
        name: SetScrollAmount
      VB:
      - id: Global.UIViewport.SetScrollAmount*
        name: SetScrollAmount
    nameWithType:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.SetScrollAmount*
        name: SetScrollAmount
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.SetScrollAmount*
        name: SetScrollAmount
    qualifiedName:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.SetScrollAmount*
        name: SetScrollAmount
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.SetScrollAmount*
        name: SetScrollAmount
    isDefinition: true
    commentId: Overload:Global.UIViewport.SetScrollAmount
  Global.UIViewport.GetScrollMinMaxY*:
    name:
      CSharp:
      - id: Global.UIViewport.GetScrollMinMaxY*
        name: GetScrollMinMaxY
      VB:
      - id: Global.UIViewport.GetScrollMinMaxY*
        name: GetScrollMinMaxY
    nameWithType:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.GetScrollMinMaxY*
        name: GetScrollMinMaxY
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.GetScrollMinMaxY*
        name: GetScrollMinMaxY
    qualifiedName:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.GetScrollMinMaxY*
        name: GetScrollMinMaxY
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.GetScrollMinMaxY*
        name: GetScrollMinMaxY
    isDefinition: true
    commentId: Overload:Global.UIViewport.GetScrollMinMaxY
  Global.UIViewport.GetScrollMinMaxX*:
    name:
      CSharp:
      - id: Global.UIViewport.GetScrollMinMaxX*
        name: GetScrollMinMaxX
      VB:
      - id: Global.UIViewport.GetScrollMinMaxX*
        name: GetScrollMinMaxX
    nameWithType:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.GetScrollMinMaxX*
        name: GetScrollMinMaxX
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.GetScrollMinMaxX*
        name: GetScrollMinMaxX
    qualifiedName:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.GetScrollMinMaxX*
        name: GetScrollMinMaxX
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.GetScrollMinMaxX*
        name: GetScrollMinMaxX
    isDefinition: true
    commentId: Overload:Global.UIViewport.GetScrollMinMaxX
  Global.UIViewport.SubscribeToRefresh*:
    name:
      CSharp:
      - id: Global.UIViewport.SubscribeToRefresh*
        name: SubscribeToRefresh
      VB:
      - id: Global.UIViewport.SubscribeToRefresh*
        name: SubscribeToRefresh
    nameWithType:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.SubscribeToRefresh*
        name: SubscribeToRefresh
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.SubscribeToRefresh*
        name: SubscribeToRefresh
    qualifiedName:
      CSharp:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.SubscribeToRefresh*
        name: SubscribeToRefresh
      VB:
      - id: Global.UIViewport*
        name: UIViewport
      - name: .
      - id: Global.UIViewport.SubscribeToRefresh*
        name: SubscribeToRefresh
    isDefinition: true
    commentId: Overload:Global.UIViewport.SubscribeToRefresh
  Global.UndoRedoState:
    name:
      CSharp:
      - id: Global.UndoRedoState
        name: UndoRedoState
      VB:
      - id: Global.UndoRedoState
        name: UndoRedoState
    nameWithType:
      CSharp:
      - id: Global.UndoRedoState
        name: UndoRedoState
      VB:
      - id: Global.UndoRedoState
        name: UndoRedoState
    qualifiedName:
      CSharp:
      - id: Global.UndoRedoState
        name: UndoRedoState
      VB:
      - id: Global.UndoRedoState
        name: UndoRedoState
    isDefinition: true
    commentId: T:Global.UndoRedoState
  Global.UndoRedoManager.AddUndoState*:
    name:
      CSharp:
      - id: Global.UndoRedoManager.AddUndoState*
        name: AddUndoState
      VB:
      - id: Global.UndoRedoManager.AddUndoState*
        name: AddUndoState
    nameWithType:
      CSharp:
      - id: Global.UndoRedoManager*
        name: UndoRedoManager
      - name: .
      - id: Global.UndoRedoManager.AddUndoState*
        name: AddUndoState
      VB:
      - id: Global.UndoRedoManager*
        name: UndoRedoManager
      - name: .
      - id: Global.UndoRedoManager.AddUndoState*
        name: AddUndoState
    qualifiedName:
      CSharp:
      - id: Global.UndoRedoManager*
        name: UndoRedoManager
      - name: .
      - id: Global.UndoRedoManager.AddUndoState*
        name: AddUndoState
      VB:
      - id: Global.UndoRedoManager*
        name: UndoRedoManager
      - name: .
      - id: Global.UndoRedoManager.AddUndoState*
        name: AddUndoState
    isDefinition: true
    commentId: Overload:Global.UndoRedoManager.AddUndoState
  Global.UndoRedoManager.SubscribeToUndo*:
    name:
      CSharp:
      - id: Global.UndoRedoManager.SubscribeToUndo*
        name: SubscribeToUndo
      VB:
      - id: Global.UndoRedoManager.SubscribeToUndo*
        name: SubscribeToUndo
    nameWithType:
      CSharp:
      - id: Global.UndoRedoManager*
        name: UndoRedoManager
      - name: .
      - id: Global.UndoRedoManager.SubscribeToUndo*
        name: SubscribeToUndo
      VB:
      - id: Global.UndoRedoManager*
        name: UndoRedoManager
      - name: .
      - id: Global.UndoRedoManager.SubscribeToUndo*
        name: SubscribeToUndo
    qualifiedName:
      CSharp:
      - id: Global.UndoRedoManager*
        name: UndoRedoManager
      - name: .
      - id: Global.UndoRedoManager.SubscribeToUndo*
        name: SubscribeToUndo
      VB:
      - id: Global.UndoRedoManager*
        name: UndoRedoManager
      - name: .
      - id: Global.UndoRedoManager.SubscribeToUndo*
        name: SubscribeToUndo
    isDefinition: true
    commentId: Overload:Global.UndoRedoManager.SubscribeToUndo
  Global.UndoRedoManager.SubscribeToRedo*:
    name:
      CSharp:
      - id: Global.UndoRedoManager.SubscribeToRedo*
        name: SubscribeToRedo
      VB:
      - id: Global.UndoRedoManager.SubscribeToRedo*
        name: SubscribeToRedo
    nameWithType:
      CSharp:
      - id: Global.UndoRedoManager*
        name: UndoRedoManager
      - name: .
      - id: Global.UndoRedoManager.SubscribeToRedo*
        name: SubscribeToRedo
      VB:
      - id: Global.UndoRedoManager*
        name: UndoRedoManager
      - name: .
      - id: Global.UndoRedoManager.SubscribeToRedo*
        name: SubscribeToRedo
    qualifiedName:
      CSharp:
      - id: Global.UndoRedoManager*
        name: UndoRedoManager
      - name: .
      - id: Global.UndoRedoManager.SubscribeToRedo*
        name: SubscribeToRedo
      VB:
      - id: Global.UndoRedoManager*
        name: UndoRedoManager
      - name: .
      - id: Global.UndoRedoManager.SubscribeToRedo*
        name: SubscribeToRedo
    isDefinition: true
    commentId: Overload:Global.UndoRedoManager.SubscribeToRedo
  Global.UndoRedoManager.SubscribeToUndoOrRedo*:
    name:
      CSharp:
      - id: Global.UndoRedoManager.SubscribeToUndoOrRedo*
        name: SubscribeToUndoOrRedo
      VB:
      - id: Global.UndoRedoManager.SubscribeToUndoOrRedo*
        name: SubscribeToUndoOrRedo
    nameWithType:
      CSharp:
      - id: Global.UndoRedoManager*
        name: UndoRedoManager
      - name: .
      - id: Global.UndoRedoManager.SubscribeToUndoOrRedo*
        name: SubscribeToUndoOrRedo
      VB:
      - id: Global.UndoRedoManager*
        name: UndoRedoManager
      - name: .
      - id: Global.UndoRedoManager.SubscribeToUndoOrRedo*
        name: SubscribeToUndoOrRedo
    qualifiedName:
      CSharp:
      - id: Global.UndoRedoManager*
        name: UndoRedoManager
      - name: .
      - id: Global.UndoRedoManager.SubscribeToUndoOrRedo*
        name: SubscribeToUndoOrRedo
      VB:
      - id: Global.UndoRedoManager*
        name: UndoRedoManager
      - name: .
      - id: Global.UndoRedoManager.SubscribeToUndoOrRedo*
        name: SubscribeToUndoOrRedo
    isDefinition: true
    commentId: Overload:Global.UndoRedoManager.SubscribeToUndoOrRedo
  Global.UndoRedoAction:
    name:
      CSharp:
      - id: Global.UndoRedoAction
        name: UndoRedoAction
      VB:
      - id: Global.UndoRedoAction
        name: UndoRedoAction
    nameWithType:
      CSharp:
      - id: Global.UndoRedoAction
        name: UndoRedoAction
      VB:
      - id: Global.UndoRedoAction
        name: UndoRedoAction
    qualifiedName:
      CSharp:
      - id: Global.UndoRedoAction
        name: UndoRedoAction
      VB:
      - id: Global.UndoRedoAction
        name: UndoRedoAction
    isDefinition: true
    commentId: T:Global.UndoRedoAction
  Global.UndoRedoState.action*:
    name:
      CSharp:
      - id: Global.UndoRedoState.action*
        name: action
      VB:
      - id: Global.UndoRedoState.action*
        name: action
    nameWithType:
      CSharp:
      - id: Global.UndoRedoState*
        name: UndoRedoState
      - name: .
      - id: Global.UndoRedoState.action*
        name: action
      VB:
      - id: Global.UndoRedoState*
        name: UndoRedoState
      - name: .
      - id: Global.UndoRedoState.action*
        name: action
    qualifiedName:
      CSharp:
      - id: Global.UndoRedoState*
        name: UndoRedoState
      - name: .
      - id: Global.UndoRedoState.action*
        name: action
      VB:
      - id: Global.UndoRedoState*
        name: UndoRedoState
      - name: .
      - id: Global.UndoRedoState.action*
        name: action
    isDefinition: true
    commentId: Overload:Global.UndoRedoState.action
  Global.UndoRedoState.affectedLayers*:
    name:
      CSharp:
      - id: Global.UndoRedoState.affectedLayers*
        name: affectedLayers
      VB:
      - id: Global.UndoRedoState.affectedLayers*
        name: affectedLayers
    nameWithType:
      CSharp:
      - id: Global.UndoRedoState*
        name: UndoRedoState
      - name: .
      - id: Global.UndoRedoState.affectedLayers*
        name: affectedLayers
      VB:
      - id: Global.UndoRedoState*
        name: UndoRedoState
      - name: .
      - id: Global.UndoRedoState.affectedLayers*
        name: affectedLayers
    qualifiedName:
      CSharp:
      - id: Global.UndoRedoState*
        name: UndoRedoState
      - name: .
      - id: Global.UndoRedoState.affectedLayers*
        name: affectedLayers
      VB:
      - id: Global.UndoRedoState*
        name: UndoRedoState
      - name: .
      - id: Global.UndoRedoState.affectedLayers*
        name: affectedLayers
    isDefinition: true
    commentId: Overload:Global.UndoRedoState.affectedLayers
  Global.UndoRedoState.affectedLayersIndices*:
    name:
      CSharp:
      - id: Global.UndoRedoState.affectedLayersIndices*
        name: affectedLayersIndices
      VB:
      - id: Global.UndoRedoState.affectedLayersIndices*
        name: affectedLayersIndices
    nameWithType:
      CSharp:
      - id: Global.UndoRedoState*
        name: UndoRedoState
      - name: .
      - id: Global.UndoRedoState.affectedLayersIndices*
        name: affectedLayersIndices
      VB:
      - id: Global.UndoRedoState*
        name: UndoRedoState
      - name: .
      - id: Global.UndoRedoState.affectedLayersIndices*
        name: affectedLayersIndices
    qualifiedName:
      CSharp:
      - id: Global.UndoRedoState*
        name: UndoRedoState
      - name: .
      - id: Global.UndoRedoState.affectedLayersIndices*
        name: affectedLayersIndices
      VB:
      - id: Global.UndoRedoState*
        name: UndoRedoState
      - name: .
      - id: Global.UndoRedoState.affectedLayersIndices*
        name: affectedLayersIndices
    isDefinition: true
    commentId: Overload:Global.UndoRedoState.affectedLayersIndices
  Global.UndoRedoState.#ctor*:
    name:
      CSharp:
      - id: Global.UndoRedoState.#ctor*
        name: UndoRedoState
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.UndoRedoState*
        name: UndoRedoState
      - name: .
      - id: Global.UndoRedoState.#ctor*
        name: UndoRedoState
      VB:
      - id: Global.UndoRedoState*
        name: UndoRedoState
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.UndoRedoState*
        name: UndoRedoState
      - name: .
      - id: Global.UndoRedoState.#ctor*
        name: UndoRedoState
      VB:
      - id: Global.UndoRedoState*
        name: UndoRedoState
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.UndoRedoState.#ctor
  Global:
    name:
      CSharp: []
      VB: []
    nameWithType:
      CSharp: []
      VB: []
    qualifiedName:
      CSharp: []
      VB: []
    isDefinition: true
